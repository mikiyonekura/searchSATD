too long.
String name = test.toString();
throw new SAXParseException("Unexpected attribute \"" + attrs.getQName(i) + "\"", context.locator);
private String getFileString(String filename) throws IOException {
String antFileProp = "ant.file." + context.getCurrentProjectName();
propertyValue =
if (ANT_TYPE.equals(name)
Class procVersion = Class.forName(procVersionClassName);
private static boolean[] gNeedEscaping = new boolean[128];
parent.appendChild(copy);
ze.setCrc (EMPTY_CRC);
protected String str_encoding = "JPEG";
private long granularity = FILE_UTILS.getFileTimestampGranularity();
Class elementClass = o.getClass();
res.setSystemId(JAXPUtils.getSystemId(outfile));
too long.
if( name.startsWith( "toString:" )) {
return defineClass(classname, classData, 0, classData.length,
String []args = cmd.getJavaCommand().getArguments();
jspFile = new File(files[i]);
if (!readingFiles) {
too long.
result.append('\\');
/** EXPERIMENTAL WILL_CHANGE
// delegate to next, it's for backward compat only.
addTaskDefinition(ANT_PROPERTY_TASK,
// We can't do it ourselves as jCVS is GPLed, a third party task
throw new BuildException("IO error scanning directory "
too long.
if ("execon".equals(getTaskName())) {
return false;
too long.
String[] sP = getSourcespath().list();
args[j++] = "-d";
public void setGranularity(long granularity) {
parseStandardOutput(reader);
// TODO:
src.setSystemId(resourceToURI(resource));
if (javadoc4 && sourceFileName.indexOf(" ") > -1) {
return null;
private boolean spawn = false;
if (!Character.isLetterOrDigit(c)
return;
throw e;
* Jikes has the nice feature to print error
if (obj != null && !(obj instanceof AntClassLoader)) {
throw new BuildException("RuleBasedCollator not yet supported.");
path = path.replace('\\', '/');
StringBuffer modifiedClassName = new StringBuffer(className.length());
too long.
// Change the item to be checked out to a StarTeam File.
return
for (Enumeration e = setRefs.elements(); e.hasMoreElements();) {
FileSet msZipFiles = new FileSet();
result.addExisting(p, true);
None
result.addExisting(p, true);
Throwable cause = null;
Object[] tokens = StringUtils.split(normalizedPath, '/').toArray();
fmap[j] = v;
int[] rNums = {
private static class AntRefTable extends Hashtable {
s = Commandline.translateCommandline("\"\" a");
fail("process interrupted in thread");
public String resolveFile(String file) {
public void assertEqualContent(File expect, File result)
if (propertyFile != null) {
}
}
// ------------------------------------------------------
throw new IllegalStateException("Could not convert URI to path: "
fs.setPrefix("META-INF/");
/**
too long.
String[] cP = getClassespath().list();
File file = getProject().resolveFile(new File(dir, filename).getPath());
Folder f = v.getRootFolder();
args[j++] =  "-compilerclass";
String filename = (String) filesToDo.elementAt(i);
super.zipFile(service.getAsStream(), zOut,
if (jarfile.exists()) {
project.registerThreadTask(thread, currentThreadTask);
}
String[] sP = getSourcespath().list();
this.getOwningTarget().replaceChild(this, (Task)realThing);
if (appendReader != null) {
if (error != null) {
sel.setClassLoader(this.getClass().getClassLoader());
final Constructor[] cons = theClass.getDeclaredConstructors();
return singleton;
boolean useParentFirst = parentFirst;
String msg = "Exception while calling " + VERIFY + " Details: "
* Performs a ClearCase Unlock command.
too long.
} else {
None
too long.
too long.
}
if (parent == null) {
if (pos > 0) {
} catch (Exception ex) {
public void testFailed() throws Exception {
}
watchdog.start(process);
setUsername(uri.substring(0, indexOfColon));
public void messageLogged(BuildEvent event) {
boolean trackProgress = getVerbose() && filesize > 102400;
if (text.length() == 0) {
long filesize = localFile.length();
if (getReserved()) {
sendMTFValues3(nGroups, alphaSize);
cmd.createArgument().setValue(FLAG_RESERVED);
/* offset of start of central      */
Path p = getBootClassPath();
source.setInputSource(new InputSource(uri));
cmd.createArgument().setValue(FLAG_UNRESERVED);
ctor = newclass.getConstructor(new Class[0]);
getOutCommand(cmd);
if (b == -1) {
String msg = project.getElementName(element)
}
cmd.createArgument().setValue(FLAG_NODATA);
ByteArrayOutputStream stream = new ByteArrayOutputStream();
cmd.createArgument().setValue(FLAG_VERSION);
|| OS_NAME.indexOf("ce") >= 0);
cmd.createArgument().setValue(FLAG_NOWARN);
} else if (this.isUsingRevisionLabel()) {
} else if (java.lang.Class.class.equals(reflectedArg)) {
/* the central dir on this disk    */ + 2
++eolcount;
catalogResolver = new ExternalResolver(clazz, obj);
String filename = line.substring(0, index);
String msg = "Ant's Main method is being handed "
return false;
} else if (java.lang.Character.class.equals(reflectedArg)) {
}
if (classname == null) {
for (Iterator dirs = byDir.keySet().iterator(); dirs.hasNext();) {
while (searchParents && parent != null && parent.exists()) {
writeOut(ZipShort.getBytes(20));
private final static class TestRunner extends JUnitTestRunner {
/** The base directory to be scanned. */
c = reflectedArg.getConstructor(new Class[] {Project.class, String.class});
if (matchingEntry.getBase() != null) {
if (l != null) {
/* total number of entries in      */
private static final int GET_FILE = 1;
String comm = ze.getComment();
status = GET_FILE;
boolean sameDate;
c.setValue("crlf");
//   Helper methods
} else if (EnumeratedAttribute.class.isAssignableFrom(reflectedArg)) {
FileSelector[] s = syncTarget.getSelectors(getProject());
validate();
ze.setTime(dir.lastModified() + (roundUp ? 1999 : 0));
cmdl.createArgument().setValue(getViewPath());
private boolean hasScript(String test) {
Commandline commandLine = new Commandline();
if (!filesets.isEmpty()) {
private static final String PASS_TEST = "testNoCrash";
if (this.name.length() + this.address.length() > len) {
// if this class belongs to a package which has been
String enc = encoding == null ? "default" : encoding;
private final static class ResultFormatter implements JUnitResultFormatter {
loader.findClass("fubar");
} else if (java.io.File.class.equals(reflectedArg)) {
fileset.setFile(file);
getTypeValueCommand(cmd);
writeOut(ZipShort.getBytes(8));
assertMapped(mangler, "0.jsp", "_0_jsp");
private ZipScanner zs;
public void setLoaderRef(Reference r) {
String filename = line.substring(0, index);
String driveSpec = "C:";
srcDir = file.getParentFile();
assertEqualsIgnoreDriveCase(driveSpec + "\\",
getCommentFileCommand(cmd);
boolean isConfigured = false;
private class AddNestedCreator extends NestedCreator {
log("destFile exists", Project.MSG_DEBUG);
if (!autoFound && ((user != null) || (password != null))
public void test10() {
if (from == null || from.getAddress() == null) {
public void testSearchInPathNotThere() {
if (charset != null) {
return 2;
reachedEof = true;
if (argList.size() == args.length) {
String oldValue = (String) props.get(key);
thread.join(TIME_OUT/2);
if (value.charAt(pos + 1) == '$') {
return null;
f.setSrc(new File("example.zip"));
try {
MSVSSHISTORY vssHistory = new MSVSSHISTORY();
cmd.createArgument().setValue(FLAG_PRESERVETIME);
EjbInfo[] ejbs = getEjbs(); // Returns list of EJBs for processing
assertTrue("No index.html present. Not generated?", reportFile.exists() );
public EmailAddress(String email) {
too long.
if (eolcount == 0) {
fail("extra args");
cmd.createArgument().setValue(FLAG_KEEPCOPY);
}
cmd.createArgument().setValue(FLAG_IDENTICAL);
URL reportUrl = new URL( FileUtils.getFileUtils().toURI(reportFile.getAbsolutePath()) );
eofStr.append(line.toString().substring(i + 1));
if (getTypeName() == null) {
}
/**
// the format is:
/**
String results = selectionString(s);
cmd.createArgument().setValue(FLAG_REPLACE);
cal.set(2002, 2, 27);
AddNestedCreator(Method m, Constructor c, int behavior) {
None
private static final long EMPTY_CRC = new CRC32 ().getValue ();
cmd.createArgument().setValue(FLAG_RECURSE);
File renamedFile = null;
if (testMailClient.isFailed()) {
watchdog.stop();
AttributeSetter(Method m) {
for (int i = 0; i < groupfilesets.size(); i++) {
ArchiveState state = getResourcesToAdd(fss, zipFile, false);
if (targetDescription == null) {
if (!state.isOutOfDate()) {
String charset = parseCharSetFromMimeType(message.getMimeType());
