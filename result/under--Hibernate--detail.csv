search_string,predict_under_code,line_no,similarity,filepath
"// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable","return ExecuteUpdateResultCheckStyle.COUNT;",819,0.6588235294117647,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//perhaps not really necessary...","String sequentialSelect = generateSequentialSelect(loadable);",1023,0.6896551724137931,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// todo : what else to do here?","return null;",142,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/bytecode/internal/javassist/ProxyFactoryFactoryImpl.java
"//TODO: disable batch loading if lockMode > READ?","return BatchingEntityLoaderBuilder.getBuilder( getFactory() )",2482,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//TODO: to handle concurrent writes correctly, the client should pass in a Lock","None",None,None,None
"// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*","for ( Object o : props.keySet() ) {",158,0.6782608695652174,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-c3p0/src/main/java/org/hibernate/service/jdbc/connections/internal/C3P0ConnectionProvider.java
"//note there is a wierd implementation in the client side","None",None,None,None
"// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.","public Serializable[] getDisassembledState();",59,0.6363636363636364,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cache/spi/entry/CacheEntry.java
"// Do we need to drop constraints before dropping tables in this dialect?","return true;",447,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
""/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */"","*           Environmental properties; currently unused.",197,0.17142857142857143,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-infinispan/src/main/java/org/hibernate/cache/infinispan/InfinispanRegionFactory.java
"// Does this dialect support check constraints?","return false;",432,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start","None",None,None,None
"// Does this dialect support the UNIQUE column syntax?","None",None,None,None
"// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:","if ( value instanceof ToOne ) {",2313,0.8217054263565892,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// Does this dialect support the FOR UPDATE syntax?","return false;",543,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// todo : what is the implication of this?","id.setDynamic( !entity.hasPojoRepresentation() );",477,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// todo : YUCK!!!","optimizer = Environment.getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );",109,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/tuple/entity/PojoEntityTuplizer.java
"// todo : again, how *should* this work for non-pojo entities?","if ( component.getOwner().hasPojoRepresentation() ) {",1922,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?","return false;",548,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//TODO: really bad, evil hack to fix!!!","mappings.addSecondPass( new ManyToOneSecondPass(manyToOne) );",1647,0.6055045871559633,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?","aliasRefNode.resolve( false, false ); //TODO: is it kosher to do it here?",899,0.8613861386138614,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/HqlSqlWalker.java
"//TODO: better to degrade to lazy="false" if uninstrumented","}",1595,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?","return false;",553,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//Icky workaround for MySQL bug:","!( dialect instanceof MySQLDialect ) ||",1190,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/Configuration.java
"// we have to set up the table later!! yuck","}",1462,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//TODO: Somehow add the newly created foreign keys to the internal collection","LOG.debug( "Creating tables' unique integer identifiers" );",1626,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/Configuration.java
"// This inner class implements a case statement....perhaps im being a bit over-clever here","abstract static class CollectionType {",2880,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//TODO: merge into one method!","cascadeBeforeSave(source, persister, entity, createCache);",189,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultPersistEventListener.java
"// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()","boolean indexIsFormula = false;",2482,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// TODO: what type?","None",None,None,None
"//TODO: inefficient","CacheEntry ce = persister.buildCacheEntry( instance,state, nextVersion, getSession() );",187,0.43902439024390244,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/action/internal/EntityUpdateAction.java
"//FIXME: get the PersistentClass","java.util.Map propertyResults = bindPropertyResults(alias, returnElem, null, mappings );",140,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/ResultSetMappingBinder.java
"// todo : we can remove this once the deprecated ctor can be made private...","None",None,None,None
"//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here","// IMPL NOTE : currentDepth might be less-than zero if this is the",715,0.7123287671232876,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/JoinWalker.java
"//TODO: redesign how PropertyAccessors are acquired...","Property property = (Property) itr.next();",198,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/tuple/entity/AbstractEntityTuplizer.java
"// TODO : not so sure this is needed...","throw new QueryException( "duplicate association path: " + wholeAssociationPath );",177,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"//create an index on the key columns??","}",64,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/IdentifierCollection.java
""/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a			 * slightly higer level in the stack (to get all the information we need)			 * Right now HbmBinder does not support the			 */"","* Right now HbmMetadataSourceProcessorImpl does not support the",1147,0.5803921568627451,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//TODO: improve this hack!","None",None,None,None
"//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).","too long.",0,0,0
"//use of trim() here is ugly?","None",None,None,None
"//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()","too long.",0,0,0
"// can happen because of the multiple ways Cache.remove() // can be invoked :(","None",None,None,None
"//ick!","}",534,0.41379310344827586,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/util/StringHelper.java
"// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load","return nullSafeGet(rs, names, session, owner);",104,0.7368421052631579,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/AbstractType.java
"//TODO: should this be Session.instantiate(Persister, ...)?","copyCache.put( original, copy );",317,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/EntityType.java
"//TODO: suck this into initLaziness!","if ( "extra".equals( node.attributeValue("lazy") ) ) {",1451,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).","too long.",0,0,0
"//TODO: is this right??","}",209,0.5,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/AnyType.java
"//ie. the subquery! yuck!","}",366,0.676923076923077,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"//use of a stringbuffer to workaround a JDK bug","return new StringBuffer( ownerEntityTable ).append( "_" )",59,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/test/java/org/hibernate/test/annotations/AlternativeNamingStrategy.java
"//TODO: copy/paste from recreate()","offset = writeKey( st, id, offset, session );",1463,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL","if ( !hasNotNullableColumns ) {",372,0.6163522012578616,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// todo : this eventually needs to be removed","public static PropertyAccessor getPropertyAccessor(Class optionalClass, String type) throws MappingException {",152,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/property/PropertyAccessorFactory.java
"// todo : remove","public Getter getGetter(Class clazz) throws PropertyNotFoundException, MappingException {",319,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/Property.java
"//just to help out during the load (ugly, i know)","private transient Class elementClass;",55,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/collection/internal/PersistentArrayHolder.java
"// hack/workaround as sqlquery impl depend on having a key.","}",106,0.78125,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/ResultSetMappingBinder.java
"//TODO: handle the case of a foreign key to something other than the pk","createForeignKeyOfEntity( ( (EntityType) getType() ).getAssociatedEntityName() );",95,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/OneToOne.java
"//TODO: assumes all collections disassemble to an array!","return (Serializable[]) state;",40,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cache/spi/entry/CollectionCacheEntry.java
"// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...","None",None,None,None
"// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).","too long.",0,0,0
"//TODO: deprecated, remove eventually",") {",88,0.6296296296296297,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/Column.java
"//TODO possibly relax that","throw new DuplicateMappingException(",2840,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/Configuration.java
"// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)","String [] idColNames = owner.getQueryable().getIdentifierColumnNames();",512,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/QueryTranslatorImpl.java
"//use a degenerated strategy for backward compatibility","return StringHelper.unqualify(propertyName);",75,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/DefaultNamingStrategy.java
"//TODO: this is temporary in that the end result will probably not take a Property reference per-se.","if ( null == mode || EntityMode.POJO.equals( mode ) ) {",72,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/property/PropertyAccessorFactory.java
"// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.","int filteredParamCount = queryParameters.getFilteredPositionalParameterTypes() == null",618,0.6137184115523465,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"// get the right object from the list ... would it be easier to just call getEntity() ??","None",None,None,None
"// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)","private String substituteBrackets(String sqlQuery) throws QueryException {",86,0.6595744680851063,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryParser.java
"//TODO: this dependency is kinda Bad","private static final PropertyAccessor BASIC_PROPERTY_ACCESSOR = new BasicPropertyAccessor();",50,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/util/ReflectHelper.java
"//TODO: get SQL rendering out of this package!","}",55,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/criterion/NullExpression.java
"// why does this matter?","if ( oj.getJoinable().isCollection() ) {",934,0.45977011494252873,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/JoinWalker.java
"// important, to account for newly saved entities in query // todo : some kind of check for new status...","LOG.trace( "Owning entity already loaded; ignoring" );",132,0.725925925925926,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/loading/internal/CollectionLoadContext.java
"//TODO: can we *always* use the "null property" approach for everything?","/*if ( isPrimaryKey && !isSpecialOneToOne ) {",1237,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";","None",None,None,None
"//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays","too long.",0,0,0
"// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...","public Getter getGetter(Class clazz) throws PropertyNotFoundException, MappingException {",319,0.3023255813953488,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/Property.java
"// sql-server, at least needed this dropped after use; strange!","}",237,0.907563025210084,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/AbstractTransactSQLDialect.java
"// is it necessary to register %exact since it can only appear in a where clause?","registerFunction( "%exact", new StandardSQLFunction( "%exact", StandardBasicTypes.STRING ) );",297,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays","too long.",0,0,0
"// Does this dialect support the ALTER TABLE syntax?","return true;",395,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy","( (initialVersion instanceof Number) && ( (Number) initialVersion ).longValue()<0 )",106,0.4588744588744589,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/Versioning.java
"//TODO: reenable if we also fix the above todo","/*EntityPersister persister = getEntityPersister();",124,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/action/internal/EntityIdentityInsertAction.java
"// orphans should not be deleted during copy??","None",None,None,None
"// orphans should not be deleted during merge??","return false;",298,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/CascadingAction.java
"//TODO: suck this logic into the collection!","final Collection orphans;",457,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/Cascade.java
"// todo : we can actually just determine this from the incoming EntityEntry-s","rtn.hasNonReadOnlyEntities = ois.readBoolean();",1667,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/StatefulPersistenceContext.java
"//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't","/*if ( persister.hasCache() && !persister.isCacheInvalidationRequired() ) {",94,0.5226130653266332,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/action/internal/EntityIdentityInsertAction.java
"// this class has no proxies (so do a shortcut)","if (!persister.hasProxy()) {",244,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultLoadEventListener.java
"//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)","None",None,None,None
"// todo : need map? the prob is a proper key, right?","public EntityLoadContext(LoadContexts loadContexts, ResultSet resultSet) {",44,0.6165413533834586,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/loading/internal/EntityLoadContext.java
"//TODO: better to pass the id in as an argument?","if (LOG.isDebugEnabled()) {",187,0.5954198473282443,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/Collections.java
"//do we even really need this? the update will fail anyway....","if ( session.getFactory().getStatistics().isStatisticsEnabled() ) {",653,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultFlushEntityEventListener.java
"//TODO: would it be better to do a refresh from db?","}",125,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultReplicateEventListener.java
""/**	 * This form used from annotations (?).  Essentially the same as the above using a	 * resultset-mapping reference, but without cacheMode, readOnly, and comment.	 *	 * FIXME: annotations do not use it, so it can be remove from my POV	 * @deprecated	 *	 *	 * @param query The sql query string	 * @param resultSetRef The result-set-mapping name	 * @param querySpaces Any specified query spaces (used for auto-flushing)	 * @param cacheable Whether the query results are cacheable	 * @param cacheRegion If cacheable, the region into which to store the results	 * @param timeout A JDBC-level timeout to be applied	 * @param fetchSize A JDBC-level fetch-size to be applied	 * @param flushMode The flush mode to use for this query	 * @param parameterTypes parameter type map	 * @param callable Does the query string represent a callable object (i.e., proc)	 */"","too long.",0,0,0
"//TODO: ugly here:","final String queryString = queryParameters.getFilteredSQL();",58,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/SubselectFetch.java
"//TODO: not quite sure about the full implications of this!","addExtraJoins( joinFragment, rootAlias, rootJoinable, true );",171,0.819672131147541,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/JoinSequence.java
"// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!","None",None,None,None
"// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...","loadContexts.unregisterLoadingCollectionXRef( collectionKey );",203,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/loading/internal/CollectionLoadContext.java
"// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.","too long.",0,0,0
"// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!","too long.",0,0,0
"//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...","PostLoadEvent postLoadEvent = new PostLoadEvent( session )",685,0.6172839506172839,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultLoadEventListener.java
"// todo : should we check the current isolation mode explicitly?","Object nextVersion = persister.forceVersionIncrement(",92,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/AbstractLockUpgradeEventListener.java
"// brand new collection //TODO: or an array!! we can't lock objects with arrays now??","throw new HibernateException( "reassociated object has dirty collection reference (or an array)" );",81,0.43956043956043955,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/OnLockVisitor.java
"// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities","too long.",0,0,0
"// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better","removeCollection(persister, collectionKey, session);",82,0.38235294117647056,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/OnUpdateVisitor.java
"// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?","return changed && existsInDatabase( target, source, persister );",347,0.7251461988304093,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultMergeEventListener.java
""/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */"","public final class NameGenerator {",33,0.1610738255033557,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/NameGenerator.java
"// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it","CollectionType type = (CollectionType) getDataType();",76,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/IdentNode.java
"// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence","too long.",0,0,0
"// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!","too long.",0,0,0
"// TODO : better way?!?","( ( DotNode ) dot ).setPropertyPath( ( ( FromReferenceNode ) property ).getPath() );",613,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/HqlSqlWalker.java
"/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL","too long.",0,0,0
"// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(","versionIncrementNode = getASTFactory().create( HqlSqlTokenTypes.PLUS, "+" );",1190,0.8129032258064516,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/HqlSqlWalker.java
"// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.","None",None,None,None
"// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...","too long.",0,0,0
"//TODO:this is only needed during compilation .. can we eliminate the instvar?","private boolean compiled;",90,0.8427672955974843,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/QueryTranslatorImpl.java
"// TODO : absolutely no usages of this constructor form; can it go away?","None",None,None,None
"//TODO: is this a bit ugly?","expr.setText( text );",427,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/SelectClause.java
"// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate","too long.",0,0,0
"// TODO : remove these last two as batcher is no longer managing connections","None",None,None,None
"// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.","too long.",0,0,0
"// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses","too long.",0,0,0
"// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those","too long.",0,0,0
"//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!","switch ( x.getType() ) {",164,0.718562874251497,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/HqlParser.java
"// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...","too long.",0,0,0
"// implicit joins are always(?) ok to reuse","None",None,None,None
"//TODO: used to be exprNoParens! was this needed?","}",143,0.7706422018348624,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/IndexNode.java
"// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.","Node lhs = getLeftHandOperand();",103,0.6166666666666667,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/BinaryArithmeticOperatorNode.java
"// we do not know either type //BLIND GUESS!","return StandardBasicTypes.DOUBLE; //BLIND GUESS!",116,0.7796610169491526,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/BinaryArithmeticOperatorNode.java
"// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.","JoinSequence joinSequence = fromElement.getJoinSequence();",134,0.6532663316582915,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/IndexNode.java
"// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)","too long.",0,0,0
"// short-circuit for performance...","None",None,None,None
"// not absolutely necessary, but does help with aggressive release","//session.getJDBCContext().getConnectionManager().closeQueryStatement( ps, resultSet );",118,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/AbstractScrollableResults.java
"// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName","too long.",0,0,0
"//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....","String[] tokens = StringHelper.split( StringHelper.WHITESPACE + "(),", query, true );",82,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/QuerySplitter.java
"//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop","too long.",0,0,0
"//yuck!","Fo fo = Fo.newFo( (FumCompositeID) id );",4531,0.35,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/test/java/org/hibernate/test/legacy/FooBarTest.java
"// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...","public boolean isDereferencedBySuperclassProperty() {",645,0.5051546391752577,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/FromElement.java
"//TODO: make this a bit nicer","None",None,None,None
"// yuck!","Fo fo = Fo.newFo( (FumCompositeID) id );",4531,0.35,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/test/java/org/hibernate/test/legacy/FooBarTest.java
"// todo : potentially look at optimizing these two arrays","oos.writeObject( loadedState );",402,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/EntityEntry.java
"//note that i parameter is now unused (delete it?)","/**",219,0.6614173228346457,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/collection/spi/PersistentCollection.java
"// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.","if ( manyToMany ) {",390,0.6699029126213593,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/FromElement.java
"// TODO : this constructor form is *only* used from constructor directly below us; can it go away?","super( sql, flushMode, session, parameterMetadata );",114,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/SQLQueryImpl.java
"// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.","// We would probably refactor to have LogicParser (builds a tree of simple",52,0.5841584158415841,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/WhereParser.java
"// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?","final Object result = persistenceContext.getEntity(key);",687,0.5487804878048781,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/SessionImpl.java
"// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.","String replacement = ( String ) walker.getTokenReplacements().get( constant.getText() );",188,0.5545454545454546,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/util/LiteralProcessor.java
"//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur","//We should actually rework this class to not implement Parser",50,0.5376344086021505,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/PathExpressionParser.java
"//TODO: optimize this better!","return index==-1 ? 0 : getSubclassPropertyTableNumber(index);",2005,0.3939393939393939,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//TODO: should we allow suffixes on these ?","return ( String[] ) subclassPropertyColumnNames.get( propertyName );",2190,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//TODO: is this really necessary????","boolean[] includeOldField = entityMetamodel.getOptimisticLockStyle() == OptimisticLockStyle.ALL",3191,0.5517241379310345,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// TODO : not sure the best way to handle this. // The non-performant way :","last();",256,0.7628865979381443,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/FetchingScrollableResultsImpl.java
"//TODO: is there a better way?","return collectionName != null && !getPropertyType().isCollectionType();",435,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/PathExpressionParser.java
"//The class is now way to complex!","private int dotcount;",57,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/PathExpressionParser.java
"// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...","NativeSQLQuerySpecification spec;",1093,0.7354260089686099,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/SessionFactoryImpl.java
"//name from a super query (a bit inelegant that it shows up here)","}",818,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/QueryTranslatorImpl.java
"//real hacky... // used to count the nesting of parentheses","None",None,None,None
"//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync","region.put( space, ts );",81,0.6493506493506493,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cache/spi/UpdateTimestampsCache.java
"// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)","String[] tokens = StringHelper.split( ".", token, true );",343,0.6624203821656051,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/WhereParser.java
"// FIXME Hacky workaround to JBCACHE-1202","None",None,None,None
"//TODO: COPY/PASTE FROM SessionImpl, pull up!","@Override",569,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/StatelessSessionImpl.java
"// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...","too long.",0,0,0
"//Must be done here because of side-effect! yuck...","int scalarSize = scalarTypes.size();",600,0.6875,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/QueryTranslatorImpl.java
"//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.","//The class is now way to complex!",54,0.6625,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/PathExpressionParser.java
"// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.","None",None,None,None
"// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value","return finalKey;",134,0.7643312101910829,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/action/internal/CollectionAction.java
"// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?","if ( discrimColumnName != null && !"clazz_".equals( discrimColumnName ) ) {",93,0.5683060109289617,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/util/SessionFactoryHelper.java
"//work around a bug in all known connection pools....","None",None,None,None
"//TODO: reuse the PreLoadEvent","final PreLoadEvent preLoadEvent = new PreLoadEvent( session )",146,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cache/spi/entry/StandardCacheEntryImpl.java
"// Need a better way to define the suffixes here...","text = child.renderValueCollectionSelectFragment( nonscalarSize, nonscalarSize + k );",448,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/SelectClause.java
"//workaround for WebLogic","LOG.debug("could not log warnings", sqle);",260,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/jdbc/spi/SqlExceptionHelper.java
"//TODO: temporary","final ComponentMetamodel metamodel = new ComponentMetamodel( this );",171,0.5517241379310345,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/Component.java
"// TODO : YUCK!!!  fix after HHH-1907 is complete","return Environment.getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();",240,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/tuple/entity/PojoEntityTuplizer.java
"// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop","too long.",0,0,0
"//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)","None",None,None,None
"// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance","Criteria parent = null;",190,0.6781609195402298,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...","private final CriteriaQueryTranslator translator;",58,0.5611510791366906,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/criteria/CriteriaJoinWalker.java
"// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be","EntityUniqueKey euk = new EntityUniqueKey(",1687,0.4608294930875576,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"//This is not very nice (and quite slow):","final String[][] cols = persister == rootPersister ?",1663,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"//TODO: get SQL rendering out of here","CollectionElement elem = new CollectionElement();",366,0.496,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/PathExpressionParser.java
"// meant to handle dynamic instantiation queries...(Copy from QueryLoader)","HolderInstantiator holderInstantiator = buildHolderInstantiator( resultTransformer );",453,0.8108108108108109,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?","Type type = definition.getParameterType( name );",93,0.7261904761904762,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/FilterImpl.java
"// worrying about proxies is perhaps a little bit of overkill here...","if ( element instanceof HibernateProxy ) {",121,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/CollectionType.java
"// todo : throw exception?  maybe warn if not the same?","}",99,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/param/DynamicFilterParameterSpecification.java
"//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible","//NOTE: unlike all other Loaders, this one is NOT",64,0.2268041237113402,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/criteria/CriteriaLoader.java
"// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]","DecimalFormat jdkFormatter = new DecimalFormat( FORMAT_STRING );",302,0.5471698113207547,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/util/LiteralProcessor.java
"//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?","else {",93,0.5,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/Set.java
"// TODO: copy/paste from ManyToOneType","public Serializable disassemble(Object value, SessionImplementor session, Object owner)",96,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/SpecialOneToOneType.java
"//TODO: code duplication with SingleTableEntityPersister","ArrayList columnTableNumbers = new ArrayList();",407,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java
"// todo : throw exception?","}",99,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/param/DynamicFilterParameterSpecification.java
"//should this interface extend PropertyMapping?","/**",37,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/Joinable.java
"// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete","optimizer = Environment.getBytecodeProvider().getReflectionOptimizer(",87,0.7074829931972789,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/tuple/component/PojoComponentTuplizer.java
"//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!","private final EntityMetamodel entityMetamodel;",80,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/tuple/entity/AbstractEntityTuplizer.java
"//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:","super.getReturnedClass().isInstance(parent);",50,0.5340909090909091,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/EmbeddedComponentType.java
"//TODO: implement caching?! proxies?!","EntityUniqueKey euk = new EntityUniqueKey(",688,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/EntityType.java
"// is this really necessary?","ByteArrayOutputStream outputStream = new ByteArrayOutputStream(2048);",75,0.4897959183673469,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/AbstractBynaryType.java
"//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call","replaceElements( result, target, owner, copyCache, session );",665,0.7906976744186046,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/CollectionType.java
"//TODO: this is a bit arbitrary, expose a switch to the user?","return "";",446,0.7692307692307693,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/EntityType.java
""/**	 * @return collection removal	 * FIXME: even if isInverse=""true""?	 */"","*         FIXME: even if isInverse="true"?",664,0.5434782608695652,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/stat/internal/ConcurrentStatisticsImpl.java
"// TODO: Fix this so it will work for non-POJO entity mode","Type keyType = getPersister( session ).getKeyType();",380,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/CollectionType.java
"//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:","* Is the primary key of the owning entity table",44,0.6575342465753424,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/AssociationType.java
"//TODO: would be nice to handle proxy classes elegantly!","None",None,None,None
"//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?","int spacesSize = 1 + persistentClass.getSynchronizedTables().size();",177,0.6991869918699187,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"//TODO: is there a more elegant way than downcasting?","AbstractQueryImpl query = (AbstractQueryImpl) session.getNamedSQLQuery(queryName);",60,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/collection/NamedQueryCollectionInitializer.java
"//TODO: remove use of instanceof!","Component component = (Component) prop.getValue();",698,0.5979381443298969,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/PersistentClass.java
"//TODO: perhaps this should be some other RuntimeException...","throw new HibernateException( "illegally attempted to associate a proxy with two open Sessions" );",122,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/proxy/AbstractLazyInitializer.java
"//Yuck:","if ( inFromClause",322,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/sql/Template.java
"//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors","None",None,None,None
"//TODO: design new lifecycle for ProxyFactory","pf.postInstantiate(",114,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/tuple/entity/DynamicMapEntityTuplizer.java
"// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here","columnNames = getSessionFactoryHelper().generateColumnNames( queryReturnTypes );",254,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/SelectClause.java
"// TODO: Should this really return null?  If not, figure out something better to do here.","}",274,0.9240506329113924,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/FromElementType.java
"// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...","None",None,None,None
"// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?","too long.",0,0,0
"// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type","SessionFactoryImplementor sessionFactory = getSessionFactoryHelper().getFactory();",83,0.6129032258064516,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/BinaryLogicOperatorNode.java
"// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...","too long.",0,0,0
"// create an index on the key columns??","}",64,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/IdentifierCollection.java
"//is this ok?","None",None,None,None
"//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names","String tableName = getTable().getQuotedName(dialect);",160,0.5439330543933054,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/SimpleValue.java
"// perhaps this should be an exception since it is only ever used // in the above method?","None",None,None,None
"// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..","// was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried",1428,0.6,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?","source.getPersistenceContext().addEntry(",246,0.5423728813559322,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/AbstractSaveEventListener.java
"//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?","copyCache.put( original, copy );",317,0.8709677419354839,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/EntityType.java
"//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);","propertyName",76,0.13095238095238096,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/OneToOne.java
"// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge","too long.",0,0,0
"//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects","EntityEntry entry = source.getPersistenceContext().getEntry(entity);",67,0.8142857142857143,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultLockEventListener.java
"//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)","/*Object[] cachedState = null;",304,0.671875,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultSaveOrUpdateEventListener.java
"//this is kinda the best we can do...","if ( object instanceof HibernateProxy ) {",130,0.47619047619047616,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/ForeignKeys.java
"/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */","cacheable,",82,0.9221556886227545,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/NamedSQLQueryDefinition.java
"//TODO: this needn't exclude subclasses...","LinkedHashSet<EntityKey> set =  batchLoadableEntityKeys.get( persister.getEntityName() );",189,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/BatchFetchQueue.java
"//TODO: we use two visitors here, inefficient!","OnReplicateVisitor visitor = new OnReplicateVisitor( source, id, entity, false );",152,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultReplicateEventListener.java
"//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?","return collection.wasInitialized() &&",406,0.5396825396825397,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/CollectionEntry.java
"// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source","too long.",0,0,0
"//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)","too long.",0,0,0
"// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()","Serializable entityId = getLoadedCollectionOwnerIdOrNull( ce );",863,0.8152866242038217,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/StatefulPersistenceContext.java
"//I suppose?","}",428,0.6470588235294118,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/CascadingAction.java
""// TBD should this be varbinary($1)? //		registerColumnType(Types.VARBINARY,     ""binary($1)"");"","//		registerColumnType(Types.VARBINARY,     "binary($1)");",250,0.5210084033613446,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//shortcut","}",281,0.5714285714285714,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/SimpleValue.java
"//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective","None",None,None,None
"// TODO : probably better to calculate these and pass them in, as it'll be more performant","None",None,None,None
"// todo : should we additionally check the current isolation mode explicitly?","SessionFactoryImplementor factory = session.getFactory();",94,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/lock/UpdateLockingStrategy.java
"//TODO: simply remove this override //      if we fix the above todos","None",None,None,None
"// todo : is there really any reason to kkeep trying if this fails once?","oracleCursorTypeSqlType = extractOracleCursorTypeValue();",480,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Oracle8iDialect.java
"// TODO : not sure this is correct, could not find docs on how to do this.","return "{?= call current_timestamp}";",100,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/FrontBaseDialect.java
"//HSQL has no Blob/Clob support .... but just put these here for now!","if ( hsqldbVersion < 20 ) {",119,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/HSQLDialect.java
""// merges don't cascade to uninitialized collections //			//TODO: perhaps this does need to cascade after all...."","return getLoadedElementsIterator(session, collectionType, collection);",292,0.6301369863013698,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/CascadingAction.java
"// yick!  need this for proper serialization/deserialization handling...","wrapper.setWrapped( wrapped );",194,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/context/internal/ThreadLocalSessionContext.java
"//TODO: should orphans really be deleted during lock???","return false;",187,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/CascadingAction.java
"// todo : move to StringHelper?","if ( stringForm != null ) {",319,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/util/config/ConfigurationHelper.java
"// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);","this.set = set;",84,0.5280898876404494,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/collection/internal/PersistentSet.java
"// TODO: It would be really, really nice to use this to also model components!","/**",36,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/PropertyMapping.java
"//TODO: move to .sql package!!","buf.append("select ");",445,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)","EntityType entityType =(EntityType) type;",747,0.7457627118644068,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/JoinWalker.java
"// TODO : add this info to the translator and aggregate it here...","return null;",160,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/query/spi/HQLQueryPlan.java
"// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases","if ( value != old ) {",182,0.45544554455445546,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/collection/internal/PersistentMap.java
"//TODO: code duplication with JoinedSubclassEntityPersister","ArrayList columnJoinNumbers = new ArrayList();",376,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"//TODO: refactor to .sql package","private CollectionSubqueryFactory() {",44,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/CollectionSubqueryFactory.java
"//TODO: *two* hashmap lookups here is one too many...","String[] columns = (String[]) columnsByPropertyPath.get(propertyName);",95,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractPropertyMapping.java
"//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses","//figure out which tables need to be fetched",940,0.7411764705882353,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?","Iterator itr = associations.iterator();",100,0.4117647058823529,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/collection/BasicCollectionJoinWalker.java
"//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface","//NOTE: unlike all other Loaders, this one is NOT",62,0.6357615894039735,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/criteria/CriteriaLoader.java
"// Do we need to qualify index names with the schema name?","return false;",400,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//TODO: We probably should have a StatisticsNotPublishedException, to make it clean","SessionFactory sf;",58,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/jmx/StatisticsService.java
"//yukky! Don't you have subclasses for that! //TODO race conditions can happen here","None",None,None,None
"// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode","Type keyType = getPersister( session ).getKeyType();",379,0.5523809523809524,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/CollectionType.java
"//TODO: need to make the majority of this functionality into a top-level support class for custom impl support","/**",492,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/tuple/entity/PojoEntityTuplizer.java
"// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer","None",None,None,None
"//TODO: inefficient if that cache is just going to ignore the updated state!","CacheEntry ce = persister.buildCacheEntry( instance,state, nextVersion, getSession() );",187,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/action/internal/EntityUpdateAction.java
"// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()","// return collection.getOwner()",863,0.7852760736196319,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/StatefulPersistenceContext.java
"//TODO:refactor + make this method private","arrayHolders.put( holder.getValue(), holder );",1056,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/StatefulPersistenceContext.java
"// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...","None",None,None,None
"// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...","// creates and renders the join fragments for inheritance",476,0.5263157894736842,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/HqlSqlWalker.java
"// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop","None",None,None,None
"//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults","Integer minPoolSize = ConfigurationHelper.getInteger( Environment.C3P0_MIN_SIZE, props );",148,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-c3p0/src/main/java/org/hibernate/service/jdbc/connections/internal/C3P0ConnectionProvider.java
"// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()","if ( fromElement.getOrigin() == null ) {",190,0.4946236559139785,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/SelectClause.java
"//kinda ugly, but needed for collections with a "." node mapping","None",None,None,None
"// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id","too long.",0,0,0
"// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception","None",None,None,None
"//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...","None",None,None,None
"//TODO: move to .sql package, and refactor with similar things!","return StringHelper.join( "=? and ",",3715,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//TODO: I am not so sure about the exception handling in this bit!","sequentialSelect = session.getTransactionCoordinator()",2849,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties","if ( useStaticLoader ) {",2368,0.8557692307692307,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// append the SQL to return the generated identifier //TODO: suck into Insert","if ( j == 0 && identityInsert && useInsertSelectIdentity() ) { //TODO: suck into Insert",2686,0.8073394495412844,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//This is really ugly, but necessary:","/**",2196,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// todo : modify the class definition if not already transformed...","byte[] b = cc.toBytecode();",61,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/bytecode/internal/javassist/TransformingClassLoader.java
"//TODO: should we use SELECT .. FOR UPDATE?","Select select = new Select( getFactory().getDialect() );",1770,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""/** Create an action that will evict collection and entity regions based on queryspaces (table names).	 *  TODO: cache the autodetected information and pass it in instead.	 **/"","None",None,None,None
"//TODO: is this 100% correct?","getSession().getPersistenceContext().getCollectionsByKey().remove(",90,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/EvictVisitor.java
"/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////","too long.",0,0,0
"// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..","return new Alias( suffix ).toAliasStrings( getIdentifierAliases() );",1428,0.6064981949458483,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//TODO: move into collection type, so we can use polymorphism!","if ( collectionType.hasHolder() ) {",93,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/WrapVisitor.java
"// TODO should we just collect these like with the collections above?","sqlAliasSuffixes[i] = ( size == 1 ) ? "" : Integer.toString( i ) + "_";",174,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"// todo : should really move this log statement to CollectionType, where this is used from...","None",None,None,None
"//hum ... should we cascade anyway? throw an exception? fine like it is?","return;",76,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultReplicateEventListener.java
"// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.","None",None,None,None
"//TODO: copy/paste from insertRows()","int loc = writeKey( st, id, offset, session );",1245,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//TODO: suck into event class","}",440,0.819672131147541,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultFlushEntityEventListener.java
"//TODO: never reached, since getTypeName() actually throws an exception!","None",None,None,None
"// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider","None",None,None,None
"// xmlforest requires a new kind of function constructor","registerFunction( "year", new StandardJDBCEscapeFunction( "year", StandardBasicTypes.INTEGER ) );",384,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// TODO Is this a valid operation on a timestamps cache?","Transaction tx = suspend();",96,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-infinispan/src/main/java/org/hibernate/cache/infinispan/timestamp/ClusteredTimestampsRegionImpl.java
"// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used","None",None,None,None
"// TODO Why not use the timestamp in a DataVersion?","None",None,None,None
"// todo : eventually merge this with TreeCache and just add optional opt-lock support there.","None",None,None,None
"// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...","None",None,None,None
"// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used","None",None,None,None
"//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)","persister.setIdentifier( instance, generatedId, session );",85,0.6214689265536724,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/action/internal/EntityIdentityInsertAction.java
"// unhappy about this being public ... is there a better way?","None",None,None,None
"// TODO : safe to interpret "map.remove(key) == null" as non-dirty?","initialize( true );",203,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/collection/internal/PersistentMap.java
"// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node","None",None,None,None
"// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...","None",None,None,None
"// TODO: Replace this with a more elegant solution.","String[] idColumnNames = ( persister != null ) ?",165,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/FromElementType.java
"// short cut check...","if ( !Character.isLetter( chars[0] ) ) {",550,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/util/StringHelper.java
"//TODO: to handle concurrent writes correctly, this should return a Lock to the client","None",None,None,None
"// this is ugly here, but needed because its a subquery","q.addQuerySpaces( q.getCollectionPersister( pathExpressionParser.getCollectionRole() ).getCollectionSpaces() );",376,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/WhereParser.java
"// TODO : will need reference to session factory to fully complete HHH-1907","//	private final SessionFactoryImplementor sessionFactory;",45,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/tuple/component/ComponentMetamodel.java
"// inheritance cycle detection (paranoid check)","PersistentClass superclass = getSuperclass();",167,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/PersistentClass.java
"// TODO: encapsulate the protected instance variables!","private final String role;",112,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//polymorphism comment above","ukName,",1693,0.6341463414634146,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.","too long.",0,0,0
"// TODO: handle TypeDefs","Attribute typeNode = node.attribute( "type" );",2047,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//TODO: get all properties, not just the fetched ones!","metadata.getServiceRegistry()",663,0.38596491228070173,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/SessionFactoryImpl.java
"//TODO: native ids","Serializable id = persister.getIdentifierGenerator().generate( getSession(), entry );",322,0.48484848484848486,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/collection/internal/PersistentIdentifierBag.java
"// TODO: bindpropertyresults(alias, returnElem)","lockMode",147,0.8461538461538461,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/ResultSetMappingBinder.java
"//TODO: handle property-ref","return "? " +",63,0.3875968992248062,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/criterion/SizeExpression.java
"//TODO: validate existing of property with the chosen name. (secondpass )","ArrayList allResultColumns = getResultColumns(propertyresult);",277,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/ResultSetMappingBinder.java
"//TODO: check that entry.getIdentifier().equals(requestedId)",".getColumnIterator() );",360,0.4383561643835616,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/Collection.java
"// TODO: RESTRICT VIOLATION","case 23001: return null;",368,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/PostgreSQL81Dialect.java
"//TODO: assertion only, could be optimized away","throw new AssertionFailure( "entity was persistent" );",225,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultSaveOrUpdateEventListener.java
"// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?","None",None,None,None
"//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"","final EntityKey entityKey = session.generateEntityKey( id, persister );",662,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultFlushEntityEventListener.java
"// TODO: toLowerCase was not done before. Only used in Template.","None",None,None,None
"//TODO: arithmetic expressions, multiple new Foo(...)","private static final Set COUNT_MODIFIERS = new HashSet();",45,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/SelectParser.java
"// TODO: not visible to the user!","}",68,0.5806451612903226,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/DefaultEntityAliases.java
"//TODO: proxies!","if ( me.getValue()==element ) return me.getKey();",104,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/MapType.java
"//TODO: can we limit stored procedures ?!","col += limitHandler.bindLimitParametersAtStartOfQuery( st, col );",1863,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"//TODO: formulas ?","public void initCollectionPropertyMap() {",1752,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// TODO: better error message since we actually support composites if names are explicitly listed.","throw new QueryException(",224,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryParser.java
"//TODO: use these in methods above","public String getEntityName(Criteria subcriteria, String propertyName) {",643,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"//TODO: cache the persister, this shows up in yourkit","final Serializable id = session.getEntityPersister( entityName, obj ).getIdentifier( obj, session );",49,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/id/Assigned.java
"//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables","fk.setTable( this );",670,0.75177304964539,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/Table.java
"//TODO: create uk loaders for component properties","}",2400,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// TODO : still need to make CollectionPersisters EntityMode-aware","None",None,None,None
"//TODO: terrible implementation!","return value == null",200,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/AnyType.java
"//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);","/*if ( otherAlias!=null && !columnAlias.equals(otherAlias) ) {",145,0.611764705882353,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/sql/SelectFragment.java
"// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()","return isOwnerVersioned( session ) && super.isDirty( old, current, session );",314,0.7239263803680982,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/CollectionType.java
"// TODO: check if key contains the owner ID","}",419,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/CollectionType.java
"//TODO: cache this in an instvar","return getFactory().getDialect().getIdentitySelectString(",2970,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// TODO : temporary initial step towards HHH-1907","final ComponentMetamodel metamodel = new ComponentMetamodel( this );",171,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/Component.java
"// todo : remove this once ComponentMetamodel is complete and merged","public Getter getGetter(Class clazz) throws PropertyNotFoundException, MappingException {",319,0.36619718309859156,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/Property.java
"//TODO: add owner argument!!","throws HibernateException;",67,0.4424778761061947,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/collection/CollectionPersister.java
"//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far","None",None,None,None
"//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings","mergeJoins( sql.getJoinFragment() );",624,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/QueryTranslatorImpl.java
"//TODO: unnecessary for databases with ANSI-style joins","DisjunctionFragment df = new DisjunctionFragment();",986,0.8032786885245902,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/JoinWalker.java
"//TODO: maybe call it getRowSelection() ?","public RowSelection getSelection() {",137,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/AbstractQueryImpl.java
"//TODO: make this handle multiple collection roles!","final CollectionPersister[] collectionPersisters = getCollectionPersisters();",842,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"//TODO: include the rowids!!!!","if ( hasSubclasses() ) {",318,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here","too long.",0,0,0
"// TODO : or should we return 'containsTableAlias'??","LOG.tracev( "Forcing inclusion of extra joins [alias={0}, containsTableAlias={1}]", alias, containsTableAlias );",136,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/util/JoinProcessor.java
"/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...","// as a control measure, now update the node while it is detached and",154,0.8068181818181818,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/test/java/org/hibernate/test/nonflushedchanges/MergeTest.java
"//TODO: avoid this for non-new instances where mightBeDirty==false","boolean substitute = wrapCollections( session, persister, types, values);",160,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultFlushEntityEventListener.java
"//TODO: theoretically non-threadsafe...","None",None,None,None
"// todo : look at optimizing these...","oos.writeObject( loadQueryInfluencers );",2191,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/SessionImpl.java
"// todo : cache this sql...","String versionIncrementString = generateVersionIncrementUpdateString();",1821,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""/**	 * TODO: Check if Mimer SQL cannot handle the way DB2 does	 */"","public boolean supportsIdentityColumns() {",154,0.9108910891089109,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/MimerSQLDialect.java
"//TODO: if we are using identity columns, fetch the identifier","}",426,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/collection/internal/PersistentIdentifierBag.java
"//TODO check there is no actual definition elemnents when a ref is defined","}",102,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/NamedSQLQuerySecondPass.java
"// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null","mappings.addColumnBinding( logicalColumnName, column, table );",1077,0.3333333333333333,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null","mappings.addColumnBinding( logicalColumnName, column, table );",1078,0.6324786324786325,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )","None",None,None,None
"//TODO: return new Lock(ts);","None",None,None,None
"// TODO : why aren't these the same?","if ( lhs.getImpliedJoin() != null || lhs.getFromElement().isImplied() ) {",160,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/AssignmentSpecification.java
"//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!","FieldInterceptionHelper.injectFieldInterceptor( entity, getEntityName(), lazyProps, session );",502,0.7538461538461538,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/tuple/entity/PojoEntityTuplizer.java
"//TODO mappings.getLogicalTableName(ownerTable)","String logicalOwnerTableName = ownerTable.getName();",1474,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//TODO: if lock.getTimestamp().equals(ts)","None",None,None,None
"//TODO: always true for now, but not if we later decide to support elements() in the from clause","inElementsFunction = true;",295,0.9239766081871345,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/FromElementFactory.java
"// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:","prepareCollectionFlushes( persistenceContext );",89,0.5109489051094891,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/AbstractFlushingEventListener.java
"// See if the user configured a multiplexer stack","None",None,None,None
"//root entity comes *last*","resultTypeList.add( translator.getResultType( criteria ) );",125,0.5411764705882353,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/criteria/CriteriaJoinWalker.java
"//==elementType ??","else {",544,0.7857142857142857,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)","//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....",78,0.5075757575757576,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/QuerySplitter.java
"//identifier collections not supported for 1-to-many","if ( getFactory().getSettings().isCommentsEnabled() ) {",129,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/collection/OneToManyPersister.java
"// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly","int potentialTrimCharacterArgIndex = 1;",69,0.5508982035928144,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/function/TrimFunctionTemplate.java
"// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","// seems to not really...",421,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/PostgreSQL81Dialect.java
"// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...","list = s.createQuery( "from Human h inner join h.friends as f with f.nickName like 'bubba'" )",132,0.21052631578947367,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/test/java/org/hibernate/test/hql/WithClauseTest.java
"// update removed rows fks to null","try {",318,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/collection/OneToManyPersister.java
"//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );",""midnight_seconds",",114,0.3695652173913043,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/DB2Dialect.java
""//			buf.append( selectFragment( lhsAlias, """" ) )//ignore suffix for collection columns!"","replace(",179,0.23404255319148937,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/util/StringHelper.java
"// initialize the Set of queried identifier spaces (ie. tables)","Iterator iter = collections.values().iterator();",639,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/QueryTranslatorImpl.java
"//use suffix for the entity columns",".toString();",460,0.5042016806722689,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/collection/OneToManyPersister.java
"// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent","entityIsTransient(event, copyCache);",279,0.5899280575539568,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultMergeEventListener.java
"// the class hierarchy structure","private final String subquery;",69,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"// remove the current element from insertions. It will be added back later.","String entityName = action.getEntityName();",751,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/ActionQueue.java
"//private final String rootTableName;","private final String[] subclassClosure;",72,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...","too long.",0,0,0
"//INITIALIZATION:","public UnionSubclassEntityPersister(",83,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","too long.",0,0,0
"//not null ... (start with 1) is implicit","}",206,0.6476190476190476,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/DB2Dialect.java
"// continue loop","}",709,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/ActionQueue.java
"// return existing object or initialized proxy (unless deleted)","LOG.trace( "Entity found in session cache" );",319,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultLoadEventListener.java
"// the list of entity names that indicate the batch number","for ( EntityInsertAction action : (List<EntityInsertAction>) insertions ) {",749,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/ActionQueue.java
"//disassembled state gets put in a new array (we write to cache by value!)","this.disassembledState = TypeHelper.disassemble(",87,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cache/spi/entry/StandardCacheEntryImpl.java
"// Add these directly to the executions queue","None",None,None,None
"// Execute the SQL:","public String fromTableFragment(String name) {",353,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"//sort the updates by fk","java.util.Collections.sort( collectionCreations );",434,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/ActionQueue.java
"// This could also just be true all the time...","return isAbstract() || hasSubclasses();",386,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"// the mapping of entity names to their latest batch numbers.","private HashMap<String,Integer> latestBatches = new HashMap<String,Integer>();",732,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/ActionQueue.java
"//chop the last union (all)","buf.setLength( buf.length() - ( dialect.supportsUnionAll() ? 11 : 7 ) );",474,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"","if ( resultSet.isAfterLast() ) {",496,0.7225806451612903,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"//TODO: check this....","return getTableName();",501,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"// for deprecated saveOrUpdateCopy()","None",None,None,None
"// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}","if ( sqle.getSQLState().startsWith( "23" ) ) {",283,0.6206896551724138,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/H2Dialect.java
"// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class","private final int[] subclassPropertyTableNumberClosure;",91,0.7466666666666667,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java
"//expressionTerminators.add(","); // deliberately excluded","EXPRESSION_OPENERS.add( "and" );",80,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/WhereParser.java
"// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE","private final Map subclassesByDiscriminatorValue = new HashMap();",103,0.5524861878453039,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java
"//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression","None",None,None,None
"// Multi-param numeric dialect functions...","registerFunction( "atan2", new StandardSQLFunction("atan2", StandardBasicTypes.FLOAT) );",155,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Oracle9Dialect.java
"// Use theta style (for regression) // Move the node up, after the origin node.","FromElement origin = fromElement.getOrigin();",667,0.7,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/DotNode.java
"// Multi-param date dialect functions...","registerFunction( "add_months", new StandardSQLFunction("add_months", StandardBasicTypes.DATE) );",163,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Oracle9Dialect.java
"// add the main query","None",None,None,None
"// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",1566,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java
"//add the restriction to the outer select","None",None,None,None
"// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22","too long.",0,0,0
"// This assumes you will want to ignore any update counts","while ( !isResultSet && ps.getUpdateCount() != -1 ) {",347,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/DB2Dialect.java
"//skip the FROM keyword in params","/**",45,0.42105263157894735,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/function/AnsiTrimEmulationFunction.java
"// Custom sql","final AnnotationInstance sqlLoaderAnnotation = JandexHelper.getSingleAnnotation(",670,0.7857142857142857,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/metamodel/source/annotations/entity/EntityClass.java
"// return a newly loaded object","return load(event, persister, keyToLoad, options);",261,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultLoadEventListener.java
"// make it circular-reference safe","final EntityKey entityKey = session.generateEntityKey( entityId, subclassPersister );",619,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultLoadEventListener.java
"//Cope with special cases of AND, NOT, ()","specialCasesBefore( lcToken );",264,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/WhereParser.java
"// subclass closure properties","//TODO: code duplication with SingleTableEntityPersister",405,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java
"// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.","if ( !sessionFactory.getDialect().supportsRowValueConstructorSyntax() ) {",95,0.8604651162790697,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/BinaryLogicOperatorNode.java
"// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!","return Arrays.asList( naturalIdLoadAccess.load() );",1629,0.21428571428571427,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/SessionImpl.java
"// SUBCLASSES","subclassByDiscriminatorValue.put(",161,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"//need to hydrate it.","// grab its state from the ResultSet and keep it in the Session",1594,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"//starts with 1, implicitly","}",199,0.5714285714285714,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/PostgreSQL81Dialect.java
"// instantiate a new instance","object = session.instantiate( instanceClass, key.getIdentifier() );",1590,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"// simple nullability constraint","return null;",292,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Oracle9Dialect.java
"//we need to upgrade the lock mode to the mode requested","session.getPersistenceContext().getEntry(object)",1554,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
""//	register the type of the out param - an Oracle specific type"","statement.registerOutParameter(col, oracletypes_cursor_value);",313,0.9811320754716981,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Oracle9Dialect.java
"// look for a proxy","Object proxy = persistenceContext.getProxy(keyToLoad);",251,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultLoadEventListener.java
"// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",217,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Oracle8iDialect.java
"// evicts don't cascade to uninitialized collections","return getLoadedElementsIterator(session, collectionType, collection);",233,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/CascadingAction.java
"// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~","@Override",312,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Oracle8iDialect.java
"// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...","// Note, it potentially could be a proxy, so doAfterTransactionCompletion the location the safe way...",3513,0.5859375,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();","value.addColumn( new Column( columnName ) );",148,0.24444444444444444,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/CopyIdentifierComponentSecondPass.java
"// might happen with a managed connection","}",58,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/tool/hbm2ddl/SuppliedConnectionProviderConnectionHelper.java
"// don't need subclass tables, because they can't appear in conditions","}",588,0.9022556390977443,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java
"// not final-static to avoid possible classcast exceptions if using different oracle drivers.","int oracletypes_cursor_value = 0;",302,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Oracle9Dialect.java
"//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!","None",None,None,None
"//private List aliases = new ArrayList();","private List columnAliases = new ArrayList();",43,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/sql/SelectFragment.java
"// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.","private final PathExpressionParser pathExpressionParser;",41,0.8053691275167785,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/GroupByParser.java
"// register resolvers set via Environment property","None",None,None,None
"// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)","too long.",0,0,0
"//update all the modified entries","int count = doUpdateRows( id, collection, session );",1625,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// special case where we need to force incloude all subclass joins","q.addSelectScalar( getFunction( "count", q ).getReturnType( StandardBasicTypes.LONG, q.getFactory() ) );",149,0.38235294117647056,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/SelectParser.java
"// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection","p.getIdentifierType(),",123,0.14193548387096774,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/CacheImpl.java
"// binary %Stream // character %Stream","None",None,None,None
"//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);","public String getAddColumnString() {",81,0.9873417721518988,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/MckoiDialect.java
"// assumes that types are all of span 1","Iterator iter = namedParams.entrySet().iterator();",1993,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"// hibernate impelemnts cast in Dialect.java","registerFunction( "ceiling", new StandardSQLFunction( "ceiling", StandardBasicTypes.INTEGER ) );",270,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!","if ( checkVersion( includeProperty ) ) {",2571,0.5201793721973094,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list",""midnight_seconds",",114,0.21794871794871795,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/DB2Dialect.java
"//its the given optional object","object = optionalObject;",1586,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"//decide which ResultSet to get the property value from:","final boolean propertyIsDeferred = hasDeferred &&",2894,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// properties of this class, including inherited properties","public String getAuthoriser() {",56,0.375,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/test/java/org/hibernate/test/annotations/fetch/Stay.java
"// otherwise assume the parent is the the criteria that created us","parent = subcriteria.getParent();",204,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class","private final int[] subclassPropertyTableNumberClosure;",92,0.5714285714285714,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java
"// we can go straight to the first required row","rs.absolute( firstRow );",1766,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)","// (this lets us correctly handle proxies and multi-row or multi-column queries)",81,0.5534591194968553,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/NamedQueryLoader.java
"//before adding to collection!","None",None,None,None
"// discriminator column","if ( discriminatorColumnAnnotation != null ) {",370,0.42424242424242425,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/metamodel/source/annotations/entity/EntityClass.java
"// Code to handle subclasses of topClass","Object discriminatorValue = persister.getDiscriminatorType().nullSafeGet(",1730,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"//NONE, because its the requested lock mode, not the actual!","defaultLockModes = ArrayHelper.fillArray( LockMode.NONE, size );",197,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"//private final Map propertyTableNumbersByName = new HashMap();","private final Map propertyTableNumbersByNameAndSubclass = new HashMap();",127,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap","throw e;",66,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/service/jdbc/dialect/internal/BasicDialectResolver.java
"// CLASS + TABLE","joinSpan = persistentClass.getJoinClosureSpan()+1;",148,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.","if ( session.getFactory().getSettings().isWrapResultSetsEnabled() ) {",2055,0.7724867724867724,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"// required to exception table // iconst_0 // i","code.addIconst( 0 );",253,0.5,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/bytecode/internal/javassist/BulkAccessorFactory.java
"// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)","this.isKey = metamodel.isKey();",74,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/ComponentType.java
"// checkcast // cast the bean into a raw bean","code.addCheckcast( this.targetBean.getName() );",259,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/bytecode/internal/javassist/BulkAccessorFactory.java
"// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)","None",None,None,None
"// checkcast (case of primitive type) // invokevirtual (case of primitive type)","code.addInvokevirtual( target_type_index, getterName, getter_desc );",215,0.3614457831325301,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/bytecode/internal/javassist/BulkAccessorFactory.java
"// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).","too long.",0,0,0
"/* | this | bean | args | i | raw bean | exception | */","if ( setters.length > 0 ) {",250,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/bytecode/internal/javassist/BulkAccessorFactory.java
"// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).","AST firstChild = getFirstSelectExpression();",45,0.8113207547169812,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/SelectExpressionList.java
"// new // BulkAccessorException","code.addNew( BULKEXCEPTION_CLASS_NAME );",331,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/bytecode/internal/javassist/BulkAccessorFactory.java
"//"as" is not in KEYWORDS","&& !BEFORE_TABLE_KEYWORDS.contains( lcToken ) ) {",324,0.6,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/sql/Template.java
"// getfield // get field "$JAVASSIST_CALLBACK" defined already","code.addOpcode(Opcode.GETFIELD);",153,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/bytecode/internal/javassist/FieldTransformer.java
"// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~","None",None,None,None
"// dup","// same however.",1350,0.11764705882352941,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/test/java/org/hibernate/test/hql/HQLTest.java
"// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel","final ComponentTuplizerFactory componentTuplizerFactory = new ComponentTuplizerFactory();",77,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/tuple/component/ComponentMetamodel.java
"// putfield // put field "$JAVASSIST_CALLBACK" defined already","code.addOpcode(Opcode.PUTFIELD);",182,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/bytecode/internal/javassist/FieldTransformer.java
"// Configure the cache to use our TM","None",None,None,None
"/* local variables | this | callback | */","Bytecode code = new Bytecode(cp, 3, 3);",176,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/bytecode/internal/javassist/FieldTransformer.java
"// find the batch number associated with the current association, if any.","Integer associationBatchNumber = entityBatchNumber.get( value );",817,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/ActionQueue.java
"// invokeinterface","code.addInvokeinterface( target_type_index, getterName, getter_desc, 1 );",211,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/bytecode/internal/javassist/BulkAccessorFactory.java
"// we *always* assume an instance with a null // identifier or no identifier property is unsaved!","if ( id == null ) {",4254,0.6271186440677966,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",1808,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java
""// seems to not really... //	public boolean supportsRowValueConstructorSyntax() { //		return true; //	}"","if (obj == null)",65,0.20952380952380953,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-ehcache/src/test/java/org/hibernate/test/domain/PhoneNumber.java
"// below is for Cache' that don't have str in 2007.1 there is str and we register str directly","registerFunction( "str", new SQLFunctionTemplate( StandardBasicTypes.STRING, "cast(?1 as char varying)" ) );",355,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private final String[] propertyNames;",91,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/tuple/entity/EntityMetamodel.java
"// byte","if ( Byte.TYPE.equals( javaType ) ) {",86,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/TypeLocatorImpl.java
"// the column doesnt exist at all.","StringBuilder alter = new StringBuilder( root.toString() )",406,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/Table.java
"// note that %string is deprecated","registerFunction( "%string", new VarArgsSQLFunction( StandardBasicTypes.STRING, "%string(", ",", ")" ) );",358,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//If the object is already loaded, return the loaded one","object = session.getEntityUsingInterceptor( key );",1485,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"// create new lock that times out immediately","Lock newLock = new Lock( ts, uuid, nextLockId.getAndIncrement(), null );",185,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-ehcache/src/main/java/org/hibernate/cache/ehcache/internal/strategy/AbstractReadWriteEhcacheAccessStrategy.java
"// convenience methods relating to operations across arrays of types...","None",None,None,None
"// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp","BatchModeTransactionManager.getInstance().commit();",374,0.2018348623853211,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-infinispan/src/test/java/org/hibernate/test/cache/infinispan/entity/AbstractEntityRegionAccessStrategyTestCase.java
"// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.","return ( SelectClause ) ASTUtil.findTypeInChildren( this, SqlTokenTypes.SELECT_CLAUSE );",83,0.5941422594142259,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/QueryNode.java
"// DISCRIMINATOR","bindDiscriminatorProperty( table, entity, subnode, mappings );",393,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...","too long.",0,0,0
"// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","// HQL test",204,0.5916666666666667,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/test/java/org/hibernate/test/filter/DynamicFilterTest.java
"// Use the lower case function name. // Remember whether we're in a SELECT clause or not.","None",None,None,None
"// %upper is deprecated","registerFunction( "%upper", new StandardSQLFunction( "%upper" ) );",378,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// let this take precedence if defined, since it works for // assigned identifiers","Boolean result = entityMetamodel.getVersionProperty()",4263,0.8205128205128205,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//throw new UnsupportedOperationException("Can't write to a readonly object");","* Throws UnsupportedOperationException since this cache is read-only",110,0.9857142857142858,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-ehcache/src/main/java/org/hibernate/cache/ehcache/internal/strategy/ReadOnlyEhcacheNaturalIdRegionAccessStrategy.java
"// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.","return this;",4571,0.6935483870967742,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed","too long.",0,0,0
"// The syntax used to add a foreign key constraint to a table.","return new StringBuilder( 300 )",415,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
""//note: it is conceptually possible that a UserType could map null to //	  a non-null value, so the following is arguable:"","if ( isNullableTable( j ) && isAllNull( fields, j ) ) {",3007,0.7204968944099379,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// note: interfaces is assumed to already contain HibernateProxy.class","try {",156,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/proxy/pojo/javassist/JavassistLazyInitializer.java
"// identifier-commalist",".append( ") REFERENCES " )",422,0.5057471264367817,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//assembled state gets put in a new array (we read from cache by value!)","Object[] assembledProps = TypeHelper.assemble(",137,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cache/spi/entry/StandardCacheEntryImpl.java
"// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!","Iterator elems = getElementsIterator( collection, session );",116,0.6586826347305389,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/CollectionType.java
"// disassemble named parameters","final Map<String,TypedValue> namedParameters;",95,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cache/spi/QueryKey.java
"// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );","too long.",0,0,0
"// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.","None",None,None,None
"// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.","too long.",0,0,0
"// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction","None",None,None,None
"// remove all collections for the entity from the session-level cache","if ( persister.hasCollections() ) {",134,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultEvictEventListener.java
"// invokeinterface // callback.write*(..)","code.addInvokeinterface( target_type_index, getterName, getter_desc, 1 );",211,0.6181818181818182,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/bytecode/internal/javassist/BulkAccessorFactory.java
"// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private final SessionFactoryImplementor factory;",149,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// JOINS","Iterator joinIter = persistentClass.getJoinClosureIterator();",193,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.","too long.",0,0,0
"// classes mentioned in extends not available - so put it in queue","Attribute packageAttribute = hibernateMappingElement.attribute( "package" );",141,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","too long.",0,0,0
"//propertyTableNumbersByName.put( prop.getName(), join );","propertyTableNumbersByNameAndSubclass.put(",388,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally","too long.",0,0,0
"//Access cached SQL","protected boolean isDiscriminatorFormula() {",792,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","too long.",0,0,0
"//figure out which tables need to be fetched","AbstractEntityPersister subclassPersister = (AbstractEntityPersister) persister;",943,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
""//	private final List persisters = new ArrayList();"","private final Map alias2Return = new HashMap();",82,0.9782608695652174,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryReturnProcessor.java
"//figure out which columns are needed","ArrayList columnNumbers = new ArrayList();",956,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy","// so make certain that we do not accidentally initialize an uninitialized proxy",1856,0.6413043478260869,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/SessionImpl.java
"//figure out which formulas are needed","ArrayList formulaNumbers = new ArrayList();",965,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"//get em on the second pass!","columnReaders = (String[]) columnReadersByPropertyPath.get(foreignKeyProperty);",197,0.6571428571428571,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractPropertyMapping.java
"//render the SQL","return renderSelect(",974,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// local cache, so we use synchronization","@Override",47,0.6,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/service/jta/platform/internal/SynchronizationRegistryBasedSynchronizationStrategy.java
"// SQL strings","private String sqlVersionSelectString;",234,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""/*public static Object[] clone(Class elementClass, Object[] array) {		Object[] result = (Object[]) Array.newInstance( elementClass, array.length );		System.arraycopy(array, 0, result, 0, array.length);		return result;	}*/"","too long.",0,0,0
"// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",675,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java
"//if there is no resulting row, return null","if ( !rs.next() ) {",1522,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// *load_1 // each type","addTypeDependDataLoad(code, finfo.getDescriptor(), 1);",268,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/bytecode/internal/javassist/FieldTransformer.java
"// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...","if (value.lt(1)) LOG.pooledOptimizerReportedInitialValue(value);",454,0.4574468085106383,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/id/enhanced/OptimizerFactory.java
"// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html","// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",108,0.46766169154228854,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/H2Dialect.java
"// The optional SQL string defined in the where attribute","private final String sqlWhereString;",172,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//pass this as an argument only to avoid double looking","SessionImplementor source) {",472,0.8440366972477065,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/AbstractSaveEventListener.java
"// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...","if ( prop.getGeneration() == PropertyGeneration.INSERT ) {",522,0.6238532110091743,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// added this caching as I noticed that getType() is being called multiple times...","None",None,None,None
"//information about lazy properties of this class","private final String[] lazyPropertyNames;",193,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// If there are any scalars (non-entities) selected, render the select column aliases.","renderScalarSelects( selectExpressions, fromClause );",236,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/SelectClause.java
"//information about all columns/formulas in class hierarchy","private final String[] subclassColumnClosure;",214,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public final class Subcriteria implements Criteria, Serializable {",436,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/CriteriaImpl.java
"// ( (Column) discrim.getColumnIterator().next() ).setType(type);","}",546,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","None",None,None,None
"// dynamic filters attached to the class-level","private final FilterHelper filterHelper;",225,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events","this.affectedOwner = session.getPersistenceContext().getLoadedCollectionOwnerOrNull( collection );",69,0.5989847715736041,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/action/internal/CollectionRemoveAction.java
"// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",1400,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java
"// assume we are in an auto-commit state","None",None,None,None
"// CUSTOM SQL","handleCustomSQL( node, entity );",709,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);","super.cascadeBeforeSave(source, persister, entity, copyCache);",210,0.44660194174757284,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultMergeEventListener.java
"// model.getKey().setType( new Type( model.getIdentifier() ) );",".getColumnIterator() );",360,0.4383561643835616,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/Collection.java
"// The syntax used to add a column to a table","return " add column";",437,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:","String[] aliasedLhsColumns = StringHelper.qualify(alias, lhsColumns);",669,0.6986301369863014,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/JoinWalker.java
"// Completely optional cascading drop clause.","return "";",442,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.","too long.",0,0,0
"// PROPERTIES","Iterator iter = node.elementIterator();",1000,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );","None",None,None,None
"// IDENTIFIER","identifierColumnSpan = persistentClass.getIdentifier().getColumnSpan();",520,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods","too long.",0,0,0
"// VERSION","bindVersioningProperty( table, subnode, mappings, name, entity, inheritedMetas );",389,0.6428571428571429,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//operations which cascade as far as the collection also cascade to collection elements",");",342,0.974025974025974,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/JoinWalker.java
"//WHERE STRING","sqlWhereString = StringHelper.isNotEmpty( persistentClass.getWhere() ) ? "( " + persistentClass.getWhere() + ") " : null;",552,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level","statementLogger.logStatement( query, FormatStyle.BASIC.getFormatter() );",159,0.47619047619047616,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/id/TableGenerator.java
"// SUBCLASS PROPERTY CLOSURE","ArrayList columns = new ArrayList();",649,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.","too long.",0,0,0
"//before add :-)","formnos[l] = -1;",708,0.5283018867924528,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization","None",None,None,None
"// Handle any filters applied to the class level","filterHelper = new FilterHelper( persistentClass.getFilters(), factory );",775,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case","None",None,None,None
"// only one-to-one is lazy fetched","return null;",1200,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// replicate does cascade to uninitialized collections","return getLoadedElementsIterator(session, collectionType, collection);",423,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/CascadingAction.java
"//note early exit here:","return initializeLazyPropertiesFromCache( fieldName, entity, session, entry, cacheEntry );",1230,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""/**	 * Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type.	 *	 * @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes)	 * @return a JoinFragment.XXX join type.	 * @see JoinFragment	 * @see SqlTokenTypes	 */"","too long.",0,0,0
"// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!","// was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried",1428,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//deliberately ignore return value!","resolvedJoinType = getJoinType( nullable, currentDepth );",199,0.5161290322580645,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/criteria/CriteriaJoinWalker.java
"//strip leading ", "","setText( text );",104,0.5964912280701754,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/MapEntryNode.java
"// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy","return persister.createProxy( id, this );",296,0.9069767441860465,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/StatelessSessionImpl.java
"// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.","// requiring a sub-query then generate a sub-query.",332,0.861878453038674,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/FromElementType.java
"//otherwise return the "hydrated" state (ie. associations are not resolved)","Type[] types = getPropertyTypes();",1526,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// The name of the SQL function that transforms a string to lowercase","return "lower";",640,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//null owner ok??","}",1532,0.30303030303030304,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...","too long.",0,0,0
"// automatically makes a column with the default name if none is specifed by XML","public static void bindSimpleValue(Element node, SimpleValue simpleValue, boolean isNullable,",1177,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// just ignore","}",145,0.42105263157894735,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/IdentNode.java
"// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor","throw new DetailedSemanticException( "Unable to locate appropriate constructor on class [" + className + "]", e );",185,0.813953488372093,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/ConstructorNode.java
"// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior","* We encountered a delete request on a transient instance.",177,0.6936416184971098,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultDeleteEventListener.java
"// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...","ps = session.getTransactionCoordinator()",1260,0.46153846153846156,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// if the property mapping consists of all formulas,  // make it non-updateable","return updateable && !ArrayHelper.isAllFalse( value.getColumnUpdateability() );",176,0.8,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/Property.java
"// the user specifically supplied insert="true", // which constitutes an illegal combo","throw new MappingException(",1305,0.7288135593220338,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// if the property mapping consists of all formulas,  // make it insertable","// make it non-updateable",176,0.8301886792452831,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/Property.java
"//it might be an unwrapped collection reference! //try to find a wrapper (slowish)","Iterator<PersistentCollection> wrappers = collectionEntries.keyIterator();",1088,0.75,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/StatefulPersistenceContext.java
"//Custom SQL","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",234,0.5238095238095238,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/test/java/org/hibernate/test/filter/DynamicFilterTest.java
"//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );","Table ownerTable = collection.getOwner().getTable();",1472,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// return","return c;",82,0.5517241379310345,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-proxool/src/main/java/org/hibernate/service/jdbc/connections/internal/ProxoolConnectionProvider.java
"// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);","//session.getPersistenceContext().removeDatabaseSnapshot(key);",142,0.31627906976744186,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultEvictEventListener.java
"//bad cast","}",93,0.1875,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/JoinHelper.java
""/*ArrayList list = new ArrayList();			list.addAll( getKey().getConstraintColumns() );			list.addAll( getIndex().getConstraintColumns() );			getCollectionTable().createUniqueKey(list);*/"","list.add(baz);",99,0.23645320197044334,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/test/java/org/hibernate/test/legacy/ParentChildTest.java
"//property-refs for associations defined on a //component are not supported, so no need to slice","return lhsPersister.getPropertyColumnNames(propertyName);",143,0.6557377049180327,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/JoinHelper.java
"// we have an embedded composite identifier","try {",405,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/PersistentClass.java
"//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)","return lhsPersister.getSubclassPropertyTableName(propertyIndex);",160,0.5032258064516129,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/JoinHelper.java
"//stops flush being called multiple times if this method is recursively called","try {",1266,0.8701298701298701,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/SessionImpl.java
"// Create a new FROM node for the referenced class.","String associatedEntityName = propertyType.getAssociatedEntityName();",394,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/DotNode.java
"// performance op to avoid the array search","return 0;",1989,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// now get an existing proxy for each row element (if there is one)","for ( int i = 0; i < entitySpan; i++ ) {",726,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"// ORPHAN DELETE (used for programmer error detection)","Attribute cascadeAtt = node.attribute( "cascade" );",1525,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// empty means no scoping","return dialectScopes.isEmpty() || dialectScopes.contains( dialect.getClass().getName() );",59,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/AbstractAuxiliaryDatabaseObject.java
"//Enable for HHH-440, which we don't like:","/*if ( type.isComponentType() && !propertyName.equals(rootPropertyName) ) {",1997,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"/*(LockMode) anything*/","None",None,None,None
"//this.forceCacheRefresh = forceCacheRefresh;","this.comment = comment;",186,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/QueryParameters.java
"// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set","CollectionPersister[] collectionPersisters = getCollectionPersisters();",1347,0.5137614678899083,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"// an "embedded" component (composite ids and unique) // note that this does not handle nested components","if ( component.getOwner().hasPojoRepresentation() ) {",1912,0.6814814814814815,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// and perform the load","None",None,None,None
"// ALIASES","internalInitSubclassPropertyAliasesMap( null, model.getSubclassPropertyClosureIterator() );",2202,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// cache these since they are stateless // this one could even be static...","private final BackrefSetter setter; // this one could even be static...",49,0.6947368421052632,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/property/BackrefPropertyAccessor.java
"// a nested composite element","bindComponent(",2000,0.5617977528089888,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//Must occur after resolving identifiers!","if ( session.isEventSource() ) {",171,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/TwoPhaseLoad.java
"// Get the persister for the _subclass_","final Loadable persister = (Loadable) getFactory().getEntityPersister( instanceEntityName );",1643,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"// aliases for composite-id's","if ( getIdentifierType().isComponentType() ) {",2217,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""//		SQLQueryParser parser = new SQLQueryParser( //				sqlQuery, //				processor.getAlias2Persister(), //				processor.getAlias2Return(), //				aliases, //				collAliases, //				collPersisters, //				suffixes, //				collSuffixes //		); // //		sql = parser.process(); // //		namedParameterBindPoints = parser.getNamedParameters();"","too long.",0,0,0
"// Fetch embedded identifiers propertynames from the "virtual" identifier component","CompositeType componentId = ( CompositeType ) getIdentifierType();",2219,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush","version = persister.getVersion( instance );",84,0.5226130653266332,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/action/internal/EntityDeleteAction.java
"// embedded composite ids ( alias.idname1, alias.idname2 )","subclassPropertyAliases.put( idPropertyNames[i], new String[] { idAliases[i] } );",2248,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections","WrapVisitor visitor = new WrapVisitor(session);",215,0.39183673469387753,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultFlushEntityEventListener.java
"// TODO: skip formulas?","l++;",2347,0.449438202247191,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",940,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java
"// invokeinterface // invoke Enabled.getInterceptFieldCallback()","code.addInvokeinterface( target_type_index, getterName, getter_desc, 1 );",211,0.44155844155844154,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/bytecode/internal/javassist/BulkAccessorFactory.java
"// hibernate seems to ignore this type...","registerColumnType( Types.BLOB, "BLOB" );",66,0.6140350877192983,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/TeradataDialect.java
"//don't need filters for the static loaders","uniqueKeyLoaders.put(",2391,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock","if ( entry.getStatus() != Status.MANAGED ) {",62,0.8661417322834646,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/AbstractLockUpgradeEventListener.java
"//do two passes, for collection property-ref!","initIdentifierPropertyPaths(mapping);",2472,0.6956521739130435,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""/*public boolean dropTemporaryTableAfterUse() {		//we have to, because postgres sets current tx		//to rollback only after a failed create table		return true;	}*/"","if (obj == null)",65,0.14102564102564102,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-ehcache/src/test/java/org/hibernate/test/domain/PhoneNumber.java
"// select the correct row by either pk or rowid","if ( useRowId ) {",2539,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""//			optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( //					mappedClass, getterNames, setterNames, propTypes //			);"","default:",109,0.1728395061728395,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-ehcache/src/main/java/org/hibernate/cache/ehcache/internal/strategy/EhcacheAccessStrategyFactoryImpl.java
"//TODO: eventually, rowIdName[j]","}",2541,0.5357142857142857,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//include the discriminator and class-level where, but not filters",".append( persister.filterFragment( getAlias(), Collections.EMPTY_MAP ) );",71,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/entity/EntityJoinWalker.java
"//lazy = !join;","fetchStyle = join ? FetchMode.JOIN : FetchMode.SELECT;",2093,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//not absolutely necessary, but helps for some //equals()/hashCode() implementations","if ( componentTuplizer.hasParentProperty() ) {",485,0.6896551724137931,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/ComponentType.java
"// this is a property of the table, which we are updating","update.addColumns( getPropertyColumnNames(i),",2551,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)","too long.",0,0,0
"// This should only be possible if the caches are constructor injected","None",None,None,None
"// transactions marked for rollback-only cause some TM impls to throw exceptions","None",None,None,None
"// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression","metadata.getServiceRegistry()",663,0.21568627450980393,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/SessionFactoryImpl.java
""// IMPL NOTE : due to the delayed population of setters (setters cached // 		for performance), we really cannot pro0perly define equality for // 		this transformer"","isNaturalKeyLookup = isLookupByNaturalKey;",160,0.1456953642384106,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/QueryParameters.java
"// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);",".getColumnIterator() );",355,0.22,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/Collection.java
"// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property","property = identifierProperty;",399,0.6164383561643836,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/PersistentClass.java
"// contained elements:","Iterator iter = node.elementIterator();",2533,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// for non-inverse one-to-many, with a not-null fk, add a backref!","String entityName = ( (OneToMany) collection.getElement() ).getReferencedEntityName();",2621,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//to stop the class from being unloaded","None",None,None,None
"// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).","if ( mappings.getClass( extendsName ) == null && mappings.getClass( getClassName( extendsName, mappings ) ) == null ) {",3158,0.6820809248554913,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// for objects that came in via update()","}",459,0.7096774193548387,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//use dialect default properties","final Properties properties = new Properties();",97,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/SettingsFactory.java
"// increment the version number (if necessary)","final Object nextVersion = getNextVersion(event);",287,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultFlushEntityEventListener.java
"// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default","settings.setRegionFactory( createRegionFactory( properties, ( useSecondLevelCache || useQueryCache ), serviceRegistry ) );",287,0.6633165829145728,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/SettingsFactory.java
"//information about all properties in class hierarchy","private final String[] subclassPropertyNameClosure;",199,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""//		String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); //		log.info( ""Bytecode provider name : "" + provider ); //		BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); //		settings.setBytecodeProvider( bytecodeProvider );"","too long.",0,0,0
"// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",1998,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java
"// we are using "all" or "dirty" property-based optimistic locking","boolean[] includeInWhere = entityMetamodel.getOptimisticLockStyle() == OptimisticLockStyle.ALL",2580,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// orphans should be deleted during save/update","return true;",267,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/CascadingAction.java
"// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment","Element discriminatorResult = returnElement.element("return-discriminator");",182,0.8125,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/ResultSetMappingBinder.java
"// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string","if ( StringHelper.isNotEmpty( s ) ) {",53,0.6741573033707865,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/JavaConstantNode.java
"// do a check","boolean hasOrphanDelete = loadedPersister != null && loadedPersister.hasOrphanDelete();",84,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/Collections.java
""//			sqlAliasSuffixes[i] = element.getColumnAliasSuffix();"","includeInSelect[i] = !element.isFetch();",176,0.9824561403508771,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
""//	void setShowSqlEnabled(boolean b) { //		showSql = b; //	} // //	void setFormatSqlEnabled(boolean b) { //		formatSql = b; //	}"","None",None,None,None
"//materialize associations (and initialize the object) later","hydratedObjects.add( object );",1612,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
""//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907"","private Interceptor interceptor;",223,0.9880952380952381,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/Configuration.java
"//fetch="join" overrides default laziness //fetch="join" overrides default laziness","None",None,None,None
"// drop them in reverse order in case db needs it done that way...","{",939,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/Configuration.java
"// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).","too long.",0,0,0
"// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context","if ( session.getFactory().getSettings().isIdentifierRollbackEnabled() ) {",89,0.5893719806763285,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/Collections.java
"// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)","resultRow = new Object[ columnProcessors.length ];",530,0.5287356321839081,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/custom/CustomLoader.java
""//	public ComponentTuplizerFactory getComponentTuplizerFactory() { //		return componentTuplizerFactory; //	}"","* Iterate the entity mappings",342,0.7544910179640718,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/Configuration.java
"// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...","if ( lockMode==LockMode.PESSIMISTIC_FORCE_INCREMENT) {",117,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/MckoiDialect.java
"// it is or was referenced _somewhere_","boolean ownerChanged = loadedPersister != currentPersister ||				// if either its role changed,",222,0.5378151260504201,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/Collections.java
"// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...","None",None,None,None
"// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here","protected abstract BytecodeProvider buildBytecodeProvider();",72,0.25,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/test/java/org/hibernate/test/instrument/runtime/AbstractTransformingClassLoaderInstrumentTestCase.java
"// the root of the incoming property path matched one // of the embedded composite identifier properties","property = identifierProperty;",409,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/mapping/PersistentClass.java
"// add normal properties","for ( int i = 0; i < entityMetamodel.getPropertySpan(); i++ ) {",2643,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private void writeObject(ObjectOutputStream oos) throws IOException {",370,0.971830985915493,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/context/internal/ThreadLocalSessionContext.java
"// add the discriminator","if ( j == 0 ) {",2655,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// handles arrays and newly instantiated collections","return collectionType.getElementsIterator(collection, session);",461,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/CascadingAction.java
"// if either its role changed,","!currentPersister",224,0.45871559633027525,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/Collections.java
"//noncritical, swallow and let the other propagate!","None",None,None,None
"// we will need to create new entries","}",248,0.6896551724137931,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/Collections.java
"// this piece is needed for usage in select clause","super.setDataType(propertyType);",289,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/IdentNode.java
"// no-op. We don't own the cache so we shouldn't stop it.","None",None,None,None
"// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself","private Map<Object,Object> copyToEntityMap = new IdentityHashMap<Object,Object>( 10 );",63,0.7085714285714285,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/EventCache.java
"// Get the names of the columns used to link between the collection // owner and the collection elements.","String[] keyColumnNames = persister.getKeyColumnNames();",334,0.7746478873239436,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/HqlSqlWalker.java
"//let's assume that there is only one lazy fetch group, for now!","return result;",102,0.8091603053435115,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/bytecode/instrumentation/spi/AbstractFieldInterceptor.java
"// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type","expectedType = getType() == HqlSqlTokenTypes.PLUS ? StandardBasicTypes.DOUBLE : rhType;",57,0.35789473684210527,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/BinaryArithmeticOperatorNode.java
"// don't even bother trying to read any further","return null;",559,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/Loader.java
"// prepend value and type list with null for any positions before the wanted position.","for ( int i = 0; i < position - size; i++ ) {",396,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/AbstractQueryImpl.java
"//+ "_" + referencedColumnName not used for backward compatibility","}",107,0.8226950354609929,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/ImprovedNamingStrategy.java
"// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",437,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/CascadingAction.java
"// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public static class BasicExpectation implements Expectation {",55,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/jdbc/Expectations.java
"// this property belongs on the table and is to be inserted","update.addColumns( getPropertyColumnNames(i),",2563,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// need to extract the component values and check for subtype replacements...","CompositeType componentType = ( CompositeType ) types[i];",249,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/TypeHelper.java
"// add the primary key","if ( j == 0 && identityInsert ) {",2660,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return","errorIfDML();",466,0.6127167630057804,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/QueryTranslatorImpl.java
""//		registerColumnType( Types.BLOB, 16777215, ""mediumblob"" ); //		registerColumnType( Types.BLOB, 65535, ""blob"" );"","None",None,None,None
"// delegate already handles PK columns","if ( getFactory().getSettings().isCommentsEnabled() ) {",2718,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//ie. e.status==DELETED","if ( LOG.isTraceEnabled() ) {",485,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/AbstractSaveEventListener.java
"// kept for backward compatibility until after the 3.1beta5 release of HA","// TODO: is this still needed?",52,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/NamedQueryDefinition.java
"// legacy behavior, apply the bridge...","None",None,None,None
"//if an exception occurs during flush, user must call rollback()","transactionCoordinator().getTransactionContext().managedFlush();",83,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/transaction/internal/jta/CMTTransaction.java
"// Turn off includeSubclasses on all FromElements.","FromClause from = getCurrentFromClause();",915,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/HqlSqlWalker.java
"// can't just return null here, since that would // cause an owning component to become null","return NOT_NULL_COLLECTION;",426,0.6896551724137931,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/type/CollectionType.java
"// the object is transient or detached","// the entity is not associated with the session, so",491,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/event/internal/AbstractSaveEventListener.java
"// Now update only the tables with dirty properties (and the table with the version number)","if ( tableUpdateNeeded[j] ) {",3444,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Render the SQL query","final PreparedStatement insert;",3033,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400","return "";",283,0.7338129496402878,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state","dehydrate( id, fields, null, notNull, propertyColumnInsertable, j, insert, session, index, false );",3052,0.6527196652719666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );","// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",208,0.47577092511013214,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"// TODO : shouldnt inserts be Expectations.NONE?","None",None,None,None
"//a proxy cannot be transient and it breaks ForeignKeys.isTransient","&& ForeignKeys.isTransient( childEntityName, child, null, session ) ) {",376,0.7763157894736842,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/CascadingAction.java
"//don't bother trying to update, we know there is no row there yet","isRowToUpdate = false;",3106,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// This is the root level node. // Generate an explicit from clause at the root.","None",None,None,None
"// CHECK","Attribute chNode = node.attribute( "check" );",361,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).","too long.",0,0,0
"//if all fields are null, we might need to delete existing row","isRowToUpdate = true;",3110,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//note: updates to joined tables can't be batched...","if ( useBatch && updateBatchKey == null ) {",3146,0.5660377358490566,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","registerFunction( "ascii", new StandardSQLFunction( "ascii", StandardBasicTypes.INTEGER ) );",145,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/H2Dialect.java
"// starting index","final PreparedStatement update;",3163,0.7317073170731707,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// object have been loaded with setReadOnly(true); HHH-2236","snapshot[ lazyPropertyNumbers[j] ] = lazyPropertyTypes[j].deepCopy( propValue, factory );",1344,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""/**	 * Build a ResultSetMappingDefinition given a containing element for the ""return-XXX"" elements	 *	 * @param resultSetElem The element containing the return definitions.	 * @param path No clue...	 * @param mappings The current processing state.	 * @return The description of the mappings...	 */"","too long.",0,0,0
""//	private List collectionOwnerAliases = new ArrayList(); //	private List collectionAliases = new ArrayList(); //	private List collectionPersisters = new ArrayList(); //	private List collectionResults = new ArrayList();"","List collectionOwners = new ArrayList();",115,0.33613445378151263,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/custom/CustomLoader.java
"// Write any appropriate versioning conditional parameters","if ( useVersion && entityMetamodel.getOptimisticLockStyle() == OptimisticLockStyle.VERSION ) {",3184,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//check if the detached object being merged is the parent","Object unmergedInstance = mergeMap.get( entityEntryInstance );",1307,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/StatefulPersistenceContext.java
"//Render the SQL query","final PreparedStatement insert;",3033,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// determine if the collection elements are entities...","Type elementType = persister.getElementType();",171,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/custom/CustomLoader.java
"// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued","getIdentifierType().nullSafeSet( delete, id, index, session );",3308,0.8042328042328042,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Let return-propertys override whatever the persister has for aliases.","columnAliases = ( String[] ) fieldResults.get(propertyName);",211,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryParser.java
"// We should use the _current_ object state (ie. after any updates that occurred during flush)","if ( useVersion ) {",3313,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// might need to run a different filter entirely after the flush // because the collection role may have changed","entry = persistenceContext.getCollectionEntryOrNull( collection );",1522,0.726027397260274,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/SessionImpl.java
"// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array","public Object[] toArray() {",353,0.7794117647058824,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/collection/internal/PersistentMap.java
"// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode","final LockOptions lockOptions = parameters.getLockOptions();",1103,0.5375,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/classic/QueryTranslatorImpl.java
""//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	  oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)"","final boolean[] tableUpdateNeeded = getTableUpdateNeeded( dirtyFields, hasDirtyCollection );",3388,0.615916955017301,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// loop through all the associations of the current entity and make sure that they are processed // before the current batch number","Object[] propertyValues = action.getState();",807,0.8465608465608465,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/ActionQueue.java
"// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private List embeddedParameters;",58,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/SqlFragment.java
"// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private final String[] propertyNames;",91,0.9420289855072463,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/tuple/entity/EntityMetamodel.java
"// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead","Object element = persister.readElement( rs, owner, descriptor.getSuffixedElementAliases(), getSession() ) ;",88,0.6708860759493671,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/collection/internal/PersistentBag.java
"/* COLUMN and TABLE should be renamed but it would break the public API */","/** The column parameter */",80,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/id/TableGenerator.java
"// For many-to-many joins, use the tablename from the queryable collection for the default text.","fromElement.setText( queryableCollection.getTableName() + " " + getTableAlias() );",284,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/FromElementType.java
"//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;","* Call setEntity() on a cacheable query - see FORGE-265",106,0.2,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-ehcache/src/test/java/org/hibernate/test/domain/EventManager.java
"// For the case of dynamic-update="true", we need to generate the UPDATE SQL","None",None,None,None
"// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public Object merge(String entityName, Object object) throws HibernateException {",894,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/SessionImpl.java
"// Default to collections sharing entity cache if there is one","None",None,None,None
"// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);","String[] columnNames,",690,0.18181818181818182,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/util/StringHelper.java
"// don't need to check laziness (dirty checking algorithm handles that)","updateStrings = new String[span];",3406,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""/*rootTableName = persistentClass.getRootTable().getQualifiedName( 				factory.getDialect(), 				factory.getDefaultCatalog(), 				factory.getDefaultSchema() 		);*/"","settings.getDefaultCatalogName(),",316,0.1511627906976744,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/SessionFactoryImpl.java
"// For the case of dynamic-update="false", or no snapshot, we use the static SQL","updateStrings = getUpdateStrings(",3435,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//abort the save (the object is already saved by a circular cascade)","return IdentifierGeneratorHelper.SHORT_CIRCUIT_INDICATOR;",130,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/id/ForeignGenerator.java
"// if not "get", then try "is"","if ( methodName.startsWith( "is" ) ) {",374,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/property/BasicPropertyAccessor.java
"// remove initial " and "",".toString();",60,0.4444444444444444,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/CollectionSubqueryFactory.java
"// Default to sharing the entity cache if there is one","None",None,None,None
"// we have the form: trim(trimSource) //      so we trim leading and trailing spaces","trimSource = ( String ) args.get( 0 );",56,0.6530612244897959,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/function/TrimFunctionTemplate.java
"// For the case of dynamic-insert="true", we need to generate the INSERT SQL","boolean[] notNull = getPropertiesToInsert( fields );",3468,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify","if ( object == self ) {",146,0.5398773006134969,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/internal/ForeignKeys.java
"//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases","private final String[] userAliases;",72,0.7236842105263158,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/criteria/CriteriaLoader.java
"// For the case of dynamic-insert="false", use the static SQL","id = insert( fields, getPropertyInsertability(), getSQLIdentityInsertString(), object, session );",3476,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins","whereString.append('('); //TODO: unnecessary for databases with ANSI-style joins",985,0.7351351351351352,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/JoinWalker.java
"//a shortcut if its location didn't change!","found = true;",192,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/collection/internal/PersistentBag.java
"//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations","private final static String C3P0_STYLE_MIN_POOL_SIZE = "c3p0.minPoolSize";",60,0.6754385964912281,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-c3p0/src/main/java/org/hibernate/service/jdbc/connections/internal/C3P0ConnectionProvider.java
"// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...","// Also need to check that the expected identifier type matches",358,0.4528301886792453,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/pretty/MessageHelper.java
"// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()","private transient boolean ignore;",74,0.7323943661971831,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/CollectionEntry.java
"// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private final SessionFactoryImplementor factory;",149,0.9705882352941176,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// new collections that get found + wrapped // during flush shouldn't be ignored","ignore = false;",86,0.6990291262135923,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/CollectionEntry.java
"// meant to handle dynamic instantiation queries...","HolderInstantiator holderInstantiator = buildHolderInstantiator( resultTransformer );",453,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)","snapshot = persister.isMutable() ?",90,0.8518518518518519,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/CollectionEntry.java
"// Always add the collection's query spaces.","}",96,0.5170068027210885,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/IdentNode.java
"//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.","registerColumnType( Types.VARBINARY, "blob($l)" );",61,0.42735042735042733,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/dialect/PointbaseDialect.java
"// detached collections that get found + reattached // during flush shouldn't be ignored","ignore = false;",87,0.5849056603773585,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/CollectionEntry.java
"// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.","Integer initialPoolSize = ConfigurationHelper.getInteger( C3P0_STYLE_INITIAL_POOL_SIZE, props );",187,0.7389162561576355,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-c3p0/src/main/java/org/hibernate/service/jdbc/connections/internal/C3P0ConnectionProvider.java
"// we need to utilize dynamic delete statements","deleteStrings = generateSQLDeletStrings( loadedState );",3527,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// otherwise, utilize the static delete statements","deleteStrings = getSQLDeleteStrings();",3531,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// intentionally empty","}",62,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/collection/internal/PersistentMap.java
""/*public boolean equals(Object other) {		read();		return bag.equals(other);	}	public int hashCode(Object other) {		read();		return bag.hashCode();	}*/"","if ( !(other instanceof Enrolment) ) return false;",52,0.37714285714285717,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/test/java/org/hibernate/test/readonly/Enrolment.java
"//final boolean forceCacheRefresh,","final String comment,",144,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/engine/spi/QueryParameters.java
"//just a performance opt!","createJoin( alias, innerJoin, includeSubclasses ).toFromFragmentString();",3631,0.9361702127659575,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.","too long.",0,0,0
"// used to set the type of the parent dot node","String propertyPath = getText() + "." + getNextSibling().getText();",251,0.7659574468085106,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/IdentNode.java
"//all joins join to the pk of the driving table","final JoinFragment join = getFactory().getDialect().createOuterJoinFragment();",3646,0.5066666666666667,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type","too long.",0,0,0
"//notice that we skip the first table; it is the driving table!","final boolean joinIsIncluded = isClassOrSuperclassTable( j ) ||",3649,0.7878787878787878,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// aliases named identifier ( alias.idname )","if ( hasIdentifierProperty() ) {",2211,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//skip the driving table","final int j = tableNumbers[i];",3669,0.525,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","@Override",103,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/internal/StatelessSessionImpl.java
"//get 'em in the right order (not that it really matters)","//render the where and from parts",3725,0.7833333333333333,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//NOTE EARLY EXIT!","}",217,0.5245901639344263,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/action/internal/UnresolvedEntityInsertActions.java
"// trying via forName() first to be as close to DriverManager's semantics","driver = (Driver) Class.forName( driverClassName ).newInstance();",120,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/hibernate-core/src/main/java/org/hibernate/service/jdbc/connections/internal/DriverManagerConnectionProviderImpl.java
