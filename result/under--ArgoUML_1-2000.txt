Iterator it = getPathItemFigs().iterator();
if (settings == null) {
return new SelectionRerouteEdge(this);
LOG.error("Exception", e);
File theFile = new File(saveDir, defaultName + "."
return handle instanceof Component
return String.class;
// forceRepaintShadow();
private static PopupToolBoxButton buildPopupToolBoxButton(Object[] actions,
too long.
void nodeAdded(Object source, Object arg);
setGraphModel(createGraphModel());
if (value instanceof Collection) {
private CollabDiagramGraphModel createGraphModel() {
return Collections.emptyList();
return Collections.EMPTY_SET;
Stereotype stereo2 = (Stereotype) extensionHelper.getStereotype(ns,
too long.
extent.refDelete();
public TargetManagerPanel() {
long startTime = System.currentTimeMillis();
private void translateWithContents(int dx) {
if (contained(nsa, me)) {
try {
/* 4.5.2.18 ElementOwnership */
/* This solves issue 2287. */
damage();
Usage usage = createUsage();
public List<String> getSearchPathList();
addTrigger("end_navigable");
tree.expandPath(tree.getPathForRow(1));
public class CrOppEndConflict extends CrUML {
if (c == null) {
p.addMember(model);
too long.
LOG.error("Error registering profile " + p.getDisplayName());
too long.
val = new ArrayList<String>();
public StereotypeStyle getDefaultStereotypeView() {
if (target instanceof FigEdgeModelElement) {
Project p = ProjectManager.getManager().getCurrentProject();
public void remove();
if (UndoManager.getInstance().isGenerateMementos()) {
FigRect fr = new FigRect(X0, Y0, 160, 200, DEBUG_COLOR, DEBUG_COLOR);
too long.
int threshold = getThreshold();
// self associations are special cases. No need to let the maze
* @param threshold The threshold to compare to.
/**
private static Object findNamespace(Object phantomNS, Object targetModel) {
if (Model.getFacade().isASignal(value)) {
too long.
private volatile ListSet allOffenders;
Class<?>[] interfaces = expression.getClass().getInterfaces();
public ListSet getOffenders() {
public interface ControlMech  {
* @param o the given object
LOG.debug("single: "
tagValue = "";
// TODO: Do nothing until code is reviewed
too long.
{Abstraction.class, UmlClass.class, Interface.class, null, },
return null;
return Property.class;
boolean bContinue = true;
PersistenceManager.getInstance()
private JPopupMenu popupMenu;
int serial = getDiagramCount();
too long.
Object temp[] = node.getActualParameterListTail().toArray();
if (uri == null) {
too long.
InputSource source =
too long.
protected void updateBounds() {
minimumHeight = headFig.getMinimumHeight() + 10;
return results;
* @see org.xml.sax.ContentHandler#characters(char[], int, int)
return handle instanceof Property
panel.registerKeyboardAction(shortcut.getActionInstance(),
if (!(handle instanceof InstanceSpecification)) {
public void remove() {
Project project = getProject();
private static final int MAX_ROW_WIDTH = 1200;
for (Object stereotype
LOG.debug("single: "
if (bodies.size() > 1) {
// Why does the text get added to ALL the elements on the stack? - tfm
setForeground(Color.blue);
popUpActions.addElement(
//   public void setGoalInfo(String goal, String info) {
long critiqueStartTime;
critiquerThread = new Thread(this, "CritiquingThread");
too long.
((ArgoDiagram) diagram).setDiagramSettings(getDiagramSettings());
public void vetoableChange(PropertyChangeEvent pce) {
/**
private UndoManager undoManager = new DefaultUndoManager(this);
if ((node instanceof ToDoItem) && !flatChildren.contains(node)) {
//        uri = PersistenceManager.getInstance().fixUriExtension(theProjectUri);
Object ep =
getClass().getResource(modelPath).toExternalForm());
if (true) {
* @param overwrite if true, the file is going to be overwritten
if (o instanceof CompositeState) {
if (feature.equals("clientDependency")) {
if ((res.width + res.x) > 6000) {
critique =
getNameFig().setLineWidth(0);
private ActionSettings settingsAction;
if (type == UMLClassDiagram.class) {
if (myName == null || myName.equals("")) {
// GenericArgoMenuBar, but should  be fixed if project open/close is moved
return (parFlavor.getMimeType().equals(
addAllUniqueModelElementsFrom(availableTagDefs, paths,
showUml2warning = false;
if (modelImpl.getFacade().isAPackage(ns)) {
performCommandsInternal(commands);
System.setProperty(
Rectangle bounds = new Rectangle(
too long.
protected void applyArrowHeads() {
nameFig.setFilled(true);
if (showUml2warning
public class UMLStimulusActionTextProperty  {
if (Model.getFacade().isAClassifierRole(element)) {
* @see junit.framework.TestCase#setUp()
void deleteEnumeration(Object elem) {
if (Model.getFacade().getUmlVersion().charAt(0) == '1') {
// TODO: Must be the incoming messages or the sent ones?
too long.
public Object createAbstraction();
f.setTitle(Translator.localize(title));
*            the Class or null
*            the Class or null
if (!(client instanceof TemplateableElement)) {
return false;
* Collects all the packages participating in a package dependency cycle
too long.
org.tigris.gef.util.ResourceLoader.addResourceExtension("gif");
*            the Class or null
throw new NotYetImplementedException();
return "2.2"; //$NON-NLS-1$
LOG.warn("Not yet implemented - returning empty");
operation.setName("newOperation");
Collection<Classifier> listToRemove = new ArrayList<Classifier>();
too long.
public ListSet getOffenders() {
try {
if (metatypeName.equals(mofClass.getName())) {
too long.
names[i++] = mofClass.getName();
modelImpl.getExtensionMechanismsFactory().buildStereotype(per,
if (elem instanceof Element) {
public Object getDefaultAttributeType();
synchronized (lock) {
getCore().deleteEnumeration(elem);
// 4.5.3.20 [2] No GeneralizableElement can have a parent
// Create add and remove buttons if needed first
SwingUIFactory builder = new SwingUIFactory();
public void refresh() { setTarget(target); }
synchronized (items) {
too long.
TabToDo ttd =
Localizer.addResource("GefBase",
*            The stereotype to copy from.
Localizer.addResource("GefBase",
public static Locale[] getLocales() {
public Object getDefaultAttributeType();
too long.
evt = sMFactory.buildTimeEvent(s, ns);
too long.
too long.
return Component.class;
too long.
too long.
too long.
too long.
private void computeExtensionLocations() {
too long.
addModelInternal(theRoot);
LOG.debug("Deleting last diagram - creating new default diag");
public NotationSettings() {
String tagName = Facade.DERIVED_TAG;
}
too long.
}
attributeSpecialStrings[assPos++] =
ZipEntry zipEntry =
if (majval <= 0) {
too long.
if (expr != null) {
too long.
public class CrConsiderFacade extends CrUML {
// forceRepaintShadow();
throw new XmiFormatException(ex);
too long.
too long.
too long.
String name = attrList.getValue("name");
private void addTranslations() {
/**
private void setStyleAttributes(Fig fig, Map<String, String> attributeMap) {
Editor editor = Globals.curEditor();
Diagram d = super.readDiagram(is, closeStream);
too long.
Object parameters[] = new Object[2];
too long.
public final class ModeInspectorPanel extends JPanel implements ModeChangeListener {
for (Class clazz : persistersByClass.keySet()) {
too long.
too long.
loadModel();
if (str.equals("Class")) {
private List<CrOCL> getAllCritiquesInModel() {
for (Object object : packages) {
throw new RuntimeException();
CoreProfileReference.setProfileDirectory("uml22");
if (subject == null) {
List<String> vars = (ArrayList<String>) parameters[0];
too long.
throw new UnsupportedFlavorException(dataFlavor);
UndoManager.getInstance().empty();
// solution for the fill color, better find a more general solution:
ArgoDiagram activeDiagram = DiagramUtils.getActiveDiagram();
Object newNode = Model.getUmlFactory().buildNode(getArg("className"));
too long.
too long.
private void loadTabs(String direction) {
return TemplateParameterSubstitution.class;
too long.
too long.
private DetailsPane northEastPane;
saveAction = new ActionSaveProject();
private Font defaultFont = new Font("Dialog", Font.PLAIN, 10);
too long.
too long.
too long.
too long.
too long.
GenericArgoMenuBar menu = (GenericArgoMenuBar) getJMenuBar();
too long.
if (Model.getFacade().getUmlVersion().charAt(0) == '1') {
abstract class UMLIncludeListModel extends UMLModelElementListModel {
too long.
if (target instanceof PathContainer) {
too long.
if (result.startsWith("Uml")) {
public static void jumpToDiagramShowing(List targets) {
ArrayList<ModeFactory> modeFactories = new ArrayList<ModeFactory>();
if (myMap instanceof HashMap) {
putDefaultShortcut(ACTION_AUTO_CRITIQUE, null,
too long.
* @param tagName
this.add(new ActionDeleteModelElements());
public void addFileSaved(String filename) {
if (!multiSelect) {
this.add(new ActionDeleteModelElements());
too long.
Model.getPump().addClassModelEventListener(this,
private static final UUIDManager INSTANCE = new UUIDManager();
if (!Model.getFacade().isATransition(mee.getNewValue())) {
packagePerspective.addRule(new GoOperationToCollaboration());
treeModel.modelElementChanged(event.getSource());
if (Model.getFacade().isAPackage(o)) {
* MVW: These are the WFRs for DataType:
Collection<Object> newTargets = new ArrayList<Object>();
String className = getClass().getName();
too long.
public void setThreshold(int threshold) {
public class CrOppEndVsAttr extends CrUML {
if (Model.getFacade().isAGeneralization(name1Object)) {
if (Model.getFacade().isAStateMachine(o)) {
too long.
factories.put(type, factory);
String getName(Object handle);
getLayer().getGraphModel().removeGraphEventListener(getLayer());
Project p = ProjectManager.getManager().getCurrentProject();
if (!(UndoManager.getInstance() instanceof DiagramUndoManager)) {
setBigPort(new FigEmptyRect(r.x, r.y, r.width, r.height));
public class FigClassAssociationClass extends FigClass {
setLineColor(LINE_COLOR);
Editor curEditor = Globals.curEditor();
too long.
too long.
Model.getCoreHelper().setMultiplicity(target, item);
public Object makeNode() {
if (Model.getFacade().isAModel(node)) {
updateFields();
GridBagConstraints c = new GridBagConstraints();
typeInstanceValueList.addActionListener(new ActionListener() {
if ((mee.getPropertyName().equals("incoming")
private Object target;
private JTextArea stringField;
if (!Model.getFacade().isATransition(mee.getNewValue())) {
if ("name".equals(fieldName)) {
private boolean notifyModel;
if (!contains(o)) {
too long.
updateStereotypeText();
// TODO: We need the property panels to have some reference to the
too long.
f = oper;
public Collection<StateVertex> getAllPossibleSubvertices(Object oState) {
doCopyNamespace(source, target);
Rectangle drawingArea =
ownedElements.addAll(((Namespace) elem).getOwnedElement());
if (parent.isLeaf()) {
if (arguments != null) {
return usage;
Set<ModelElement> results = new HashSet<ModelElement>(2000);
if (isCompartmentVisible(Model.getMetaTypes().getAttribute())) {
private void setNewTrigger(Transition transition, Event event) {
too long.
too long.
final Set<ModelElement> dupCheck =
too long.
too long.
too long.
layoutedObjects.add(obj);
LOG.error("Property '" + attribute
private Collection<String> getSubtypes(ModelPackage extent,
// We're looking at focus change to
|| Thread.currentThread().equals(eventThread)) {
if (base != null && !getAllPossibleBases(role).contains(base)) {
return getInnerContainingModel(
too long.
too long.
// Set up reader to be first filter in chain
public Object createMultiplicity(int lower, int upper) {
too long.
private Map<Resource, Boolean> readOnlyMap =
too long.
if (!(classifier instanceof Classifier)) {
too long.
Element result = ((Element) handle).getModel();
EList<Class> eList = ((Stereotype) handle).getExtendedMetaclasses();
return Collections.emptySet();
too long.
for (Property p : ((Classifier) handle).getAttributes()) {
return o instanceof State && ((State) o).getOwner() == null;
* TODO We should loop round the compartments to build this string. That
too long.
too long.
too long.
too long.
too long.
too long.
too long.
public void populate() {
for (Object f : getFigs()) {
return Collections.emptySet();
too long.
newH = Math.max(minNameHeight + 2 * getLineWidth(), newH);
too long.
*            the Class or null
public Object createAbstraction();
too long.
Iterator it = getPathItemFigs().iterator();
too long.
too long.
public Object createAbstraction();
too long.
public Object createAbstraction();
public final class ModeInspectorPanel extends JPanel implements ModeChangeListener {
too long.
too long.
too long.
DiagramFactory.getInstance().registerDiagramFactory(
ToDoList tdList = Designer.theDesigner().getToDoList();
protected boolean invisibleAllowed = false;
// used to process PGML.tee forces this to be public. I don't understand why.
too long.
setName(unnamed1, null);
LayerPerspective lp = (LayerPerspective) getLayer();
too long.
too long.
too long.
// Because UML 1.4 & 2.1 metamodels are organized differently we need
// Instead that subsystem should register its desired menus and actions.
too long.
ToDoItem item = hitClarifier(me.getX(), me.getY());
@Override
public void setUnderline(boolean u) {
int iconX = getX();
{"org.argouml.persistence", "org.argouml.ui"},
too long.
Method m = obj.getClass().getMethod("getItemUID", (Class[]) null);
return r.getURIFragment((EObject) element);
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
too long.
too long.
too long.
protected void setSuppressCalcBounds(boolean scb) {
if (titleLabel != null) {
@Override
too long.
me.consume();
public class SystemInfoDialog extends ArgoDialog {
too long.
too long.
return ProjectManager.getManager().getCurrentProject();
too long.
TableColumn elemCol = srcPathTable.getColumnModel().getColumn(0);
super.setLineColor(LINE_COLOR);
for (Fig f : (List<Fig>) getPathItemFigs()) {
if (Model.getFacade().isANamedElement(own)) {
too long.
* org.argouml.uml.ui.behavior.common_behavior.
if (delegate instanceof FigNodeModelElement) {
too long.
too long.
class UMLStubStateComboBoxModel extends UMLComboBoxModel {
too long.
ExplorerEventAdaptor.getInstance().structureChanged();
too long.
* Construct a new critic instance.  Typically only one instance of
if (getOwner() == null) {
if (getStereotypeFig().isVisible()) {
too long.
if (middleGroup != null) {
TargetManager.getInstance().addTargetListener(this);
Rectangle drawingArea =
too long.
* call to setSelectedItem() outside the "buildingModel",
* call to setSelectedItem() outside the "buildingModel", otherwise
too long.
LOG.info("user pressed cancel");
too long.
// We're looking at focus change to
return super.getListCellRendererComponent(list, text, index,
return ((target instanceof Diagram || Model.getFacade().isAUMLElement(
too long.
too long.
|| target instanceof Critic)) {
/**
* @param newNode this is the new node that one of the ends is dragged to.
too long.
too long.
public void setUnderline(boolean u) {
too long.
if (target instanceof FigEdge) {
public class TabTaggedValuesModel extends AbstractTableModel implements
diagramClasses.put(DiagramType.Class, UMLClassDiagram.class);
ArgoDiagram diagram = createDiagram(ns, settings);
too long.
* @see org.tigris.gef.graph.MutableGraphModel#connect(
setExpandOnly(true);
too long.
too long.
too long.
aValue = "";
private void setStyleAttributes(Fig fig, Map<String, String> attributeMap) {
too long.
too long.
too long.
ExplorerEventAdaptor.getInstance().modelElementAdded(
if (Model.getFacade().isAClassifier(o)) {
if (Model.getFacade().isAStateMachine(o)) {
if (Model.getFacade().isAUMLElement(o)) {
boolean changed = false;
ProjectManager.CURRENT_PROJECT_PROPERTY_NAME)
* @param tagName
Project p = ProjectManager.getManager().getCurrentProject();
Action action =
dontTest.add("Permission");
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
class SimpleStateTransformer implements Transformer {
duplicate.put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, DEFAULT_MASK),
Project project = ProjectManager.getManager().getCurrentProject();
too long.
too long.
elementName.getEditor()
* @since Jan 3, 2003
private boolean isDeleteEventRequired(
eastPane  =
"org.netbeans.mdr",
too long.
public TargetManagerPanel() {
// convinced ourselves that everything with a getItemUID method
Object name = null;
Method m = obj.getClass().getMethod("getUUID", (Class[]) null);
public static void setProfileDirectory(String dir) {
String filename = modelFile.getName();
private static boolean registerPersister(Class target, String tag,
too long.
too long.
* @since Jan 3, 2003
too long.
stereotypesView.addRadioItem(new ActionStereotypeViewTextual(this));
if (Notation.findNotation(newLanguage) == null) {
private final List<ProjectMember> members = new MemberList();
too long.
too long.
too long.
public boolean getShowStereotypesValue() {
* @throws DOMException
too long.
private static final String UML_PATH_PREFIX;
if (!"1.4".equals(Model.getFacade().getUmlVersion())) {
* @since 0.17.3
too long.
too long.
too long.
((ToDoPane) ProjectBrowser.getInstance().getTodoPane())
too long.
if (lastPanel != null) {
LOG.debug("single: "
too long.
too long.
if (Configuration.getBoolean(getCriticKey(), true)) {
too long.
too long.
class CurDecisionCM implements ControlMech {
too long.
public Object getDefaultAttributeType();
* commented out next piece to remove failure of testcase. The testcase
private Set<ResolvedCritic> resolvedItems;
final FigGroup group = (FigGroup) getGroup();
private void setNewTrigger(Transition transition, Event event) {
public int getEventEndRange() {
private void setNewTrigger(Transition transition, Event event) {
private void populateClassMaps(
private static boolean showUml2warning = true;
too long.
firePropChange("text", oldText, s);
}
public void setUnderline(boolean u) {
protected void positionChildren() {
LayerPerspective lp = (LayerPerspective) getLayer();
@Override
public class TestSequenceDiagramModule extends TestCase {
FigPoly poly = (FigPoly) returnEdge.getFig();
points[i].y = fe.getFirstPoint().y + DEFAULT_ACTIVATION_HEIGHT;
+ nameFig.getMinimumHeight() + 4;
public class TestSequenceDiagramModule extends TestCase {
notationSettings.setShowSequenceNumbers(true);
too long.
too long.
public Object createAbstraction();
Rectangle r = new Rectangle(center.x - (size.width / 2),
too long.
public Object createAbstraction();
public Object createAbstraction();
too long.
too long.
public Object createAbstraction();
too long.
void deleteEnumeration(Object elem) {
too long.
public Object createAbstraction();
public Object createAbstraction();
public Object createAbstraction();
public Object createAbstraction();
too long.
public class ActionAddTopLevelPackage extends UndoableAction {
public Object createAbstraction();
public Object createAbstraction();
public Object createAbstraction();
public Object createAbstraction();
void deleteEnumeration(Object elem) {
too long.
public Object createAbstraction();
public Object createAbstraction();
public Object createAbstraction();
too long.
void deleteEnumeration(Object elem) {
if (!figList.equals(graph.selectedFigs())) {
public Object createAbstraction();
public Object createAbstraction();
too long.
*            the Class or null
too long.
too long.
version = ApplicationVersion.getVersion();
too long.
throw new NotImplementedException();
// If we don't have a fig for this UML object, we'll need to add
ModelCommandCreationObserver mco = getModelCommandCreationObserver();
too long.
too long.
class SimpleStateTransformer implements Transformer {
too long.
return Collections.EMPTY_SET;
return State.class;
protected static final Logger LOG = Logger
if ("typedParameter".equals(name)) {
if (!(handle instanceof Collaboration)) {
too long.
return null;
return handle instanceof Element;
try {
instanceof org.omg.uml.behavioralelements.commonbehavior.Object;
return false;
return handle instanceof MultiplicityElement;
return AggregationKind.SHARED_LITERAL.equals(((Property) handle)
return false;
return false;
return true;
private AdapterFactoryEditingDomain editingDomain;
addOwnedElement(container, handle);
if (from == null || to == null) {
return handle instanceof Signal;
if (!(element instanceof Classifier)) {
if (sel instanceof SelectionClass) {
too long.
if (!(o instanceof BehavioralFeature)) {
//       Update for UML 1.4 metamodel if not replaced by reflection
throw new NotImplementedException();
if (!(bexpr instanceof ValueSpecification)) {
editingDomain = new UML2AdapterFactoryEditingDomain(
private void initializeEditingDomain() {
public void deleteCollection(Collection col) {
Iterator it = modelImpl.getCoreHelper().getSupertypes(object)
Iterator<Package> iter = ((Profile) ns).getNestedPackages()
for (Stereotype o : getStereotypes(model)) {
too long.
public boolean isContainmentValid(Object metaType, Object container) {
if (isATransition(handle)) {
updateCompartment(Model.getMetaTypes().getAttribute());
if (rootModel != null
RunnableClass run = new RunnableClass() {
@Deprecated
too long.
Project p = ProjectManager.getManager().getCurrentProject();
public Object getExitPoint() {
too long.
too long.
File tmpFile = File.createTempFile(TEMP_XMI_FILE_PREFIX, ".xmi");
too long.
if (classifier != null) {
allEnds = new ArrayList<AssociationEnd>(allEnds);
((Reception) reception).setSignal(null);
Stereotype stereo =
modelUrl = getValidURL(fixupURL(systemId));
public Object getStereotype(Object ns, Object stereo) {
Iterator it =
final String suffix = getSuffix(systemId);
// removing everything and adding it again. - tfm
((TagDefinition) handle).setTagType(tagType);
Include theInclude = ((Include) extend);
if (ref == null) {
LOG.error("Failed to resolve " + docId + "#" + xmiId );
return getUpper(ranges.get(ranges.size() - 1));
if (modelUrl == null) {
reverseUrlMap.put(modelUrl.toString(), relativeUri);
if (modelUrl == null) {
return ((ClassifierRole) handle).getBase();
for (ElementImport ei : ((UmlPackage) pack).getElementImport()) {
return Collections.unmodifiableCollection(
return ((ElementImport) handle).getImportedElement();
public Object getContainer(Object handle) {
return ((EnumerationLiteral) value).getName();
Object value;
} catch (InvalidObjectException e) {
too long.
too long.
private void registerClassEvent(PropertyChangeListener listener,
StringBuffer result = new StringBuffer();
LOG.warn("Can't handled TaggedValue.dataValues which "
decrementEvents();
if (LOG.isDebugEnabled()) {
too long.
too long.
private static final Class<?>[][] VALID_CONNECTIONS = {
mclassifier.getFeature().clear();
too long.
permission, ModelManagementHelper.ACCESS_STEREOTYPE)
if ("1_N".equals(sarg)) {
private Collection internalGetAllRealizedInterfaces(Object o,
if (handle instanceof ModelElement
if (kindType.equals("composite")) {
ret = new ArrayList(ret);
for (Iterator i = allOfType.iterator(); i.hasNext();) {
Set<ModelElement> allContents = new HashSet<ModelElement>(2000);
too long.
if (!(child1 instanceof GeneralizableElement
too long.
}
too long.
if (container != null
target.setMultiplicity(getMultiplicity11());
too long.
too long.
too long.
if ("name".equals(fieldName)) {
too long.
public void changedUpdate(final DocumentEvent p1) {
too long.
JPanel p = new JPanel();
too long.
too long.
private Component scrollPane;
valueExists = new JCheckBox();
if (Model.getFacade().getUmlVersion().charAt(0) != '1') {
@Override
//	    if (Model.getFacade().isALiteralBoolean(sType)) {
public void changedUpdate(DocumentEvent arg0) {
* When display to user, we only show one body. A "..." button is enabled for
too long.
super("type", modelElement.getClass(),
too long.
for (Object importedElem : Model.getModelManagementHelper()
KeyboardFocusManager focusManager =
if (Model.getUmlHelper().isMovable(metaType)) {
if (language != null && language.length() > 0) {
return null;
public class CompoundCritic extends Critic {
return name.hashCode();
report =
private DiagramSettings settings;
too long.
LOG.warn("Configuration not loaded from " + propertyLocation, ioe);
too long.
showBoldName = getSettings().isShowBoldNames();
GUI.getInstance().addSettingsTab(tab);
throw new NotYetImplementedException();
// org.argouml.model.XmiException: Unknown element in XMI file : Model
throw new NotYetImplementedException();
return handler;
if (input.getSystemId() == null) {
* Show the description of a todo item.
String id = inputSource.getPublicId();
for (ToDoItem item : tde.getToDoItemList()) {
too long.
comp.setEnabled(false);
JLabel image = new JLabel("");
detailsPanel.add(new JLabel(""), labelConstraints);
node.getLetExpressionTypeDeclaration().apply(this);
* @since Jan 3, 2003
return ep;
return ProjectManager.getManager().isSaveActionEnabled();
}
CommentEdge ce = (CommentEdge) obj;
private boolean creatingCurrentProject;
private static String formatCountLabel(int size) {
too long.
}
if (currentProject == oldProject) {
return figNode;
firePropertyChanged(OPEN_PROJECTS_PROPERTY,
add(tools);
List<String> path = new ArrayList<String>();
if (isReception) {
LOG.error("Exception caught", e);
return modelImpl.getCoreHelper().getSource(relationship);
if (Model.getFacade().isAModel(obj)) {
String extForm = getClass().getResource(Argo.ARGOINI).toExternalForm();
//        return dirty;
too long.
too long.
if (argoRoot.startsWith(JAR_PREFIX)) {
if ( Model.getFacade().getUmlVersion().charAt(0) == '1') {
}
private static final String DEFAULT_NOTATION_NAME = "UML";
public TargetManagerPanel() {
private static NotationSettings initializeDefaultSettings() {
}
}
//        try {
too long.
private boolean showTypes;
//                Model.getExtensionMechanismsFactory().buildTaggedValue(
* Parse a string representing an extension point and return a new extension
Project project =
static {
/**
g = Model.getStateMachinesFactory().createGuard();
new TransitionNotationUml(t).parseTransition(t, line);
s.append((new TransitionNotationUml(trans)).toString(trans,
}
if (me == null || !(Model.getFacade().isAModelElement(me))) {
result.append(name).append(separator);
too long.
return NO_PROBLEM;
PGMLStackParser parser = new PGMLStackParser(project.getUUIDRefs(),
break;
GridBagLayout gb = new GridBagLayout();
private static final String[] FONT_NAMES = {
String varName = vars.get(0);
node.getPathName().apply(this);
List<File> profileFiles = UserDefinedProfileHelper.getFileList(
if (entry != null) {
}
val = (int) Double.parseDouble(node.getReal().getText());
node.getQualifiers().apply(this);
node.getDeclaratorTypeDeclaration().apply(this);
public class StylePanelFigText extends StylePanelFig {
// these operations are ok for lists too
setTarget(e.getNewTarget());
// Additional Operation 4.5.3.3 [1]
if (feature.equals("sum")) {
/* 4.5.2.3 Association */
} else if (sym.equals("OclExpression")) {
if (feature.equals("namespace")) {
return new HashSet<Object>(Model.getFacade()
if (feature.toString().trim().equals("oclIsKindOf")
if (!("namespace".equals(event.getPropertyName()))) {
ArgoEventPump.fireEvent(new ArgoStatusEvent(
List res = new ArrayList();
lineField.setSelectedItem(c);
if (feature.equals("supplierDependency")) {
sel = Model.getFacade().getModelElementContainer(sel);
putDefaultShortcut(ACTION_REORDER_FORWARD, KeyStroke.getKeyStroke(
}
updateStats();
tabs.addTab(
final AbstractAction rememberedSaveAction = this.saveAction;
perspectiveList.requestFocus();
Globals.showStatus(Translator.localize("action.setting-size",
textArea = new JEditorPane();
if (language != null && language.length() > 0) {
too long.
LOG.error("Exception", e);
removeTargetListener((TargetListener) tab);
too long.
Collection str = Model.getFacade().getFeatures(dm);
/* If the destination is not a NameSpace, then abort: */
too long.
}
LOG.error("Explorer caught exception ", e);
public void propertyChange(PropertyChangeEvent evt) {
LOG.error(this.getClass().toString() + ": getSourcePort("
return handle instanceof Action
if (conns == null || conns.size() != 2) {
renderingChanged();
p.destroy();
too long.
public class UMLActivityDiagram extends UMLDiagram implements ActivityDiagram {
addTrigger("end_navigable");
return popUpActions;
//      if (Model.getFacade().isAOperation(base)
Object newRegion = mee.getNewValue();
if (mee instanceof AssociationChangeEvent
too long.
renderingChanged();
cl = new Checklist();
}
* relocate() has been implemented. */
* @param c the Classifier. If this is not a Classifier, then
// Status as of Nov. 2008 - Figs created, property panels exist, more
int iconX = getX();
private static final String EVENT_NAME = "ownerScope";
getGroup().calcBounds();
updateOwnerScope(Model.getScopeKind().getClassifier().equals(
if (aboveAndRight) {
LOG.debug("Attempted to populate a FigEditableCompartment"
getFig().setLineColor(Color.red);
stereotypeStyle = getSettings().getDefaultStereotypeView();
return /*"unnamed " + */ getLabelName();
setNamespace(ns);
ce.getLayerManager().getActiveLayer().calcDrawingArea();
if (!Arrays.asList(getComponents()).contains(toolbar)) {
point.x = elemFig.getX() + elemFig.getWidth() + DISTANCE;
firePropChange("pathVisible", !visible, visible);
Iterator it = delegate.iterator();
setText();
too long.
private Set<Object[]> listeners = new HashSet<Object[]>();
too long.
too long.
too long.
return Collections.EMPTY_SET;
if (element instanceof Classifier) {
/** Default X offset of origin used when building figs */
instructions =
.getRoot());
getStereotypeFig().setVisible(true);
too long.
too long.
*            the model element to query for connections
too long.
JTextField text = new JTextField(ps.getDefaultPath());
getConfigPanel();
}
private String getQualifiedName(Object element) {
return null /*ActionSequence.class*/;
private List objects = new LinkedList();
too long.
JOptionPane.showMessageDialog(
add(controlsPanel, BorderLayout.SOUTH);
project.addMember(mmodel);
too long.
inAListExpressionListOrRangeTail(node);
fireContentsChanged(this, 0, size - 1);
// probably the TabText should only show an empty pane in that case
too long.
removeTargetListener((TargetListener) lastPanel);
//Parser.ParseAndUpdate(modelObject, s);
if (isFiring() && !newValue.equals(getProperty())) {
Project p = ProjectManager.getManager().getCurrentProject();
Class targetClass = targetItem.getClass();
too long.
}
super(Translator.localize("label.static"),
* @see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)
* @see org.argouml.model.DataTypesHelper#getValueSpecificationValues(java.lang.Object)
}
too long.
}
too long.
updateEdges();
private static String[] allModelElements =
private int offset = 0;
// Check superclass.
if (Model.getFacade().isACallAction(action)) {
// get the source of the return message
removeFig(act);
too long.
// [4] The parent must be included in the Namespace of the
too long.
too long.
throw new NotYetImplementedException();
too long.
for (Region region : regions) {
return null;
throw new NotYetImplementedException();
return false;
throw new NotYetImplementedException();
public class TestModelEventPump extends TestCase {
public Collaboration buildCollaboration(Object handle) {
allMetaTypes = new ArrayList<Class<?>>(125);
list.addAll(Model.getModelManagementHelper()
currentIndex = num;
setFont(LookAndFeelMgr.getInstance().getStandardFont());
class UMLValueSpecificationPanel extends JPanel {
}
Object namespace = Model.getFacade().getNamespace(target);
throw new NotYetImplementedException();
namespace = target;
if (Model.getFacade().isAClassifier(o)
//   public void resolve(Object reason) {
// Delete the old extent first
result.addAll(getAllBehavioralFeatures(it.next()));
Object container = pack;
too long.
if (ta == null || ta.getModelElement() == null) {
LOG.debug(
* TODO: Note this should not be ni UML2 version
List<Pair> readOnlyListeners;
public AbstractArgoJPanel(String theTitle) {
if (project != null) {
setGraphModel(createGraphModel());
if (isReadOnly(element)) {
for (int i = 0; i < len; i++) {
}
return ro;
if (values.size() + refValues.size() > 1) {
// TODO: not implemented for UML 2 - tfm
if (activeDiagram == null) {
Model.getExtensionMechanismsHelper().addTaggedValue(
if (handle instanceof Parameter
for (Pair p : listeners) {
((ComponentInstance) handle).setNodeInstance(null);
System.setProperty("com.apple.mrj.application.apple.menu.about.name",
"label.namespace.navigate.tooltip"),
too long.
too long.
private static Hashtable statuses = new Hashtable();
/**
node.getQualifiers().apply(this);
System.out.println("VOILA!");
too long.
// Additional Operation in 4.5.3.9
return ""; //$NON-NLS-1$
* Supply the encoding to be used throughout the persistence
public AbstractArgoJPanel(String theTitle) {
too long.
private void checkOffs(ListSet offs) {
addFig(getBigPort());
public Object makeNode() {
Rectangle r = getBounds();
protected ColorUIResource getPrimary1() { return primary1; }
// static variables
* Remove an edge from the graphmodel and notify GEF.
getStereotypeFig().setBounds(X + 10, Y + NAME_FIG_HEIGHT + 1,
None
int maxWidth = 0;
if (Model.getFacade().isAGeneralization(subject)) {
final GraphEdgeRenderer renderer =
Dimension minimumSize = getMinimumSize();
getNameFig().setBounds(x + (w - nm.width) / 2,
public List<AbstractArgoJPanel> getDetailsTabs() {
String release = getReleaseVersionFromFile(file);
public void vetoableChange(PropertyChangeEvent pce) {
/**
renderingChanged();
Rectangle bbox = getBounds();
public void layout() {
popUpActions.add(new JSeparator());
int      aggCount = 0;
Action[] stereoActions =
f.setLayer(getLayer());
if (pName.equals("editing")
final LayerPerspective lay = (LayerPerspective) getLayer();
int mpn = recCountPredecessors(msg, ptr2) + 1;
private Set<Object[]> listeners = new HashSet<Object[]>();
aSize.width = Math.max(WIDTH, aSize.width);
final List<Action> modulesActions =
for (Object stereotype
List<ToDoItem> items = tdList.elementListForOffender(getOwner());
return false;
items = tdList.elementListForOffender(this);
// we return false
textEdited((FigText) src);
return false;
super.propertyChange(pve);
addFig(getStereotypeFig());
modelChanged(pve);
((TargetListener) listeners[i + 1]).targetSet(targetEvent);
}
if (sourceFig instanceof FigClassifierBox) {
@Override
} else if (setting instanceof PathListSelection) {
None
// static variables
Notification.ADD,
//        putValue(Action.SHORT_DESCRIPTION, Translator.localize(s));
@Override
too long.
setTextFilled(false);
Fig separatorFig = epc.getSeparatorFig();
} catch (IllegalArgumentException iae) {
}
DiDiagram dd = GraphChangeAdapter.getInstance()
public UMLEditableComboBox(UMLComboBoxModel model, Action selectAction) {
if (f.getLayer() == null) {
return;
public void addNodeRelatedEdges(Object node) {
}
too long.
if (end0 == null || end1 == null) {
newEdge.setSourcePortFig(baseFN);
// static variables
Object cr = Model.getCollaborationsFactory().createClassifierRole();
Point fcCenter =
assertTrue("GoalModel.removeGoal(goalName) failed",
f.setLineColor(getLineColor());
too long.
this.setBetweenNearestPoints(true);
critic.setPriority(Decision.UNSPEC.getPriority());
public void notationRenderingChanged(NotationProvider np, String rendering) {
@Override
redraw();
snooze.snooze();
super.computeRouteImpl();
Object package1 =
srcPt = sourcePortFig.connectionPoint(p.getPoint(1));
too long.
Object sourceModelElement = null;
@Override
Collection conns = Model.getFacade().getConnections(edge);
@Override
if (bounds != null) {
@Override
if (Model.getFacade().isAClassifier(node)) {
* java.lang.Object, java.lang.Object)
Object me = Model.getFacade().getModelElement(eo);
public String getTabKey() { return "tab.modules"; }
popUpActions.add(popUpActions.size() - getPopupAddOffset(),
public boolean remove(Object o) {
super.setLineWidth(w);
public boolean relocate(Object base) {
final int delta = 3;
}
Collection clients   = Model.getFacade().getClients(edge);
getNodes().add(node);
@Override
fireNodeAdded(node);
public void setTarget(Object t) {
getEdges().add(edge);
@Override
fireNodeAdded(node);
}
return true;
public Class getColumnClass(int col) {
if ((Model.getFacade().isAActor(me))
public LayoutedObject getObject(int index) {
removeEdge(me);
LOG.debug("model added " + me);
if (getOwner() != null) {
super();
@Override
super.refresh();
if ((associationEnd0 == null) || (associationEnd1 == null)) {
None
List regions = Model.getStateMachinesHelper().getRegions(
getStereotypeFig().setBounds(getBigPort().getCenter().x,
public void mousePressed(MouseEvent e) {
}
ArgoDiagramAppearanceEventListener,
super.modelChanged(mee);
setFilled(true);
private FigSingleLineText label;
if (!multiSelect && selectedItem instanceof ProfileConfiguration) {
Notification.ADD,
}
trySomeActionErrors(m3);
persLabel.setBorder(BorderFactory.createEmptyBorder(
if (TargetManager.getInstance().getTargets().size() == 1) {
if (oldOwned.contains(eo)) {
UndoManager.getInstance().addMementoLock(this);
epCheckBox.setSelected(false);
assertTrue("Decision.setName() failed",
addFig(getBigPort());
updateCompartment(Model.getMetaTypes().getOperation());
setDashed(true);
private List objects = new ArrayList();
setDestArrowHead(endArrow);
propPanelFactory =
setBetweenNearestPoints(true);
@Override
ArgoDiagram diag = DiagramUtils.getActiveDiagram();
if (Model.getFacade().getNamespace(me) == null
Object base = Model.getFacade().getBase(edge);
if (encloser != null
FigNode baseFN = (FigNode) lay.presentationFor(base);
@Override
newEdge.setSourcePortFig(clientFN);
@Override
getExtensionPointsCompartment();
protected boolean isValidElement(Object element) {
setExtensionPointsVisible(false);
@Override
Fig b = new FigMyCircle(0, 0, 100, 60);
Object sm = Model.getStateMachinesHelper().getStateMachine(dm);
Vector popUpActions = super.getPopUpActions(me);
public boolean conformsTo(Type type) {
a = (x * b) / Math.sqrt(b * b - y * y);
Object asc = Model.getFacade().getAssociation(ae);
return new Rectangle(
return NO_PROBLEM;
@Override
if (h.index == -1) {
if (pips instanceof PathItemPlacement) {
ArgoJMenu addMenu = new ArgoJMenu("menu.popup.add");
public Class getColumnClass(int col) {
popUpActions.add(popUpActions.size() - getPopupAddOffset(),
super.insertString(offset, str, a);
double a;
if (Model.getFacade().isAPseudostate(dm)) {
return new Dimension(((int) (Math.ceil(a) + getLineWidth()) * 2),
if (!(Model.getFacade().isAAssociation(dm))) {
@Override
None
if (newOwner != null) {
* All Figs need to listen to "remove", too: */
/* Issue 689: Look for a transition that arrives
for (Object ep : Model.getFacade().getExtensionPoints(newOwner)) {
Collection conn = Model.getFacade().getConnections(asc);
if (extensionPointsFigCompartment == null) {
else {
condition = new ArgoFigText(owner,
compartmentHeight += (requestedHeight - neededHeight)
fg = new FigTextGroup(owner, getSettings());
if (isCreateDiagramsSelected() && diagramInterface != null) {
fg.addFig(label);
public void setVisible(boolean arg0) {
setDashed(true);
public void setUp() throws Exception {
PropPanelFactory diagramFactory = new UseCaseDiagramPropPanelFactory();
if (!useAngle) {
}
protected Object getNewNodeType(int buttonCode) {
@SuppressWarnings("unchecked")
int d1 = Math.max(0, pathDistance - slopeSegLen / 2);
checkParseException(m3, "1.2.1 / 1.2 :");
// if this composite state is not attached to a statemachine
}
None
// encoding.  Specifying an encoding will produce more
if (enc.startsWith("cp")) {
Rectangle bounds = parseBBox();
too long.
if (Model.getFacade().isAModel(objectToAccept)) {
figNode = new FigPackage(modelElement, bounds, settings);
}
public void targetSet(TargetEvent e) {
too long.
/**
TargetManager.getInstance().setTarget(addedTargets.get(0));
String endSectionId = null;
classTableModel = new TableModelClassChecks();
protected boolean isValidElement(Object element) {
JButton selectAllButton = new JButton();
Object ae = assocEnds.next();
outputDirectoryComboBox =
* @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()
// _compileCheckBox = new JCheckBox();
Collection<String> files = generator.generateFiles(
if (!f.isDirectory() && !f.getName().endsWith(".bak")) {
too long.
FileReader fr = new FileReader(f);
* @see org.tigris.swidgets.Dialog#nameButtons()
if (e.getSource() == getOkButton()) {
Iterator assocEnds = Model.getFacade().getConnections(dm).iterator();
path = path.substring(0, path.length()
Object cs = Model.getFacade().getContainer(dm);
Map<String, Set<Object>> nodesPerPath =
None
} catch (Exception userPressedCancel) {
//        if (pve instanceof AttributeChangeEvent) {
for (Map.Entry entry : nodesPerPath.entrySet()) {
@Override
checked[j] = new HashSet<Object>();
return handle instanceof Classifier;
JFileChooser chooser = new JFileChooser(
if (!(Model.getFacade().isAAssociation(dm))) {
None
public String getDescription() {
/**
public boolean accept(File f) {
tryChangingDirection(m1, m6, m7);
@Override
JPanel setDefStereoV = new JPanel();
if (!(Model.getFacade().isAClass(Model.getFacade().getType(ae0))
new ArgoStatusEvent(ArgoEventTypes.STATUS_TEXT,
if (currentProject == null) {
None
addClassDiagram(p, name);
public void actionPerformed(ActionEvent event) {
@Override
FigClassifierBox existingFig = null;
public synchronized int read(byte[] b, int off, int len)
currentGM.addNodeRelatedEdges(classifier);
results.add(curDir);
currentModule = modules.get("Java");
// TODO: This appears to expect that the UML 1.3 tag name
if (Globals.curEditor().getGraphModel()
ClassGenerationDialog cgd = new ClassGenerationDialog(classes);
suffixFilters = currentModule.getSuffixFilters();
LOG.warn("There was some unidentified problem");
Object model =
Rectangle r = ce.getJComponent().getVisibleRect();
String fn = file.getAbsolutePath();
if (Model.getFacade().isAModelElement(((Fig) target).getOwner())) {
}
None
protected Remover() {
monitor.setMaximumProgress(MAX_PROGRESS);
public void removeActionListener(ActionListener l) {
public void actionPerformed(ActionEvent event) {
String text = makeText(value);
None
if (!(Model.getFacade().isNavigable(ae0)
@Override
protected Remover() {
@Override
for (FigEdge edge : existingEdges) {
if (isDiagramLayoutSelected()) {
* parsing "name1;name2;name3" and stereotypes.
if (problems != null && problems.length() > 0) {
if (e instanceof AttributeChangeEvent
if (packageName != null
if (Model.getFacade().isAInterface(element)) {
private StringBuffer printToBuffer(Exception e) {
@Override
* Create a GridBagConstraints object to use with the layout.
private JRadioButton classOnly;
protected void buildModelList() {
private JRadioButton classAndFeatures;
protected Object getSelectedModelElement() {
private JRadioButton fullImport;
// clarifiers.
if (configPanel == null) {
JLabel importDetailLabel = new JLabel(Translator
return;
private JComponent getConfigPanelExtension() {
None
Diagram diag = ((LayerPerspective) lay).getDiagram();
theImport.setSelectedSuffixFilter(null);
public void addElement(Object obj) {
progressLabel = new JLabel();
@Override
progress = new JProgressBar();
panel = makePanel();
public int size() {
File[] files = curDir.listFiles();
final String suffix = getSuffix(systemId);
}
if (recurse && !seenDirectories.contains(curFile)) {
messageArea.setText(messageArea.getText() + title + "\n" + introduction
too long.
if (urls.size() == 0) {
protected Remover() {
URL[] urlArray = new URL[urls.size()];
@Override
messageArea = new JTextArea(10, 50);
gbc.fill = GridBagConstraints.BOTH;
cancelButton = new JButton(Translator.localize("button.cancel"));
public void componentMoved(ComponentEvent e) {
protected void setProperty(String text) {
// static variables
for (int i = 0; i < len; i++) {
@Override
None
public Object getChild(Object parent, int index) {
northLabel =
public void modelChanged(UmlChangeEvent evt) {
canceled = true;
public void actionPerformed(ActionEvent e) {
JPanel controlsPanel = new JPanel();
removeButton.setEnabled(false);
LOG.warn("failed to cancel editing - "
if (index == pathsModel.getSize()) {
if (fn != null && Model.getFacade().isAComment(fn.getOwner())) {
index--;
}
// TODO: This should be hidden by default, but accessible on
continueButton = new JButton(Translator.localize("button.continue"));
public LayoutedObject[] getObjects() {
continueButton.addActionListener(this);
public Dimension getMinimumDiagramSize() {
return true;
buttonGroup.add(new JRadioButton());
if (depth > MAX_DEPTH) {
OCLEditor.OPTIONMASK_AUTOSPLIT*/);
@Deprecated
/**
Iterator features = str.iterator();
for (int i = listeners.length - 2; i >= 0; i -= 2) {
public FontUIResource getSystemTextFont() { return systemFont; }
public FontUIResource getUserTextFont() { return userFont; }
public Object getValueAt(int row, int col) {
Object[] listeners = listenerList.getListenerList();
None
too long.
Object f = offs.get(0);
setTargetInternal(target);
public void add(LayoutedObject object) {
// There is no need to test if classes is empty because
Iterator assocEnds = conns.iterator();
en.nextElement().setSelected(true);
uri = uri.appendFileExtension("xmi"); //$NON-NLS-1$
if (oTarget != null) {
critics.add(clsNaming);
Object mmeContext = OCLUtil
public void propertyChange(PropertyChangeEvent evt) {
return;
int iter = 0;
OclTree tree = null;
if (Model.getFacade().isUtility(dm)) {
if (euHelper.getDoAutoSplit()) {
None
if (Model.getFacade().getNamespace(
list.addItem("Test1");
too long.
Object mcOld = null;
theMMcConstraint =
checkAssignIDToObject(figclassifierrole, true, true);
if (!euHelper.isValidConstraintName(sName)) {
public void notestXmiRoseUml14() {
Model.getCoreHelper().setNamespace(cr1, collab);
None
try {
if (nameID == 0) {
public String getRuleName() {
}
// static variables
tryPredecessors(m1, m3, m4, m5, m7);
if (Model.getFacade().
private void addNewTaggedValue(Object element, String type,
Model.getUmlFactory().delete(model);
}
public void changedUpdate(final DocumentEvent p1) {
}
ToDoItem item = new ToDoItem(critic, headline, priority, description,
instructions.setText(cue);
Object sourceVertex = Model.getFacade().getSource(dm);
@Override
public String getH() {
}
if (!Model.getFacade().equalsPseudostateKind(
public boolean isDataFlavorSupported(DataFlavor parFlavor) {
if (language != null && language.length() > 0) {
setSelectedItem(evt.getNewValue());
public void targetSet(TargetEvent e) {
public void setNodeInstance(Object handle, Object nodeInstance) {
addElement(evt.getNewValue());
if (!topSystemIdSaved) {
fireListEvents = true;
foo[i] = params[i].newInstance();
first = index;
if (Model.getFacade().isAModelElement(comboBoxTarget)) {
public void removeSourceFlow(Object handle, Object flow) {
last++;
too long.
addOtherModelEventListeners(listTarget);
checkGenerated(aState, "entry/test1\nexit/b\ndo/it\ninternal/activity",
this.target = target;
@Override
comboBoxTarget = null;
protected void removeOtherModelEventListeners(Object oldTarget) {
}
@Override
|| isValidElement(getChangedElement(e))) {
assertTrue("GoalModel not initilized with UnspecifiedGoal",
}
too long.
"language",
@Override
* and an expression with no script,
Object t1g = checkGenerated(aState, "when(condition1)[guard]/effect",
parseMessage(m3, " 1.1.1 : ");
trySimpleMoving(m1, m2, m3);
public void targetAdded(TargetEvent e) {
String notationStr = notation.toString(it,
public void targetRemoved(TargetEvent e) {
int y = insets.top;
dontTest.add("Primitive");
public void setValueAt(Object ob, int row, int col) {
setSelectedItem(getSelectedModelElement());
parseMessage(m3, " / 1..2 : ");
modelValid = false;
checkGenerateCD(m1, "1 : oper()", npSettings);
/* TODO: Should there really be () here? */
public boolean isCellEditable(int row, int col) {
checkGenerated(aState, "\n\nEntry/a\n\nExit/b\n\nDo/it\n\n\n",
public int getRowCount() {
attr = attrs.get(1);
if (Model.getFacade().isAPackage(namespace)) {
// TODO: Except this won't work because the names are different which
if (eventSource == null || eventSource == target) {
public int getChildCount(Object parent) {
Object eventSource = event.getSource();
String name;
if (!Model.getFacade().isANamespace(namespace)) {
// according to the UML spec, but we rely on the caller to enforce
Model.getUmlFactory().delete(model);
Object candidate = Model.getFacade().getNamespace(ns);
Collection rootElements = Model.getFacade().getRootElements();
if (Model.getFacade().getNamespace(parent) != null) {
public void dragExit(DragSourceEvent dragSourceEvent) {
setEnabled(true);
if (model != null) {
None
public void lostOwnership(Clipboard clipboard, Transferable transferable) {
predicates.add(new DefaultPredicate());
too long.
if (target instanceof Fig) {
sure = true;
ModuleLoader2.getDescription(
ArgoDiagram diagram = (ArgoDiagram) target;
sure = true;
return (ProjectManager.getManager().getCurrentProject()
@Override
&& target.equals(ProjectManager.getManager().getCurrentProject()
too long.
private static final Logger LOG =
public void itemStateChanged(ItemEvent e) {
public void targetAdded(TargetEvent e) {
Model.getModelManagementHelper().getAllModelElementsOfKind(
public void remove(int offs, int len) throws BadLocationException {
too long.
Model.getCoreHelper().setKind(p1,
a3 = Model.getCoreFactory().buildAssociation(c3, c4);
String changeIndicator = "";
protected void setUp() throws Exception {
boolean sure = false;
Integer[] multArgs = {1, 1};
String confirmStr =
Model.getUseCasesFactory().buildExtend(useCase1, useCase3);
if (size > 0) {
public int getColumnCount() {
if (e.getSource() == getOkButton()) {
isClearable = clearable;
if (e.getSource() == delButton) {
private static String getNames(Node node) {
int firstSel = rowSM.getMinSelectionIndex();
public void insertUpdate(final DocumentEvent p1) {
StringBuffer msg = new StringBuffer();
rowHeight = rowHeights.get(row).intValue();
super.remove(0, getLength());
diagram = DiagramFactory.getInstance().create(type, model,
return false;
rl.add(Model.getMetaTypes().getUMLClass());
Object[] options =
protected void tearDown() {
public void addTreeModelListener(TreeModelListener l) {
protected void setUp() throws Exception {
too long.
trySomePredecessorErrors(m2, m3);
public void run() {
protected ColorUIResource getPrimary2() { return primary2; }
//        actionClient.actionPerformed(new ActionEvent(this, 0, "foo"));
ProjectManager.getManager().removeProject(proj);
String s = Configuration.getString(
FileFilter ffilter = chooser.getFileFilter();
chooser.setFileView(ProjectFileView.getInstance());
too long.
// static variables
public Object getValueAt(int row, int col) {
None
public void propertyChange(PropertyChangeEvent evt) {
document.setTarget(Model.getFacade().getTaggedValue(
File n =
tb.add(new ActionNewStereotype());
None
updateUI();
public UMLEditableComboBox(UMLComboBoxModel model, Action selectAction,
protected boolean isValidElement(Object element) {
public void actionPerformed(ActionEvent event) {
@Override
public ActionExecSilk() {
assertTrue("Decision.setPriority() failed",
too long.
public MBeanNotificationInfo[] getNotificationInfo() {
try {
// static variables
if (!(Model.getFacade().isAClassifier(dm))) {
layouter.layout();
// only classes with name need a constructor
if (Thread.interrupted()) {
if (aggCount > 1) {
LOG.info("setTarget: there are "
public void setNodeInstance(Object handle, Object nodeInstance) {
if (propPanel instanceof PropPanel) {
FigActivation currentActivation = null;
Object[] listeners = listenerList.getListenerList();
public void mouseClicked(MouseEvent e) {
None
if (fromElement.getClass() != toElement.getClass()) {
too long.
return (validConnectionMap.get(connectionType) != null);
return PROBLEM_FOUND;
for (Class<?>[] modeElementPair : validItems) {
None
public TargetListener getTargettableModel() {
if (e instanceof MalformedXMIException) {
public void removeUpdate(final DocumentEvent p1) {
if ((triggerAssociation == null) && (getToDoItem() != null)) {
public void setNodeInstance(Object handle, Object nodeInstance) {
String action = "";
public void setNodeInstance(Object handle, Object nodeInstance) {
JPanel thePanel = new JPanel();
// Give the parser a map of model elements
selectedListModel = new UMLModelElementStereotypeListModel();
HashMap<String, Object> globalXmiIdToObjectMap =
addStButton = new JButton(">>");
addSupportedDecision(UMLDecision.NAMING);
} else if (e instanceof AddAssociationEvent) {
Object asc = /*(MAssociation)*/ dm;
addStButton = new JButton(">>");
addStButton.addActionListener(new AddRemoveListener());
too long.
Object a = cf.buildClass("a", model);
@Override
// Enumerate constructors
public void setItem(Object anObject) {
public TagDefinition buildTagDefinition(String name, Object owner,
public Component getEditorComponent() {
too long.
public void addActionListener(ActionListener l) {
Object p1 = null;
too long.
None
return false;
if (defaultToProperties || lastNonNullTab < 0) {
.getAssociation(ends.iterator().next());
try {
String name = Model.getFacade().getName(elem);
operSeen.add(op);
if (oldValue == getSelectedItem()) {
matches = registry.getMatches("key2", "foo");
too long.
workAreaPane = new BorderSplitPane();
public void selectAll() {
public Object getItem() {
imageIconLabel.setOpaque(true);
public final void focusGained(FocusEvent arg0) {
public boolean isRelevant(Critic c, Designer d) {
@Override
&& (o == null || "".equals(o)))) {
imageIconLabel.setBorder(BorderFactory
for (Object o : operSeen) {
add(LabelledLayout.getSeparator());
final Object returnMessage = gm.connectMessage(
UMLTextArea2 comment = new UMLTextArea2(
public String getColumnName(int col) {
UMLTextArea2 commentBody = new UMLTextArea2(
@Override
final Color inactiveColor =
public Icon getClarifier() {
((FigEdge) target).getFig().removePropertyChangeListener(this);
public List<Goal> getSupportedGoals() {
FigClassAssociationClass ac =
if (ac != null) {
currentLayer.add(newFig);
// the responsibility of determining if the given target is a
public Icon getClarifier() {
updateArrow();
public void targetSet(TargetEvent e) {
public boolean canFixIt(ToDoItem item) { return false; }
public void toDoItemsRemoved(ToDoListEvent tde) {
public boolean hasState(String name) {
if (downlinks.size() == 1) {
Object[] listeners = listenerList.getListenerList();
public Object getElementAt(int index) {
chooser.addPropertyChangeListener(
if (y < getY()) {
SwingUtilities.invokeLater(new Anonymous1(fileName));
return activatingMessage.getSourceFigNode()
if (drawingArea.width <= 0 || drawingArea.height <= 0) {
too long.
super.actionPerformed(ae);
private FigMessage activatingMessage;
RenderedImage i = new DeferredBufferedImage(canvasArea,
new HashSet<Object>(TargetManager.getInstance().getTargets()),
// Java SE 6 has a native GIF writer, but it's not in Java 5.  One
Layer layer = ce.getLayerManager().getActiveLayer();
}
public class TestModelEventPump extends TestCase {
setSourcePortFig(sourceFN);
bounds.width -= bounds.x;
DOMImplementation domImpl =
// static variables
Document document = domImpl.createDocument(null, "svg", null);
public void keyTyped(KeyEvent e) {
bounds.width = Math.max(bounds.width, fig.getX() + fig.getWidth());
if (currentActivation != null) {
public void toDoItemsChanged(ToDoListEvent tde) {
SVGGraphics2D svgGenerator = new SVGGraphics2D(document);
curBody.getDocument().addDocumentListener(this);
reader.readLine();
priorities = p;
public void toDoListChanged(ToDoListEvent tde) {
for (Iterator i = modelImpl.getUmlPackage().getCore().getTagDefinition()
// static variables
public boolean isLeaf(Object node) {
else if (Model.getFacade().isAMessage(element)) {
public static List getEdges(Diagram diagram) {
@Override
public void componentShown(ComponentEvent e) {
return true;
if (message.isCreateMessage()
public void keyReleased(KeyEvent e) {
int n = -1;
public void toDoItemsAdded(ToDoListEvent tde) {
action = ac;
return 0;
public void stateChanged(ChangeEvent  e) {
public Set getDependencies(Object parent) {
if (row == tvs.size()) {
too long.
selectItem(todo);
}
FigVertex compositeState = (FigVertex) encloser;
}
public void targetRemoved(TargetEvent e) {
None
public void bindPort(Object port, Fig f) {
Model.getExtensionMechanismsHelper().addTaggedValue(target, tv);
// static variables
too long.
fireTableChanged(new TableModelEvent(this));
@Override
public String getParsingHelp() {
return null;
public void addModelEventListener(PropertyChangeListener listener,
public void valueForPathChanged(TreePath path, Object newValue) {
setCurrentDiagram(m);
public void addModelEventListener(PropertyChangeListener listener,
public List<AbstractArgoJPanel> getDetailsTabs() {
if (currentGM.canAddNode(classifier)) {
// static variables
if (!isSelfMessage()) {
((TreeModelListener) listeners[i + 1]).treeNodesChanged(e);
public Type navigateQualified(String name, Type[] qualifiers)
final File oldFile = new File(getOldDefaultPath());
if (Model.getFacade().isAClassifier(node)) {
public boolean contains(Object elem) {
@Override
public Vector getPopUpActions(MouseEvent me) {
protected final void fireContentsChanged(Object source, int index0, int index1) {
public void removeTreeModelListener(TreeModelListener l) {
// 1. Remember current message paths
public void generatorAdded(ArgoGeneratorEvent e) {
* @param tagName
if (handle instanceof MultiplicityElement) {
None
for (Fig fig : figs) {
|| isValidElement(getChangedElement(e))) {
public AbstractArgoJPanel spawn() {
super(Translator.localize("action.import-sources"),
notationProviderBody = NotationProviderFactory2.getInstance()
chooser.setAcceptAllFileFilterUsed(false);
public FontUIResource getMenuTextFont() { return controlFont; }
too long.
public void componentHidden(ComponentEvent e) {
private List createChildren(List children, Object parent, int currentLevel,
assertEquals("Got wrong namespace for first shared", c,
Collection getProperties(Object arg0);
extend =
public void mouseExited(MouseEvent e) {
buttonPanel.putClientProperty("ToolBar.toolTipSelectTool",
Object ge = coreFactory.createClass();
buttonPanel.setMinimumSize(new Dimension(0, height));
project = persister.doLoad(file);
dispatch = new UMLChangeDispatch(this,
for (TargetListener action : collectTargetListenerActions()) {
return handle;
fireTargetSet(new TargetEvent(
public void parse(Object modelElement, String text) {
* java.awt.event.ActionEvent)
public void move(Object parent, Object element, Direction direction) {
public synchronized int read() throws IOException {
if (container instanceof TabTarget) {
@Override
childHeight = getChildHeight(childComp);
public Object findClassifierByName(Object ofs, String s) {
final JLabel jlabel = (JLabel) childComp;
if (childComp.getMaximumSize() != null
fooClass = project.findType(
return getMinimumHeight(childComp);
public Object getObjectFlow() {
// WFR 2.10.3.3 #4
too long.
rebuildModelList();
trySomeMoreComplexMoving(m1, m2, m3);
vertex.setContainer((Region) region);
if (searchString != null && key == KeyEvent.VK_BACK_SPACE
Rectangle mousePoint = new Rectangle(x - 5, y - 5, 5, 5);
return null;
public Collection getChildren(Object parent) {
public void caretUpdate(CaretEvent e) {
public void parse(Object modelElement, String text) {
State state = UMLFactory.eINSTANCE.createState();
return false;
return handle instanceof TemplateParameterSubstitution;
public Object invokeFeature(Map<String, Object> vt, Object subject,
None
Project project = ProjectManager.getManager().makeEmptyProject();
rebuildModelList();
boolean hasContents = false;
private static String name = Translator.localize("label.name");
public void handleResetToDefault() {
Icon icon = ResourceLoaderWrapper.getInstance().lookupIcon(value);
@Deprecated
String type = null;
public Profile lookForRegisteredProfile(String value) {
public void handleStartElement(XMLElement e) throws SAXException {
Project p2 = ProjectManager.getManager().makeEmptyProject();
public Project doLoad(File file) throws OpenException, InterruptedException {
public void valueChanged(ListSelectionEvent lse) {
public final String getMainTag() {
protected String getDesc() {
public String getExtension() {
public void load(Project project, InputStream inputStream)
setTargetInternal(null);
b = new JButton();
public void refresh() {
if (isVisible()) {
machine = target;
public void handleSettingsTabRefresh() {
class ActionRemoveTaggedValue extends UndoableAction {
setEnabled(false);
None
public JPanel getTabPanel() { return this; }
machine = Model.getStateMachinesFactory().buildStateMachine(target);
public boolean shouldBeEnabled(Object target) {
public void targetAdded(TargetEvent e) {
public void handleSettingsTabSave() {
public boolean doCommand(String args) {
throw new NotImplementedException();
bodies.clear();
methodImpl.getBodies().set(bodyIndex, body);
addSupportedDecision(UMLDecision.RELATIONSHIPS);
machine = Model.getStateMachinesFactory().createStateMachine();
public void targetAdded(TargetEvent e) {
public void structureChanged() {
labelWidth,
public void modelElementChanged(Object node) {
dialog = new JDialog(frame, title, true);
Project p = ProjectManager.getManager().getCurrentProject();
if (event.getSource() == theButton) {
final Collection<FigEdge> existingEdges = getFigEdges();
None
* @see org.argouml.persistence.ProgressListener#progress(org.argouml.persistence.ProgressEvent)
public void setNodeInstance(Object handle, Object nodeInstance) {
too long.
public void setFig(Fig f) {
Integer.parseInt(str);
public Collection getChildren(Object parent) {
Collection c = Model.getFacade().getExtensionPoints(
public String getRuleName() {
int priority = 2;
bindPort(element, bigPort);
Iterator assocEnds = Model.getFacade().getConnections(dm).iterator();
if (Model.getFacade().getTargetScope(getTarget()) == null) {
Object inner = Model.getCoreFactory().buildClass(classifier);
checkParseException(m1, " 1.1 : ");
public void setNodeInstance(Object handle, Object nodeInstance) {
@Override
Object kind = null;
} else {
return ""; //$NON-NLS-1$
public void actionPerformed(ActionEvent e) {
final boolean result = copyFile(oldFile, file);
None
try {
for (Object st : stereotypes) {
setModelInvalid();
too long.
setModelInvalid();
public void pushNamespaceElement(NamespaceElement element) {
}
@Override
@Override
// static variables
return -1;
if (!(assoc instanceof Association)) {
return comparePaths(o1, o2);
String name1, name2;
if (caseSensitiveComparison == 0) {
rootPane.getActionMap().put(ACTION_KEY_ESCAPE, new AbstractAction() {
goalModel.stopDesiring(unspecifiedGoal.getName());
if (caseSensitiveComparison != 0) {
assertTrue("GoalModel.setGoalPriority added an extra Goal",
/**
case KeyEvent.VK_BACK_SPACE:
}
case KeyEvent.VK_HOME:
return null;
public void keyPressed(KeyEvent e) {
return null;
return null;
return null;
Class cls = org.tigris.gef.base.Editor.class;
Package pckg = saxObject.getClass().getPackage();
public void printStackTrace(PrintStream ps) {
a.putValue("popped", Boolean.valueOf(false));
}
LOG.error(ioe);
if (step1Choice == null) {
LOG.error("Mac OS X Adapter could not talk to EAWT:");
public String getZipFileExtension() {
setHandledMethod.invoke(event, new Object[] { Boolean.valueOf(handled) });
try {
try {
try {
*            the model element to query for connections
Method enableAboutMethod = macOSXApplication.getClass().getDeclaredMethod("setEnabledAboutMenu", new Class[] { boolean.class });
protected ColorUIResource getPrimary3() { return primary3; }
public boolean callTarget(Object appleEvent) {
@Override
// This error will throw when running from the ant setup.
public void caseAMultiplicativeExpressionTail(
* @since 0.15.3
suite.addTest(new TimeStamp());
int choice = -1;
{"org.argouml.uml.diagram", "org.argouml.ui"},
public void setNodeInstance(Object handle, Object nodeInstance) {
};
public FontUIResource getControlTextFont() { return controlFont; }
protected void printFooter() {
if (findAssociation(dm, 0)) {
assertNotNull(i.getDetailsTabs());
@Override
ArgoEventPump.addListener(ArgoEventTypes.HELP_CHANGED, helpTracker);
public void setFig(Fig f) { fig = f; }
ArgoEventPump.removeListener(ArgoEventTypes.HELP_CHANGED, helpTracker);
final ArgoDiagramAppearanceEvent displayEvent =
}
evt = new ArgoGeneratorEvent(ArgoEventTypes.GENERATOR_CHANGED, this);
}
evt = new ArgoHelpEvent(ArgoEventTypes.HELP_CHANGED, this,
evt = new ArgoNotationEvent(ArgoEventTypes.NOTATION_CHANGED, this);
@Override
totalEventsFired++;
eventStatus |= (0x01 << event);
public String computeSuggestion(String name) {
private TArgoHelpEventListener helpTracker =
* @param i the todo item
SwingUtilities.invokeAndWait(new Runnable() {
too long.
for (int events = eventStatus; events > 0; ++eventsFired) {
rc = new ResolvedCritic("rc", (List<String>) null);
try {
if (!(client instanceof BehavioredClassifier)) {
/* testmc should now have an ItemUID so we should be able to
rc = new ResolvedCritic(c, set, false);
assertTrue("EnabledCM.isRelevant(Critic, Designer) is incorrect",
critic.setEnabled(false);
assertTrue("EnabledCM.isRelevant(Critic, Designer) is incorrect",
critic.snooze();
critic.unsnooze();
assertTrue("NotSnoozedCM.isRelevant(Critic, Designer) is incorrect "
assertTrue("CurDecisionCM.isRelevant(Critic, Designer) is "
assertTrue(
too long.
assertTrue(
public Object getDestination(Object relationship) {
int priority = ToDoItem.HIGH_PRIORITY;
ToDoList list = new ToDoList();
list.addElement(item);
currentKeyStroke = decodeKeyStroke(confCurrentShortcut);
list.addElement(item);
assertTrue("ToDoList.size() is incorrect", list.size() == 1);
public void doAction(int oldStep) {
assertTrue("ToDoItem.get(0) did not return correct item",
public void paintIcon(Component c, Graphics g, int x, int y) {
assertTrue("ToDoItem.removeElement(item) failed to remove item", list
assertTrue("ToDoList.size() is incorrect", list.size() == 0);
GoalModel goalModel = new GoalModel();
modelChanged(pve);
goalModel.setGoalPriority(unspecifiedGoal.getName(), unspecifiedGoal
assertTrue("GoalModel not correctly updating goal priority", goalModel
goalModel.removeGoal(unspecifiedGoal);
goalModel.startDesiring(unspecifiedGoal.getName());
assertTrue("GoalModel.startDesiring did not add a Goal",
@Override
UMLStateDiagram statediag = new UMLStateDiagram();
InitializeModel.initializeMock();
checkAssignIDToObject(statediag, true, true);
@Override
Object iface = Model.getCoreFactory().createInterface();
// static variables
checkAssignIDToObject(figinitialstate, true, true);
checkAssignIDToObject(figtransition, true, true);
umlReserved.add("becomes");
Decision decision = new Decision(name, priority);
LOG.warn("A deleted element still exists on the diagram");
assertTrue("Decision.getName() is incorrect",
}
priority = 1;
if (returnParasSb.length() == 3) {
name = "misc.decision.uncategorized";
@Override
assertTrue("Decision.equals(Decision) failed",
assertEquals(headline, item.getHeadline());
@Override
ChecklistStatus list = new ChecklistStatus();
assertTrue("ChecklistStatus.size() is incorrect", list.size() == 4);
LOG.info("The user chose to exit and save");
destMult.textEdited();
assertTrue("ChecklistStatus items incorrectly added (category: "
ChecklistStatus list2 = new ChecklistStatus();
list2.addAll(list);
// Find the preceding message, if any, on either end of the
assertTrue("ChecklistStatus.addAll(Checklist) failed",
public void actionPerformed(ActionEvent e) {
ChecklistStatus list = new ChecklistStatus();
CheckItem item = new CheckItem(category, description,
public String getProfileIdentifier() {
category += "- Set Test";
CheckItem item2 = new CheckItem(category, description);
// static variables
assertTrue("CheckItem.getDescription() incorrect "
SnoozeOrder snooze = new SnoozeOrder();
snooze.unsnooze();
Object package1 =
Object aClass = Model.getCoreFactory().buildClass("Test", p.getRoot());
// Set the appropriate aggregation on each end
Object machine =
//        putNotationArgument("showAssociationName",
Model.getCoreHelper().setNamespace(machine, aClass);
Object package1 =
None
if (rowObj == null) {
Object actgrph =
saveNewFile = true;
//            pce = (PropertyChangeEvent) rxdEvent.getSource();
assertTrue("CurDecisionCM.isRelevant(Critic, Designer) is incorrect "
SwingUtilities.invokeAndWait(new Runnable() {
ProjectManager.getManager().makeEmptyProject();
@Override
ProfileManager profileManager = ProfileFacade.getManager();
Object model = project.getUserDefinedModelList().get(0);
project.getProfileConfiguration().removeProfile(metaProfile, model);
File projFile = File.createTempFile("projFile", ".zargo");
Object namespace = Model.getFacade().getNamespace(modelElement);
// subsystem and contains a stereotype and this contains a
tryGuardAndIteratorSyntax(m3);
theStereotype =
pckge = project.getUserDefinedModelList().get(0);
public JPanel makePanel(int newStep) {
ProfileManager profileManager = ProfileFacade.getManager();
private static final String PTYPE_BOOLEAN_NAME = "Boolean";
project.getProfileConfiguration().addProfile(userDefinedProfile, model);
@Override
File projFile = File.createTempFile("projFile", ".zargo");
SwingUtilities.invokeAndWait(new Runnable() {
project = persister.doLoad(file);
profileManager.removeProfile(userDefinedProfile);
if (e.getCause() instanceof XmiReferenceException) {
Model.getUmlFactory().delete(profileModel);
Model.getExtensionMechanismsHelper().addBaseClass(theStereotype,
Model.getExtensionMechanismsHelper().removeBaseClass(theStereotype,
suite.addTestSuite(TestExtensionMechanismsFactory.class);
return suite;
for (int i = addedTargets.length - 1; i >= 0; i--) {
too long.
public String getType() {
private static final boolean PERFORMANCE_TEST = false;
InitializeModel.initializeMDR();
}
/**
Object g1 = coreFactory.createGeneralization();
Runnable dispatch = null;
private static final int CHILDREN_PER_NAMESPACE = 5;
