// TODO turn into parameter?
// TODO: should this just call super()?
// TODO improve this
// TODO do contentType and/or dataEncoding belong in HTTPSampleResult instead?
// TODO - needs more work ...
// Maybe move to vector if MT problems occur
// TODO: This method doesn't appear to be used.
// TODO is this really necessary?
// Programming error: bail out.
// TODO should this throw an error?
// houston we have a problem !!
//TODO replace with proper Exception
// TODO - charset? // TODO this should really be request data, but there is none
// in milli-seconds // TODO: properties?
//TODO - move to JOrphanUtils?
// N.B. Needs to implement Visualizer so that TestBeanGUI can find the correct GUI class
// Can be null (not sure why)
//TODO implement other non-text types
// TODO this is not populated currently
// N.B. Needs to implement Visualizer so that TestBeanGUI can find the correct GUI class // TODO - remove UnsharedComponent ? Probably does not make sense for a TestBean.
// $NON-NLS-1$ // TODO - use a different format here?
// NOTUSED: long[] longSample = getSamples(); // load each node
//This can lead to code smell, meh! Do we care
// TODO is this ever used?
// TODO is this the best way to do this?
// All keys in messages.properties are lowercase (historical reasons?)
//NOT USED protected double[][] data = null;
//TODO do this more efficiently
// TODO - should this use setFirst() ?
"/*     *     * A Dom tree panel for to display response as tree view author <a     * href=""mailto:d.maung@mdl.com"">Dave Maung</a>      * TODO implement to find any nodes in the tree using TreePath.     *     */"
// TODO: Does this method need to be public? It isn't currently // called outside of this class.
"/*         * Does the system support UNC paths? If so, may need to fix them up         * later         */"
// Not used
// TODO should this be indeterminate? // TODO should this be indeterminate? //$NON-NLS-1$ //$NON-NLS-1$
// hack to skip processing
// TODO should we allow null for non-primitive types?
// TODO - not sure this is the best method
// TODO - is this needed?
// TODO - should we call start() and stop()?
// TODO: I believe the following code (to the end of the method) is // obsolete, // since NamePanel no longer seems to be the GUI for any component:
// Method is broken anyway
// TODO is this a sensible number? //$NON-NLS-1$
// TODO work out how to search the XML pane
// TODO is this sensible?
// Should we return fragment as text, rather than text of fragment?
"/*         * Not clear what can cause this ? conflicting versions perhaps         */"
//TODO replace with proper Exception // return with an error
//TODO: validate contentType for reasonable types?
"/*     * Mask values for TEST_TYPE TODO: remove either MATCH or CONTAINS - they     * are mutually exckusive     */"
// TODO ought to be a FileChooser ...
// Allow JMeter to render frames (and relative images) // Must be done after setContentType [Why?]
// TODO - is this used? (apart from test code)
// TODO: should this be clearData()?
"/**     * Provide a description of this timer class.     *     * TODO: Is this ever used? I can't remember where. Remove if it isn't --     * TODO: or obtain text from bean's displayName or shortDescription.     *     * @return the description of this timer class.     */"
"/*             * Provide dummy implementations to suppress download and display of             * related resources: - FRAMEs - IMAGEs TODO create better dummy             * displays TODO suppress LINK somehow             */"
// TODO should this be JTLSAVER? Only seems to be called by MonitorHealthVisualzer
// TODO: Make the running indicator its own class instead of a JButton
// If child of TransactionController is a ThroughputController and TPC does // not sample its children, then we will have this // TODO Should this be at warn level ?
// $NON-NLS-1$ // so it agrees with above // TODO perhaps should share code with __time() function for this... // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$
// Hack to allow automated tests to find when test has ended //transient boolean testEnded = false;
// TODO could these be done earlier (or just once?)
// Hack to resolve ModuleControllers in non GUI mode
// add a system property so samplers can check to see if JMeter // is running in NonGui mode // $NON-NLS-1$ // TODO - why does it create a new instance?
// Should we run a beanshell script on startup? // $NON-NLS-1$
"/*         * A little hack - add each listener to the start of the list - this         * ensures that the thread running the show is the first listener and         * can modify certain values before other listeners are called.         */"
// TODO: move this to components -- the only reason why it's in core is because // it's used as a guinea pig by a couple of tests.
// TODO this bit of code needs to be tidied up // Unfortunately ModuleController is in components, not core // Bug 47165
// TODO: This class looks a lot like ArgumentsPanel. What exactly is the // difference? Could they be combined? // Note: it seems that this class is not actually used ...
// TODO does not appear to be used
"/*         * Ensure that the sample variables are correctly initialised for each run.         * TODO is this the best way to do this? should it be done elsewhere ?         */"
"/*             * Add fix for Deadlocks, see:             *              * See https://issues.apache.org/bugzilla/show_bug.cgi?id=48350            */"
// Hack to allow external control
// TODO - why use space?
// TODO should this also clear isDynamic, rawParameters, permanentResults?
// TODO should level be more than debug ?
// This is effectively the same as saver.toXML(Object, Writer) except we get to provide the DataHolder // Don't know why there is no method for this in the XStream class
// TODO fix up for Nimbus LAF
"/** * FIXME Why is searchTF not getting focus correctly after having been setVisible(false) once */"
// MenuBar related methods // TODO: Do we really need to have all these menubar methods duplicated // here? Perhaps we can make the menu bar accessible through GuiPackage?
// Hack to get full modifier value
"/*     * TODO consider removing this method, and providing method wrappers instead.     * This would allow the Gui package to do any additional clearups if required,     * as has been done with clearTestPlan()    */"
//Maybe do nothing at all?
"/*     * NOTUSED private void initButtonMap() { }     */"
//avoid error in ant task tests (good way?)
// Does not appear to be used; called by MainFrame#setEditAddMenu() but that is not called
"/** * Aggregates sample results for use by the Statistical remote batch mode. * Samples are aggregated by the key defined by getKey(). * TODO: merge error count into parent class? */"
// TODO should errors be thrown back through RMI?
"/*                 * JMeterTreeNode and TestBeanGUI are special GUI classes, and                 * aren't intended to be added to menus                 *                 * TODO: find a better way of checking this                 */"
// not used
// TODO - perhaps save other items such as headers?
// TODO should class implement SampleListener?
// Settings; readResolve sets these from the server/client values as appropriate // TODO would be nice to make these final; not 100% sure volatile is needed as not changed after creation
// should the samples be aggregated on thread name or thread group (default) ?
// Make it easier to enter a tab (can use \<tab> but that is awkward)
// TODO turn into method?
// Does not appear to be used (yet)
//@GuardedBy("sampleStore") TODO perhaps use ConcurrentHashMap ?
//TODO clazz is probably always the same as testclass
// TODO - should this be restored?
//TODO provide proper name?
// TODO: does it matter that an empty line will terminate the loop? // CSV output files should never contain empty lines, so probably // not // If so, then need to check whether the reader is at EOF
"/*     * TODO - convert to work more like upgrade.properties/NameUpdater.java     *     * Special processing is carried out for the Header Class The String     * property TestElement.name is converted to Header.name for example:     * <elementProp name=""User-Agent""     * elementType=""org.apache.jmeter.protocol.http.control.Header""> <stringProp     * name=""Header.value"">Mozilla%2F4.0+%28compatible%3B+MSIE+5.5%3B+Windows+98%29</stringProp>     * <stringProp name=""TestElement.name"">User-Agent</stringProp>     * </elementProp> becomes <elementProp name=""User-Agent""     * elementType=""org.apache.jmeter.protocol.http.control.Header""> <stringProp     * name=""Header.value"">Mozilla%2F4.0+%28compatible%3B+MSIE+5.5%3B+Windows+98%29</stringProp>     * <stringProp name=""Header.name"">User-Agent</stringProp> </elementProp>     */"
"/*     * These must be set before reading/writing the XML. Rather a hack, but     * saves changing all the method calls to include an extra variable.     *     * AFAIK the variables should only be accessed from one thread, so no need to synchronize.     */"
// TODO: should this be restored?
// TODO: not used - make private?
// TODO appears to duplicate the threadName field in SampleResult
// Yuck: TIFFImageEncoder uses Error to report runtime problems
// a check, just in case:
// TODO is this the right thing to do?
// results.setResponseCode("???"); TODO what code should be set here?
// TODO should this implement supportsCustomEditor() ?
// Not used, as the <testResult> element is generated by the // ResultCollector class
"/**     * Check if a string is a valid JMeter 'expression'.     * <p>     * The current implementation is very basic: it just accepts any string     * containing ""${"" as a valid expression. TODO: improve, but keep returning     * true for ""${}"".     */"
// TODO - use or remove
// I guess this can happen as a result of a bad // file read? In this case, it would be better to replace the // incorrect value with anything valid, e.g. the default value // for the property. // But for the time being, I just prefer to be aware of any // problems occuring here, most likely programming errors, // so I'll bail out. // (MS Note) Can't bail out - newly create elements have blank // values and must get the defaults. // Also, when loading previous versions of jmeter test scripts, // some values // may not be right, and should get default values - MS // TODO: review this and possibly change to:
// TODO does not work yet; need to determine the sample type
// Temporary fix to allow default protocol to be changed
//TODO consider using private logs for each derived class
// Does not appear to be used yet
// Remember to change this when the class changes ...
// TODO temporary hack to avoid unnecessary bug reports for subclasses
// TODO - yet another ambiguous name - does it need changing? // See also: Clearable, JMeterGUIComponent
// TODO Is this silent exception intended
"/*     * The following variables are set by StandardJMeterEngine.     * This is done before start() is called, so the values will be published to the thread safely     * TODO - consider passing them to the constructor, so that they can be made final     * (to avoid adding lots of parameters, perhaps have a parameter wrapper object.     */"
// TODO should this set the thread names for all the subsamples? // might be more efficient than fetching the name elsewehere
"/*         * Setting SamplingStarted before the contollers are initialised allows         * them to access the running values of functions and variables (however         * it does not seem to help with the listeners)         */"
// TODO: remove this useless Entry parameter
// TODO fix this when there is a real implementation
// TODO only clear the relevant entry - if possible...
// Surely this is always null in the constructor?
// TODO why not use the super class value?
// TODO - does not appear to be called directly
"/** * Custom TrustManager ignores all certificate errors * * TODO: implement conditional checking and logging * * (Derived from AuthSSLX509TrustManager in HttpClient contrib directory) */"
// Maps to contain page and form encodings // TODO - do these really need to be shared between all Proxy instances?
// NOTE: Source and line arguments are nonsense in a call(). //       Any way to make these arguments *sensible?
// Is it an exception wrapped in a JavaScriptException?
// TODO Why empty block ?
// TODO - perhaps this should be a fatal error?
// clone will produce correct type // TODO but why do we need to clone the list?
// TODO only called by UserParameterXMLParser.getXMLParameters which is a deprecated class
// TODO probably not needed
// TODO needs to be synch? Probably not changed after threads have started // JMeter Home directory (excludes trailing separator) // JMeter bin directory (excludes trailing separator)
// Hack: bsh-2.0b5.jar BshScriptEngine implements Compilable but throws "java.lang.Error: unimplemented"
// TODO: what is this for?
// TODO should equals and hashCode depend on field other than count?
// TODO is sync really needed?
// TODO is this correct?
// TODO cpercent is the same as cmedian here - why? and why pass it to "distributionLine"?
// TODO: Should the method signature of this method be changed to // match the super-implementation (using a TestElement parameter // instead of AbstractListenerElement)? This would require an // instanceof check before adding the listener (below), but would // also make the behavior a bit more obvious for sub-classes -- the // Java rules dealing with this situation aren't always intuitive, // and a subclass may think it is calling this version of the method // when it is really calling the superclass version instead.
// TODO Should this method be synchronized ? all other function execute are
// TODO should the engine be static?
// N.B. Commons IO IOUtils has equivalent methods; these were added before IO was included // TODO - perhaps deprecate these in favour of Commons IO?
// TODO should this be getMin()?
"/*                 * Fix bug: -D arg1=arg2 was causing parse error; however                 * --define arg1=arg2 is OK This seems to be because the parser                 * skips the terminator for the long options, but was not doing                 * so for the short options.                 */"
// TODO improve the error handling
"/**     * Add logTargets to root logger     * FIXME What's the clean way to add a LogTarget afterwards ?     * @param logTargets LogTarget array     */"
// hack to reduce the need to load every class in non-GUI mode, which only needs functions // TODO perhaps use BCEL to scan class files instead? // class name should contain this string // class name should not contain this string
"/*             * TODO: Exact ordering is only required for some tests; change the             * comparison to do a set compare where necessary.             */"
// TODO field always true, what for ?
// TODO - improve this check
// TODO - could this be return?
//very wrong.
// TODO - should this be a failure?
"/*     * Wrapper to convert a JUnit4 class into a TestCase     *     *  TODO - work out how to convert JUnit4 assertions so they are treated as failures rather than errors     */"
// TODO should really return most specific (i.e. longest) match.
// TODO - should this be done for embedded usage? // Note: the element is a ConfigTestElement when used standalone, so we cannot use FTPSampler access methods
// TODO: replace all this url2 mess with a proper method // "areEquivalent(url1, url2)" that // would also ignore case in protocol and host names, etc. -- use that // method in the CookieManager too.
// TODO is this possible?
"/*     * Holder for storing cache details.     * Perhaps add original response later?     */"
// TODO not used by GUI
// not currently used
// TODO correct URL?
// NOTE: the handling of simple- vs. double-quotes could be formally // more accurate, but I can't imagine a session id containing // either, so we should be OK. The whole set of expressions is a // quick hack anyway, so who cares.
"/*         * TODO improve string version to better match browser behaviour? e.g.         * do browsers regard http://host/ and http://Host:80/ as the same? If         * so, it would be better to reflect this in the string         */"
// Code also allows for LF only (not sure why - perhaps because the test code uses it?)
// TODO: find a way to avoid the cost of creating a String here -- // probably a new PatternMatcherInput working on a byte[] would do // better.
// TODO should setBaseForScript be called here rather than above?
// Java 1.6.0_22+ no longer allows Content-Length to be set, so don't check it. // See: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6996110 // TODO any point in checking the other headers?
// SampleEvent is not passed JMeterVariables, because they don't make sense for Proxy Recording // TODO - is this the correct threadgroup name?
// TODO needs cleaning up
// $NON-NLS-1$ TODO should this be a variable?
// TODO replace repeated substr() above and below with more efficient method.
// TODO perhaps make more specific than this? // no point parsing anything else, e.g. GIF ...
// won't work: writeErrorToClient(HttpReplyHdr.formInternalError()); // Generate result (if nec.) and populate it // hack to skip processing
// TODO - should this be done when the client is created? // If so, then the details need to be added as part of HttpClientKey
// HACK
// May be replaced later
// TODO hack, to be removed later
// Could we drop the Sync here?
// TODO - should LF-only EOL be allowed?
// DirContext dc = //TODO perhaps return this?
// $NON-NLS-1$ // TODO - change to use URL version? Will this affect test plans?
// TODO specify collection type without breaking callers
// TODO - can this eever happen?
// All form parameter always have text/plain as mime type //TODO make this a parameter?
// $NON-NLS-1$ // TODO can this be obtained from the file somehow?
// Does not appear to be used
// NOTUSED: GuiPackage guiPack =
// Allow serializable test to work // TODO: is the serializable test necessary now that JMeterTreeNode is // no longer a GUI component?
// TODO is null correct?
// TODO - how to handle thread stopped here
// Slight hack - we need to ensure the TestClass is not reset by the previous call
// TODO should this be called if basedir == null?
// TODO - could be converted to generic class?
// TODO not used?
// TODO: make static?
// Hack to allow entire URL to be provided in host field
// TODO Should this be OK ? //assertEquals(contentEncoding, s.getContentEncoding()); // Check arguments // We should have one argument, with the value equal to the post body
// TODO downcase UPPER case non-final variables
// TODO - belongs elsewhere
// TODO can this happen?
// TODO needed here because currently done on sample completion in JMeterThread, // but that only catches top-level samples.
// TODO : This is a bit fragile
// TODO is this correct? // If this is not the first file we can't write its header now // for simplicity we always save it, even if there is only one file
// TODO - should this return something else?
// Don't allow override of Content-Length // This helps with SoapSampler hack too // TODO - what other headers are not allowed?
//$NON-NLS-1$ TODO should this be variable?
// TODO - is this the correct default?
// TODO do we need to add a charset for the file contents? // $NON-NLS-1$
// TODO merge put and post methods as far as possible. // e.g. post checks for multipart form/files, and if not, invokes sendData(HttpEntityEnclosingRequestBase)
// Get the content length, it tells us how much data to read // TODO : Maybe support chunked encoding, then we cannot rely on content length
// TODO: is this the correct default?
// TODO should we allow mimetype only?
"/*     * TODO should these fields be public?     * They don't appear to be used externally.     *      * Also, are they any different from HTTPConstants.GET etc. ?     * In some cases they seem to be used as the method name from the Tomcat log.     * However the RMETHOD field is used as the value for HTTPSamplerBase.METHOD,     * for which HTTPConstants is most approriate.     */"
// NOTUSED org.apache.jmeter.monitor.model.Status st = // TODO - charset?
// TODO: find out how to retrieve these from the script // At present the script has to use SampleResult methods to set them. // $NON-NLS-1$ // $NON-NLS-1$
// TODO: process warnings? Set Code and Message to success?
// TODO - should the encoding be configurable? // $NON-NLS-1$
//$NON-NLS-1$ // TODO - probably wrong
// TODO Method with 0 reference, really useful ?
// Maybe we should consider creating a global cache for the // random files to make JMeter more efficient.
// Should we use java.naming.security.[principal|credentials] to create the QueueConnection?
// TODO set different status if not enough messages found?
"/** * FIXME BROKEN CODE */"
// NOTUSED private String chosenFile;
"/* * Find all beans out there and check their resource property files: - Check * that non-default property files don't have any extra keys. - Check all * necessary properties are defined at least in the default property file, * except for beans whose name contains ""Experimental"" or ""Alpha"".  *  * TODO: - Check property files don't have duplicate keys (is this important) *  */"
// This could perhaps be a variable name
// Should we add the "_" separator?
// TODO - should we skip processing here?
//TODO add some real tests now that split() has been removed
// NOT USED transient protected ThreadGroup THREADGROUP = null; // Anyway, was this supposed to be the class from java.lang, or // jmeter.threads?
// all the others could be private too?
// TODO can this ever happen?
// TODO fetch list of languages from a file? // N.B. Changes to language list need to be reflected in // resources/PackageTest.java
//TODO: move to utils class (JMeterUtils?)
// TODO: do we need to implement any kind of connection pooling? // If so, which connections should be shared? // Should threads share connections to the same destination? // What about cross-thread sharing?
//            // Set the content type TODO - needed? //            String multiPartContentType = multiPart.getContentType().getValue(); //            post.setHeader(HEADER_CONTENT_TYPE, multiPartContentType);
"/*     * TODO this assumes that the redirected response will always immediately follow the original response.     * This may not always be true.     * Is there a better way to do this?     */"
// TODO is it the best way ? https://issues.apache.org/bugzilla/show_bug.cgi?id=55634
// Keep the unexpanded path // TODO - allow directories to end with .jar by removing this check?
// TODO: the above works in the current situation, but it's // just a hack. How to get each editor to report whether it // wants to grow bigger? Whether the property label should // be at the left or at the top of the editor? ...?
// Hack: save the package for any transaction controllers
// How many classes can we assign from? // TODO: there must be a nicer way...
// Should the TestBean be hidden?
// TODO - why lower case? OK to use the default Locale?
//A hack to make user-defined variables in the testplan element more dynamic
// HACK: force the controller to load its tree
// It might be useful also to make this available in the 'Request' tab, for // when posting JSON.
// should header be saved with the data? //$NON-NLS-1$
// Showing large strings can be VERY costly, so we will avoid // doing so if the response // data is larger than 200K. TODO: instead, we could delay doing // the result.setText // call until the user chooses the "Response data" tab. Plus we // could warn the user // if this happens and revert the choice if he doesn't confirm // he's ready to wait.
// TODO strings should be resources
// result.setError(true); // TODO is this the correct strategy? // throw exception; // allow assertion to pass
// Why does this not call guiInstance.clearTestPlan() ? // Is there a reason for not clearing everything?
// NOTUSED yet private JTextField filename;
// TODO somehow show progress
// TODO support multiple signers
// TODO: fetch this once as per vars above?
// TODO: add and delete not currently supported // $NON-NLS-1$
// Fix path to allow the use of UNC URLs
// TODO should this use setDone()? // TODO should this use setFirst()?
// Set the overall status for the transaction sample // TODO: improve, e.g. by adding counts to the SampleResult class
// Should we exit at end of the test? (only applies to server, because host is non-null)
"/*         * Have we reached the reporting boundary?         * Need to allow for a margin of error, otherwise can miss the slot.         * Also need to check we've not hit the window already         */"
// TODO save hostname; save sample type (plain or http)
// Allow the mimetype of the file to control the content type // This is not obvious in GUI if you are not uploading any files, // but just sending the content of nameless parameters // TODO: needs a multiple file upload scenerio
// REMIND: convert arg list Vectors here?
// It is chunked transfer encoding, which we do not really support yet. // So we just read without blocking, because we do not know when to // stop reading, so we cannot block // TODO propery implement support for chunked transfer, i.e. to // know when we have read the whole request, and therefore allow // the reading to block
// TODO handle filenames
// not yet handled
// TODO - should check that error has been logged...
// Don't allow override of Content-Length // TODO - what other headers are not allowed?
// TODO ? perhaps note connection so it can be disconnected at end of test?
// Check request headers
// $NON-NLS-1$
// --------------------------------------------------------------------- // PROPERTY FILE CONSTANTS // ---------------------------------------------------------------------
// package protected so can be accessed by test class
// Test sending data with default encoding
// return with an error
"/*     * Low-level (recursive) routine to define the method - if not already defined.     * Synchronized to protect access to methodToInvoke.     */"
// regular expression used to match against embedded resource URLs
// Don't save this - only needed for processing CSV headers currently
// flush
"/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.setHeaders(URLConnection, HTTPSampler)'     */"
// OPTIONAL TASKS
// List of variable names to be saved in JTL files
// flag - if all machines within a given domain can access the variable. //(from http://www.cookiecentral.com/faq/ 3.5)
///////////////// End of standard field accessors /////////////////////
"/*         * Run tidy.         */"
// Get appropriate sender class governed by the behaviour set in the JMeter property
// Column numbers - must agree with order above
// We don't want this passed on to browser
// return with no error
// Fix the content length
// only http and https are supported
// Obtain another URL with an explicit port:
"/*     * Constructor is initially called once for each occurrence in the test plan     * For GUI, several more instances are created Then clear is called at start     * of test Called several times during test startup The name will not     * necessarily have been set at this point.     */"
// write output to file
"/*     * For use by SaveService only.     *     * @param stamp -     *            this may be a start time or an end time     * @param elapsed     */"
// this should never happen // anyway, we'll continue with url2 set to null.
// probably does not need to be synch (always accessed through ThreadLocal?) // give access to Test code
// For use by AJP
// vars will be null on TestPlan
// Original numeric order (we now use strings)
// Allow for old format file without the extra columnns
"/*     * Determine if content-type is known to be binary, i.e. not displayable as text.     *     * @param ct content type     * @return true if content-type is of type binary.     */"
// Embedded URL match regex
// Extract charset and store as DataEncoding // N.B. The meta tag: // <META http-equiv="content-type" content="text/html; charset=foobar"> // is now processed by HTTPSampleResult#getDataEncodingWithDefault // $NON-NLS-1$
// check if filename defined
//    private static final Logger log = LoggingManager.getLoggerForClass();
// does not apply to Java implementation
// divisor is a positive number // should never case NFE
// add a listener to activate or not concurrent dwn.
// Note: Windows user preferences are stored relative to: HKEY_CURRENT_USER\Software\JavaSoft\Prefs
// close file
// non-null Comparators don't appear to be used at present
// URL CONFIG
// Keep track of token separator
// includes \n
// open file
// find order.indexOf(currentKey) using == rather than equals() // there may be multiple entries which compare equals (Bug 50898) // This will be slightly slower than the built-in method, // but replace() is not used frequently.
// Bottom (embedded resources, source address and optional tasks)
// Note: this is an instance field (and is not transient), so is created by the JMeter client // and propagated to the server instance by RMI. // [a static field would be recreated on the server, and would pick up the server properties] // $NON-NLS-1$
//"" is not the same as no realm
// 2 column size
//$NON-NLS-1$ //$NON-NLS-1
"/*     * Argument types used to create the method.     * May be provided explicitly, or derived from the constructor argument list.     */"
// Register the handler for focus listening. This handler will // only notify the registered when the text changes from when // the focus is gained to when it is lost.
// We do not use getEncoding method of Writer, since that returns // the historical name
// find all jar files or paths that end with strPathOrJar
// Holds the mappings from the saveservice properties file // Key: alias Entry: full class name // There may be multiple aliases which map to the same class
// equation for calculating the weight // w = (int)(33 * (used/max))
"/*     * (non-Javadoc) A new instance is created for each thread group, and the     * clone() method is then called to create copies for each thread in a     * thread group. This means that the lock object is common to a thread     * group; separate thread groups have separate locks. If this is not     * intended, the lock object could be made static.     *     * @see java.lang.Object#clone()     */"
// we have a single character; could be a token // it is a token
// no error as default
"/*                     * Now check for invalid message format: if string contains {0}                     * and ' there may be a problem, so do a format with dummy                     * parameters and check if there is a { in the output. A bit                     * crude, but should be enough for now.                     */"
// The test object, i.e. the instance of the class containing the test method // This is the same as testCase for JUnit3 tests // but different for JUnit4 tests which use a wrapper
// Mask should contain all types (but not NOT)
// we have to check and make sure the constructor is // accessible. if we didn't it would throw an exception // and cause a NPE.
// RETRIEVE IMAGES // $NON-NLS-1$
// Define file format versions // $NON-NLS-1$
// go to 1st line
// draw grid only when x is 1. If we didn't // the grid line would draw over the data // lines making it look bad.
// Is monitor // $NON-NLS-1$
// --------------------------------------------------------------------- // XML RESULT FILE CONSTANTS AND FIELD NAME CONSTANTS // ---------------------------------------------------------------------
// only contains HTTPFileArg elements
// changed the logic for BEA Weblogic in the case a // user uses Tomcat's status servlet without any // modifications. Weblogic will return nothing for // the connector, therefore we need to check the size // of the list. Peter 12.22.04
// The string to check (Url or data)
// this.DATA = null; // this.DATA = stat;
// Use MD5 // $NON-NLS-1$
// we check to see if the lastSelectedPath is null // after we clear, it would return null
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
// Allow testing of failure codes
// pick up any recent changes from other threads
// Add a new field source ip address (for HC implementations only) //default: IP/Hostname
// Use binary mode file transfer? // $NON-NLS-1$
// What are we testing against?
"/*             * Parent elapsed total should be no smaller than the sum of the individual samples.             * It may be greater by the timer granularity.             */"
// $NON-NLS-1$ //default: IP/Hostname
// used by HttpTestSampleGui
// did not find \n, put the character // back
// Assume it is the URL
// Tabbed pane that contains parameters and raw body
// Button for browsing webservice wsdl
// Find the first non-null message
// Both these are needed in the list even though they set the same // variable
// autoRedirects and followRedirects cannot both be selected
// Web Methods
// date or lastModified may be null or in bad format
// see https://developer.mozilla.org/en/HTTP_Caching_FAQ // see http://www.ietf.org/rfc/rfc2616.txt#13.2.4
// do it once outside loop
// Is there a cached parser?
// improve xml display
// The headers and body are divided by a blank line (the \r is to allow for the CR before LF) // $NON-NLS-1$
// Test files for testLoadAndSave; output will generally be different in size but same number of lines
// Not should always succeed against an empty result
// Otherwise don't save anything - no point
// add the proxy elements
// Needs to be package protected for Unit test
// Set the bean's property to the value we just obtained:
// Get the Matcher for this thread
// TEXT FIELD // This means exit if last sample failed // $NON-NLS-1$
// Download concurrent resources // $NON-NLS-1$
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// should never happen...
// We get the AuthManager and pass it to the WSDLHelper // once the sampler is updated to Axis, all of this stuff // should not be necessary. Now I just need to find the // time and motivation to do it.
// Enable the DELETE and SAVE buttons if they are currently // disabled.
// transient Perl5Compiler compiler = new Perl5Compiler(); // $NON-NLS-1$
// reset the bsh.Interpreter before each execution
// ensure value is propagated to editor
// so we can detect it
// must create a new object, // or else end up with a set full of the same Map object
// parameters to pass to script file (or script)
// Next line
// Initialize the editor with the provided default value or null:
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// MAIN PANEL
// Duration is in seconds, starting from when the threads start
// script file name (if present)
// ++ // GUI tests throw the error // testArgumentCreation(org.apache.jmeter.config.gui.ArgumentsPanel$Test)java.lang.NoClassDefFoundError // at java.lang.Class.forName0(Native Method) // at java.lang.Class.forName(Class.java:141) // at // java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment(GraphicsEnvironment.java:62) // // Try to find out why this is ...
// script area
"/*     * A dummy class to pass the pointer of URL.     */"
// The Set is used to ignore duplicated binary files. // Using a LinkedHashSet to avoid unnecessary overhead in iterating // the elements in the set later on. As a side-effect, this will keep // them roughly in order, which should be a better model of browser // behaviour.
// Don't let the input field shrink too much
// Now look for URLs in the STYLE attribute
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// we only put HTTPFileArgs in it
// $NON-NLS-1$ // Permit dynamic resize of TextArea
// Note there's 3 capturing groups per value
// Check for a BASE HREF:
// Non-expiring
/* Action to be taken when a Sampler error occurs */
// should not happen
// Doesn't even look like a URL? // Maybe it isn't: Ignore the exception.
// if use proxy is checked, we enable // the text fields for the host and port
// Two null values -- return equal
// required for unit tests
// Disable DELETE and BROWSE buttons if there are no rows in // the table to delete.
// Listen on main socket
// Disable DELETE and BROWSE if there are no rows in the table to delete.
"/*     * See below for reason for this change. Just in case this causes problems,     * allow the change to be backed out     */"
// Putting the string first means it works even if the attribute is null
// running number
// create the JTable that holds header per row
// first we check to see if body tag has a // background set
// file panel //$NON-NLS-1$ //$NON-NLS-2$
// $NON-NLS-1$ // $NON-NLS-1$ proxy.binary.filetype=binary
"/*             * We don't want to store any cookies in the generated test plan             */"
"/*                     * TestSuite only finds testXXX() methods, and does not look                     * for suite() methods.                     *                      * To provide more compatibilty with stand-alone tests,                     * where JUnit does look for a suite() method, check for it                     * first here.                     *                      */"
// Set the form data
// Tell the sampler to do a multipart post
// $NON-NLS-1$ // $NON-NLS-1$
// Make the connection ready for sending post data
// NOOP
// $NON-NLS-1$ //- JMX file attributes
/* Implements JMeterGUIComponent.createTestElement() */
"/*     *     * The string is made private so the compiler can't propagate it into     * JMeterUtils. (Java compilers may make copies of final variables)     *     * This ensures that JMeterUtils always gets the correct     * version, even if JMeterUtils is not re-compiled during the build.     */"
/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
// Must agree with the order of entries in the drop-down // created in ProxyControlGui.createGroupingPanel() //private static final int GROUPING_NO_GROUPS = 0;
// Enable DELETE (which may already be enabled, but it won't hurt)
// Check if the property exists
// Highlight (select) the appropriate row.
// A HTTP POST request, multipart/form-data, simple values, // with \n as end of line, which should also be handled, // and with more headers in each multipart
// Force a minimum table height of 70 pixels
// script (if file not provided)
// called from ctor, so must not be overridable
// Re-throw Errors because we're supposed to let the JVM see it // Don't re-throw StackOverflows, because we know we've // corrected the situation by aborting the loop and // a long stacktrace would end up on the user's console
// Highlight (select) the appropriate rows.
// OK to call TestBeanHelper.prepare()
"/*         * If we are creating a JSR223 element, add the cache key property.         *          * Note that this cannot be done in the JSR223BeanInfoSupport class         * because that causes problems with the group; its properties are         * not always set up before they are needed. This cause various         * issues with the GUI:         * - wrong field attributes (should not allow null)         * - sometimes GUI is completely mangled         * - field appears at start rather than at end.         * - the following warning is logged:         * jmeter.testbeans.gui.GenericTestBeanCustomizer:          * org.apache.jmeter.util.JSR223TestElement#cacheKey does not appear to have been configured         *          * Adding the group here solves these issues, and it's also         * possible to add the key just before the script panel         * to which it relates.         *          * It's not yet clear why this should be, but it looks as though         * createPropertyGroup does not work properly if it is called from         * any subclasses of this class.         *          */"
// If a table cell is being edited, we must cancel the editing // before deleting the row.
// Override so we can intercept the stream
// Done by finally block: fileReader.close();
// Disable the DELETE and SAVE buttons if no rows remaining // after delete
// else No object in Map, ctx is the one
// JMeter.fail("Could not read internal resource. " + // "Archive is broken.");
// $NON-NLS-1$ //--
// @see TestRegexFunction for unit tests
// If a table cell is being edited, we should accept the current // value and stop the editing before adding a new row.
// elements have empty nodeValue, but we are usually interested in their content
// It is the most common post request, with parameter name and values // We also assume this if no content type is present, to be most backwards compatible, // but maybe we should only parse arguments if the content type is as expected //standard name=value postData
// Disable the DELETE and SAVE buttons if no rows remaining // after delete.
// Set the file uploads
// preset to default impl
// we check the count to see if we have exceeded // the number of lines to parse. There's no way // to know where to stop in the file. Therefore // we use break to escape the while loop when // we've reached the count.
// If clic on the Graph tab, make the graph (without apply interval or filter)
// create the JTable that holds one cookie per row
// Remove the header for content-type and content-length, since // those values will most likely be incorrect when the sampler // performs the multipart request, because the boundary string // will change
// Cannot find the file locally, so try the bin directory
// USER_INPUT
// independent frame to // allow it to be overlaid // by the main frame //$NON-NLS-1$
// class attributes
//++ Action command names //$NON-NLS-1$
"/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.SamplerResultTab#clearData()     */"
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
//$NON-NLS-1$ resource name
// The following getters may appear not to be used - however they are invoked via the Functor class
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
//this.setDaemon(true);
// desc.add("Use fully qualified host name: TRUE/FALSE (Default FALSE)"); //$NON-NLS-1$
// We really should never get here // because eval will throw an exception // if xpath is invalid, but whatever, better // safe
// Check if we know the encoding of the page
// doctype
// Now parse the DOM tree
// drop-down list for renderer
// a url is always in a Tag.
// if no results render in jmeter.properties, load Standard (default)
/* A checkbox choosing whether or not only successes should be logged. */
//NOT USED protected   static final String TAG_URL               = "requestUrl";       //$NON-NLS-1$
// If a table cell is being edited, we must cancel the editing before // deleting the row
// Names for the fields // $NON-NLS-1$
// only contains Argument (or HTTPArgument)
// instance attributes
// format (HMTL, XHTML, XML)
// errors only
// When the encoding is not known, the argument will get the encoded value, and the "encode?" set to false
// Table still contains one or more rows, so highlight // (select) the appropriate one.
// thresholds
//$NON-NLS-1$$NON-NLS-2$
//$NON-NLS-1$ // We only support chunked transfer encoding
// Relatively expensive operation, so do it once
// return JMeterContextService.getContext().getCurrentSampler().getName();
// Button Panel
// create the JTable that holds auth per row
"/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#setSamplerResult(java.lang.Object)     */"
// Ignore non-HTTP samplers
// wait for server to stop
// $NON-NLS-1$ // Detect if user has pressed a new link
// Drop the last character:
// N.B. originally called clear() // @see also JMeterGUIComponent
//NOOP
// $NON-NLS-1$ $NON-NLS-2$
// store the operator
//$NON-NLS-1$ $NON-NLS-2$
// default
// Whether to use dymanic key generation (if supported) // $NON-NLS-1$;
// $NON-NLS-1$ // $NON-NLS-2$
//$NON-NLS-1$;
// all table cells are editable
// $NON_NLS-1$
// Put the check boxes in a column in a panel
// Convert the old numeric types - just in case someone wants to reload the workbench
// Assume URL
"/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#getLabel()     */"
// Don't get tripped up by RE chars in the arg name
// With ssl request, url is host:port (without https:// or path) // $NON-NLS-1$
// name="sessionid" value="value"
// return the current value (don't forget the prefix!)
// increment the value
// Whether to use the redirect disabling feature (can be switched off if it does not work)
// Use null for url to simulate that HttpRequestHdr do not // know the encoding for the page. Specify contentEncoding, so the // request is "sent" using that encoding
//        super(new JMeterTreeNode(new WorkBenchGui().createTestElement(), null)); //        TestElement tp = new TestPlanGui().createTestElement(); //        initTree(tp);
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // e.g. "Transfer-Encoding: chunked", which is processed automatically by the underlying protocol // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ pseudo-header for reporting Local Address // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // For handling caching // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //e.g. public, max-age=259200 //e.g. Date Header of response
// Cannot use getThreadContext() as not cloned per thread
"/*     * Although the lock appears to be an instance lock, in fact the lock is     * shared between all threads in a thread group, but different thread groups     * have different locks - see the clone() method below     *     * The lock ensures that all the variables are processed together, which is     * important for functions such as __CSVRead and _StringFromFile.     */"
// revert
// Check if the include pattern is matched
// PreProcessors are cloned per-thread, so this will be saved per-thread // $NON-NLS-1$
// Package protected to allow test case access
// String in the panel // Do not make these static, otherwise language changes don't work // $NON-NLS-1$
// ;sessionid=value // $NON-NLS-1$
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Not 100% sure, but I believe this can't happen, so // I'll log and throw an error:
//  value="value" name="sessionid" // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-1$
// can be specified in jmeter.properties //$NON-NLS-1$
"/*     * ------------------------------------------------------------------------     * Methods implemented from interface org.apache.jmeter.config.Modifier     * ------------------------------------------------------------------------     */"
"/* (non-Javadoc)     * @see org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase#testIterationStart(org.apache.jmeter.engine.event.LoopIterationEvent)     */"
// if a mask for this argument exists
"/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#setPageTitle(java.lang.String)     */"
// values to be masked must be set in the WebApp to "*"
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// Check which HTTPSampler class we should use
// If a content encoding is specified, we set it as http parameter, so that // the post body will be encoded in the specified content encoding
// Allow list of headers to be overridden // $NON-NLS-1$
// create instances needed for parsing
// Test CSV file with a header line
// Don't break the world just because this failed:
// go on with next property.
// register content handler
// Engine may be null if it has not correctly started
// register error handler
// Build the replacer from all the variables in the collection:
// parse
//Synchronize on the info object's MUTEX to ensure //Multiple threads don't update the scheduled time simultaneously
// ------------------------------------------- // Constructors // -------------------------------------------
// Check if the user wants to create from template
// initalise pointer to first user
// $NON-NLS-1$ // default: bottom //$NON-NLS-1$
// Use round robin allocation of user details
// Assume we have already created the store
// no entries in all users, therefore create an empty Map object
// $NON-NLS-1$; // $NON-NLS-1$;
// verify if regex groups exists
// no CA key - probably the wrong store type. // cannot continue
// Note UserParameterXML accesses this variable // to obtain the Set data via method getParsedParameters()
// Set up some objects for the script to play with //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // Previously mis-spelt as theadName //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// cannot be first line either
// Leave header as is // headerBuf.append(conn.getHeaderField(0).substring(0, 8)); // headerBuf.append(" "); // headerBuf.append(conn.getResponseCode()); // headerBuf.append(" "); // headerBuf.append(conn.getResponseMessage()); //$NON-NLS-1$
// ensure Proxy threads cannot interfere with each other
// store is faulty, we need to recreate it // if cert is not valid, flag up to recreate it
// Otherwise, the response is scanned for these strings //$NON-NLS-1$
"/*     * @return     */"
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// ------------------------------------------- // Methods // -------------------------------------------
// Set the title for the first tab //$NON-NLS-1$ // Remove the other tabs if present // $NON-NLS-1$
// Should Tidy be quiet?
// reload to pick up new aliases // reloading is very quick compared with creating an entry currently
// haven't got to reset paramname & paramvalue // but did it to keep the code looking correct
//$NON-NLS-1$  // Test can't have a duration more than 2^31 secs (cast from long to int)
"/*     * These are used as GUI item names;     * LOWERBOUND, UPPERBOUND and INCREMENT are used in the focusLost() method     */"
//$NON-NLS-1$ //$NON-NLS-2$
"/*     * @param element     */"
// These names must agree case-wise with the variable and property names //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// this.updateUI();
//$NON-NLS-1$  //$NON-NLS-2$ //$NON-NLS-1$
// Property was found in a config element. Whether or not // it matched the value in the sampler, we're done with // this property -- don't look at lower-priority configs:
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// Should we download external DTDs?
// boolean pass = true;
// regex //$NON-NLS-1$ // template //$NON-NLS-1$ // which match //$NON-NLS-1$ // between text //$NON-NLS-1$ // default text //$NON-NLS-1$ // output variable name //$NON-NLS-1$ // input variable //$NON-NLS-1$
// Called by XPathAssertionGui
//$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$
// Don't make these static, otherwise language change does not work //$NON-NLS-1$
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // Previously mis-spelt as theadName //$NON-NLS-1$ //$NON-NLS-1$ (may be null) //$NON-NLS-1$ (may be null) //$NON-NLS-1$
// Report Tidy errors as Assertion failure?
// Use null for url and contentEncoding, to simulate that HttpRequestHdr do not // know the encoding for the page
//$NON-NLS-1$ //$NON-NLS-1$ // Check if it is form data //$NON-NLS-1$ // Get the form field name //$NON-NLS-1$
// Process tolerant settings
// Show Tidy warnings ?
//$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ //$NON-NLS-1$
//$NON-NLS-1$//$NON-NLS-2$
// Non-Tidy options
// Tabbed results: fill table //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// Needed by AbstractTestElement. // Also TestElementConverter and TestElementPropertyConverter for handling empty comments //$NON-NLS-1$ // N.B. Comments originally only applied to Test Plans, hence the name - which can now not be easily changed
// Tidy options
// Set the title for the first tab //$NON-NLS-1$ // Add the other tabs if not present // $NON-NLS-1$ // $NON-NLS-1$
// The HTTPClient always urlencodes both name and value, // so if the argument is already encoded, we have to decode // it before adding it to the post request
// setup bottom tabs, first Raw, second Parsed //$NON-NLS-1$ //$NON-NLS-1$
// Title multipart
// Add local JMeter properties, if the file is found //$NON-NLS-1$ //$NON-NLS-1$
// If invokee was provided, then clazz has been set up
// Label // count // Mean // median // 90% // Min // Max // Error %age //$NON-NLS-1$ // Throughput //$NON-NLS-1$ // pageSize   //$NON-NLS-1$
// Called by XPathExtractorGui
// Although this field is mutable, it is only accessed within the synchronized method deliverSampler()
// Check for local contentEncoding (charset) override; fall back to default for content body // we do this here rather so we can use the same charset to retrieve the data
//$NON-NLS-1$ // file_merge.setAccelerator( // KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_MASK)); // Set default SAVE menu item to disabled since the default node that // is selected is ROOT, which does not allow items to be inserted.
// We get the posted bytes using the charset that was used to create them
//    public final static String CONNECTION = "MongoSourceElement.connection"; //$NON-NLS-1$ //    public final static String SOURCE = "MongoSourceElement.source"; //$NON-NLS-1$ // //    public final static String AUTO_CONNECT_RETRY = "MongoSourceElement.autoConnectRetry"; //$NON-NLS-1$ //    public final static String CONNECTIONS_PER_HOST = "MongoSourceElement.connectionsPerHost"; //$NON-NLS-1$ //    public final static String CONNECT_TIMEOUT = "MongoSourceElement.connectTimeout"; //$NON-NLS-1$ //    public final static String CONTINUE_ON_INSERT_ERROR = "MongoSourceElement.continueOnInsertError"; //$NON-NLS-1$ //    public final static String MAX_AUTO_CONNECT_RETRY_TIME = "MongoSourceElement.maxAutoConnectRetryTime"; //$NON-NLS-1$ //    public final static String MAX_WAIT_TIME = "MongoSourceElement.maxWaitTime"; //$NON-NLS-1$ //    public final static String SOCKET_TIMEOUT = "MongoSourceElement.socketTimeout"; //$NON-NLS-1$ //    public final static String SOCKET_KEEP_ALIVE = "MongoSourceElement.socketKeepAlive"; //$NON-NLS-1$ //    public final static String THREADS_ALLOWED_TO_BLOCK_MULTIPLIER = "MongoSourceElement.threadsAllowedToBlockForConnectionMultiplier"; //$NON-NLS-1$ // //    public final static String FSYNC = "MongoSourceElement.fsync"; //$NON-NLS-1$ //    public final static String SAFE = "MongoSourceElement.safe"; //$NON-NLS-1$ //    public final static String WAIT_FOR_JOURNALING = "MongoSourceElement.waitForJournaling"; //$NON-NLS-1$ //    public final static String WRITE_OPERATION_NUMBER_OF_SERVERS = "MongoSourceElement.writeOperationNumberOfServers"; //$NON-NLS-1$ //    public final static String WRITE_OPERATION_TIMEOUT = "MongoSourceElement.writeOperationTimeout"; //$NON-NLS-1$
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // Add variables for access to context and variables
// If getSendFileAsPostBody returned true, it's sure that file is not null // no need for content-type here
// Could time this // res.sampleEnd(); // if sampleEnd() is not called, elapsed time will remain zero // TODO distinguish errors better //$NON-NLS-1$
// N.B. It's not po ssible to forward threadStarted() to the implementation class. // This is because Config items are not processed until later, and HTTPDefaults may define the implementation
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
//$NON-NLS-1$ // $NON-NLS1$
// More general attributes not supported
// Help convert existing JMX files which use HTTPSampler[2] nodes
// superclass does not support types
/* Shown as Parameter Name on the GUI */
// private static final int LIMIT_STR_SIZE = 100; // private boolean isRoot;
// for Thread Pool for resources but no need to use a special value?
// Find the data sent to the mirror server, which the mirror server is sending back to us
// IMAGE_PARSER now really means EMBEDDED_PARSER // $NON-NLS-1$
// for omitted file names //$NON-NLS-1$
// If there is one file with no parameter name, the file will // be sent as post body.
// Check arguments
// We know that URL arguments should always be encoded in UTF-8 according to spec
// Parse the arguments in querystring, assuming specified encoding for values
// private method to allow AsyncSample to reset the value without performing checks
// Get the query string encoded in specified encoding // If no encoding is specified by user, we will get it // encoded in UTF-8, which is what the HTTP spec says
// Needs to be visible to test cases //$NON-NLS-1$
// Encode the parameter value in the specified content encoding
// first copy the children as the call to copy.add will modify the collection we're iterating on
// we don't; use the default parser
// need to handle four cases: // - string contains name=value // - string contains name= // - string contains name // - empty string
// For concurrent get resources
// See catch clause below
// IF for download concurrent embedded resources
// kill any remaining tasks
// We must ask the user if it is ok to close current project // i.e. it is OPEN
// Browsers seem to tolerate Location headers with spaces, // replacing them automatically with %20. We want to emulate // this behaviour.
// We don't want to use CacheManager clone but the parent one, and CacheManager is Thread Safe
// Implement these here, to avoid re-implementing for sub-classes // (previously these were implemented in all TestElements)
// N.B. These values are used in jmeter.properties (jmeter.httpsampler) - do not change // They can alse be used as the implementation name
// Access needed from CSVDataSet
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// $NON-NLS-1$ //- JMX
// otherwise we use "text/xml" as the default //$NON-NLS-1$
// Store the resource keys
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$  //$NON-NLS-1$ //$NON-NLS-1$
// default (e.g. if test plan does not have definition)
// This should only be called for a specific host
// keystore for SSL keys; fixed at config except for dynamic host key generation
// trailing string is not empty
// safer to start afresh
// This class is not cloned per thread, so this is shared
"/*     * nextInt(n) returns values in the range [0,n),     * so n must be set to max-min+1     */"
// most likely this is because of a certificate error
// This can overflow
// Can be null if called from Config item testEnded() method
// This is used as an error indicator
// Note: the resource string won't respond to locale-changes, // however this does not matter as it is only used when pasting to the clipboard
// check for overflow too
// If this is defined, it is assumed to be the alias of a user-supplied certificate; overrides dynamic mode // $NON-NLS-1$
// Cannot use getThreadContext() as we are not cloned per thread
// Use format to create number; if it fails, use the default
// place raw tab in first position (first tab)
// The original name of the property
// reset the value
"/* (non-Javadoc)         * @see javax.swing.JTabbedPane#setSelectedIndex(int)         */"
// HashMap to save ssl connection between Jmeter proxy and browser
// The alias to be used if dynamic host names are not possible // $NON-NLS-1$
// user-specified key
// treat the same as EOF
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Just put the whole postbody as the value of a parameter //used when postData is pure xml (ex. an xml-rpc call)
// Check post body which was sent to the mirror server, and // sent back by the mirror server
// i.e. EOF
// Helper class (callback) for applying parameter definitions
// Should we match using regexes?
// We create the post body content now, so we know the size
// Test sending data as UTF-8, with values that have been urlencoded
// Request sent. Now get the response:
// Needs to be done after execute to pick up all the headers
// for ssl connection
// $NON-NLS-1$
// Hide Window on ESC //$NON-NLS-1$
// Allows HTTPSamplerProxy to call threadFinished; subclasses can override if necessary
// Process Commons HttpClient parameters file // $NON-NLS-1$
"/*         * (non-Javadoc)         *          * @see jodd.lagarto.EmptyTagVisitor#tag(jodd.lagarto.Tag)         */"
//        throw new UnsupportedOperationException("For test purposes only");
//$NON-NLS-1$ // return unknown action names for display error msg
// N.B. Must be in this class for the TestBean code to work
// Only check form tags
// If the pre-emptive parameter is undefined, then we can set it as needed // otherwise we should do what the user requested.
// Proxy configuration SSL
// HC3.1 does not have the method
// we stay within the same parent node
// will be null for HEAD
// Get the preference for the recent files
// Use special field ip source address (for pseudo 'ip spoofing')
// Extract transfer data.
"/*         *  We use the HostConfiguration as the key to retrieve the HttpClient,         *  so need to ensure that any items used in its equals/hashcode methods are         *  not changed after use, i.e.:         *  host, port, protocol, localAddress, proxy         *        */"
// If getSendFileAsPostBody returned true, it's sure that file is not null
// NT Includes other types of Credentials
// If there are no arguments, we can send a file as the body of the request // TODO: needs a multiple file upload scenerio
// Just append all the parameter values, and use that as the post body
//$NON-NLS-1$ //$NON-NLS-1$
// Keys for user preferences
// default: sans serif //$NON-NLS-1$
// Allow for missing optional jars
// N.B. default charset is used deliberately here
// These group names must have .displayName properties // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
//if we found a TestPlan, then we are on our way to the TestFragment
// only try to load the JMX test plan if there is one
// filter the tree for a TestFragment.
// might be null (e.g. in testing)
// TODO ?? (JMeterTreeNode) selectedNode.clone();
// If parent is OK, but child failed, add a message and flag the parent as failed
// Ensure global counters and lock are shared across threads in the group
// the DEFAULT class // Convert int to Integer etc:
// Insert the subControllersAndSamplers into random list positions.
// Creation of the customizer and GUI initialization is delayed until // the // first // configure call. We don't need all that just to find out the static // label, menu // categories, etc!
// We clone to avoid enabling existing node
// Programming error. Don't // continue.
// Set the selection once per iteration
// Original (rather odd) behaviour // start at the end
// Create a new list containing numElements null elements.
// Replace subControllersAndSamplers with reordered copy.
// Retrieve the formatted data using the same encoding used to create it
// not a wildcard
// Don't change the string, as it is used in JMX files // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Needed for HTTPSampler2
// setDone(true);
// We've gone through the whole list and are now back at the start // point of our search.
// N.B. this only reloads if necessary (ignores the reference)
// $NON-NLS-1$ // throughput.addActionListener(this);
// Form encoding has priority over page encoding
// start/end index default value for string getters and setters
// Not implemented: public static final String SAVE = "save_as"; // Not implemented: public static final String SAVE_ALL = "save_all"; // Not implemented: public static final String SAVE_TO_PREVIOUS = "save";
//$NON_NLS-1$
// implements UnsharedComponent
// Although the default is not the same as for the string value, it is only used internally
// If we are disabling the Edit-->Remove menu item and the // Edit-->Add menu item is disabled, then we also need to disable // the Edit menu. // The Java Look and Feel Guidelines say to disable a menu if all // menu items are disabled.
// Prevent entry if nothing to do
// PERTHREAD FIELD
// In case we are converting back from floating point, drop the decimal fraction // $NON-NLS-1$
// TYPE FIELD
// TEXT FIELD
// chop to server.name // $NON-NLS-1$
// Handle IPv6 urls
// chop to server.name:xx
// For all the file multiparts, we must tell it to not include // the actual file content
// Check if the header manager had a content type header // This allows the user to specify his own content-type for a POST request
// Buffer to hold the post body, except file content
// Standalone
// Allow Headers to override Host setting //$NON-NLS-1$ //Host
// If none of the arguments have a name specified, we // just send all the values as the put body
// Embedded
// Can cause NPE in HttpClient 3.1 //((SimpleHttpConnectionManager)cl.getHttpConnectionManager()).shutdown();// Closes the connection // Revert to original method: // Closes the connection
// JPanel loopPanel = new JPanel(new BorderLayout(5, 0));
// charset must agree with content-type below // $NON-NLS-1$
"/*     * This Map serves two purposes:     * - maps names to  containers     * - ensures only one container per file across all threads     * The key is the concatenation of the file name and the XPath string     */"
// Write the form data post body, which we have constructed // in the setHeaders. This contains the multipart start divider // and any form data, i.e. arguments
// we're sure that there is at least one file because of // getSendFileAsPostBody method's return value.
// Add also the length of the file content
// Check if we should do a multipart/form-data or an // application/x-www-form-urlencoded post request
// It is a normal post request, with parameter names and values
//$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-1$
// $NON-NLS-1$ // $NON-NLS-1$  $NON-NLS-2$
// Default value // $NON-NLS-1$
// $NON-NLS-1$ // maintain original default
// Action listener will be added later
// Ignore everything else
// The headers are written using ISO_8859_1 encoding //$NON-NLS-1$
// Note: position of these elements in the menu *must* match the // corresponding ProxyControl.GROUPING_* values. // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// @GuardedBy("this")
// Stop action notifications while we shuffle this around:
// Include request body if it is a post or put or patch
// Reinstate action notifications:
// never null
// Functions are wrapped in ${ and } //$NON-NLS-1$
// Set the current value:
// Check if we know the encoding of the form
// can share these
"/*         * Don't redirect the following:         * 300 = Multiple choice         * 304 = Not Modified         * 305 = Use Proxy         * 306 = (Unused)         */"
// get the start of the file
// Preserve original case
// Fetch some variables
// N.B. Originally the response code was saved with the code "rs" // but retrieved with the code "rc". Changed to always use "rc", but // allow for "rs" when restoring values. //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// LOOP LABEL // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Checkbox // $NON-NLS-1$
//Suppress messages to stdout
// Update the dataEncoding
/*================= internal business =================*/
// DROP-DOWN MENU
// number of previous matches
// e.g. DTD not reachable
// Extract the content-type if present // $NON-NLS-1$
// $NON-NLS-1$ // Temporary copies, so can set the final ones
// this method assumes UTF-8 input data
// Update follow redirects setting just for this connection
// N.B. must be done after opening connection
// Can happen for bad input document
// works OK even if ContentEncoding is null
// The following are used to set the Result details on return from // the script: //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-1$
// Normal InputStream is not available
/*============= object properties ================*/
// N.B. this closes 'in'
// Get all the request properties, which are the headers set on the connection
// Exclude the COOKIE header, since cookie is reported separately in the sample
// value is a List of Strings
// Count the retries as well in the time
// Check cache for an entry with an Expires header in the future
// Start with 0 so tries at least once, and retries at most MAX_CONN_RETRIES times
// Attempt the connection:
// try again
// This should never happen, but...
// Nice, we've got a connection. Finish sending the request:
// Done with the sampling proper.
// Now collect the results into the HTTPSampleResult:
// get the component parts // Assume domains must have at least 2 parts, e.g. apache.org // Don't try matching against *.org; however we don't check *.co.uk here
// Cannot be null here
// e.g. text/html; charset=ISO-8859-1
// if either a file or path location is given, // get the file object. // we have a file
// Set default SAVE menu item to disabled since the default node that // is selected is ROOT, which does not allow items to be inserted.
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Will already have been logged by XPathUtil // fail the sample
"/*         * To avoid re-opening the file repeatedly after an error, only try to         * open it in the first execute() call (It may be re=opened at EOF, but         * that will cause at most one failure.)         */"
// Store any cookies received in the cookie manager:
// If we redirected automatically, the URL may have changed
// Just in case // Clear any other remaining variables
// has been seen in a redirect // use header (if possible) if no message found
// Don't process again
// What to match against. N.B. do not change the string value or test plans will break! // $NON-NLS-1$
// Save cache information
"/*     * Random class for generating random numbers.     */"
"/*     * Create a data input text field     *     * @return the panel for entering the data     */"
// Check if we found an accept-charset attribute on the form
// ensure old value is not left defined
// return the absolutePath of the file
//+ JMX file attribut names - do not change! //$NON-NLS-1$
// Only replace default if it is provided
// we check to see if the proxy host and port are set
//get filename or ""
//Note: match.groups() includes group 0
"/* Note that the filename is also used as a key to the pool (if used)        ** Documents provided in the testplan are not currently pooled, as they may change        *  between samples.        */"
// we created the document
// refname has already been set to the default (if present)
// Must be local content - or not using pool
// NOTE: responseData encoding is server specific //       Therefore we do byte -> unicode -> byte conversion //       to ensure UTF-8 encoding as required by XPathUtil // convert unicode String -> UTF-8 bytes // $NON-NLS-1$
// Number of refName_n variable sets to keep
// create a temporary file to make sure we always have a file to give to the PostWriter  // Whereever we are or Whatever the current path is.
"/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending a request which contains both formdata and file content     */"
// Save the count
// Original match behaviour
// < 0 means we save all the matches
// remove any single matches
// it's not set, lets check if the user passed // proxy host and port from command line
// Remove any left-over variables
// must be a "here" document
"/*     * Required to satisfy HTTPSamplerBase Should not be called, as we override     * sample()     */"
// We assume the argument value is encoded according to the HTTP spec, i.e. UTF-8
// Remove the group count
//$NON-NLS-1$ //- JMX file attribut names - do not change!
// N.B. if the string is not recognised, DEBUG is assumed
// Assume it will fail // ditto $NON-NLS-1$
// How many groups are there?
// set the response defaults
// WARNING - could be large
// API expects null not empty array, see http://docs.oracle.com/javase/6/docs/api/javax/net/ssl/X509KeyManager.html
// remove the remaining _gn vars
// if a blank HeaderManager exists, try to // get the SOAPHTTPConnection. After the first // request, there should be a connection object // stored with the cookie header info.
// check the proxy
// Contains Strings and Integers
// if use proxy is set, we try to pick up the // proxy host and port from either the text // fields or from JMeterUtil if they were passed // from command line
// if for some reason the host is blank and the port is // zero, the sampler will fail silently
// add match as Integer
// API uses raw types
// Scheme used for slow HTTP sockets. Cannot be set as a default, because must be set on an HttpClient instance.
// $NON_NLS-1$ // $NON_NLS-1$ // $NON_NLS-1$ // $NON_NLS-1$ // $NON_NLS-1$ // $NON_NLS-1$ // $NON_NLS-1$
// string is not empty
"/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#isSuccessful()     */"
"/* (non-Javadoc)         * @see org.xml.sax.helpers.DefaultHandler#fatalError(org.xml.sax.SAXParseException)         */"
// Allow for property not yet being set (probably only applies to Test cases)
// Random match
"/* (non-Javadoc)     * @see org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase#testEnded()     */"
// for request Data
// save the agent for next time round
// @see mergeFileProperties // Must be private, as the file list needs special handling // $NON-NLS-1$ // MIMETYPE is kept for backward compatibility with old test plans // $NON-NLS-1$ // FILE_NAME is kept for backward compatibility with old test plans // $NON-NLS-1$
"/* (non-Javadoc)     * @see org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase#testEnded(java.lang.String)     */"
"/*     * @see org.apache.jmeter.report.gui.action.Command#getActionNames()     */"
// Make a internal list of all results to allow reload data with filter or interval
//$NON-NLS-1$         //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
"/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#pageEnded()     */"
"/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#setSuccessful(boolean)     */"
"/*     * (non-Javadoc)     *     * @see org.apache.jmeter.testelement.TestStateListener#testEnded(java.lang.String)     */"
// by not reading the response // for real, it improves the // performance on slow clients
// reuse documentation //$NON-NLS-1$ //$NON-NLS-2$
// reponse code doesn't really apply, since // the soap driver doesn't provide a // response code
// Set up HTTP scheme override if necessary
// We always want to override the HTTPS scheme
// RUN MENU //$NON-NLS-1$
// Accessed from multiple threads
// can throw IOException
// perform the sample
// FILE MENU //$NON-NLS-1$
// We've finished with the request, so we can add the LocalAddress to it for display
// HTTP protocol violation, but avoids NPE
// This sequence is borrowed from: // org.apache.commons.httpclient.protocol.ReflectionSocketFactory.createSocket
// Follow redirects and download page resources if appropriate:
// pick up headers if failed to execute the request
// Although the spec says UTF-8 should be used for encoding URL parameters, // most browser use ISO-8859-1 for default if encoding is not known. // We use null for contentEncoding, then the url parameters will be added // with the value in the URL, and the "encode?" flag set to false
// EDIT MENU //$NON-NLS-1$
// Always create hash because we will always need it
// Allow for null strings
// No proxy, so don't check proxy fields
// user-provided keystore // keystore generated by JMeter; single entry
// Lookup key - must agree with all the values used to create the HttpClient.
// Set the content encoding
// One-time init for this client
// This class is not serialised // The interpreter instance for this class
// set retry count
// Check if the request itself tells us what the encoding is
// Override the defualt schemes as necessary
// we start to iterate through the elements
// Set up proxy details
// This was the old value that was checked for // $NON-NLS-1$
// Add variables for access to context and variables
// reset in case was set previously
// Allow the mimetype of the file to control the content type
//$NON-NLS-1$ // Set params as a single line // $NON-NLS-1$ // and set as an array //$NON-NLS-1$ //$NON-NLS-1$
// Overridden by non-TestBean implementations to return the property value instead
// no need to process further
// N.B. need to separate protocol from authority otherwise http://server would match https://erver // could use separate fields, but simpler to combine them
// used when postData is pure xml (eg. an xml-rpc call) or for PUT
// We want to retain insertion order, so LinkedHashMap is necessary
// Method left empty here, but allows subclasses to override
// and as a string
// header[0] is not the status line... // $NON-NLS-1$
// no need to specify the port if it is the default
// Get rid of the query and the ?
// Get all the request headers
// No, must be CSV //$NON-NLS-1$
// Helper class so we can generate request data without dumping entire file contents
// parse other header lines, looking for Content-Length
// encoding does not really matter here
// TODO - charset?
"/*             * Create a Header Manager to ensure that the browsers headers are             * captured and sent to the server             */"
// If a content encoding is specified, we use that as the // encoding of any parameter values
// Save the last valid content length one
// Don't try to adjust the host name
// Write the request to our own stream
// SSL connection
// Create the parts // Add any parameters
// Keep the raw post data
// We get the posted bytes using the encoding used to create it
// If a table cell is being edited, we should accept the current value // and stop the editing before adding a new row.
// $NON-NLS-1$ this is the default used by HttpClient
// will be host:port for CONNECT
// it must be a proxied HTTPS request // $NON-NLS-1$
// not multipart // Check if the header manager had a content type header // This allows the user to specify his own content-type for a POST request
//$NON-NLS-1$ (Flash Media Manifest)
// Used by GUI
"/*     * Constructor for use during startup (intended for non-GUI use) @param name     * of summariser     */"
// second, if the tag was a composite tag, // recursively parse its children.
// So we know which button is selected
// reset
// Skip report packages as implementation is incomplete // Skip report GUI as implementation is incomplete // No, not a work in progress ...
// We just add placeholder text for file content
// If none of the arguments have a name specified, we // just send all the values as the post body
// get to 'path' part of the URL, preserving schema, auth, host if // present
// Check if we have found a content-length header //$NON-NLS-1$
// Note: if "Encoded?" is not selected, arg.getEncodedValue is equivalent to arg.getValue
// We are displaying an AssertionResult
//                ScriptRuntime.call(cx, fun, global, args, global);
"/*             * DecimalFormat adds the number to the end of the format if there             * are no formatting characters, so we need a way to prevent this             * from messing up the file name.             *             */"
// Let StringEntity perform the encoding
"/* * No point doing this on a per-connection basis, as there is currently no way to configure it. * So we leave it to the defaults set up in the SSL Context * */"
// Look for special Response Length header //$NON-NLS-1$
"/* The next line looks odd, but proxied HTTP requests look like:         * GET http://www.apache.org/foundation/ HTTP/1.1         * i.e. url starts with ""http:"", not ""/""         * whereas HTTPS proxy requests look like:         * CONNECT www.google.co.uk:443 HTTP/1.1         * followed by         * GET /?gws_rd=cr HTTP/1.1         */"
// Set the content type
// Find the page encoding and possibly encodings for forms in the page // in the response from the web server
// saved copy of first line for error reports
// Add the parameters
// Use the default encoding for urls
"/*         * Reset Locale if necessary so other locales are properly handled         */"
// The value is already encoded by the user // Must decode the value now, so that when the // httpclient encodes it, we end up with the same value // as the user had entered.
// Add the parameter, httpclient will urlencode it
// inclusion filter assumes most of // the files are not wanted, therefore // usefile is set to false unless it // matches.
//$NON-NLS-1$ // See TestElementPropertyConverter
// Buffer to hold the entity body
// we provide the MIME type here
// Only create this if we are overriding whatever default there may be // If there are no arguments, we can send a file as the body of the request
// NOTUSED Font plainText = new Font("plain", Font.PLAIN, 9); // These must not be static, otherwise Language change does not work //$NON-NLS-1$
// Just append all the parameter values, and use that as the entity body
// Check if it is a file being uploaded //$NON-NLS-1$
// Check if we have any content to send for body
// Generate result (if nec.) and populate it
//$NON-NLS-1$ // change the classname drop down
// Fetch once; needs to stay constant
// A HTTP POST request, multipart/form-data, with value that will change // if they are url encoded // Values are similar to __VIEWSTATE parameter that .net uses
// Look for special Sleep request //$NON-NLS-1$
// This class is not cloned per thread, so this is shared //@GuardedBy("this")
// If none of the arguments have a name specified, we // just send all the values as the entity body
//$NON-NLS-1$ // We have a default
// If the request entity is repeatable, we can send it first to // our own stream, so we can return it
// default: 16 //$NON-NLS-1$
// this probably cannot happen
// if argument is 'next' - go to the next line //$NON-NLS-1$ //$NON-NLS-2$
// Does not need to be synchronised, as all access is from same thread
// Lock object must exist
// ignored, already processed
// don't try twice
// Process __CSVRead(filename,*ALIAS) //$NON-NLS-1$
// ensure that clones share the same lock object
// may be the empty string
// Get the InputReader to use
// super.mergeIn(element);
// Forward to sampler
// value to return at EOF //$NON-NLS-1$ //$NON-NLS-2$
// Don't process the NAME column
"/*         * Note: the item name is used by ChangeLanguage to create a Locale for         * that language, so need to ensure that the language strings are valid         * If they exist, use the Locale language constants.         * Also, need to ensure that the names are valid resource entries too.         */"
// $NON-NLS-1$ // $NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$
// If we are enabling the Edit-->Add menu item, then we also need to // enable the Edit menu. The Edit menu may already be enabled, but // there's no harm it trying to enable it again.
// Get the file name of the current project
// Just use the first one of the possible many charsets
// use negative condition so missing (null) value is treated as FALSE
// we check the input tag type for image
// Create the multiparts
// Disable DELETE if there are no rows in the table to delete.
// default: normal //$NON-NLS-1$
// Function name //$NON-NLS-1$
// force reopen on next sample
"/*     * The testStarted/testEnded methods are called at the start and end of a test.     *     * However, when a test is run on multiple nodes, there is no guarantee that all the     * testStarted() methods will be called before all the threadStart() or sampleOccurred()     * methods for other threads - nor that testEnded() will only be called after all     * sampleOccurred() calls. The ordering is only guaranteed within a single test.     *     */"
// Content-length
//$NON-NLS-1$ // so we can add them again in init
// Marker for query string attribute
//+ JMX names - do not change // $NON-NLS-1$
// Authorization
// derived from: http://www.coderanch.com/t/342563/GUI/java/TriState-CheckBox
// Host always
//Empty override of superclass method
// Allow for some margin of error // Check that the throughput uses the time elapsed for the sub results
// Empty overrides of superclass methods
// content-type
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // $NON-NLS-1$
// Add SamplerData for consistency with BeanShell Sampler //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// we need to use up the int now
// Add alias for original StringFromFile name (had only one underscore) //$NON-NLS-1$ //$NON-NLS-1$
//int mark =
"/* * N.B. to add a new field, remember the following * - static _xyz * - instance xyz=_xyz * - clone s.xyz = xyz (perhaps) * - setXyz(boolean) * - saveXyz() * - update SampleSaveConfigurationConverter to add new fields to marshall() and shouldSerialiseMember() * - update SampleResultConverter and/or HTTPSampleConverter * - update CSVSaveService: CSV_XXXX, makeResultFromDelimitedString, printableFieldNamesToString, static{} * - update messages.properties to add save_xyz entry * - update jmeter.properties to add new property * - update listeners.xml to add new property, CSV and XML names etc. * - take screenshot sample_result_config.png * - update listeners.xml and component_reference.xml with new dimensions (might not change) * */"
// Dummy
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// Methods needed by subclasses to get access to the implementation
// new WSDLHelper("http://services.bio.ifi.lmu.de:1046/prothesaurus/services/BiologicalNameService?wsdl");
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
//$NON-NLS-1$ // select last tab
// NOTREAD // $NON-NLS-1$
"/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending only a file multipart.     */"
//+ JMX field names - do not change values //$NON-NLS-1$
//$NON-NLS-1$ // Ensure variable has been provided
//        private void drawCross(Graphics g, int x, int y) { //            g.drawLine(x + (iconWidth - 4), y + 2, x + 3, y + (iconHeight - 5)); //            g.drawLine(x + (iconWidth - 4), y + 3, x + 3, y + (iconHeight - 4)); //            g.drawLine(x + 3, y + 2, x + (iconWidth - 4), y + (iconHeight - 5)); //            g.drawLine(x + 3, y + 3, x + (iconWidth - 4), y + (iconHeight - 4)); //        }
"/*     * Keep track of the file writer and the configuration,     * as the instance used to close them is not the same as the instance that creates     * them. This means one cannot use the saved PrintWriter or use getSaveConfig()     */"
// KEY = TCPKEY or ERRKEY, Entry= Socket or String
// Number of active threads in this group
// This won't work right if we remove components. But we don't, so I'm // not going to worry about it right now.
// $NON-NLS-1$ // default value: false
// set the start time for the Thread // Duration is in seconds
// default for concurrent pool (do not change)
// Do search on Enter //$NON-NLS-1$
//- JMX names
// Ensure that these are set, even if no paramters are provided //$NON-NLS-1$ //$NON-NLS-1$
// Default concurrent pool size for download embedded resources
// Don't bother reporting stop test interruptions
// The default setting to be used (i.e. historic)
// fetch once; must be done under lock // (also protects against null)
// Use for ComboBox Source Address Type. Preserve order (specially with localization)
// Always remove cookies // Always remove authorization // Remove additional headers
// $NON-NLS-1$ // default value: 60 secs
// Only encode strings if outVersion = 1.0 //$NON-NLS-1$
// This is what JOrphanUtils.split() does
// Use default encoding
// FILE_FIELD is kept for backward compatibility with old test plans // $NON-NLS-1$
// Pass request to new proxy thread
// $NON-NLS-1$ // Supported methods:
// check there is a GUI
// i.e. GET
// Derive the mapping of content types to parsers
// look for Objects
"/*     * Optionally number the requests     */"
// checks the scheduler to stop the iteration
// If we got any results, then perform processing on the result
// Test sending data as UTF-8
// look for applets
// Table still contains one or more rows, so highlight (select) // the appropriate one.
// Search MENU //$NON-NLS-1$
// Properties to be sent to remote servers
// ensure that interrupt cannot overlap with shutdown
// then we need to download the binary
// Store MD5 hash instead of storing response // $NON-NLS-1$
"/*     * Externally callable suite() method for use by JUnit Allows tests to be     * run directly under JUnit, rather than using the startup code in the rest     * of the module. No parameters can be passed in, so it is less flexible.     */"
// paramTable.setCellSelectionEnabled(true); // paramTable.setPreferredScrollableViewportSize(new Dimension(100, // 70));
// Not synch, but it is not modified after creation
// returns empty array for null
// Send the mail ...
// Don't display Request headers label if rh is null or empty
////////////////////// Code ///////////////////////////
// Skip parameters with a blank name (allows use of optional variables in parameter lists)
// //////////////////////////////////////////////////////////// // // Implementation of the ActionListener-Interface. // // ////////////////////////////////////////////////////////////
// We use multipart if we have been told so, or files are present // and the files should not be send as the post body
// create some properties and get the default Session
// Try to ensure that more javascript code is processed OK ...
// Check if there are any difference between name and value and their encoded name and value
// Timeout occurred. Ignore, and keep looping until we're // told to stop running.
// If there is no difference, we mark it as not needing encoding
// Element tags. Must be unique. Keep sorted. //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// this is only possible for 3rd party controllers by default
// This can't happen (how should utf8 not be supported!?!), // so just throw an Error:
// boolean toReturn = true;
// allow use of relative file URLs
//$NON-NLS-1$ //-- End of names used in JMX files
// HTTP URLs must be absolute, allow file to be relative // $NON-NLS-1$ // $NON-NLS-1$
// empty collection ok to cast, local var is here to allow SuppressWarnings
// Add the query string if it is a HTTP GET or DELETE request
// Already contains a prefix
// If default port for protocol is used, we do not include port in URL
// We use the encoding which should be used according to the HTTP spec, which is UTF-8
//$NON-NLS-1$ - all threads // All threads
// Check if the sampler has a specified content encoding
// $NON-NLS-1$ // don't set empty to keep cssJquery // cssJqueryField.setText(""); // $NON-NLS-1$ // $NON-NLS-1$ // don't set empty to keep attribute // this.attributeField.setText(""); // $NON-NLS-1$ // don't change impl // this.cssJqueryLabeledChoice.setText(HtmlExtractor.DEFAULT_EXTRACTOR);
// records the existance of an equal sign
//+JMX file attributes - do not change values! // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //-JMX file attributes
// create a message
// Response Data // $NON-NLS-1$ // Request Data // $NON-NLS-1$ // Sampler result // $NON-NLS-1$
// We do not know the content encoding of the query string
// if true the Scheduler is enabled
// Append body if it is a post or put
// N.B. these are not multi-threaded, so don't make it static // ISO format $NON-NLS-1$
// The object used for each row
"/*     * The suite() method creates separate test suites for each of the types of     * test. The suitexxx() methods create a list of items to be tested, and     * create a new test instance for each.     *      * Each test type has its own constructor, which saves the item to be tested     *      * Note that the suite() method must be static, and the methods to run the     * tests must be instance methods so that they can pick up the item value     * which was saved by the constructor.     *      */"
// Transaction is done, we do not have a sampler to sample
"/*     * Private iterator used to unwrap the URL from the URLString class     *     */"
// is there a separator? // case of name=value, name=
// If we know the encoding, we can decode the argument value, // to make it easier to read for the user
// No WARN message to avoid performance impact
// If we do not know the encoding, we just use the encoded value // The browser has already done the encoding, so save the values as is
// Noop
// we have a name
// We need to call the super.next, instead of this.next, which is done in GenericController, // because if we call this.next(), it will return the TransactionSampler, and we do not want that. // We need to get the next real sampler or controller
// Iterate through the URLs and download each image:
// Get the URL matcher
// don't fetch unless pattern compiles
//url.replace('+',' ');
//+ JMX attributes - do not change
// Create a button to trigger the file chooser:
// There were some spaces in the URL
//   Used by both StandardJMeterEngine and ClientJMeterEngine. //   In the latter case, only ResultCollectors are updated, //   as only these are relevant to the client, and updating //   other elements causes all sorts of problems. // skip certain processing for remote tests
// I don't think localMatcher can be null here, but check just in case
// we have a pattern and the URL does not match, so skip it
// default: serial download embedded resources
// If selected, then generate parent sample, otherwise as per original controller
// -1 is the code for a failed sample. //
// deliverSampler allows sampler to be null, but result must not be null
// init with default value
// sample all resources with threadpool
// Number of capturing groups possibly containing Base HREFs:
// private void setSuccessCount(long count) // { // this.successCount = count; // }
// Clear all data before display a new
// call normal shutdown (wait ending all tasks)
// no need to change the foreground color
// put a timeout if tasks couldn't terminate
// Remove the other (parsed) tab if present
// private void setFailureCount(long count) // { // this.failureCount = count; // }
// case Node.TEXT_NODE: // break;
// add result to main sampleResult
// did all the tasks finish?
// log.warn("ThreadContext was not set up - should only happen in // JUnit testing..." // ,new Throwable("Debug"));
// sends the result to the visualiser // updates the model used for sending e-mails
// Not intended to be instantiated
// Cache for object-message, only used when parsing from a file because in text-area // property replacement might have been used
// Actions
// Get next sample and its name
// Action targets
"/*     * True iff we're currently processing an event triggered by the user     * selecting the ""Edit"" option. Used to prevent reverting the combo to     * non-editable during processing of secondary events.     */"
"/*     * @param res HTTPSampleResult to check     * @return parser class name (may be """") or null if entry does not exist     */"
// public static final int THREAD_GROUP = 1;
//$NON-NLS-1$ default: normal
// The redirect URL we got was not a valid URL
// Identifiers //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// This means no sample is saved
// Only add sample if it is a sample of valid url redirect, i.e. that // we have actually sampled the URL
// Now populate the any totalRes fields that need to // come from lastRes:
"/*     * Helper method to get an attribute value, if it exists @param attrs list     * of attributs @param attname attribute name @return     */"
// take copy so cannot get NPE
"/*     * Method to set files list to be uploaded.     *     * @param value     *   HTTPFileArgs object that stores file list to be uploaded.     */"
// no point saving an empty list
// Some editors may need the descriptor
// private ButtonGroup actionButtons;
"/*     * Method to get files list to be uploaded.     */"
// Weed out the empty files
// State variables
// NOOP to provide based empty impl and avoid breaking existing implementations
// may also happen if long value > int.max
// Target
// Add any assertion that failed as children of the sample node
// for new test plans that don't have FILE/PARAM/MIME properties
//$NON-NLS-1$ //$NON-NLS-1$ // These are the names of the get/set methods
// Updated the property lists
// Does not need to be synch. because it is only accessed from the sampler thread // The ClientPool does access it in a different thread, but ClientPool is fully synch.
// Action
// computes the value of the curve at the pecified abscissa // and relative to the beginning of the right piece of Spline curve
// Non-instantiable
// If we are enabling the Edit-->Remove menu item, then we also need to // enable the Edit menu. The Edit menu may already be enabled, but // there's no harm it trying to enable it again.
"/*         * Unwraps the URLString class to return the URL         */"
// Duration
//For calculating throughput across all threads
// else do nothing (cell isn't a string to edit)
//For holding the ThrougputInfo objects for all ThreadGroups. Keyed by AbstractThreadGroup objects
// assume the sample will run as soon as the delay has expired
// Calculate the delay based on the mode
// in the case the test uses a file, we set it locally and // prevent loading the file repeatedly
// N.B. we fetch the throughput each time, as it may vary during a test
// * Static int to signify the type of logical comparitor to assert
// Total number of threads
// the host has a key already
// Active threads in this group
// 8kB is the (max) size to have the latency ('the first packet') // Enough for MD5
// UTF-8 unsupported? You must be joking!
// OK, we have an old-style file definition // save it // Now deal with any additional file arguments
// All threads - alternate calculation
// -1 means not defined
// cache the parser
// NOOP state is held by component
//All threads in this group - alternate calculation
// ~a tic every 50 px
// Control reuse of cached SSL Context in subsequent iterations
// if the title graph is empty, we can assume some default
// no need to sync as one per instance
// Stroke and shape line settings
// e.g. *.apache.org // $NON-NLS-1$
// e.g. www.apache.org
// Test sending data as UTF-8, with values similar to __VIEWSTATE parameter that .net uses, // with values urlencoded, but the always encode set to false for the arguments // This is how the HTTP Proxy server adds arguments to the sampler
// Add to cache
// Get hostname
// Evaluation occurs when nbLoops is not yet evaluated  // or when nbLoops is equal to special value INFINITE_LOOP_COUNT
//+ JMX implementation attribute values (also displayed in GUI) - do not change // $NON-NLS-1$
"/*         * To disable downloading and rendering of images and frames, enable the         * editor-kit. The Stream property can then be         */"
"/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending only a formdata, as urlencoded data     */"
"/*     * In spite of the name, this is actually used to determine if the loop controller is repeatable.     *     * The value is only used in nextIsNull() when the loop end condition has been detected:     * If forever==true, then it calls resetLoopCount(), otherwise it calls setDone(true).     *     * Loop Controllers always set forever=true, so that they will be executed next time     * the parent invokes them.     *     * Thread Group sets the value false, so nextIsNull() sets done, and the Thread Group will not be repeated.     * However, it's not clear that a Thread Group could ever be repeated.     */"
// get past separator
// Put request does not use multipart, so no need for boundary
// if the displayName is the empty string, leave it like that.
// Get the encoding to use for the request
// If there are no arguments, we can send a file as the body of the request
// ensure the manager is initialised // we don't currently need to do anything further, as this sets the default https protocol
// Create the content length we are going to write
// N.B. Since the tags are extracted from an HTML Form, any values must already have been encoded
// Just append all the parameter values, and use that as the put body
// JAVA Impl accepts URLs with unsafe characters so don't do anything
// Keep the content, will be sent later
// OK (currently) to invoke using sub-class
// Set the content length
// the copying thread won't generally detect EOF
"/*     * Class to be used to create the Method.     * Will be non-null if either Class or Object was provided during construction.     *     *  Can be used instead of invokee, e.g. when using interfaces.    */"
// if the "Title of Graph" is empty, we can assume some default
// as above, but with aggregate sample instead
// Allow for the old JMX file which used the local language string
// SortFilterModel mySortedModel = // new SortFilterModel(myStatTableModel);
// if the labels are too long, they'll be "squeezed" to make the chart viewable.
"/*-------------------------------------------------------------------------     * Methods (used by UserParameterXML to get XML parameters from XML file)     *----------------------------------------------------------------------- */"
// record some sizes to allow HTTPSampleResult.getBytes() with different options
// don't call isHeadless() here, as it has a side effect. // --
// Handle the various methods
// The value is in the second group
// Expected results established using the DDA // algorithm (see // http://www.siggraph.org/education/materials/HyperGraph/scanline/outprims/drawline.htm): // 0/1 vs. 1/1 -> 0 is // closer to 33.33 // 0/2 vs. 1/2 -> 50.0 is closer to // 33.33 // 1/3 vs. 2/3 -> 33.33 is // closer to 33.33 // 1/4 vs. 2/4 -> 25.0 is closer to // 33.33 // 1/5 vs. 2/5 -> 40.0 is closer to // 33.33 // 2/6 vs. 3/6 -> 33.33 is // closer to 33.33
// Allows HTTPSamplerProxy to call notifyFirstSampleAfterLoopRestart; subclasses can override if necessary
"/*     * Map of translations for tags; only created if there is at least     * one tag and a ResourceBundle has been provided.     */"
// Provide access to HTTPSamplerBase methods
// did not want to spoof the IP address
// add listener to intercept texttofind changes and reset search
// OK to set pre-emptive auth?
// chop to "server.name:x/thing"
// Needs to be accessible by HTTPSampler2
// Generate Error Body
// Set default parameters as needed
"/*     * Split line into name/value pairs and store in headers if relevant     * If name = ""content-length"", then return value as int, else return 0     */"
// Handle old-style JMeter properties
// // Parsing Methods //
//Cannot happen
// Get the boundary string for the multiparts from the content type
// This must be done last, as must not be overridden
// Nothing to do
// We do our own cookie handling
// We did not replace the entry // so use the existing one
// chop to server.name
// May generate IllegalArgumentException
// chop to server.name:xx // $NON-NLS-1$
// Set any default request headers
"/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending a HTTPSampler with form parameters, and only     * the filename of a file.     */"
"/*     * ------------------------------------------------------------------------     * Methods     * ------------------------------------------------------------------------     */"
// Setup connection
// Will throw MissingResourceException if key is not there.
// tmp inputstream needs to have a good counting
// Pick up Actual path (after redirects)
// Can be missing, e.g. on redirect
// ------------------------------------------- // Constants and Data Members // -------------------------------------------
// We're behind schedule -- try to catch up: // assume the sample will run immediately
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // $NON-NLS-1$
// For access from test code
// We should only evalute the condition if it is the first // time ( first "iteration" ) we are called. // For subsequent calls, we are inside the IfControllerGroup, // so then we just pass the control to the next item inside the if control
// OK, because find only returns correct element types
// Label // count // Mean // Min // Max // Std Dev. // Error %age // Throughput // kB/sec // avg. pageSize
// The text field should expand horizontally, but have // a fixed height
//    /** A button for adding new arguments to the table. */ //    private JButton add; // //    /** A button for removing arguments from the table. */ //    private JButton delete;
"/*                 * Synch is needed because multiple threads can update the counts.                 */"
// Unique Barrier creation ensured by synchronized setup
"/*     * protected void initializeTableModel() { tableModel = new     * ObjectTableModel( new String[] { ArgumentsPanel.COLUMN_NAMES_0,     * ArgumentsPanel.COLUMN_NAMES_1, ENCODE_OR_NOT, INCLUDE_EQUALS }, new     * Functor[] { new Functor(""getName""), new Functor(""getValue""), new     * Functor(""isAlwaysEncoded""), new Functor(""isUseEquals"") }, new Functor[] {     * new Functor(""setName""), new Functor(""setValue""), new     * Functor(""setAlwaysEncoded""), new Functor(""setUseEquals"") }, new Class[] {     * String.class, String.class, Boolean.class, Boolean.class }); }     */"
// if parameter name exists in http request // then change its value with value obtained with regular expression
"/*     * ------------------------------------------------------------------------     * Constructors     * ------------------------------------------------------------------------     */"
// must be defined
// Label // count // Mean // median // 90% // Min // Max // Error %age // Throughpur // pageSize
// Set up the local address if one exists
// This column actually consists of a row with two sub-columns // The first column contains the labels, and the second // column contains the fields.
// Default checked // $NON-NLS-1$
// Instantiate requestview classes
// if use dynamic graph size is checked, we disable the dimension fields
// remove any port specification // $NON-NLS-1$ $NON-NLS-2$
// Sampler selection
// e.g. started from IDE with full classpath // Allow override $NON-NLS-1$ $NON-NLS-2$
// Ensure transient object is created by the server
// draw the Y axis
// add a \r\n
// the test plan has to have more than 200 samples // for it to generate half way decent distribution // graph. the larger the sample, the better the // results.
// e.g. some kinds of invalid URL
// Set up the graph with header, footer, Y axis and graph display
// DELAY DEVIATION
// Ensure that directory URLs end in "/" // $NON-NLS-1$ // $NON-NLS-1$
// already include the \r\n
"/*             * The following is needed for HTTPClient.             * (originally tried doing this in HTTPSampler2,             * but it appears that it was done too late when running in GUI mode)             * Set the commons logging default to Avalon Logkit, if not already defined             */"
// last \r\n before response data
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // jmeter.log // $NON-NLS-1$ // sample result log file // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Lazy init
"/*     * -----------------------------------------------------------------------     * Methods     * -----------------------------------------------------------------------     */"
"/*     * Listen to test and handle tidyup after non-GUI test completes.     * If running a remote test, then after waiting a few seconds for listeners to finish files,     * it calls ClientJMeterEngine.tidyRMI() to deal with the Naming Timer Thread.     */"
// All needed to ensure re-usablility
// only add Summariser if it can not be shared with the ResultCollector
// use later
// null means use the default
// Process command line property definitions // These can potentially occur multiple times
// Dynamic proxy overrules static proxy
// AVG DELAY
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // removed expiration because it's just an annoyance for static cookies
// N.B. HostConfiguration.equals() includes proxy settings in the compare.
// If we have both file as body, and form data, then only form data will be sent
// Replacement only needs to occur when starting the engine // @see StandardJMeterEngine.run()
// Set up any required Proxy credentials
// for result
// Prepare the Request tabbed pane
// Deliberate use of deprecated ctor // Create non-GUI version to avoid headless problems
// Allow HttpClient to handle the redirects:
// This is a daemon thread, which should only reach here if there are other // non-daemon threads still active
// Set all the headers from the HeaderManager
// Hint to background color on bottom tabs (grey, not blue)
"/*             * GenericController sub_1 = new GenericController();             * sub_1.addTestElement(new IfController(""3==3""));             * controller.addTestElement(sub_1); controller.addTestElement(new             * IfController(""false==true""));             */"
// Because CollectionProperty.mergeIn will not prevent adding two // properties of the same name, we need to select the first value so // that this element's values prevail over defaults provided by // configuration // elements:
"/*     * Evaluate the condition, which can be:     * blank or LAST = was the last sampler OK?     * otherwise, evaluate the condition to see if it is not ""false""     * If blank, only evaluate at the end of the loop     *     * Must only be called at start and end of loop     *     * @param loopEnd - are we at loop end?     * @return true means OK to continue     */"
// 300 codes tell client to do actions
"/*     * Use regexes to match the source data     */"
// This is applied to fields that should cause a restart when changed // $NON-NLS-1$
// Proxy can take some while to start up; show a wating cursor
//- action names
// We have credentials - should we set pre-emptive authentication?
// Prevent both redirect types from being selected
// We don't know how many entries will be skipped
// Add any files
// Change Cancel label to Close //$NON-NLS-1$
// We do not know the char set of the file to be uploaded, so we set it to null
"/*     * Update the current field. The addend is only expected to be +1/-1, but     * other values will work. N.B. the roll() method only supports changes by a     * single unit - up or down     */"
// We do not know what the char set of the file is
//$NON-NLS-1$ // Set default SAVE menu item to disabled since the default node that // is selected is ROOT, which does not allow items to be inserted.
// Set the multipart for the post
// Is Destination setup static? else dynamic // $NON-NLS-1$ // default to maintain compatibility
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // Look and Feel prefix // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ enable/disable // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Used for per-thread/user numbers
// For example: // jar:file:/JMeter/lib/ext/ApacheJMeter_core.jar!/org/apache/jmeter/util/JMeterVersion.class // or if using an IDE         // file:/workspaces/JMeter/build/core/org/apache/jmeter/util/JMeterVersion.class
// Used by SampleSaveConfigurationConverter.unmarshall()
"/*     * Implementation notes:     *     * All of the methods in this class are currently read-only. If update     * methods are included in the future, they should be defined so that a     * single instance of JavaSamplerContext can be associated with each thread.     * Therefore, no synchronization should be needed. The same instance should     * be used for the call to setupTest, all calls to runTest, and the call to     * teardownTest.     */"
// Note that sampleStarted() and sampleStopped() is not made to appear // in synch with sampleOccured() when replaying held samples. // For now this is not critical since sampleStarted() and sampleStopped() // is not used, but it may become an issue in the future. Then these // events must also be stored so that replay of all events may occur and // in the right order. Each stored event must then be tagged with something // that lets you distinguish between occured, started and ended.
// Test ignore trailing split characters // Ignore adjacent delimiters
// Resource names for column headers // $NON-NLS-1$
// Calculate the test duration. Needs to xAxis Labels and getData.
// Verify for a ".." component at next iteration
// Look for arguments elements in the target controller or higher up:
// Create the panels for the regexp tab
// Not an expression (isn't or can't be), not null. // may throw IllegalArgumentExc.
// go to first line
// For all the file multiparts, we must revert the hiding of // the actual file content
// Construct a multi-line string with all matches
// Buffer to hold the put body, except file content
// Cache of parsers - parsers must be re-usable
// Should be true
// Add regexp tester pane // $NON-NLS-1$ // $NON-NLS-1$
// empty init // $NON-NLS-1$
// nothing to do
// if other node type, we will just skip it
// NAME
// description Panel
// assume text output - script can override if necessary
// default to name of element
// number Panel
// should be quicker to find the editors if they are registered.
// information display Panel
// boolean resized = true;
// Check if alias is suitable here, rather than waiting for connection to fail
// OK, we still have some data, restore it
// rounds!
// Check if we should send only placeholder text for the // file content, or the real file content
// Implemented by parent class
// Used by itemListener // $NON-NLS-1$
// Take length from file
// Use this to override file length
// All the other headers are set up by HTTPSampler2.setupConnection()
// No header provided
// so we don't generate chunked encoding
// Execute the sample. In this case sleep for the // specified time, if any
// Write the EOL separately so we generate LF line ends on Unix and Windows // $NON-NLS-1$
// key: name (lowercase) from java.sql.Types; entry: corresponding int value
// will use chunked encoding
// Some headers are set by executeMethod()
// Add local system properties, if the file is found //$NON-NLS-1$
// add the remaining parts
// do not check hashcodes; unequal objects may have equal hashcodes
// If file encoding is specified, read using that encoding, otherwise use default platform encoding
// System.err.println("Enable Restart");
// the host matches a domain; use its key
// This should now work
"/*     * Handles groupingMode. actionPerfomed is not suitable, as that seems to be     * activated whenever the Proxy is selected in the Test Plan     * Also handles samplerTypeName     */"
//Get all fields in java.sql.Types and store the corresponding int values
// Query types (used to communicate with GUI) // N.B. These must not be changed, as they are used in the JMX files // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// no existing file or not valid // Alphanum to avoid issues with command-line quoting // we use same password for both
// Not sure we can test anything else here
// read first line and forget
//contentLength > 0 ? contentLength : DEFAULT_INITIAL_BUFFER_SIZE);
// first response
// save the latency
// Set up the defaults (may be overridden below)
// NOTUSED private Class PARSERCLASS = null;
// Should // not // detect // trailing // option
// drop empty trailing content
// Was there an error?
"/* (non-Javadoc)     * @see org.apache.jmeter.gui.AbstractJMeterGuiComponent#clearGui()     */"
// Delegate the final check to the typeEditor:
// Check that other encoding is not the current encoding // TODO - charset?
"/* Make transient as we don't want to save the SimpleDataFormat class     * Also, there's currently no way to change the value via the GUI, so changing it     * later means editting the JMX, or recreating the Listener.     */"
// Write end of multipart
// message includes the file name
// These constants are used both for the JMX file and for the setters/getters // $NON-NLS-1$
// N.B. These must agree with the new member names in SampleSaveConfiguration // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Set up the table itself
// everyone is free to swing on its side :) // add(infoPanel, BorderLayout.EAST);
// dimension of the SplineGraph is the same // resized = false;
// Sample number (string) // Start Time // Thread Name // Label // Sample Time // Status // Bytes
// The subject may be either a host or a domain
// getParentFile() may not work on relative paths
// dimension changed // resized = true;
// Default for writing//$NON-NLS-1$
// As a connection is held by only one thread, we cannot already have a  // preparedStatementMap put by another thread
// we want to return the context that is actually in the map // if it's the first put we will have a null result
// PreparedStatementMap is associated to one connection so  //  2 threads cannot use the same PreparedStatement map at the same time
//flag - if all machines within a given domain can access the variable. //(from http://www.cookiecentral.com/faq/ 3.5)
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
"/*     * N.B. NoThreadClone is used to ensure that the testStarted() methods will share the same     * instance as the sampleOccured() methods, so the testStarted() method can fetch the     * Totals accumulator object for the samples to be stored in.     */"
// Add the main panel and the graph
// Do we have some data, or a trailing empty field? // we have some data // we've started a field // Just seen ""
// First write the start multipart file // TODO - charset?
// Delete any properties whose name converts to the empty string
// Column renderers
// Use this instead of getLabelResource() otherwise getDocAnchor() below does not work
// Retrieve the formatted data using the same encoding used to create it // TODO - charset? // Write the actual file content
// Note this test will fail if a property is added or // removed to any of the components used in the test // files. The way to solve this is to appropriately change // the test file.
// We just add placeholder text for file content // $NON-NLS-1$ // Write the end of multipart file
// =================================== CSV quote/unquote handling // ==============================
// We just add placeholder text for file content // $NON-NLS-1$
// Write the form section
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// First the multipart start divider
// Add any parameters
// End the previous multipart
// Set up footer of table which displays numerics of the graphs
// Write multipart for parameter
// If there are any files, we need to end the previous multipart
// Generate x-axis label and associated color
// Write multipart for file
// And the end of the file multipart
// Set up the table with footer
// Add the end of multipart
// finally, merge the names so it's clear they've been merged
// internal list of all results
// Use for x-axis scale
"/*     * Finds all classes that extend the class, searching in the listAllClasses     * ArrayList.     *     * @param theClass     *            the parent class     * @param listAllClasses     *            the collection of classes to search in     * @param listSubClasses     *            the collection of discovered subclasses     * @param innerClasses     *            indicates whether inners classes should be included in the     *            search     */"
// Allow access to context and variables directly //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// If we have a file, but no data, then read the file
// $NON-NLS-1$ // Maximum connection retries
// Don't save empty comments - except for the TestPlan (to maintain compatibility)
// Now we just construct any multipart for the files // We only construct the file multipart start, we do not write // the actual file content
// we're sure that there is one file because of // getSendFileAsPostBody method's return value.
// Exception in progress
// N.B. this needs to be done before opening the connection
// Write boundary end marker
// get access to buffer
// wrap read() methods to track output buffer
// Can't have two matching cookies
// Preload the output so that can be read back as HTTP
// reset colors index
// Allow testcode access to the settings
// indicate that an error occured
// List of value by sampler
// make sure buffer details // track the output
// Sampling proper - establish the connection and read the response: // Repeatedly try to connect:
// canvas size
"/*         * A HTTP RESPONSE HEADER LOOKS ALOT LIKE:         *         * HTTP/1.0 200 OK Date: Wednesday, 02-Feb-94 23:04:12 GMT Server:         * NCSA/1.1 MIME-version: 1.0 Last-modified: Monday, 15-Nov-93 23:33:16         * GMT Content-Type: text/html Content-Length: 2345 \r\n         */"
// Set details from the actual response // Needs to be done before response can be stored
// Characters per second to emulate
// Add all the headers from the HeaderManager
// we don't want interrupt to try disconnection again
// Draw the graph
// Test can't have a duration more than 2^31 secs (cast from long to int)
// Override all the super-class Socket methods.
"/*     * The method will check to see if JMeter was started in NonGui mode. If it     * was, it will try to pick up the proxy host and port values if they were     * passed to JMeter.java.     */"
// Calculate intermediate values (if needed)
// Look for special Cookie request //$NON-NLS-1$
// log.debug("data["+s+"]["+idx+"]: " + data[s][idx]);
// $NON-NLS-1$ // $NON-NLS-1$ // default is not in range of a byte
// Force reload data
"/*         * Consider using Apache commons pool to create a pool of document         * builders or make sure XMLParserUtils creates builders efficiently.         */"
"/*     * This method uses Apache soap util to create the proper DOM elements.     *     * @return Element     */"
// Not 'else if' because forceReloadData
// Reload data from file
// Reload data form internal list of results
// Button
// timeout to retrieve wsdl when server not response
// NOTUSED String portname = pnode.getAttribute("name"); // used to check binding, but now it doesn't. it was // failing when wsdl did not using binding as expected
// check soap12
"/* (non-Javadoc)     * @see org.apache.http.conn.ssl.SSLSocketFactory#createSocket()     */"
// Search field
// Check URL
// get the node
// checkboxes
// revert to previous behaviour //$NON-NLS-1$ //$NON-NLS-2$
// $NON-NLS-1$ // default: bold
// get the soap:operation
// Samplers and Controllers need not apply ... // but AbstractThreadGroup (Controller) is OK
// default: circle
// there should only be one soap:operation node per operation
"/*     * Cached copy of Totals for this instance.     * The variables do not need to be synchronised,     * as they are not shared between threads     * However the contents do need to be synchronized.     */"
// first we iterate through the bindings
// Create the test file content
// default option
// now we iterate through the operations
// if the first child is soap:operation // we add it to the array
// For unit tests, @see TestCSVSaveService
// Remove quotes from charset name
// get ../ or ../../ etc.
// Keep copies of the two editors needed
// find index of path start
// Look for a case variation
// absolute URL
"/*     * @see org.apache.jmeter.gui.action.Command#getActionNames()     */"
// ditto // $NON-NLS-1$
// find path endIndex
// Try a real encoded argument
// install new path
// Must be done before setContentType
// This ensures tha HttpClient knows about the protocol
// Now allow the URL handling to work.
//$NON-NLS-1$ //$NON-NLS-2$  //$NON-NLS-1$
// now we create the compiled pattern and // add it to the arraylist
// not needed for HttpClient
// Perform the encoding
// LRUMap does not support generics currently
// We assume the name is always encoded according to spec
// The value is encoded in the specified encoding
//$NON-NLS-1$ //-- JMX tag values
// Match /../[../] etc. // $NON-NLS-1$
// skip expensive processing if it cannot apply // $NON-NLS-1$
// document or context-relative URL like: // '/path/to' // OR '../path/to' // OR '/path/to/../path/'
// path is between idx='pathStartIndex' (inclusive) and // idx='pathEndIndex' (exclusive)
// Encode according to the HTTP spec, i.e. UTF-8
// get the text response and image icon // to determine which is NOT null
// this.READER = new BufferedReader(new // FileReader(this.SOURCE)); // parse(this.READER,el);
// we clean the line to get // rid of extra stuff
// now we set request method
// increment the current count
// we filter the line first, before we try // to separate the URL into file and // parameters.
// current default language properties file
// in the case when the filter is not set, we // parse all the lines
// Find the last controller in the target to store the // sampler there:
// check the URL for "?" symbol
// variables maintained by server code // @GuardedBy("sampleStore") // maintain separate count of samples for speed
// Bug can generate RTE
// we don't want interrupt to try disconnection again // We don't want to continue using this connection, even if KeepAlive is set // May not exist
// if the string contains atleast one double // quote and checkMethod is true, go ahead // and tokenize the string.
// we return the original string
// Test CSV file with a header line and recycle is true
// convert the Parameters
// Send different event wether we are merging a test plan into another test plan, // or loading a testplan from scratch
// avoid possible NPE when trimming the name
// number of nodes
// the keystore for use by the Proxy
// There's a few properties which are excluded from this processing:
// number of non extreme nodes (_m-2)
// Huh! don't store this one!
// the number of nodes is defined by the length of r
"/*     * (non-Javadoc)     *     * @see org.apache.jmeter.util.LocaleChangeListener#localeChanged(org.apache.jmeter.util.LocaleChangeEvent)     */"
// grab the nodes
// read one line at a time using // BufferedReader
// If set, this is the regex that is used to extract the status from the // response // NOT implemented yet private static final String STATUS_REGEX = // JMeterUtils.getPropDefault("tcp.status.regex","");
// computes interpolation coefficients
//OK //OK // Don't copy this; it is per instance resultFileName = res.resultFileName;
// creation of the interpolation structure
// local variables
// we tokenize using double quotes. this means // for tomcat we should have 3 tokens if there // isn't any additional information in the logs
// Allow for old format file without mechanism support
// there should only be one token // that starts with slash character
// do nothing. it's naive, but since // the utility is meant to parse access // logs the formatting should be correct
// initialize system structures (just to be safe)
// initialize the diagonal of the system matrix (A) to 4
// Test that only loops twice
// let notified threads move on and get lock on managersInUse
// initialize the two minor diagonals of A to 1
// no implementation at this time, since // we bypass the idea of having a console // tool to generate test plans. Instead // I decided to have a sampler that uses // the generator and parser directly
// initialize B
// we do a quick check to see if any // filters are set. If not we just // return false to be efficient.
// double check this logic make sure it // makes sense
//+ JMX file attributes // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //- JMX file attributes
// di (degree 0)
// Check if the entry index corresponds to a tag, if so return the tag // This also works if the tags were not translated
// exclusion filter assumes most of // the files are used, therefore // usefile is set to true, unless // it matches.
// the other object has an empty value, so remove this value from the merged object
// Request headers column renderers
//++JMX attribute names - do not change the values! // These were moved from SMTPSampler, which is why the prefix is still SMTSampler // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //--JMX attribute names
// bi (degree 2)
// ai (degree 3)
"/*     * Send POST data from <code>Entry</code> to the open connection.     *     * @param connection     *            <code>URLConnection</code> where POST data should be sent     * @return a String show what was posted. Will not contain actual file upload content     * @exception IOException     *                if an I/O exception occurs     */"
// check that there aren't any extra entries
// No text, but using fragment mode
// Obtain message formats: //$NON-NLS-1$ //$NON-NLS-1$
// intermediate arrays
// Jacobi convergence test
// init newX and oldX arrays to 0
// verify t belongs to the curve (range [0, _m-1])
// seek the good interval for t and get the piece of curve on it
// the polynomial calculation is done by the (fast) Euler method
// clear results table before filling
// Display with same order HTTP protocol
// If we know the content length, we can allow the reading of // the request to block until more data arrives. // If it is chunked transfer, we cannot allow the reading to // block, because we do not know when to stop reading, because // the chunked transfer is not properly supported yet
// computes auto-scaling and absolute plots
// can be null - e.g. if URL was invalid
// Parsed request headers
// shouldn't draw negative values
"/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#init()     */"
// $NON-NLS-1$ // SOAP request (generally) //blank name // $NON-NLS-1$
//blank name // $NON-NLS-1$
// Outer only once + ("three" + ("four" + "five" + "six" + "seven") * innerLoopCount) * outerLoopCount;
// Key // Value
// invalid dates must be treated as expired
// Set up the 2nd table
// Set up the 1st table Result with empty headers
// could be null if it has been deleted via NameUpdater
// Set up the 3rd table
// Create the split pane
//$NON-NLS-1$ // Concatenate query post if exists
// better ISO-8859-1 than UTF-8
// Find all the classes which implement the JavaSamplerClient // interface.
/* Implements JMeterGuiComponent.createTestElement() */
/* Implements JMeterGuiComponent.modifyTestElement(TestElement) */
// Entry tends to be ignored ...
"/*     *  The datasource is set up by testStarted and cleared by testEnded.     *  These are called from different threads, so access must be synchronized.     *  The same instance is called in each case.    */"
// Default (can be overridden by the script)
/* Overrides AbstractJMeterGuiComponent.configure(TestElement) */
"/*         * If previous time is zero, then target will be in the past.         * This is what we want, so first sample is run without a delay.        */"
// N.B. some engines (e.g. Javascript) cannot handle certain declareBean() calls // after the engine has been initialised, so create the engine last
// Catch evaluation errors
// Settings panes
// the number of non extreme nodes is the number of intervals // minus 1, i.e. the length of r minus 2
// initialize to empty string, this will fail the assertion
// No max-age && No expires
// the upper limit of the curve range belongs by definition // to the last interval
"/*             * N.B. Revision 323346 introduced the ClassCast check, but then used iter.next()             * to fetch the item to be cast, thus skipping the element that did not cast.             * Reverted to work more like the original code, but with the check in place.             * Added a warning message so can track whether it is necessary             */"
// computes relative auto-scaled plots to fit in the specified area
// return label
/* Implements JavaSamplerClient.setupTest(JavaSamplerContext) */
// initialize GUI.
/* Implements JavaSamplerClient.teardownTest(JavaSamplerContext) */
/* Implements JavaSamplerClient.getDefaultParameters() */
"/*     *  N.B. this class is shared between threads (NoThreadClone) so all access to variables     *  needs to be protected by a lock (either sync. or volatile) to ensure safe publication.     */"
// Jacobi system resolving // results are stored in _rS // computes the coefficients (di, ci, bi, ai) from the results
// Test mail button
// Allow Sampler access // to test element name
// Don't add delimiter first time round
// Only set the default label if it has not been set
// Used for per-thread/user numbers // Cannot be static, as random numbers are not to be shared between instances
// failed to initialise the class
// but we do trap this error to make tests work better
// If the Parameter data can be converted (i.e. no names), we  // warn the user that the Parameter data will be lost.
// show the grid lines, to turn it off, set it to zero
// reset the paint counter
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// No point continuing // Mainly for bsh.EvalError
// variables are unlikely to contain spaces, so most likely a translation
/* Implements TestStateListener.testStarted() */
// Failures count
/* Implements TestStateListener.testStarted(String) */
/* Implements TestStateListener.testEnded(String) */
// TestStateListener implementation
// Set default values //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// set the Y Axis to round
// See modifyTestElement
"/*             * Textfield uses \n (LF) to delimit lines; we need to send CRLF.             * Rather than change the way that arguments are processed by the             * samplers for raw data, it is easier to fix the data.             * On retrival, CRLF is converted back to LF for storage in the text field.             * See             */"
// log.info(getLabel()+" "+getFilename());
// The property name to be used to look up the display string
// Set response data
"/*     * Constructor is initially called once for each occurrence in the test plan.     * For GUI, several more instances are created.     * Then clear is called at start of test.     * Called several times during test startup.     * The name will not necessarily have been set at this point.     */"
// script can also use setResponseData() so long as it returns null
// This assumes the header names are all single words with no spaces // word followed by 0 or more repeats of (non-word char + word) // where the non-word char (\2) is the same // e.g. abc|def|ghi but not abd|def~ghi // $NON-NLS-1$ // last entries may be quoted strings
// Set if we were successful or not
// ensure counts are updated correctly
// These variable names must have .displayName properties and agree with the getXXX()/setXXX() methods // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// private static final String LABEL_DEFAULT = "JavaTest";
"/*     * Utility method to set up all the values     */"
// Let the GUI show that it will not be encoded
// set this false to suppress some items for use in HTTP Request defaults
// Make sure the sample start time and sample end time are recorded // in order not to confuse the statistics calculation methods: if //  an error occurs and an exception is thrown it is possible that // the result.sampleStart() or result.sampleEnd() won't be called
// If we're not storing subsequent samplers, we'll need the // first sampler to do all the work...:
// Find the first empty line of the multipart, it signals end of headers for multipart // Agents are supposed to terminate lines in CRLF:
// Used by Request Panel //$NON-NLS-1$
"/*     * Returns the selection value as a int,     * with the value set to zero if it is out of range.     */"
// Record sample start time.
// Are we uploading? // $NON-NLS-1$
// Generate a random-ish offset value using the current time.
// These items are shared between threads in a group by the clone() method // They are initialised by testStarted() so don't need to be serialised
//$NON-NLS-1$ key for HashMap
"/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#clearData()     */"
// Probably a missing // jar
// Record end time and populate the results.
// The name of the sampler
//private ImageIcon runningIcon = JMeterUtils.getImage("thread.enabled.gif");
// Only do the calculation if it is needed
// property values are strings
// Execute the sample. In this case sleep for the // specified time.
// read 1st line // read 5 lines + restart to file begin // line 2 // line 3 // line 4 // line 5 // return to 2nd line (first line is names)
// String used to indicate a null value
// Decent value for timers
// read-only after class init
// Find the data sent to the mirror server, which the mirror server is sending back to us // We assume the headers are in ISO_8859_1, and the body can be in any content encoding. // Therefore we get the data sent in ISO_8859_1, to be able to determine the end of the // header part, and then we just construct a byte array to hold the body part, not taking // encoding of the body into consideration, because it can contain file data, which is // sent as raw byte data
// based on e291. Getting the Name of a JDBC Type from javaalmanac.com // http://javaalmanac.com/egs/java.sql/JdbcInt2Str.html
// Based on query return value, get results
// User provided incorrect query type
// N.B. Originally there was only one filename, and only get(RETR) was supported // To maintain backwards compatibility, the property name needs to remain the same // $NON-NLS-1$
// Special case for the TestPlan's Arguments sub-element:
// Use with SSL connection
// Remember this was first in its batch
// Re-parse (now it's the http request over SSL)
// //////////////////////////////////////////////////////////// // // Methods used to store and retrieve the MailerVisualizer. // // ////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////// // // Methods to implement the ModelListener. // // ////////////////////////////////////////////////////////////
// Should not happen, but if it does we don't want to continue
// Create the panels for the cssJquery tab
"/*     * (non-Javadoc)     *     * @see org.apache.jmeter.testelement.TestStateListener#testStarted()     */"
// Save the value in the variable if present
"/*     * (non-Javadoc)     *     * @see org.apache.jmeter.testelement.TestStateListener#testEnded()     */"
// most current subclasses can process text
// For identifying log messages
"/*     * (non-Javadoc)     *     * @see org.apache.jmeter.testelement.TestStateListener#testStarted(java.lang.String)     */"
// in case
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
// Could be SampleResult or AssertionResult
"/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#createTestElement()     */"
// can't have an output parameter type null
// thrown by Derby JDBC (at least) if there are no "?" markers in statement
// add a message when no request data (ex. Java request)
// called by HttpRequestHdr
// save the current count
// LRUMap is not generic
// to save last select tab (raw/parsed)
// i starts at 1
// Result column renderers
// Remove any additional values from previous sample
// call to TestBeanHelper.prepare() is intentional
// Response headers column renderers
// Can't add a TestPlan anywhere
// $NON-NLS-1$ // Get the previous count
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Keep a record of the pre-thread pools so that they can be disposed of at the end of a test
// Ensure output follows version
"/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(org.apache.jmeter.testelement.TestElement)     */"
// Response fields column renderers
// Now, parse initial request (in case it is a CONNECT request)
// Test leading split characters
// calling disconnect doesn't close the connection immediately, // but indicates we're through with it. The JVM should close // it when necessary. // we don't want interrupt to try disconnection again // Disconnect unless using KeepAlive
// Check if the exclude pattern is matched
// the child to be removed will always be 0 'cos as the nodes are // removed the nth node will become (n-1)th
// i.e. if we want per thread pooling // pool will be created later
// Look for elements directly within the HTTP proxy:
"/*     * Set up the DataSource - maxPool is a parameter, so the same code can     * also be used for setting up the per-thread pools.    */"
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-1$
// Add cssJquery tester pane // $NON-NLS-1$ // $NON-NLS-1$
// log is required to ensure errors are available
// If no expressions are specified, we let the sample pass
// used to hold per-thread singleton connection pools
"/*     * Wrapper class to allow getConnection() to be implemented for both shared     * and per-thread pools.     *     */"
// one space for blank header // $NON-NLS-1$  // one space for blank header  // $NON-NLS-1$
// Check that we have a content type
// i.e. shared pool
// in the rare case the WSDL is protected and requires // authentication, use the AuthManager to set the // authorization. Basic and Digest authorization are // pretty weak and don't provide real security.
// make sure setting the new isolation mode is done in an auto committed transaction
// Reset it
// Will use default isolation
// We always want to override the HTTPS scheme, because we want to trust all certificates and hosts
// Assume we will be successful
// set the auth. thanks to KiYun Roe for contributing the patch // I cleaned up the patch slightly. 5-26-05
// create tables // The object used for each row
// The environment is supposed to use String keys only
// It is not possible to access the actual HTTP response code, so we assume no data means failure
// $NON-NLS-1$ // Create the panels for the other tabs
// assume default charset is OK here //      <apache-bsf.version>2.4.0</apache-bsf.version>
"/*     * We use a LinkedBlockingQueue (rather than a ConcurrentLinkedQueue) because it has a     * poll-with-wait method that avoids the need to use a polling loop.     */"
// Using onMessage Listener
// We are displaying a SampleResult
// Allow for short/negative times
// reset for reuse
// called from threadFinished() thread
//GuardedBy("this")
// $NON-NLS-1$ // $NON-NLS-1$  // $NON-NLS-2$
// reload after adding alias
// Not a real sampler
// response message label
// Parsed response headers
// renamed from clear
// Done
// Reset search
// Check if we have it in the cache
// (TestElement) // el.getProperty(JMSSampler.JMS_PROPERTIES).getObjectValue());
// (TestElement) // el.getProperty(JMSSampler.JNDI_PROPERTIES).getObjectValue());
// restore tabbed pane parsed if needed
// Button group resources
// restore last selected tab
// append '/' if this isn't the last token or it is but the original // path terminated w/ a '/'
// NO NEED TO INITIALIZE WHEN getCreateOneInstancePerSample  // is true cause it will be done in sample
"/*                             * Calling a method via reflection results in wrapping any                             * Exceptions in ITE; unwrap these here so runProtected can                             * allocate them correctly.                             */"
// if concurrent download emb. resources, add to a list for async gets later
// now that we have stripped the file, we can parse the parameters
// These are the names of properties used to define the labels // $NON-NLS-1$
// Is it only the parameter values which are encoded in the specified // content encoding, the rest of the query is encoded in UTF-8 // Therefore we compare the whole query using UTF-8
// if checkMethod on the token is true // we tokenzie it using space and escape // the while loop. Only the first matching // token will be used
// Button group resources when Bytes Message is selected
// $NON-NLS-1$ // Button group resources
// Add variables for access to context and variables //$NON-NLS-1$
"/**     * Method should add the JUnit testXXX method to the list at     * the end, since the sequence matters.     * @param methodName     */"
// here is the core routine to find appropriate cookie manager and // check it's not being used.  If used, wait until whoever's using it gives // it up
// First have to release the cookie we were using so other // threads stuck in wait can move on
//++ These names are used in the JMX files, and must not be changed
// Cache for file. Only used by sample() in a single thread
// Cache for bytes-message, only used when parsing from a file
// Potentially expensive; do it once
// Allow shorthand names
// Display cookie in headers table (same location on http protocol)
"/*     * N.B. These entry indexes MUST agree with the SearchControls SCOPE_LEVELS, i.e.     *      * javax.naming.directory.SearchControls.OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE     *      * These have the values 0,1,2 so can be used as indexes in the array     * as well as the value for the search itself.     *      * N.B. Although the strings are used to set and get the options, language change     * does not currently cause a problem, because that always saves the current settings first,     * and then recreates all the GUI classes.     */"
// list of parsers //$NON-NLS-1$
// quieten Findbugs // default - do nothing
// Add styles to use for different types of status messages
// Prepare the Results tabbed pane
//    /** //     * Resize the table columns to appropriate widths. //     * //     * @param _table //     *            the table to resize columns for //     */ //    private void sizeColumns(JTable _table) { //    }
// Not found
"/*     * The following strings are used in the test plan, and the values must not be changed     * if test plans are to be upwardly compatible.     */"
// Add search text extension
// count limit // time limit // attributes (null = all) // return object ? // dereference links?
// ------------- get/set properties ----------------------//
// These static variables are only used to convert existing files
// will be the 3rd option, which is not checked specifically
// Internal information only // read from saveservice.properties file// $NON-NLS-1$ // Must match Revision id value in saveservice.properties,  // used to ensure saveservice.properties and SaveService are updated simultaneously // Expected value $NON-NLS-1$ // read from properties file// $NON-NLS-1$
// Maximum size that we will display
// This is the name of the HotSpot Diagnostic platform MBean (Sun Java 1.6) // See: http://download.oracle.com/javase/6/docs/jre/api/management/extension/com/sun/management/HotSpotDiagnosticMXBean.html
// Add sample
// $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$
// Default wait (ms) for a message if timeouts are not enabled // This is the maximum time the sampler can be blocked.
// No need to synch/ - only used by sampler and ClientPool (which does its own synch)
// This will be null if initialization succeeds.
// If true, start/stop subscriber for each sample
// Prepare the common tab
// run threadStarted only if Destination setup on each sample
// the createTest() method creates an extra context which needs to be closed
// If so, we need to start collection here
// init right side with first render
// run threadFinished only if Destination setup on each sample (stop Listen queue)
// MapNames are Strings
// to restore last tab used
//log.warn("DEBUG",ex); // e.g. javax.naming.SizeLimitExceededException: [LDAP: error code 4 - Sizelimit Exceeded]; remaining name '' //                                                123456789012345678901 // TODO: tidy this up
// Disabled thread start if listen on sample choice
// Don't start yet if stop between samples
// listen on sample
// element.setProperty(TCPSampler.FILENAME, filename.getText());
// Can be null if init fails
// Instantiate render classes
// listen on sample
"/*     *   Write out search results in a stable order (including order of all subelements which might     * be reordered like attributes and their values) so that simple textual comparison can be done,     * unless the number of results exceeds {@link #MAX_SORTED_RESULTS} in which case just stream     * the results out without sorting.     */"
// so we break the loops in SampleWithListener and SampleWithReceive
// preset to "Text" option
// to restore last selected tab (better user-friendly)
// Now put the current GUI in place. [This code was copied from the // EditCommand action -- we can't just trigger the action because that // would populate the current node with the contents of the new GUI -- // which is empty.] // Fetch once // Probably caused by unit testing on headless system
// Remove old right side
// create and add a new right side
// To display current sampler result before change
// Assume failure
// Cookie //$NON-NLS-1$
//++ These are JMX names, and must not be changed // $NON-NLS-1$
"/*     * Strings used to set up and process actions in this menu The strings need     * to agree with the those in the Action routines     */"
// Convert the old test plan entry (which is the language dependent string) to the resource name
// We use the default character set encoding of the JRE
// Default to be applied
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
//++ These are JMX file attribute names and must not be changed // $NON-NLS-1$
// N.B. Cannot change value, as that is used in JMX files // $NON-NLS-1$
//-- End of JMX file attribute names
// MENU_ADD_xxx - controls which items are in the ADD menu // MENU_PARENT_xxx - controls which items are in the Insert Parent menu
"/*     * perform the checks on the resources     *      */"
// Programming error. Don't continue.
// Gui components
// can't be null - this is checked by canAddTo
// No body should have been sent
// Processes Assertions // display a SampleResult
// This check the state of the TestElement and if returns false it // disable the loaded node
// Translate alias to classname and then delegate to wrapped class
// Set the status for the node
// Samples inside InterleaveController
// TEXTAREA LABEL
// Used for per-thread/user storage of increment in Thread Group Main loop
// // Member variables //
"/*         * Test:          * Before          * Selection Controller         *  - zero (default)         *  - simple controller 1         *  - - one         *  - - two         *  - simple controller 2         *  - - three         *  - - four         *  - five         *  - six         * After         *          * cond  = Switch condition          * exp[] = expected results         */"
// msgId not available until after send() is called // Note: there is only one admin object which is shared between all threads // interlock with Receiver
// if the directory already exists and is a directory, // we just renamed to "archive.date"
// TEXTAREA
// While (blank), previous sample OK - should loop until false
//$NON-NLS$
// define max scale y axis
// Outer only once + ("three" + "only once five and six" + ("four" + "seven") * innerLoopCount) * outerLoopCount;
// replace _xAxisTitle to null (don't display x axis title)
// Test plan with OnlyOnceController inside inner loop // Set up the test plan
// Check that the query string is empty
// Outer only once + ("three" + "only once five and six" + "eight in interleave only once" + ("four" + "interleave" + "eleven") * innerLoopCount) * outerLoopCount;
// assertEquals("Expected 4 lines",4,f.size());
// Create the StringFromFile function and set its parameters.
// *A next
// Lines colors
// Define chart type (line)
// Clear maps
// Y Axis ruler
// Increment cannot be < 1
// Constructor for GUI tests
// Defaults
// Manage legend placement
// Save the method name
// return new Dimension(width, 400);
// int width = getWidth();
// will always be within range of an int: as must be < width
// Test sending parameters which are urlencoded beforehand // The values must be URL encoded with UTF-8 encoding, because that // is what the HTTPArgument assumes // %C3%85 in UTF-8 is the same as %C5 in ISO-8859-1, which is the same as &Aring;
// Names for the cards // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// e.g unbind
// Take note of when buttong are changed so can change panel
// additional ctor for processing tests which use int parameters
//private static final Logger log = LoggingManager.getLoggerForClass();
// ensure only values are used
// Test sending data as ISO-8859-1
// Test sending data as UTF-8, with values similar to __VIEWSTATE parameter that .net uses
// Test sending data as UTF-8, with values that have been urlencoded, and // where we tell the sampler to urlencode the parameter values
// Check if it was a multipart http post request
// Do not use TestCase.run(TestResult) method, since it will // call setUp and tearDown. Doing that will result in calling // the setUp and tearDown method twice and the elapsed time // will include setup and teardown.
// The headers and body are divided by a blank line
// Check arguments // We should have one argument, with the value equal to the post body
// If we are loading a new test plan, initialize the tree with the testplan node we are loading
// Header may contain ;charset= , regexp extracts it so computed boundary is wrong
// Skip non-editable properties, that is: // Ignore hidden, read-only, and write-only properties
// This is needed to stop XStream keeping copies of each class
// test cases for making Url, and exercise method // addArgument(String name,String value,String metadata)
// Only contains LDAPArgument entries
// Same ViewResultsTree
//$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-1$ //$NON-NLS-1$
//sizeColumns(table);
// Needed by Visualizer interface
// chunk the output if necessary
// Educated guess
"/*     * Converts a class file from the text stored in a Jar file to a version     * that can be used in Class.forName().     *     * @param strClassName     *            the class name from a Jar file     * @return String the Java-style dotted version of the name     */"
// This 'other value' regex is deliberately weak, even accepting an empty string, to be useful when reporting malformed data. // $NON-NLS-1$
// Y Axis
// silent error, consider the curve is constant outside its range
//new Font("SansSerif", Font.PLAIN, 10)
// Ensure properties files don't use special characters
// enable embedded html resources
// ----------- get/set methods ------------------- //
// If the -j  or -l flag is set to LAST or LAST.log|LAST.jtl, then the last loaded file name is used to // generate the log file name by removing .JMX and replacing it with .log|.jtl
// sampleOccurred is called from multiple threads; not safe to write from multiple threads. // also decouples the file IO from sample generation
// ci (degree 1)
// Note: this is only used to implement TestIterationListener#testIterationStart // Since this is a frequent event, it makes sense to create the list once rather than scanning each time // The memory used will be released when the thread finishes
// For In build test case using this counter // create the new entry in the server
// Make sure decoding // follows input file
// Forget about all GUIs we've created so far: we'll need to re-created // them all!
// Find all jars in the search path
// annotation classes to check
// default is 1 // default is 0
// Support original property name // $NON-NLS-1$
// replace (update) attribute //$NON-NLS-1$ //$NON-NLS-2$ // add mobile phone number attribute //$NON-NLS-1$ //$NON-NLS-2$
// A CallableStatement can return more than 1 ResultSets // plus a number of update counts.
// TODO Charset ?
// record headers size to allow HTTPSampleResult.getBytes() with different options // $NON-NLS-1$ $NON-NLS-2$ // add 2 for a '\r\n' at end of headers (before data)
// These are values for the TEST attribute above // $NON-NLS-1$
// $NON-NLS-1$ // end of TEST values
// In other GUI component, clearGUI resets the value to defaults one as there is one GUI per Element // With TestBeanGUI as it's shared, its default values are only known here, we must call setValues with  // element (as it holds default values) // otherwise we will get values as computed by customizer reset and not default ones
// a well-behaved browser is supposed to send 'Connection: close' // with the last request to an HTTP server. Instead, most browsers // leave it to the server to close the connection after their // timeout period. Leave it to the JMeter user to decide.
// Need to append something so delimiter is // added
"/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#createPopupMenu()     */"
// Must match _version property value in saveservice.properties // used to ensure saveservice.properties and SaveService are updated simultaneously // Expected version $NON-NLS-1$
// prepare highlighter to show text find with search command
// new search?
// Can occur at run-time // could be caused by the bsh Exceptions: // EvalError, ParseException or TargetError
// save search position
// put a warning if tika-app.jar missing (or some dependencies in only tika-core|parsers packages are using) // $NON-NLS-1$ $NON-NLS-2$
"/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#getMenuCategories()     */"
// read all sortedResults into memory so we can guarantee ordering
// Display not found message and reset search
// Resource keys cannot contain spaces, and are forced to lower case // $NON-NLS-1$ // $NON-NLS-2$
// must be done prior to sorting
// Read the header part, we will be looking for a content-length // header, so we know how much we should read. // We assume headers are in ISO_8859_1 // If we do not find such a header, we will just have to read until // we have to block to read more, until we support chunked transfer
// now set the individual categories (if any)
// $NON-NLS-1$ // No point trying these
"/*     * If non-null, then any object provided to invoke() is ignored.     */"
"/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#getFileName()     */"
"/*     * Helper method to ensure that format is initialised if initializeLogging()     * has not yet been called.     */"
// saves current position in data List
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// If there's anything left ...
// assume it's senstive data
// should be a user provided class name
// Parent folder (or single message file)
// == ServerName from mail sampler
// Ensure any remaining contexts are closed
// ** These constants are used in the JMX files, and so must not be changed **
// String sampleLog = "C:/eclipse3/workspace/jmeter-21/bin/testfiles/sample_log1.jtl";
// key is the type to collect (usually long), value = count of entries
// N.B time pattern is passed to java.text.SimpleDateFormat
"/*         * Perform the sampling         */"
// Start timing
// treats last line specially // Last line // Allow for missing terminator
// Use the actual class so the name must be correct.
// special value
// Did sample succeed?
// For n values in an aggregate sample the average value = (val/n) // So need to add n * (val/n) * (val/n) = val * val / n
// Create empty properties
"/* (non-Javadoc)     * @see org.apache.log.LogTarget#processEvent(org.apache.log.LogEvent)     */"
// Requires JavaMail 1.4.2+
// Get session
// Get the store
// Get directory
// Don't save headers - they are already in the raw message
"/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#getPanel()     */"
// Save raw message
// Javadoc for the API says this is OK
// @GuardedBy("this") // Buffered reader
// Close connection
// not been set by any child samples
// Labels - don't make these static, else language change will not work
//Strip the response data before writing, but only for a successful request.
"/*     * Predefined format patterns, selected by the property log_format_type (see     * jmeter.properties) The new-line is added later     */"
"/*     * Helper method to set up the GUI screen     */"
// Cannot check the query string of the result, because the mirror server // replies without including query string in URL
// No need to log normally, as we set the status // $NON-NLS-1$ // $NON-NLS-1$
// default: 10 //$NON-NLS-1$
// $NON-NLS-1$ // may be null
// Used to separate attachment file names in JMX fields - do not change!
//-JMX file attribute names
// Process address lists
// create the certificate //rem ku:c=dig,keyE means KeyUsage:criticial=digitalSignature,keyEncipherment
// calculate message size
// Set up the sample result details
// inport the certificate
// Perform the sampling
// username / password incorrect
//+ JMX attributes - do not change the values // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// general exception
// process the sampler result
// throws ME
// throws IOE, ME
// import the signed CA cert into the store (root already there) - both are needed to sign the domain certificates
// ensure the application does not hang if it requests input
// Buttons
// when Enter is pressed, search start
"/*     * Permissible values:     *  true - match against headers     *  false or absent - match against body (this was the original default)     *  URL - match against URL     *  These are passed to the setUseField() method     *     *  Do not change these values!    */"
// default not visible
// short circuit traversal when found
// The DNAME which is used if none is provided // $NON-NLS-1$
// Search text in response data
// remove the g0,g1...gn vars
// strip the - // -- sequence .. it can either mean a change of state // to STATE_NO_OPTIONS or else a long option
// DocumentListener method
"/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#getPageTitle()     */"
// part is only needed if we // don't send an .eml-file
// getAllHeaders() is not yet genericised // throws ME
// desactivate or not specials regexp char
// throws ME // throws IOE, ME
// API not yet generic // throws ME
// Reset the status code if the message contains one
// All rows have this class
// we have at least one potential address
// Test sending data as UTF-8, with values that will change when urlencoded, and where // we tell the sampler to urlencode the parameter value
// local vars
//Synch is needed because a clear can occur while add occurs
"/*         * Server Settings         */"
"/*         * E-Mail Settings         */"
// Should behave the same for blank and LAST because success on input
// Better error than NPE
"/*         * Auth Settings         */"
// cached character == Integer.MAX_VALUE when invalid
"/*         * Security Settings         */"
"/*         * (non-Javadoc) Message Settings         */"
"/*         * Add the header panel         */"
"/* (non-Javadoc)     * @see org.apache.jmeter.report.engine.ReportEngine#reset()     */"
// Standard setup
"/*     * Low level invocation routine.     *     * Should only be called after any defaults have been applied.     *     */"
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Add the standard title
// expected
//p.add(makeButtonPanel(), BorderLayout.SOUTH);
// not compatible
// not compatible // must follow the checkbox setting
// ensure correctly set on initial display
// Might be NullProperty
//new Functor("setName"), // $NON-NLS-1$ // $NON-NLS-1$
// Thread pool Executor to get resources  // use a LinkedBlockingQueue, note: max pool size doesn't effect
// set properties using JAF
// handle body and attachments
// OK, because used in synchronised method
// i.e. mailBody is empty
// set from field and subject
// We have received one more sample
/*synchronousMode==true*/
// listener cannot be null here
// While (blank), previous sample failed - should run once
"/* (non-Javadoc)     * @see org.apache.jmeter.report.engine.ReportEngine#runReport()     */"
// OK, it has been supplied
"/* (non-Javadoc)     * @see java.lang.Runnable#run()     */"
// Methods used in creating the GUI
// could be <HTML lang=""> // $NON-NLS-1$
//private static ReportPlan plan;
// While (LAST), previous sample OK - should loop until false
// Helper method to get 1 ms resolution timing.
// Needs to be volatile as may be referenced from multiple threads // TODO see if this can be made final somehow
// Mongo is Thread Safe
// N.B. It seems that Opera needs a chain in order to accept server keys signed by the intermediate CA // Opera does not seem to like server keys signed by the root (self-signed) cert.
//there is no harm in trying to clear up
"/*    * Helper    */"
// - JMX names
// + JMX names, do not change their values
// default charset is deliberate here
// N.B. this will be a config element, so we cannot use the getXXX() methods
// Default to original behaviour, i.e. re-use connection
"/** * <p> * Super-class for TestElements that can be applied to main sample, sub-samples or both. * [Assertions use a different class because they use a different value for the {@link #getScopeName()} constant] * </p> * * <p> * Their corresponding GUI classes need to add the ScopePanel to the GUI * using the AbstractXXXGui methods: * <ul> * <li>createScopePanel()</li> * <li>saveScopeSettings()</li> * <li>showScopeSettings()</li> * </ul> * </p> */"
// N.B. this will be a config element, so we cannot use the setXXX() methods
"/*     * <p> Returns a <code>String</code> value for a character-delimited column     * value enclosed in the quote character, if required. </p>     *      * <p> If the value contains a special character, then the String value is     * returned enclosed in the quote character. </p>     *      * <p> Any quote characters in the value are doubled up. </p>     *      * <p> If the value does not contain any special characters, then the String     * value is returned unchanged. </p>     *      * <p> N.B. The list of special characters includes the quote character.     * </p>     *      * @param input the input column String, may be null (without enclosing     * delimiters)     *      * @param specialChars special characters; second one must be the quote     * character     *      * @return the input String, enclosed in quote characters if the value     * contains a special character, <code>null</code> for null string input     */"
"/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#pageStarted()     */"
// Version information for test plan header // This is written to JMX files by ScriptWrapperConverter // Also to JTL files by ResultCollector // $NON-NLS-1$
//  Normal output //  ---- Debugging information ---- //  required-type       : org.apache.jorphan.collections.ListedHashTree //  cause-message       : WebServiceSampler : WebServiceSampler //  class               : org.apache.jmeter.save.ScriptWrapper //  message             : WebServiceSampler : WebServiceSampler //  line number         : 929 //  path                : /jmeterTestPlan/hashTree/hashTree/hashTree[4]/hashTree[5]/WebServiceSampler //  cause-exception     : com.thoughtworks.xstream.alias.CannotResolveClassException //  -------------------------------
"/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#getLabelResource()     */"
// Catch errors and rethrow as ConversionException so we get location details
"/* (non-Javadoc)     * @see org.apache.jmeter.report.engine.ReportEngine#stopReport()     */"
"/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#setFileName(java.lang.String)     */"
// Don't use default for saving tristates //        element.setProperty(TCPSampler.CLOSE_CONNECTION, closeConnection.isSelected(), TCPSampler.CLOSE_CONNECTION_DEFAULT);
// Using index 0 is voluntary as child is removed in next step and added to new parent
// 5 columns size
// Insert a clone of the node, the original one will be removed by the exportDone method // the children are not cloned but moved to the cloned node // working on the original node would be harder as  //    you'll have to deal with the insertion index offset if you re-order a node inside a parent
// 3 columns size
// /** // * Creates one of the fields used to display the graph's current // * values. // * // * @param color the color used to draw the value. By convention // * this is the same color that is used to draw the // * graph for this value and in the choose panel. // * @param length the number of digits which the field should be // * able to display // * // * @return a text field configured to display one of the // * current graph values // */ // private JTextField createInfoField(Color color, int length) // { // JTextField field = new JTextField(length); // field.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0)); // field.setEditable(false); // field.setForeground(color); // field.setBackground(getBackground()); // // // The text field should expand horizontally, but have // // a fixed height // field.setMaximumSize(new Dimension( // field.getMaximumSize().width, // field.getPreferredSize().height)); // return field; // }
// method called by add is synchronized //this is a different model from the one used by the result collector
//-- JMX file constants - do not change
//$NON-NLS-1$
//$NON-NLS-1$ //$NON-NLS-1$ // modal dialog box
// OK // should treat B as separate // Should have no arg
// These must not be static, otherwise Language change does not work // $NON-NLS-1$
// Set the position when next is first called, and don't overwrite // until reInitialize is called.
//$NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// $NON-NLS-1$ // reader = xmlFactory.newSAXParser().getXMLReader();
// may be null for PUT // In an application/x-www-form-urlencoded request, we only support // parameters, no file upload is allowed
// GraphAccumVisualizer obsolete, BSFSamplerGui now a TestBean // GraphAccumVisualizer obsolete, BSFSamplerGui now a TestBean // GraphAccumVisualizer now obsolete // CTT changed to use intProp for mode
// If blank, only check previous sample when at end of loop // $NON-NLS-1$
"/*             * GenericController controller = new GenericController();             * GenericController sub_1 = new GenericController();             * sub_1.addTestElement(new IfController(""10<100""));             * sub_1.addTestElement(new IfController(""true==false""));             * controller.addTestElement(sub_1); controller.addTestElement(new             * IfController(""false==false""));             *              * IfController sub_2 = new IfController(); sub_2.setCondition( ""10<10000"");             * GenericController sub_3 = new GenericController();             *              * sub_2.addTestElement(new IfController( "" \""a\"".equals(\""a\"")"" ) );             * sub_3.addTestElement(new IfController(""2>100""));             * sub_3.addTestElement(new IfController(""false==true""));             * sub_2.addTestElement(sub_3); sub_2.addTestElement(new             * IfController(""2==3"")); controller.addTestElement(sub_2);             */"
//++ JMX file constants - do not change //$NON-NLS-1$
////////////////////// Transaction Controller - additional sample //////////////////////////////
// Are we processing the first sample?
// used for handling interrupt
// The Loop Controller panel can be displayed standalone or inside // another panel. For standalone, we want to display the TITLE, NAME, // etc. (everything). However, if we want to display it within another // panel, we just display the Loop Count fields (not the TITLE and // NAME).
// Not in cache, so create new one and cache it
// For use by the server script
// Do stuff we cannot do as part of threadStarted()
// Don't wrap this error - display it as is
//is derived from properties only
// optional processing instruction for line 2; e.g. // <?xml-stylesheet type="text/xsl" href="../extras/jmeter-results-detail-report_21.xsl"?> // $NON_NLS-1$
"/*         *  Simple test with single Selection controller         *  Generic Controller         *  + Sampler ""before""         *  + Switch Controller         *  + + Sampler ""zero""         *  + + Sampler ""one""         *  + + Sampler ""two""         *  + + Sampler ""three""         *  + Sampler ""after""         */"
// Use the test element name for the label
"/*         * Generic Controller         * - before         * - While Controller ${VAR}         * - - one         * - - two         * - - Simple Controller         * - - - three         * - - - four         * - after         */"
// Calculate response time
// Property names to preload into JMeter variables:
// Cannot do this as part of threadStarted() because the Config elements have not been processed.
// List of active threads
// should we return original value?
// set the endtime for the Thread // Duration is in seconds
// N.B. we don't wait for the thread to complete, as that would prevent parallel TGs
// we call parse with 1 to get only one. // this also means if we change the implementation // to use 2, it would use every other entry and // so on. Not that it is really useful, but a // person could use it that way if they have a // huge gigabyte log file and they only want to // use a quarter of the entries.
// Trigger end of loop condition on all parent controllers of current sampler
// fetch in case gets nulled later
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
"/*     * This is called once for each occurrence in the test plan, before the     * start of the test. The super.clear() method clears the name (and all     * other properties), so it is called last.     */"
// Mail on userlist reported NPE here - looks like only happens if there are network errors, but check anyway
// InterleaveController in inner loop
// N.B. This is only called at the start and end of a thread, so there is not // necessary to cache the search results, thus saving memory
// protected fields: JMeterToolBar class can be use to create another toolbar (plugin, etc.)     //$NON-NLS-1$
// the data implementation
// Preserve sign on first byte
// Obtain a value of the appropriate type for this property.
// do we need to close byte array (or flush it?)
// The following three can be discussed: should they be from the // first request or from the final one? I chose to do it this way // because that's what browsers do: they show the final URL of the // redirect chain in the location field.
// Deliberate use of deprecated method
//    private static Configuration getConfiguration(AssertionResult assResult) { //        DefaultConfiguration config = new DefaultConfiguration(ASSERTION_RESULT_TAG_NAME, "JMeter Save Service"); // //        config.setAttribute(FAILURE_MESSAGE, assResult.getFailureMessage()); //        config.setAttribute(ERROR, "" + assResult.isError()); //        config.setAttribute(FAILURE, "" + assResult.isFailure()); //        return config; //    }
// see if this works // it did not, let's try some other formats
"/*     * Class to handle generating the delimited string. - adds the delimiter     * if not the first call - quotes any strings that require it     */"
// The outer sample and the inner loop samples
//$NON-NLS-1$ //$NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$ //$NON-NLS-1$
// It is the sub sampler of the transaction that will be sampled
// Test to show current problem with InterleaveController // I am not sure if the expected order of the samples // below are correct, because I am not sure if it is // properly defined how the InterleaveController and // OnlyOnceController should function.
// Remote exit // Called by RemoteJMeterEngineImpl.rexit() // and by notifyTestListenersOfEnd() iff exitAfterTest is true; // in turn that is called by the run() method and the StopTest class // also called
// Process command line property definitions (can occur multiple times)
// Allow engine and threads to be stopped from outside a thread // e.g. from beanshell server // Assumes that there is only one instance of the engine // at any one time so it is not guaranteed to work ...
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
//private Set hosts = new HashSet();
// Use deprecated method, to avoid duplicating code
// Get the OutputWriter to use
// Allow TestResultWrapper to feed back the samples // This is effectively the same as saver.fromXML(InputStream) except we get to provide the DataHolder // Don't know why there is no method for this in the XStream class
// For converters to use
"/* (non-Javadoc)     * @see org.apache.jmeter.protocol.http.parser.HTMLParser#isReusable()     */"
// $NON-NLS-1$ //$NON-NLS-1$
// $NON-NLS-1$ // default: normal
// Set it
// make sure we log the error
"/* (non-Javadoc)     * @see org.apache.http.conn.ssl.SSLSocketFactory#createSocket(org.apache.http.params.HttpParams)     */"
// API expects null, not empty array
// Save Location so resulting sample can be disabled
// the url matches the last redirect
// Set category
// Set root level
// The default title for the Menu bar
//+ JMX file attributes // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //- JMX file attributes
// Changing color for column
"/*     * The following array must agree with dateFormat     *     * It is used to translate the positions in the buffer to the values used by     * the Calendar class for the field id.     *     * Current format: MM/DD/YYYY HH:MM:SS 01234567890123456789 ^buffer     * positions     */"
// first lets draw the grid
"/*         * Here's where the test really starts. Run a Full GC now: it's no harm         * at all (just delays test start by a tiny amount) and hitting one too         * early in the test can impair results for short tests.         */"
// draw the X axis
"/* (non-Javadoc)         * @see org.xml.sax.helpers.DefaultHandler#error(org.xml.sax.SAXParseException)         */"
//ignore Setup and Post here.  We could have filtered the searcher. but then //future Thread Group objects wouldn't execute.
// now draw the bar chart
// The groups have all completed now
// we sort the objects
// Fields table //$NON-NLS-1$ //not sure needs I18N? //$NON-NLS-1$ //$NON-NLS-1$
// Programming error: // bail out.
// ConcurrentHashMap does not need synch. here
// assume default charset is OK here //      <classpathentry kind="lib" path="lib/geronimo-jms_1.1_spec-1.1.1.jar"/> //      <classpathentry kind="lib" path="lib/activation-1.1.1.jar"/> //      <classpathentry kind="lib" path="lib/jtidy-r938.jar"/>
// calculate the height
// $NON-NSL-1$
// This used to be request.wait(timeout_ms), where 0 means forever // However 0 means return immediately for the latch
// reset previous result
// default: 3.0f //$NON-NLS-1$
// myRow = f.nextRow(); // assertEquals(0,myRow); // assertEquals(1,f.getNextRow());
// Check if LAF is a built-in one
// $NON-NLS-1$  // $NON-NLS-2$
// or a treenode from the same tree
// Only print final delta if there were some samples in the delta // and there has been at least one sample reported previously
// OnlyOnce inside InterleaveController
// Find and set the file for this recent file command
// @see getStaticLabel
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// file New operation may set to null, so just return app name
// FIrst make sure we save the content of the current GUI (since we // will flush it away):
// BeanInfo objects also contain locale-sensitive data -- flush them // away:
// Insert the workbench node
// JMenu reportMenu; // JMenuItem analyze;
"/*     * Allow functions etc to register for testStopped notification.     * Only used by the function parser so far.     * The list is merged with the testListeners and then cleared.     */"
// If the Add menu already exists, remove it.
// If we still can't find it, just try using all of the text
// Insert the Add menu as the first menu item in the Edit menu.
// main iteration
// There was a NPE being thrown without the null check here.. JKB
// Function does not exist, so treat as per missing variable
"/* (non-Javadoc)     * @see org.apache.jmeter.report.engine.ReportEngine#exit()     */"
"/* (non-Javadoc)     * @see org.apache.jmeter.report.engine.ReportEngine#configure(org.apache.jorphan.collections.HashTree)     */"
// This is required so that // @see org.apache.jmeter.gui.tree.JMeterTreeModel.getNodesOfType() // can find the Clearable nodes - the userObject has to implement the interface.
"/*         * (non-Javadoc)         *          * @see jodd.lagarto.EmptyTagVisitor#script(jodd.lagarto.Tag,         * java.lang.CharSequence)         */"
"/* (non-Javadoc)     * @see org.apache.http.conn.ssl.SSLSocketFactory#createLayeredSocket(java.net.Socket, java.lang.String, int, boolean)     */"
"/*     * (non-Javadoc)     *     * @see org.apache.jmeter.protocol.http.util.accesslog.LogFilter#excPattern(java.lang.String)     */"
// Find the action / form url
// if the height is less than one, we set it // to one pixel
// //////////////////////////////////////////////////////////// // // setter/getter - JavaDoc-Comments not needed... // // ////////////////////////////////////////////////////////////
// Detect functionName() so this does not generate empty string as the parameter
"/*     * If not running under AllTests.java, make sure that the properties (and     * log file) are set up correctly.     *      * N.B. In order for this to work correctly, the JUnit test must be started     * in the bin directory, and all the JMeter jars (plus any others needed at     * run-time) need to be on the classpath.     *      */"
// draw a red line for 90% point
//    Remaining implementations delegate to the wrapped key manager
// Names of JUnit3 methods //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// draw an orange line for 50% point
// This is used to keep track of local (non-remote) tests // The name is chosen to be an unlikely host-name // $NON-NLS-1$
// Process escaped characters // Store the \
// helper method - also used by constructor
//"<?xml "
// Skip the leading bytes (if any)
// Note: originally the code did use the ClientPool to "share" subscribers, however since the // key was "this" and each sampler is unique - nothing was actually shared.
// there is also a javax.swing.text.Document class.
// HELP MENU // $NON-NLS-1$
"/** * Generates Configure pop-up dialogue for Listeners from all methods in SampleSaveConfiguration * with the signature ""boolean saveXXX()"". * There must be a corresponding ""void setXXX(boolean)"" method, and a property save_XXX which is * used to name the field on the dialogue. * */"
// clear result tab on Ctrl-E
// throws HeadlessException
// OPTIONS MENU // $NON-NLS-1$ // $NON-NLS-1$
// N.B. setParameters is called before the test proper is started, // and thus variables are not interpreted at this point // So defer the file open until later to allow variable file names to be // used.
// Must return a valid node, or may generate an NPE
"/*         * Need to reset the containers for repeated runs; about the only way         * for functions to detect that a run is starting seems to be the         * setParameters() call.         */"
// RUN MENU // $NON-NLS-1$
// // Override the implementations of the superclass, forwarding all methods // from the CellEditor interface to our delegate. //
// EDIT MENU // $NON-NLS-1$ // From the Java Look and Feel Guidelines: If all items in a menu // are disabled, then disable the menu. Makes sense.
// strPathsOrJars - pathnames or jarfiles to search for classes // classNames - required parent class(es) or annotations // $NON-NLS-1$ // innerClasses - should we include inner classes? // contains - classname should contain this string // Ignore the classes which are specific to the reporting tool // $NON-NLS-1$ // notContains - classname should not contain this string // annotations - true if classnames are annotations
// FILE MENU // $NON-NLS-1$
"/* (non-Javadoc)     * @see org.apache.jmeter.gui.action.AbstractAction#doAction(java.awt.event.ActionEvent)     */"
// $NON-NLS-1$ // file_merge.setAccelerator( // KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_MASK));
// Prevent instantiation
// $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$
// $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$
// Add all the child nodes of the node we are adding
// Connect to the http server, and do a simple http post with utf-8 // encoding of the body, which caused problems when reader/writer // classes were used in the HttpMirrorThread
// we can only move a single node
// Test if can instantiate parser using property name
//$NON-NLS-1$ //$NON-NLS-1$ // reduce font
// Commented as per sebb  // http://mail-archives.apache.org/mod_mbox/jmeter-dev/201307.mbox/%3CCAOGo0VZ0z3GMbfsq_gSB%2Bp7nTUqLng6Gy2ecvYbD8_AKb-Dt5w%40mail.gmail.com%3E
// maintain original behaviour
// Update menu items to reflect recent files
// Remove the last item from the list if it was a brand new file
// Spaces are not allowed in property names read from files
// // Modifying //
// When was the last sample seen?
// Do not allow a non-leaf node to be moved into one of its children
// Package access for use by Test code //$NON-NLS-1$
// $NON-NLS-1$ // $NON-NLS-1$ //$NON-NLS-1$ // $NON-NLS-1$
// Attributes for TestElement and TestElementProperty // Must all be unique //$NON-NLS-1$ // Also used by PropertyConverter classes // $NON-NLS-1$ // $NON-NLS-1$
//  private static final Logger log = LoggingManager.getLoggerForClass();
// samplerData attributes. Must be unique. Keep sorted by string value. // Ensure the Listener documentation is updated when new attributes are added //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$
//$NON-NLS-1$ default: bottom //$NON-NLS-1$
"/*             * All done now ,so return the empty string - this allows the caller             * to append __CSVRead(file,next) to the last instance of             * __CSVRead(file,col)             *             * N.B. It is important not to read any further lines at this point,             * otherwise the wrong line can be retrieved when using multiple             * threads.             */"
// Don't try to instantiate these
// Don't clear the plan
// JFileChooser jfc = null;
// Add any files // Cannot retrieve parts once added to the MultiPartEntity, so have to save them here.
// same code as for default JMeter class
// Avoid NPE in resetPage()
// don't change name if merging
// These are not currently updated
// Clear the name of the test plan file
//@GuardedBy("this")
// $NON-NLS-1$ // $NON-NLS-2$  // $NON-NLS-1$
// Save parent node for later
// So elements can only be added as children
// this.graph.clear();
// log.info("classname:: " + strClassName);
// Match all
// compute the new Spline curve
// Check that bsh has read the file
// do nothing, wait for the next pile to complete
// made currentSample volatile
// Find JMeter home dir from the initial classpath
// special handling
// convertTree(tree);
// $NON-NLS-1$  // $NON-NLS-1$
// get the JComponent from the visualizer
// Get the string given from the choose and check // the file extension.
// i.e. no disabled icon found
// Must therefore set the enabled icon so there is at least some // icon
// put the gui object back // to the way it was.
// Container endWindow; // JPopupMenu pop;
// endWindow = window;
// Get the Main Frame.
// Close any Main Menu that is open
//transient private static final Logger log = LoggingManager.getLoggerForClass();
// boolean enabled = true;
// If icon has not been defined, then use GUI_CLASS property //
// mkdir() returns false if the directory was not created; could be because it exists
// Java on Mac OS can add a second entry to the initial classpath // $NON-NLS-1$
// There's only 1 test plan, so can cache the mode here
// Add standard jar locations to initial classpath
// Now eliminate any classpath entries that do not "match" the search
// $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$
// return the pagesize divided by 1024 to get kilobytes
// we add the entry
// $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$
// we should make this configurable eventually
// now add the samples to the HashMap
// usesUNC
//Iterator itr = data.iterator();
// duplicates
// ClassFinder needs the classpath
// incompatable (blee/all)
// Check that optional args work woth long options
// ClassFinder needs this
// $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$
// Make the addURL method visible
// needed for ShutdownClient
// If the -t flag is to "LAST", then the last loaded file (if any) is used
// Restarts
// result.setResponseData - not set
// Check // delimiters // are // allowed
// should // detect // trailing // option
// Check // "-" // is // allowed // in // arg2
// "-Dstupid="
// "-Dstupid=","-c"
// "-Dstupid","-c"
// Canonical form
// Test optional arguments
// Convert between eclipse jar name and build.properties name
// remove docs-only jars
// This would be done by the run command
// Not present
// wrong
//Wrong
// Restart file
// run test in batch mode
// N.B. This needs to divert the log for SampleResult
// only accept jar files // $NON-NLS-1$
// condensed length (without \r) // Add \r for each header // Add \r for initial header // final \r\n before data
// Check random number
// This would be done by the run // command
// should remote engines be stopped at end of non-GUI test?
// Check option combinations
// needs to be initialised
// Also initialises JMeter logging
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //$NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// etc...
// Set some (hopefully!) useful properties
"/*             * IfController controller = new IfController(""12==12"");             * controller.initialize();             */"
// Should not enter the loop
// Check "Undefined" does not become a "reserved word":
// Test with SimpleController as first item
// Should not enter the loop next time
// Start the server
// most recent
// Should not enter the loop next time // But should continue to the end of the loop
// Update classloader if necessary
//bshinit,log);
//Do what would be done earlier
// SSL not supported, startTLS not supported, other messagingException
// Should not have any text arguments
// Match by name
// should not run any children // should match the default entry
// Selection controller with two sub-controllers, but each has only 1 // child
"/*         * N.B. Requires ApacheJMeter_functions.jar to be on the classpath,         * otherwise the function cannot be resolved.        */"
// Dummy for testing functions
// While LAST, previous sample failed - should not run
// While False, previous sample failed - should not run
// $NON-NLS-1$ // $NON-NLS-1$ $NON-NLS-2$
// Set up the test plan
//for Httpclient //for Httpclient
// OnlyOnce samples
// Outer sample
// Inner loop
// Sample in inner loop
// Compute the expected sample names
// The only once samples
// Run entire test again
// Execute the test pan
"/*     * Checks for LAST or LASTsuffix.     * Returns the LAST name with .JMX replaced by suffix.     */"
"/*         * Additional Settings         */"
// most recent // $NON-NLS-1$
// OnlyOnce inside inner loop
// not Replaceable Controller
// Test skipped for now as behaviour is not yet properly defined
// Not enabled
// Sample in inner loop
// Escaped dollar commma and backslash with no variable reference
// This test tries to emulate a http sample, with two // subsamples, representing images that are downloaded for the // page representing the first sample.
// Escaped dollar commma and backslash with variable reference
// N.B. Backslashes are removed before dollar, comma and backslash
// Not a TestElement
// Escaped dollar commma and backslash with missing variable reference
// Not a ReplaceableController
// Escaped dollar commma and backslash with missing function reference
//log.debug("domain property = " + element.getProperty("domain"));
// keep track of remote tests
// Set up the non-wild variables
//NOT YET USED private JMeter _parent;
// Should not clear this?
// Check when match fails
//_parent = unused;
// Now rerun with match fail
// it will be null unless remoteStop = true
// Allow listeners to close files
// $NON-NLS-1$
// Allow enough time for JVM to exit
// Has child, but child is empty
// Has no child
// No text
// Test fragment
// Now get its text
// There aren't any
// Try to get data from subresult // Needed for addSubResult()
// Get data from both
// get data from child
// Create the SplitFile function and set its parameters.
// \u00e7 = LATIN SMALL LETTER C WITH CEDILLA // \u00e9 = LATIN SMALL LETTER E WITH ACUTE
// Create the BeanShell function and set its parameters.
// Reset files
// Check some initial variables
// Check source works
// Check persistence
// Function objects to be tested
// Helper class used to implement co-routine between two threads
// Allow other thread to start
// open as *A
// open as *B
// col2 line 1
// col 1, line 2, *A
// *B next
// col2, line 2, *B
// XPathFileContainer tests
// Remove the disabled items // For GUI runs this is done in Start.java
// This cannot be a JMeter class variable, because properties // are not initialised until later.
// Use same XPath for both threads
//String s =
// prevent accidental use of is below
// wrap-round check
// no wrap-round check
// Perform a sum and check the results
// trailing space
// Test with output variable name
// Only accept commands from the local host
// template // match number // ALL separator
// Needs to be public for tests
// Test with empty output variable name
// not full test plans
// needs to be public for testing
// start in new state
//suite.addTest(new TestLoad("checkGuiPackage"));
// Constructor for TestElement tests
// Defaults to caller URL
// Constructor for Serializable tests
// Constructor for Function tests
// Only show classpath once
// Allow the mimetype of the file to control the content type // This is not obvious in GUI if you are not uploading any files, // but just sending the content of nameless parameters
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
// used by TestAnchorModifier // used by TestAnchorModifier // used by TestSaveService
"/*     * Use a suite to allow the tests to be generated at run-time     */"
// The Locale used to instantiate the GUI objects
// Restore the original Locale
"/*     * Extract titles from component_reference.xml     */"
// Sample with no sub results, simulates an image download
// Not a true GUI component
"/*     * Extract titles from functions.xml     */"
// first time
// We don't mind if this is left over // Ditto, not a sampler
"/*     * Test GUI elements - create the suite of tests     */"
"/*     * Test Functions - create the suite of tests     */"
"/*     * Test GUI elements - run the test     */"
// So we can detect extra entries
// Is this a work in progress or an internal GUI component? // Will be "" for internal components
// Skip the example samplers ...
// Record in log as well
// For detecting extra entries
"/*     * Check that function descriptions are OK     */"
"/*     * Test GUI elements - not run for TestBeanGui items     */"
"/*     * Test serializable elements - create the suite of tests     */"
"/*     * Test serializable elements - test the object     */"
// Don't try to instantiate remote server
// Try with a parameter-less constructor first
// no luck. Ignore this class
// We won't test restricted-access classes.
// not thrown, so need to check here
// Only dump it once
// Used by findTestFile
// JMeterUtils assumes Unix-style separators
// Used to be done in initializeProperties
// needed for scripts
// Display actual encoding used (will differ if file.encoding is not recognised)
// Helper method to find a file
// Add the offset
// number of samples taken
// will only contain Argument or HTTPArgument
// same as above
// not same
// This is needed in order to set up the cookie policy
// Force the table to be at least 70 pixels high
// starts empty
// should not be stored
// Test session cookie is returned
// Test Old cookie is not returned
// Test duplicate cookie handling
// Assumes some kind of list is used
// Test cookie matching
// Cookies are ignored
// Cookies again ignored
// Show that maxlong now saved as 0
// Shutdown the http server
// Wait up to 1 second
// succeeded
// Connect to the http server, and do a simple http get
// Write to the socket
// Headers
// Close the connection
// Read the response
// Check that the request and response matches
// Write the start of the headers, and then sleep, so that the mirror // thread will have to block to wait for more data to appear
// Write the rest of the headers
// The content sent
// Connect to the http server, and do a simple http post
// Construct body
// Write the headers and body
// Write the headers, and then sleep
// Write the body
// Check that the request and response matches
// $sid$
// No entry; check it is still present
// Test https works too
// These are some of the special characters
// Dummy as the file has no entries
// Relative filenames
// Hide Window on ESC
// Identify subtests
// This is OK
// change to false after the first insert
// Do update on Enter
// must be the start of the subtree
//            private TestData(String f, String b, String s) { //                this(f, b, s, null); //            }
// Convert both to Sets
// Get expected results as a List
// A HTTP GET request
// A HTTP POST request
// A HTTP GET request, with encoding not known
// A HTTP POST request, with content-type text/plain
// A HTTP GET request, with UTF-8 encoding
// A HTTP POST request, with UTF-8 encoding
// A HTTP POST request, with unknown encoding
// A HTTP GET request, with UTF-8 encoding
// A HTTP POST request, with encoding not known
// for unit test code @see TestIfController
"/*     * Utility routine to get the connection from the pool.     * Purpose:     * - allows JDBCSampler to be entirely independent of the pooling classes     * - allows the pool storage mechanism to be changed if necessary     */"
// cnd may be null if next() called us // $NON-NLS-1$
// now evaluate the condition using JavaScript
// If-test is false, need to re-initialize indexes
// for getIterCount
// A HTTP POST request, with content-type text/plain; charset=UTF-8 // The encoding should be picked up from the header we send with the request
// Runtime is zero - no point staying around
// A HTTP POST request, with ISO-8859-1 encoding
"/*     * This is needed for OnceOnly to work like other Loop Controllers     */"
// A HTTP POST request, multipart/form-data, simple values,
// Only create the map if it is required
// no space after :
// spaces after :
// May be replaced by RandomOrderController
// Assume there's at least one file
// Description multipart
// incrementCurrent();
// File upload multipart
// Most browsers use ISO-8859-1 as default encoding, even if spec says UTF-8
// must be a controller
// No filters
// Empty filters
// Non empty filters
// can only match once
// Simple inclusion and exclusion filter
// Allow all but images
// i.e. "true"
// This must be the original (Java) HTTP sampler
// default true for compatibility
///////////////// Transaction Controller - parent ////////////////
// Check if transaction is done
// This transaction is done
// Sample the children of the transaction
// Most browsers use ISO-8859-1 as default encoding, even if spec says UTF-8 // TODO - charset?
// delete temporay file
// If we do not get any sub samplers, the transaction is done
// Gui Components
// Test sending UTF-8 data with ISO-8859-1 content encoding
"/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending file content as the only content of the post body     */"
// Check using default encoding
// Check using a different encoding
// File content is sent as binary, so the content encoding should not change the file data
"/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending only a formdata, as a multipart/form-data request.     */"
// Tell sampler to do multipart, even if we have no files to upload
// Test sending data as ISO-8859-1, with values that need to be urlencoded
// Test sending data as UTF-8, with values that needs to be urlencoded
// Assume success
// Check if it is the start of a new transaction // must be the start of the subtree
// use latency to measure connection time
// Must be the end of the controller
// We have sampled one of our children
// We must set res to null now, before sending the event for the transaction, // so that we can ignore that event in our sampleOccured method
// Check if we are still sampling our children
// Test sending data as UTF-8, with values that would have been urlencoded // if it was not sent as multipart
// HTTPSampler uses ISO-8859-1 as default encoding // HTTPSampler uses ISO-8859-1 as default encoding
// Accumulate waiting time for later
//log.warn("Constructor only intended for use in testing");
// Join the two multiparts
// ensure name is available for debugging
// The encoding used for http headers and control information
// replace all backslash with double backslash
// It is the JMeterThread which knows how to sample a real sampler
// Different from TestHTTPMirrorThread port and standard mirror server
// This is used to emulate @before class and @after class
// Another subsample for the transaction
// Add parameterised tests. For simplicity we assune each has cases 0-10
// Shutdown mirror server
// Set Response code of transaction
// Test sending data as UTF-8, with values that will change when urlencoded
// The transaction fails if any sub sample fails
// Replace the variables in the sampler
// Add the sub result to the transaction result
// Add current time to total for later use (exclude pause time)
// if selected, add duration of timers to total runtime
// Test sending data as UTF-8, where user defined variables are used // to set the value for form data
// Test sending data with ISO-8859-1 encoding
// Test sending data with UTF-8 encoding
// Test sending data as UTF-8, with values that changes when urlencoded
// Check the request
// Check post body from the result query string
// Skip the blank line with crlf dividing headers and body
// Check response headers
// Test sending data as UTF-8, with + as part of the value, // where the value is set in sampler as not urluencoded, but the  // isalwaysencoded flag of the argument is set to false. // This mimics the HTTPConstants.addNonEncodedArgument, which the // Proxy server calls in some cases
// Test sending simple HTTP get // Test sending data with default encoding
// Check method
// Check method, path and query sent
// Get folder
// Check the Request URI sent to the mirror server, and // sent back by the mirror server
// We should have a query string part
// We should not have a query string part
// TEXT FIELD // $NON-NLS-1$
// Check path
// Check query
// LOOP LABEL // $NON-NLS-1$
// Find the data sent to the mirror server, which the mirror server is sending back to us // We assume the headers are in ISO_8859_1, and the body can be in any content encoding.
// SECONDS LABEL // $NON-NLS-1$
// This check-box defines whether to save  WorkBench content or not
// No divider was found
// FOREVER CHECKBOX // $NON-NLS-1$
// Condition LABEL
// limit the changes to client only test elements
// The value is in the first group, group 0 is the whole match
// String domain = "localhost";
// Set the file upload data
// Parse arguments singly
// Parse arguments all at once
// test cases for making Url, and exercise method // parseArguments(String queryString)
// Ignore empty file specs
// Ignore trailing empty spec
// Ignore leading empty spec
// Show that can bypass encoding:
// The sample does not use a valid encoding
// by default, name/value are encoded on fetch
// Avoid double-call if addSubResult was called.
// Use expression instead of Javascript // $NON-NLS-1$
// Evaluate All checkbox // $NON-NLS-1$
// $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Called by JMeter ListenToTest if remoteStop is true
// Sent later
// Should we create our own copy of the RMI registry?
// Trailing file
// Create this object using the specified port (0 means anonymous)
// Trailing directory
// file exclf inclf exclp inclp
// should perhaps be log.warn, but this causes the client-server test to fail
// odd chars
// invalid
// Throw an Exception to ensure caller knows ...
// Check illegal array lengths
// close window where another remote client might jump in
// messages.properties
// Read resource into ResourceBundle and store in List
// sets active = true
// Read resource file saving the keys
// Only relevant for messages
"/*     * Called by:     * - ClientJMeterEngine.exe() which is called on remoteStop      */"
// Store the key
// Helper method to construct resource name
// Tidy up any objects we created
// holds keys from file
// Look for duplicate keys in the file
// Help with garbage control
// Must be the default resource file
// Check all the keys are in the default props file
// The list of current thread groups; may be setUp, main, or tearDown.
// Also Check key is in default
// Fix up Windows paths
// May be null if called from Unit test
"/*     * Use a suite to ensure that the default is done first    */"
// load the default resource
// Don't try to check the default language
// e.g. not yet started
// leading comment
// End of code to allow engine to be controlled remotely
// Is testplan serialised?
// Can't use for loop here because we remove elements
// we totally failed to stop the test
// Change the original back again
// a and b should be equal
// a and b should not be equal
// Needs to be greater than the minimum to allow for boundary errors
// Re-increment
// temp test case for exploring settings
// Don't use nanoThread
// Sample that will get two sub results, simulates a web page load
// Sample with no sub results, simulates an image download
// Now add the subsamples to the sample
// TimeMillis has granularity of 10-20
// Check that calculator gets the correct statistics from the sample
// check default
// check null changes nothing
// check no charset
// Check unquoted charset
// Check quoted charset
// These tests should agree with those for JOrphanUtils.split() as far as possible
// Blank line
// Empty strings at EOF
// else will be done by threadFinished()
// testLoadAndSave test files
// Test files for testLoad; output will generally be different in size and line count
// THREAD PROPERTIES
// no point continuing
// Did a test fail?
// Make sure all the data is flushed out
// Test non-empty parameters
// Merge in any additional test listeners // currently only used by the function parser
// no longer needed
// for each thread group, generate threads // hand each thread the sampler controller // and the listeners, and the timer
// Unrecognised files are ignored
// Does not open file
//for each setup thread group
// Re-read 1st line
// should not be able to write to it ...
//wait for all Setup Threads To Exit
// does not remove the entry
// removes all entries
// still running at this point, i.e. setUp was not cancelled // for each thread group
// test code, intentional
//wait for all Test Threads To Exit
// errorDetected()
// NUMBER OF THREADS
// The groups have all completed now
// Check that all keys in the bundle are also in the default bundle:
// Check that all necessary keys are there:
// wait for Post threads to stop
// displayName is always mandatory:
// Skip the rest of this test for alpha/experimental beans:
// ConcurrentHashMap does not need protecting
// Check for property- and group-related texts:
// Ignore TestElement properties which don't have an explicit // editor:
// Will be null if StopTest thread has started
// Done -- we're working with an editable property.
//throw new Error("No default bundle for class " + className);
// Needs to be run in a separate thread to allow RMI call to return OK
// tweak.
// Allow RMI to complete
// Test needs to run in this package in order to give access to AbstractTestElement.addProperty()
// This test should work whether or not all Nulls are equal
// Give access to the method for test code
// TL - all
// RAMP-UP
// don't add the timer
// Created during class init; not modified thereafter
// synchronize with FixedQueueExecutor
// ignore self
// JMSMessageID cannot be null
// Assume this thread only // 1 per second // Should delay for 1 second // 1 per milli-second // Should delay for 1 milli-second
// Store the content-type // RFC 822 uses ascii per default // Parse the content-type
// LOOP COUNT
// 10 per second // Should delay for 1 second // 10 per milli-second // Should delay for 1 milli-second
// 1000 per milli-second // Should delay for 1 milli-second
// Use old style
// probably needed to avoid NPEs with GUIs
// i.e. shutdown/stopped during main thread groups // re-enable for tearDown if necessary
// Must not convert TestElement.gui_class etc
// end of thread groups // No TGs found
// This should be enough to allow server to exit. // default is false
// Classnames must contain this string [.functions.] // $NON-NLS-1$ // Classnames must not contain this string [.gui.] // $NON-NLS-1$
// mainPanel.add(threadPropsPanel, BorderLayout.NORTH); // add(mainPanel, BorderLayout.CENTER);
// Check can cast for clone // Don't clone NoThreadClone unless honourNoThreadClone == false
// clone will produce correct type
// Dummy methods needed by Function interface
// For use by FunctionHelper
// Handle escapes
// tree1.add("a3");
// found "${"
// WebsphereMQ does not allow corr. id. to be set using setStringProperty() // $NON-NLS-1$
// save leading text
// set to start of string
// variable, or function with no parameter list
// ensure that setParameters() is called.
// end of buffer
// store the following character
// Normal exit occurs here
// Should not happen with StringReader
// Dropped out, i.e. did not find closing ')'
// needed for measuring sending time
// Needed for serialisation testing
// No duplicates when adding
// add duplicates
// add duplicates as per bug
// There was an object in map, destroy the temporary and return one in map (oldCtx)
// can't call invoke using super class
// Args will be provided later
// should use original object
// Check how Class definition behaves
// The application name // $NON-NLS-1$
// Allow display/hide LoggerPanel
// Transparent JButton with no border
// Allow display/hide toolbar
//Ignored
// private static final String ROOTDN = "rootDn"; // private static final String TEST = "tesT"; // private static String testValue="NNNN";
// Allow display/hide Log Error/Fatal counter
// Tests for split(String,String,boolean)
// enable drag&drop, install a custom transfer handler
// Empty string
// Tests for split(String,String,String)
// add the toolbar
// Empty default
// Empty delimiter
// Check for file lists specifically
// Multiple delimiters
// Delimiter same as splitter
// used by AbstractReportGui
// This stores the state of the TestElement
// Ensure we use default bundle
// Sampler error action buttons
// are we saving the whole tree?
// In a post request which is not multipart, we only support // parameters, no file upload is allowed
// Node node = tidy.parseDOM(new // ByteArrayInputStream(response.getResponseData()), null);
// N.B. originally called clear() // @see also Clearable
// Values for TEST_FIELD // N.B. we cannot change the text value as it is in test plans // $NON-NLS-1$
// In case parse fails // $NON-NLS-1$ // In case parse fails // $NON-NLS-1$
// $NON-NLS-1$ // Make it easier to enter a Tab // $NON-NLS-1$
// $NON-NLS-1$ // don't set empty to keep regexp // regexpField.setText(""); // $NON-NLS-1$ // $NON-NLS-1$
// allow for windows / chars in filename // $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
// set the window visible immediately
// $NON-NLS-1$ // define AWT WM_CLASS string
// Defaults to continue
// space between borders and text
// Target server panel
// Limit length of log content
// If LOGGER_PANEL_MAX_LENGTH is 0, it means all log events are kept
// The current node is now updated
// Probably a missing jar
// Should we allow directories?
// Enable file revert action if a file is used
// If saveWorkBench
// Whether to skip the delete confirmation dialogue // $NON-NLS-1$
// Add this node
// Ensure the dialog is only created when it is first needed // In turn this avoids scanning the templates until first needed
// Make sure the file ends with proper extension
// Check if the user is trying to save to an existing file
// Condition LABEL // $NON-NLS-1$
// $NON-NLS-1$ i.e. boolean saveXXX() // $NON-NLS-1$ i.e. void setXXX(boolean) // $NON-NLS-1$ e.g. save_XXX property
// VK_PLUS + CTRL_DOWN_MASK did not work...
// Keep the '\' unless it is one of the escapable chars '$' ',' or '\' // N.B. This method is used to parse function parameters, so must treat ',' as special
// en // fr // de // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // ja // zh_CN // zh_TW
//@GuardedBy("LOCK") // Keep track of how many instances are active
// File name sequence number //@GuardedBy("LOCK")
// Instance fields are constructed by the client when the instance is create in the test plan // and the field values are then transferred to the server copy by RMI serialisation/deserialisation
// process special keys // $NON-NLS-1$
// If there are some recent files, we must make the separator visisble // The separator is the last item in the list
// Save (Selection) As // Save TestPlan As // Save
// Y // Y // Y // Y // sp // M // M // / // D // D // / // H // H // : // M // M // : // S // S // end
//OK // TODO ??
// Assume this thread only // 1 per second // Initialise
// Assumes some kind of list is use // If not using a list that retains the order, then the asserts would need to change
// Do not save, user does not want to overwrite
// Only update the stored copy of the tree for a full save // refetch, because convertSubTree affects it
// package protected to allow access from test code
// requires JMeterTreeNode
// move to the parent
// move as a child of the next sibling
// select the node
// We must ask the user if it is ok to close current project
// Load the file for this recent file command
// A HTTP POST request, multipart/form-data, simple values, // with \r\n as end of line, which is according to spec, // and with more headers in each multipart
// two jars same version // two jars same version
// myRow = f.nextRow(); // assertEquals(3,myRow); // assertEquals(0,f.getNextRow());
// Is this a work in progress ? // No, // not // a // work // in // progress // ...
// Create the menu item
// Use the index as the name, used when processing the action
// Set the KeyStroke to use
// Add the menu item
// Add separator as the last item
// pick up headers if failed to execute the request // httpMethod can be null if method is unexpected
// RFC 822 uses ascii per default
// Check if the new file is already in the recent list
// Add the new file at the start of the list
// Store the recent files
// Assume no recent files
// Update the menu items
// Nulls cannot be written using PrettyPrintWriter - they cause an NPE // $NON-NLS-1$
// Get the menu item
// N.B. JVMs other than Sun may return different instances each time // so we cache the value here (and avoid having to fetch it every time)
// href="#"
//+ JMX attributes - do not change // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //- JMX
// We only check the length of the result. Comparing the // actual result (out.toByteArray==original) will usually // fail, because the order of the properties within each // test element may change. Comparing the lengths should be // enough to detect most problem cases...
// At least one recent file menu item is visible
// write a OK reponse to browser, to engage SSL exchange // $NON-NLS-1$
// We use the page encoding where the form resides, as the // default encoding for the form
//+ action names // $NON-NLS-1$
// Set up list of potential targets and // enable listener
"/* (non-Javadoc)     * @see org.apache.jmeter.gui.action.AbstractAction#getActionNames()     */"
// .equals caused // NPE
"/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */"
// Limit the length of the menu text if needed
// If we are merging in another test plan, we know the test plan is dirty now
// Only check if we have not found any differences so far
// a well-bahaved browser is supposed to send 'Connection: close' // with the last request to an HTTP server. Instead, most browsers // leave it to the server to close the connection after their // timeout period. Leave it to the JMeter user to decide.
// Do search on Enter
// do search
// Process Apache HttpClient parameters file // $NON-NLS-1$
// Embedded URLs must match this RE (if provided) // $NON-NLS-1$
// Check if the user has loaded any file
// Mark Walsh 2002-08-03, modified to also parse a parameter name value // string, where string contains only the parameter name and no equal sign.
// Check if the header manager had a content type header // This allows the user to specify his own content-type for a PUT request
// Check if the user wants to drop any changes
// If the Multipart is repeatable, we can send it first to // our own stream, without the actual file content, so we can return it
// headerManager was set, so let's set the connection // to use it.
// Check if the user wants to revert
// Close the current project
// the document should only have one service node // if it doesn't it may not work!
// new WSDLHelper("http://localhost/WSTest/WSTest.asmx?WSDL"); // new WSDLHelper("http://localhost/AxisWSDL.xml"); //new WSDLHelper("http://localhost:8080/WSMyUpper.wsdl"); //new WSDLHelper("http://localhost:8080/test.wsdl");
// There's little point saving the manager between invocations // as we need to reset most of the beans anyway
// Reload the project
// / Only do the calculation if // it is needed
//++ Do not change these strings; they are used in JMX files to record the button settings // $NON-NLS-1$
// e.g. windows xp => windows
// Timeouts not active // How much left
// needs to be accessible from test code // Only contains LDAPArgument entries
// $NON-NLS-1$ jmeter.properties
// Minimal dimensions for dialog box
// Bottom buttons bar
// center position and 50% of screen size
// Created by XStream reading templates.xml
"/*         * N.B. Must use LinkedHashMap for field type         * XStream creates a plain HashMap if one uses Map as the field type.         */"
// templates i
"/*     * ------------------------------------------------------------------------     * Fields     * ------------------------------------------------------------------------     */"
// field TemplateManager#templates  // $NON-NLS-1$
// field Template#name  // $NON-NLS-1$
// for relative links
//      super(new JMeterTreeNode(new WorkBench(), null)); //      TestElement tp = new TestPlan(); //      initTree(tp, new WorkBench());
// The node can be added in non GUI mode at startup
// Remove the workbench and testplan nodes
// Insert the test plan node
// Init the tree // Assumes this is only called from GUI mode
// Let others know that the tree content has changed. // This should not be necessary, but without it, nodes are not shown when the user // uses the Close menu item
// The default is false, so we can remove the property to simplify JMX files // This also allows HTTPDefaults to work for this checkbox
// hold the nodes that should be removed on drop
// only allow a drag&drop inside the current jvm
// if child and a parent are selected : only keep the parent
//++ For TestBean implementations only // passed to file or script
// sort the selected tree path by row
// remove unneeded nodes
// errorLogging and successOnlyLogging are mutually exclusive // $NON-NLS-1$
// the tree accepts a jmx file
// A TestBean is a Java Bean. Just define some properties and they will // automagically show up in the GUI. // A String property:
// Only try to format if there is a // number
// the copy is disabled
// Requires Java 7 // $NON-NLS-1$
//$NON_NLS-1$ // don't match the empty category
// Do not allow a drop on the drag source selections.
// TestPlan and WorkBench are the only children of the root
// re-use node association logic
// deal with the jmx files
// Get drop location and mode
// drop mode == DropMode.ON
// expand the destination node
// Request validation // $NON-NLS-1$
// If icon has not been defined, then use GUI_CLASS property
//+ JMX file attributes // $NON-NLS-1$
// this is not the result of a redirect // so break the chain
// may be null during startup
// Override in order to provide type safety
//+JMX file attribute names - do not change any values! // $NON-NLS-1$
// Just in case
"/*         * c.gridx = 1; c.gridy = 2; g.setConstraints(close, c);         * panel.add(close);         */"
// for use by test code only
// // Instance Variables //
// // Constructors //
// // Implementing the TreeCellEditor Interface //
// // Implementing the CellEditor Interface //
// // Protected EditorDelegate class //
// Datefields are not thread-safe // $NON-NLS-1$
// HELP MENU //$NON-NLS-1$
// OPTIONS MENU //$NON-NLS-1$ //$NON-NLS-1$
// Dummy constructor to allo JUnit tests to work
// Do nothing; the current time will be returned
"/*     * Convert position in buffer to Calendar type Assumes that pos >=0 (which     * is true for getCaretPosition())     */"
// if beyond the end // then set to the end
// Restore position
// List for recent files menu items
// Lists for remote engines menu items
// Called by MainFrame#setEditMenu() which is called by EditCommand#doAction and GuiPackage#localeChanged
// show the classname to the user
// This is used by the ChangeLanguage class to define the Locale
// Also used by org.apache.jmeter.resources.PackageTest
//Overrides superclass method
// From the Java Look and Feel Guidelines: If all items in a menu // are disabled, then disable the menu. Makes sense.
// Listener on model changes to maintain correct focusability
// Add the recent files, which will also add a separator that is // visible when needed
// override action behaviour
// This is also used by LookAndFeelCommand
// For testing only at present
// Mostly delegates to model
//Set default single model
// Next two methods implement new API by delegation to model
// Restore state display
//Listen for enable changes
//Convenience cast
// Assume that the UI has not changed since the checkbos was created
// Iterate state
// Overrides of superclass methods
// Fire ActionEvent
// force the events to fire
// Send ItemEvent
//Set internal state
// Send ChangeEvent
// Nimbus works - after a fashion - with this
//            drawCross(g, x, y);
"/*     * Create a set of default parameters from the ones initially created.     * This allows the defaults to be overridden if necessary from the properties file.     */"
"/*     *  Predefined strings for makeMenu().     *  These are used as menu categories in the menuMap Hashmap,     *  and also for resource lookup in messages.properties    */"
// Needed for all but Nimbus // Nimbus works - after a fashion - with this // Nimbus works - after a fashion - with this // reset
// paintIcon
// For use by test code only
// if type is unknown
// $NON-NLS-1$ // $NON-NLS-1$ // Don't try to instantiate these
// No point instantiating class
// Allow headless testing
// Don't add it again
// Empty box //$NON-NLS-1$
// Can't add a Workbench anywhere
// Force TestFragment to only be pastable under a Test Plan
// allow everything else
// AbstractThreadGroup is only allowed under a TestPlan
// Includes thread group; anything goes
// Samplers and Controllers need not apply ...
// All other
// Is any node an instance of one of the classes?
// Is any node an instance of one of the classes, but not an exception?
// Methods used for Test cases
// Close action dialog box when tapping Escape key
// otherwise proxy String fields may be null
// Prepare dialog box
// determine location on screen
// must be CLOSE or SAVE_CLOSE COMMANDS
// text backup
// double click
// view only
// double (pressed) click
// in main table (evt mousePressed because cell is editable)
// add the button to the button group
// add the button
// implicit return empty toolbar if icons == null
// Get the standard toolbar properties
// already reported by IconToolbarBean
// in seconds
//this.setPreferredSize(new Dimension(400,150));
// i.e. bypass the Functors
// Mainly needed for unit test Serialisable tests
"/*     * Ensure that a report is not skipped if we are slightly late in checking     * the time.     */"
"/*     * This map allows summarisers with the same name to contribute to the same totals.     */"
//@GuardedBy("accumulators") - needed to ensure consistency between this and instanceCount
//@GuardedBy("accumulators") // number of active tests
//@GuardedBy("myTotals")
// Name of the accumulator. Set up by testStarted().
"/*     * Contains the items needed to collect stats for a summariser     *     */"
// copy the data to minimise the synch time
// stop double-reporting
// Only if we have updated them
// $NON-NLS-1$ // for intermediate use // output line buffer
// Rate is effectively infinite
// Avalon only
// rounded seconds // No point displaying decimals (less than 1% error) // decimal would be zero
// fractional seconds // This will round
// We're not done yet
// boolean autoScale = true;
// setup drawing area
// draw grid
// draw axis
// draw data lines
// e.g. in non-GUI mode
// This string is used to identify local test runs, so must not be a valid host name // $NON-NLS-1$
// Static variables
// Lock used to guard static mutable variables
//@GuardedBy("LOCK")
// Instance variables (guarded by volatile)
// Unfortunately AbstractTestElement does not call super.clone()
// successOnly and errorOnly cannot both be set
// No need for the hook now
// Only add the hook once
// No point reading the file if there's no visualiser
// probably Avalon format
// Only for use by CSVSaveService
// We are processing XML // Assume XStream
// Ensure that the sample save config is not shared between copied nodes // N.B. clone only seems to be used for client-server tests
// Find the name of the directory containing the file // and create it - if there is one
// TODO Charset ? // Get the first line, and see if it is XML
// Can't do it as a static initialisation, because SaveService // is being constructed when this is called
// Added in version 1.1 // $NON-NLS-1$
// returns false if directory already exists, so need to check again
// else if might have been created by another process so not a problem
// returns false if the file did not contain the terminator
// found the string
// reads to end of line OR end of file
// !saveAsXml
// Truncate the file
// should throw exception back to caller
// Used by: MonitorHealthVisualizer.add(SampleResult res)
//+ JMX property names; do not change
//- JMX property names
//NOTUSED private static final String DATABASE = "db"; // $NON_NLS-1$
// Associate sample with file name
// Mutable int to keep track of sample count
// Should we save the sample?
// finish processing samples
// Needed to avoid Class cast error in Clear.java
// client log file
// Not currently needed by any Remoteable classes // Anyway, would probably be too expensive in terms of network traffic //  // void testIterationStart(LoopIterationEvent event);
// ensure output is flushed
// server log file
"/** * Holds details of which sample attributes to save. * * The pop-up dialogue for this is created by the class SavePropertyDialog, which assumes: * For each field XXX * - methods have the signature ""boolean saveXXX()"" * - a corresponding ""void setXXX(boolean)"" method * - messages.properties contains the key save_XXX * * */"
//add(makeTitlePanel(), BorderLayout.NORTH);
// Initialise values from properties
// Save bytes read // $NON_NLS-1$
// Save URL // $NON_NLS-1$
// Save fileName for ResultSaver // $NON_NLS-1$
// Save hostname for ResultSaver // $NON_NLS-1$
// Don't save this, as it is derived from the time format
// Prepare for a pretty date
// Defaults from properties:
// reversed compare allows for null
// Don't save this, as not settable via GUI
// $NON_NLS-1$ // N.B. Remember to update the equals and hashCode methods when adding new variables.
// Give access to initial configuration
// We know we are comparing to another SampleSaveConfiguration
///////////////////// Start of standard save/set access methods /////////////////////
// as per 2.0 branch
// maintain relationship
// Defaults to empty;
// Used by old Save service
// Static fields are set by the server when the class is constructed
// Locate the statistical sample colector
// store the new statistical result collector
// add a new wrapper samplevent
// No need to log normally, as we set the status // $NON-NLS-1$
// Checking for and creating initial timestamp to check against
// The values. Entries may be null, but there will be the correct number.
// The hostname cannot change during a run, so safe to cache it just once
"/*     * Only for Unit tests     */"
// Needs to be accessible from Test code
/* The default used by {@link #setResponseData(String, String)} */
/* empty arrays which can be returned instead of null */
// Never return null
// e.g. text/html; charset=utf-8
// TODO timeStamp == 0 means either not yet initialised or no stamp available (e.g. when loading a results file)
// Allow for non-sample time
// Don't return null if not set
//@GuardedBy("this"")
// (is this really the character set?) e.g. // ISO-8895-1, UTF-8
// Allows override of sample size in case sampler does not want to store all the data
// Allow read-only access from test code
// How long between checks of nanotime; default 5000ms; set to <=0 to disable the thread
// $NON-NLS-1$;
// Make sure we start with a reasonable value
// Allow test code to change the default useNanoTime setting
// Allow test code to change the default useNanoTime and nanoThreadSleep settings
// Helper method to maintain timestamp relationships
"/*-------------------------------------------------------------------------     * Methods implemented from org.xml.sax.ContentHandler     *----------------------------------------------------------------------- */"
// Create unique object as marker for end of queue
//OK //OK //OK //OK // files is created automatically, and applies per instance //OK
// TODO ?? //OK //OK
// handle: ContentType: text/plain; charset=ISO-8859-1; format=flowed
// Check for quoted string // $NON-NLS-1$ // remove quotes
// List of types that are known to be binary
// List of types that are known to be ascii, although they may appear to be binary
"/*     * Helper methods N.B. setStartTime must be called before setEndTime     *     * setStartTime is used by HTTPSampleResult to clone the parent sampler and     * allow the original start time to be kept     */"
// how many times we had to wait to queue a sample
// Can now afford to wait a bit longer between checks
// created by client
// created by server in readResolve method
// show what we did manage to retrieve
// client
// For completeness
// how long we had to wait (nanoSeconds)
// for reading from CSV files // ignored currently
// returns null if nothing on queue currently
// Wait longer than a clock pulse (generally 10-15ms) // Catch an early clock pulse to reduce slop.
// OK because sampleStore is of type ArrayList<SampleEvent>
// Created by SampleSenderFactory
// we failed to add the element first time
// server
// try to process as many as possible
// Compute bytes before stripping
// Configuration items, set up by readResolve
// Static fields are resolved on the server
// instance fields are copied from the client instance
// Set clonedSet;
// Server-only work item
// Extended property name // $NON-NLS-1$
// clonedSet = new HashSet();
// Need to maintain our own elapsed timer to ensure more accurate aggregation
// May be called by XStream
// Copy data that is shared between samples (i.e. the key items):
// Assume result is OK // because we add the sample count in later
// Add Sample Counter
// Add Error Counter
// Overrides SampleResult
// for reading CSV files
// superclass is not typed
// Names of DataHolder entries for JTL processing // $NON-NLS-1$ // $NON-NLS-1$
// Names of DataHolder entries for JMX processing // $NON-NLS-1$
// Override wrapMapper in order to insert the Wrapper in the chain
// Provide our own aliasing using strings rather than classes
// Translate to alias and then delegate to wrapped class
// superclass does not use types
// was type, but that caused FindBugs warning
// The XML header, with placeholder for encoding, since that is controlled by property // $NON-NLS-1$
// Default file name // $NON-NLS-1$
// Property name used to define file name // $NON-NLS-1$
// Default to overall format, and then to version 2.2
// Define file format property names // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Instantiate the sampler
// Holds the reverse mappings // Key: full class name Entry: primary alias
// This is written to JMX files by ScriptWrapperConverter // read from properties file; written to JMX files
// Helper method to simplify alias creation from properties
// Can have multiple aliases for same target classname
// Load the alias properties
// now create the aliases
// Remove the leading "_"
// Called by Save function
// Used by Test code
// Ensure terminated properly
// Used by ResultCollector.sampleOccurred(SampleEvent event)
// Used by ResultCollector#recordStats()
// Routines for TestSaveService
// Allow test code to check for spurious class references
//boolean OK = true;
// don't bother checking class is present if it is to be updated
// Extract version digits from String of the form #Revision: n.mm # // (where # is actually $ above)
// Check if we have a encoding to use from properties
// Used by ResultCollector when creating output files
// Write XML header if we have the charset to use for encoding
// we clean up the ResultCollector to make sure there's // no slow leaks
// Used by ScriptWrapperConverter
// Shared with TestElementSaver // $NON-NLS-1$ // $NON-NLS-1$
// Probably no point in converting this to return a SampleEvent
// just like the aggregate listener, we use the sample label to represent // a row. in this case, we use it as a key.
// Separate argument
// Used to be 'd谩bale', but caused trouble on Gump. Reasons // unknown.
// Check that calls to getResString use a valid property key name
// Called by SaveService.loadTree(InputStream reader) if XStream loading fails
"/*         * Controller         * + Before         * + Switch (cond)         * + + zero         * + + Controller sub_1         * + + + one         * + + two         * + + Controller sub_2         * + + + three         * + After         */"
// OK // $NON-NLS-1$
// Do upgrade translation:
// must always agree
// Create the property:
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-2$
// 1k - the previous 100k made no sense (there's tons of buffers // elsewhere in the chain) and it caused OOM when many concurrent // uploads were being done. Could be fixed by increasing the evacuation // ratio in bin/jmeter[.bat], but this is better.
// Called by ResultCollector#loadExistingFile() if XStream loading fails
// --------------------------------------------------------------------- // ADDITIONAL CSV RESULT FILE CONSTANTS AND FIELD NAME CONSTANTS // ---------------------------------------------------------------------
// Used to enclose variable name labels, to distinguish from any of the // above labels // $NON-NLS-1$
// Initial config from properties
// Date formats to try if the time format does not parse as milliseconds
// $NON-NLS-1$ (for compatibility, this is the original default)
// Enough to read the header column names // Get the first line, and see if it is the header
// not a valid header
// may change the format later // restart from beginning
// may be updated
// Save the name for error reporting
// method is only ever called from one thread at a time // so it's OK to use a static DateFormat
// can this happen?
// Strip off the trailing delimiter
// Map header names to set() methods
// These entries must be in the same order as columns are saved/restored.
// Try // default // delimiter
// now validate the // result
// failed to recognise the header
// We know the column names all exist, so create the config
// Check if the line is a header
// Check for Quoted variable names
// they are always last
// unknown column name
// out of order
// These methods handle parameters that could contain delimiters or // quotes:
// These methods handle parameters that cannot contain delimiters or // quotes
// Need both sample and error count to be any use
// add a message when no http sample //$NON-NLS-1$ //$NON-NLS-1$
"/*     * Private versions of what might eventually be part of Commons-CSV or     * Commons-Lang/Io...     */"
// double the quote char
// doubled quote => quote
// State of the parser
// Remove following \n if present
// while not EOF // EOF (or end of string) so collect any remaining data
"/* * This is not currently used by JMeter code. * As it uses Sun-specific code (the only such in JMeter), it has been commented out for now. */"
// Remove the JavaConfig class from the list since it only // implements the interface for error conditions.
// If a user has set parameters in one test, and then // selects a different test which supports the same // parameters, those parameters should have the same // values that they did in the original test.
// These are not useful yet, as have not found how to get updated values back //mgr.declareBean("ResponseCode", "200", String.class); // $NON-NLS-1$ //mgr.declareBean("ResponseMessage", "OK", String.class); // $NON-NLS-1$ //mgr.declareBean("IsSuccess", Boolean.TRUE, Boolean.class); // $NON-NLS-1$
// superclass does not use types
// rethrow other errors
// mainly for TestElementConverter
// Skip special properties if required
// remap the class name
// No need to check version, just process the attributes if present
// Only decode strings if inVersion = 1.0
// Names of properties that are handled specially
"/*     * Ensure that the required class variables are cloned,     * as this is not currently done by the super-implementation.     */"
// Don't save empty comments
// An additional note on using HashSets to store URLs: I just // discovered that obtaining the hashCode of a java.net.URL implies // a domain-name resolution process. This means significant delays // can occur, even more so if the domain name is not resolvable. // Whether this can be a problem in practical situations I can't tell, // but // thought I'd keep a note just in case... // BTW, note that using a List and removing duplicates via scan // would not help, since URL.equals requires name resolution too. // The above problem has now been addressed with the URLString and // URLCollection classes.
// Always decode
// default charset
// $NON-NLS-1$ // Must be same as Header.HNAME - but that is built // later
// Additional member names which are currently not written out // $NON-NLS-1$ // $NON-NLS-1$
// These are new fields; not saved unless true
// These fields are not currently saved or restored
// Save most things
// Save the new fields - but only if they are not the default
// Helper method to simplify marshall routine
// Maintain backward compatibility (bytes was not in the JMX file)
// Make sure decoding follows input file
//@GuardedBy("this") NOTE this also guards against possible window in checkForOpenFiles()
// volatile needed to ensure safe publication
// Cannot be instantiated
// checks for entries in use
// tidy up any unused entries
// Must first convert to absolute path names to ensure parents are available
// need to check if we are at EOF already
// already at EOF
// If file encoding is specified, write using that encoding, otherwise use default platform encoding
// package access for test code only
// Some known attribute names, just for convenience:
// Store the resource bundle as an attribute of the BeanDescriptor:
// Localize the property names and descriptions:
// we also provide the resource bundle
// i is used below
// We can't assign null to primitive types.
// Can occur running headless on Jenkins
// value was not provided, and this is allowed
// Not an expression (isn't or can't be), not null.
// The known tags are assumed to be valid:
// Was not a tag, so if we can't accept other values...
// setAsText failed: not valid
// setAsText succeeded: valid
// Check old values don't hang around: // fewer matches
/// final because called from ctor
// Localize the bean name // $NON-NLS-1$ // $NON-NLS-1$
// not an expression (isn't or can't be), not null.
// Provide an initial edit value if necessary -- this is an // heuristic that tries to provide the most convenient // initial edit value:
//not interested in this method.
// not an expression (can't be or isn't), not null.
// same as Parent
// Revert to the previous value:
// Get and sort the property descriptors:
// $NON-NLS-$
// Obtain the propertyEditors:
// Index is also used for accessing editors array
// Don't get editors for hidden or non-read-write properties:
// we check the class type above
// In case of BSF and JSR elements i want to add textAreaEditor as a listener to scriptLanguage ComboBox.
// Create the CSVRead function and set its parameters.
// Some editors do tiny transformations (e.g. "true" to // "True",...): // may throw IllegalArgumentException
// Initialize the GUI:
// acceptsNull // acceptsExpressions // acceptsOther
// Uninitialized -- set it to the defaults:
// Now set the editors to the element's values:
// for labels
// for editors
// for panels
// The minimum index of the tags in the combo box
// Check init file functioning
// The maximum index of the tags in the combo box
// only for use from test code
// Needs to be done before any GUI classes are instantiated
// Add a 0-sized invisible component that will take all the vertical // space that nobody wants:
// track where tags start ...
// col 1, line 1, *A
// ... and where they end
// Not a tag entry, return the original value
// will revert to last valid value if invalid
// Replace a string with its translation, if one exists
// not sure if null is passed in but no harm in setting it
// A quick verification, just in case:
// Get the beanInfo:
// Fetch data from screen fields
// Copy all property values from the map into the element:
// cannot be null
// Copy all property values into the map:
// handles hex as well
// col2, line 1, *B
// Create a panel containing the combo and the button:
// configure(element); // super.clear(); // set name, enabled. // put the default values back into the // new element
// We don't want to show expert beans in the menus unless we're // in expert mode:
// may be impossible, but no harm in // checking ...
// Add titles that don't need to be documented //guiTitles.put("Root", Boolean.FALSE);
//- JMX
// Get a WrapperEditor to provide the field or combo -- we'll delegate // most methods to it:
// acceptsNull // acceptsExpressions // acceptsOther // default
// assume it's string
//- JMX field names
// create transient item
// we set the classpath
/* Property name */
// Thread-specific variables saved here to save recalculation
// clone should never return null
"/*             * Only samplers have the thread context set up by JMeterThread at             * present, so suppress the warning for now             */"
"/* (non-Javadoc)     * @see org.apache.jmeter.samplers.RemoteThreadsListener#threadFinished()     */"
// this("Test Plan"); // setFunctionalMode(false); // setSerialized(false);
// setFunctionalMode(false); // setSerialized(false);
// Default implementation
// Moved from JMeter class
// lifecycle methods
// Use different XPath for both threads
// JMX property name: do not change
// value is the correct class
// value is of type Collection<JMeterProperty>
// private static StringProperty defaultProperty = new StringProperty();
// name cannot be null
// empty collection, local var is here to allow SuppressWarnings
// empty collection
// N.B. Other classes rely on this returning just the string.
// synch is probably not needed as only called before run starts
// Called from multiple threads
// Backward compatibility
// Expensive, so // do // once
// NOOP
// based on this scheduler is enabled or disabled
// Gives access to parent thread threadGroup
// For access to stop methods.
"/*     * The following variables may be set/read from multiple threads.     */"
// may be set from a different thread
// threadContext is not thread-safe, so keep within thread
// Might be found by contoller.next()
// prevent any further interrupts
// make sure current interrupt is finished, prevent another starting yet
// Allow any pending interrupt to complete (OK because currentSampler == null)
// Find parent controllers of current sampler
// Check if we are running a transaction
// Find the package for the transaction
// Check if the transaction is done
// Get the transaction sample result
// Check assertions for the transaction sample
// Notify listeners with the transaction sample result
// recursive call
// Check if we have a sampler to sample
// Get the sampler ready to sample
// JMeterGUIComponent item = (JMeterGUIComponent) iter.next();
// Must not ignore this one // Make sure errors are output to the log file
// Tell the monitor we are done // Remove the ThreadLocal entry
// Perform the actual sample
// Do not send subsamples to listeners which receive the transaction sample
// Add the result as subsample of transaction if we are in a transaction
// Check if thread or test should be stopped
// Finish up
// Check if this instance is present in transaction listener list
// Check for the same instance
// listeners = controller.getListeners();
// set the scheduler to start
// call ThreadListener.threadStarted()
// If it was a HTTP GET request, then all parameters in the URL // has been handled by the sampler.setPath above, so we just need // to do parse the rest of the request if it is not a GET request
// call ThreadListener.threadFinished()
// Get the post data using the content encoding of the request
// probably not possible, but check anyway
"/*     * run the function test     */"
// Called by StandardJMeterEngine, TestAction and AccessLogSampler
// delay between checks
"/*     * Test GUI elements - run for all components     */"
"/*     * Test TestElements - implement the test case     */"
// if ! isPathExtension()
// Used by DebugSampler
// all implementations extend TestElement
// All implementations extend TestElement
"/*     * Test TestElements - create the suite     */"
// int
// Copy our name into that of the controller // otherwise name reverts
// 5 seconds
//+ JMX entries - do not change the string values
//- JMX entries
// Force a sensible start time
// Enables the scheduler
// maximum pause to use
// needs to be same time for all threads in the group
// set start and end time
// N.B. Context needs to be fetched in the correct thread
// Events often have this constructor
// Store context from Root Thread to pass it to created threads
// Copy in ThreadStarter thread context from calling Thread
// needs to be constant for all threads
// else start immediately
// set the endtime for the Thread
// ramp-up delay (except first)
// no point continuing beyond the end time
// Already waited
// ThreadStarter is daemon, but we don't want sampler threads to be so too
// return all the associated counts together
// set stop flag // interrupt sampler if possible
//@GuardedGy("this")
// Currently only used by JMeterThread
// Relative start-up time
// NOT USED
// Must be an old test plan
// Initialise the gui field values
// Maximum size to convert a document to text (default 10Mb)
// -1 to disable the write limit
// open the stream
// close the stream
// This assumes that the JMV treats a class file as a resource (not all do).
// Convert to URL for manifest
// default to plain version
// Not instantiable
// Allow reversion to original shared session context
// If we are using a single session // Otherwise
"/*             * Also set up HttpClient defaults             */"
//          HttpsURLConnection secureConn = (HttpsURLConnection) conn; //          secureConn.setSSLSocketFactory(this.getContext().getSocketFactory());
"/*     *     * Creates new SSL context     * @return SSL context     * @throws GeneralSecurityException     */"
// Now wrap the default managers with our key manager
// Get the default trust managers
// Wrap the defaults in our custom trust manager
// implementation moved to JmeterKeystore as only that has the keyType info
// file to source (overrides script)
// BSF/JSR223 language to use //-- For TestBean implementations only
// can be the empty string
// Save the actual socket
// Forward all the SSLSocket methods to the input socket
// Also forward all the Socket methods.
// Test New cookie is returned
// Must wrap non-scriptable objects before presenting to Rhino
// includes JavaScriptException, rethrows Errors
// Initialize context and global scope object
// Read-only access after class has been initialised
// ensure policy is picked up
// Calculate each time, as likely to be called for each add
// must follow the checkbox setting
// likely a wrapped exception from a LiveConnect call. // Display its stack trace as a diagnostic
//load additionnal name conversion rules from plugins
// names are Strings
// no point dividing by 1
// 1024=bytes per kb
// account for multiple samples // not yet intialised
// 1000 = millisecs/sec
// Conversions for milli and nano seconds
// Use actual class name for log
// Most subclasses will need these:
"/*     * Finds all classes that extend the classes in the listSuperClasses     * ArrayList, searching in the listAllClasses ArrayList.     *     * @param superClasses     *            the base classes to find subclasses for     * @param listAllClasses     *            the collection of classes to search in     * @param innerClasses     *            indicate whether to include inner classes in the search     * @return ArrayList of the subclasses     */"
// case we are measuring real time of spedition
// we have a file, read and process it
"/*     * Wraps the socket in a slow SSL socket if necessary     */"
// What host am I running on?
// Special flag for use in debugging resources
// Provide Random numbers to whomever wants one
// [sebb] assertEquals(item2, // clonedItem.getProperty(item2.getName()));
// for java sockets // for Commons Httpclient sockets
// Prompt is unnecessary
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // For use in debugging: // $NON-NLS-1$
// Are we the default language?
// Keep existing settings
// Don't change locale from en_GB to en
// language change worked // Check if we at least found the correct language:
// no need to reset Locale
// Special mode for debugging resource handling
// Can be returned by headless hosts
// $NON-NLS-1$
// Redisplay.
// Empty arrays are immutable
// End Method
// Empty value // $NON-NLS-1$
// If not empty then script in ScriptText will be compiled and cached
// LRUMap does not support generics (yet)
// For use in debugging:
// NOOP
// Also handles read(byte[])
//-- For TestBean implementations only
// ensure variables are not null
// now temp2 has the lowest of the three components
// The response includes the headers from the mirror server, // we want to skip those, to only keep the content mirrored. // Look for the first CRLFCRLF section
// convert to telnet port
// Reset for other users
// Tell server that we are done
// Have we yet tried to load the truststore?
// Ensure not null
"/*     * The password can be defined as a property; this dialogue is provided to allow it     * to be entered at run-time.     *     * However, this does not gain much, as the dialogue does not (yet) support hidden input ...     *    */"
// we've tried ...
// empty if not provided // use the system property to determine the type // otherwise use the name
// Also handles write(byte[])
// Helper method to find a test path
// Temporary copies, so can set the final ones
// Script file to initialize the Interpreter with
// Logger to use during initialization and script run
// Can't instantiate
// Called from ctor, so must be private (or final, but it does not seem useful elsewhere)
// Do this before starting the script
// Check file so we can distinguish file error from script error
// Programming error
// Also programming error
// For use by Unit Tests
// configure the document builder factory
// default empty array to prevent NPEs
// No point checking an empty keystore
"/*         * Note: if is == null, the arrays will be empty         */"
// i.e. is == null
// This should be ignored, as there is no value
// number of samples in this entry
// No samples collected ...
// Better behaviour when howLong=0 or lastTime=0
// Test multi-cookie header handling
// Already failed
// this is our first sample, set the start time to current timestamp
// Connect to the http server, and do a simple http get, with // a pause in the middle of transmitting the header
// Connect to the http server, and do a simple http post, with // a pause after transmitting the headers
// Always update the end time
// = elapsed
// Appears not to be used - however it is invoked via the Functor class
// Only for use by test code
// Code duplicated from getPageSize()
// keep track of classes created
// (for instructional purposes only!)
// Do something here ...
"/*             * Set up the sample result details             */"
// End timimg
"/*     * Helper method     */"
// Specific setup
// The name of the property used to hold our data //$NON-NLS-1$
// Note: the file panel already includes the error logging checkbox, // so we don't have to add it explicitly.
// Arguments args = sampler.getArguments();
// Did sample succeed? // Sampler data
// Do something ...
// A String property:
// Number of parameters expected - used to reject invalid calls
// We have a default
// Throwable wanted
// Comment wanted
// Common output function
// Routine to perform the output (also used by __logn() function)
//$NON-NLS-1
// Thread method is potentially expensive
// Allow variable to be omitted
//++ These are JMX file names and must not be changed //$NON-NLS-1$
// vars can be null if run from TestPlan
// Remove initial empty entry
// $NON-NLS1$ // $NON-NLS1$
// did we find BeanShell?
// Mainly for bsh.EvalError
// Pass in some variables
// Execute the script
"/*     * Helper method for use by scripts     *     */"
// Can happen if called during test closedown
// Parameters are stored here
// For unit tests, see TestJexlFunction
// String or Integer
// List of parsers to test. Should probably be derived automatically
// A HTTP GET request, with encoding not known
"/*             * N.B. Stop reading the file if we get a blank line: This allows             * for trailing comments in the file             */"
// Now evaluate the script, getting the result
// two delimiters in a row; add an empty String
// Lines in the file, split into columns
// 0-based
// name of the file
// Catch the trailing delimiter
"/*         * the beginning of the line is a ""delimiter"" so that ,a,b,c returns """"         * ""a"" ""b"" ""c""         */"
// will be null if function is used on TestPlan
// Does the order matter?
// Added to support external testing
// Only modified by static block so no need to synchronize subsequent read-only access
// May be null if function is used on TestPlan
// A HTTP GET request, with ISO-8859-1 encoding
// @GuardedBy("this") // needed for error messages
// @GuardedBy("this") // should we try to open the file?
// Have we used myCurrent yet? // Set to 1 if start number is missing (to allow for end without start)
// Low chances to be non numeric, we parse
// Don't process invalid numbers
// Don't process invalid numbers (including "")
// Has chances to be a var
// for next time
// EOF, re-open file
// Did we open the file?
// Are we processing a file // sequence?
// there is no variable name
// File was not opened successfully // Are we processing a file sequence?
// varName keeps its value and sum has not taken  // into account non numeric or overflowing number
// Split string provided
// We don't have a local copy
// Prevent separate instantiation
/* The cache of file packs - for faster local access */
// save the global copy
// There's no global copy either
// save our local copy
// Parameter list
"/*             * All done, so return             */"
// this may need mangling due to peeks
// what column // is wanted?
/* The cache of file packs - used to improve thread access */
//means platform default
// empty encoding, return to platorm default
"/*     * Only needed locally     */"
"/*     * This Map serves two purposes:     * - maps file names to  containers     * - ensures only one container per file across all threads     */"
"/*     * Called by CSVRead(x,next) - sets the row to nil so the next row will be     * picked up the next time round     *     */"
"/*     * called by CSVRead(file,alias)     */"
// First call
// Already logged
// Save in case needed later
// Not yet open
// we have a variable name
// set the required variables
// test invalid byte arrays
//means no restriction
// Only obtain and cast the return if needed
// empty chars, return to null
// Default to milliseconds
// vars will be null on Test Plan
//MAXINT = 2,147,483,647
// Only modified in class init
// We have a 3rd parameter
// Resolve any aliases
//$NON_NLS-1$ //$NON_NLS-1$
// Not synchronised, so can't be shared
// Allow for empty name
// Commons HttpClient only
// Original and clone should be equal
// Values for creating tokens
"/*     * Convert to a shorter String for test purposes     *     * @return the string value     */"
// Reached end of input arguments - perform final processing
// Key is String or Integer
// strip the null
// variables used while parsing options.
// Change the original
// Yes, so the second argument is missing
// should never get to here when stringIndex != 0
// Long optional arg must have = as separator
// consume stray character
// Are we about to start a new option?
// strip the -
// 2nd argument
// its a long option
// Parse the arguments that are not options
// if it is a short option then parse it else ...
// equivalent to new TreeMap((Comparator)null);
// Make sure the hashCode depends on the order as well
// super-class does not use generics
// Check sample increments OK
// This will only work with an Applet .class file. // Ideally, this should be upgraded to work with Objects (IE) // and archives (.jar and .zip) files as well.
// this occurs when id == 0 and user has not supplied a descriptor // for arguments
// if get to an arg barrier then return to normal mode // else continue accumulating options
// Used for the RuntimeException to short-circuit the traversal // $NON-NLS-1$
// N.B. The keys can be either JMeterTreeNode or TestElement
// do nothing - means object is found
// end method
// capture the output
// helper method to allow input and output to be changed for chaining
// capture the intermediate output
// not yet terminated
// not yet terminated // N.B. proc.destroy() is called by the finally clause in the run() method
// we are capturing output // Default charset is probably appropriate here.
// $NON-NLS-1$ (do not change) // $NON-NLS-1$ (Firefox and Windows) // $NON-NLS-1$ (Opera)
// $NON-NLS-1$ // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$
// i.e. does keytool support -gencert and -ext ?
// not instantiable
// Create cert for CA using root (requires Java 7 for gencert)
// Create the self-signed keypairs (requires Java 7 for -ext flag)
//rem generate cert for DOMAIN using CA (requires Java7 for gencert) and import it
// generate the request
// Export the Root CA for Firefox/Chrome/IE
// generate the certificate and store in output file
// generate the keypair for the host
// Copy for Opera
// alias // subject
// A temporary cache for the focus listener
// get the certificate request
// Add the sub components
// Functor count = 0 is handled specially
// Necessary to avoid NPE when testing serialisation
// if provided
// Compare if the value has changed, since we received focus.
// used by TableEditor
// We use 80% of height
// private JMenu menu;
// (Comment 16, Huw)
// uninstantiable
// Constructors
// NOTUSED Dimension dim = layoutSize(parent, false);
// work out the total size
// otherwise there's a vgap too many // Work out the anchor paint
// do layout
// closes reader as well
// non-instantiable - static methods only
// Further configuration
// Make sure same hierarchy is used
// This happens if the default log-target id-ref specifies a non-existent target
// We use a TreeMap because we need the entries to be sorted
// Running values, updated for each sample
// Set the top-level defaults //$NON_NLS-1$
// This can happen if a log-target id-ref specifies a non-existent target
// If the name contains at least one set of paired single-quotes, reformat using DateFormat
// remove the package prefix
// e.g. Long.MAX_VALUE
// Check blank lines are treated as EOF
// e.g. Long.MIN_VALUE
// use Math.round () instead of simple (long) to provide correct value rounding
// ignored. May happen occasionally, but no harm done if so.
// For n same values in sum of square is equal to n*val^2
// no need to divide by 1
// insert new value
//        p.add(makeMainPanel(), BorderLayout.CENTER); // Force a minimum table height of 70 pixels
// Methondname must always be provided.
"/*     * If non-null, then any argument list passed to invoke() will be ignored.     */"
"/*     * This depends on the class or invokee and either args or types;     * it is set once by doCreateMethod(), which must be the only method to access it.    */"
// If class not provided, default to invokee class, else null
// If types not provided, default to argument types, else null
// static only
// Check reflexive
// Should never happen
// Use constructor class if present // use invokee if provided // use argumenrs if provided
// parent classes to check // are inner classes OK?
// No need to check it again
// This is not a requirement
// It does not contain a required string
// It contains a banned string
// are inner classes OK?
// For each directory in the search path, add all the jars found there
// Should only be called with classes that extend annotations
// first get all the classes
//subClassList);
"/*     * Returns the classpath entries that match the search list of jars and paths     */"
// no need to look further
// $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-1$// $NON-NLS-2$
// might throw an exception, assume this is ignorable
// $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-2$ // remove ".class"
// Recursive call
//assertEquals("1a:aa.",f1.invoke());// N.B. returns different result from before
// Remove trailing splitter
// Found splitChar at end of line
// This is the new length
// we saw a delimiter last time // so add the default
// "<?xml "
// EOF
// $NON-NLS-1$ add zero padding
// @see TestJorphanUtils for unit tests
// SingletonHolder idiom for lazy initialisation
// These are needed for invoking the method
// If we could not find the method, store the exception here
// Only invoked by IODH class
// get the platform beans
// should never fail // See if we can actually find the object // Should never happen
// Prevent useless dump attempts
// the string so far
// opened tags
// don't do anything
// java.util.Date d = null;
//-- JMX file attributes - do not change
// Don't instantiate class
//++ JMX file attributes - do not change
// i.e. no filter
// The TestCase to run
// the Method objects for setUp (@Before) and tearDown (@After) methods // Will be null if not provided or not required
// The method name to be invoked
// The wrapper used to invoke the method
// The name of the class containing the method
// create a new TestResult
// Convert JUnit4 failure to Junit3 style
// copy the original stack trace
// we should log a warning, but allow the test to keep running
// this should be externalized to the properties
// probably should not happen
// ensure correctly set on initial display // ensure correctly set on initial display
// if the string constructor is not null, we use it. // if the string constructor is null, we use the empty // constructor to get a new instance
// first we see if the class declares a string // constructor. if it is doesn't we look for // empty constructor.
// Must be final to create instance
// Convert JUnit4 AssertionError failures to JUnit3 style so // will be treated as failure rather than error.
// Dummy to ensure there is a test to run
// Generates expected Exception
// let bad input fail silently
// Succeeds only if Before method - verifyTwo() - is run.
// Fails to generate expected Exception
//or if you have assertions enabled
//should always fail
//should not fail
// Generate a test error
// will generate Divide by zero error
// Normal test failure
// Generate test error
// int spare = cntr.getThreadInfo().getMaxSpareThreads();
// loop to fetch desired connector
// default : get first connector
// CRLF blank line found
// e.printStackTrace();
// private MonitorModel DATA;
// log.warn("Only for use in unit testing");
// I18N: Contains fixed English text ...
// DATA = model;
// optional connector name prefix
// private List workerslist;
// the equations
// for now just swallow the exception
// Should be OK
// surl can be null if read from a file
// Check if target of merge is reasonable
// private boolean startDoc = false; // private boolean endDoc = false;
// this.startDoc = true; // Reset all work variables so reusing the instance starts afresh.
// this.startDoc = false; // this.endDoc = true;
// Note: the element is a ConfigTestElement, so cannot use FTPSampler access methods
// used for interrupting the sampler
// should probably come from the setup dialog
// Could not access file or other error
// TODO
// LF blank line found
// Does not appear to be used externally; called by #loadProjectFile()
// These are handled specially by addToTree
// Document doc = null;
// write to file
// The following used to be jacks_password, but the Arguments class uses // HashMap for which the order is not defined.
// Should the file data be saved in the response? // $NON-NLS-1$
// No need to close this // No need to close this
// The value is not encoded
// Get the filename
// Set the values retrieved for the file upload
// WEB SERVER PANEL
// need to clear because the
// 2 columns size
// WEB REQUEST PANEL
// Set false for AJP
// Body data
// Default changed in 2.3 and again in 2.4
// Concurrent resources download // $NON-NLS-1$
// Embedded URL match regex // $NON-NLS-1$
// don't automatically expand when merging
// If RAW data and Parameters match we allow switching
// Called by JMeter#startGui()
// Convert CRLF to CR, see modifyTestElement
// all sub-components with setFont(null) inherit this font
// Only display the port number if it is meaningfully specified
// Helper method to simplify code
// one builder for all requests in a thread
// Implementation
// PROTOCOL
// CONTENT_ENCODING
// may well happen
// should never happen
// Note: initialised with error = failure = false
// If there is no data, then switching between Parameters and Raw should be // allowed with no further user interaction.
// If there is data in the Raw panel, then the user should be  // prevented from switching (that would be easy to track).
// If the Parameter data cannot be converted to Raw, then the user should be // prevented from doing so raise an error dialog
// Cached value
// package-protected to allow access by unit-test cases
// helper method to save the cache entry
// if no-cache is present, ensure that expiresDate remains null, which forces revalidation
// the max-age directive overrides the Expires header,
// else expiresDate computed in (expires!=null) condition is used
// Helper method to deal with missing headers - Commons HttpClient
// Apache HttpClient
"/*     * Is the sample result OK to cache?     * i.e is it in the 2xx range?     */"
//+ JMX attributes, do not change values // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //-
// means counting from end
// i.e. not using Expires // Check that we are processing Expires/CacheControl
// cache the value
// echo back
// create a parser:
// Check if we have read all the headers
// We know when to stop reading, so we can allow the read method to block
// doc =
// use null for no expiry
// if everything went fine then xml schema validation is valid
// Store session cookies as well as unexpired ones
// Only set message if error not yet flagged
// Has its own debug log; removes matching cookies
// Helper method to construct SAX error details
// This means the cookie was wrong for the URL
"/*         * Can be caused by: - failure to read XSD file - xml does not match XSD         */"
// tweak diff HC3 vs HC4
"/*         * Can be caused by: - premature end of file - non-whitespace content         * after trailer         */"
// is the Sample the correct size?
// Use the name of the test element, otherwise cannot enable/disable debug from the GUI
// Check how much of the body we have already read as part of reading // the headers // We subtract two bytes for the crlf divider between header and body
// The reqest has no body, or it has a transfer encoding we do not support. // In either case, we read any data available
// We use multi-line mask so can prefix the line with ^ // $NON-NLS-1$ $NON-NLS-2$
// the signer certificate
"/*     * @param response @return     */"
// Needs to be package-protected to avoid problem with serialisation tests
// start off with a merged object as a copy of the local object
// has the Sample lasted too long?
// iterate thru each of the other headers
// find the same property in the local headers
// we have a match
// prefer values from the other object
// use the other object's value
// break out of the inner loop
// the other object has a new value to be added to the merged
//$NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$
// Saves the error if one occurs
// Pass request to new thread
// TODO Charset ? // $NON-NLS-1$
// Only used by GUI
// Ensure that there is always a collection available
// default level // allow override by system properties
//final int _ignored = 1;
//++ JMX tag values // $NON-NLS-1$
// ensure that the initial cookies are copied to the per-thread instances
//long max was used to represent a non-expiring cookie, but that caused problems
// only save unexpired cookies
// ensure data is set up OK initially
// no point in checking if we don't have anything to compare against
// do nothing, the cookie manager has to accept changes.
// Scan for any matching cookies
"/*     * Remove all the cookies.     */"
// Used by HttpMirrorServer
// create parser
// No need to call clear
// String md5Result = DigestUtils.md5Hex(resultData);
// Used for saving entries to a file
// evaluate result
