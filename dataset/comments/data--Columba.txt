// TODO (@author fdietz): should be removed if we only use // Streams!
// FIXME (@author karlpeder): Is 3.2 the proper version of html to refer to?
// this is a hack for the multiline column
//TODO (@author tstich): do something
// TODO (@author fdietz): i18n
// FIXME remove method // toolbarPane.add(c);
//TODO (@author fdietz): i18n
// TODO @author hubms: copied from frederiks search builder
// real stupid recreation of whole list model // -> replace with id-based listmodel update
// TODO (@author karlpeder): Extend handling of special entities as in restoreSpecialCharacters
"/**     * Transforms email-addresses into HTML just as     * substituteEmailAddress(String), but tries to ignore email-addresses,     * which are already links, if the ignore links flag is set.     * <br>     * This extended functionality is necessary when parsing a text which     * is already (partly) html.     * <br>     * FIXME: Can this be done smarter, i.e. directly with reg. expr. without manual parsing??     *     * @param         s                                input text     * @param        ignoreLinks                if true link tags are ignored. This gives a     *                                                         wrong result if some e-mail adresses are     *                                                         already links (but uses reg. expr. directly,     *                                                         and is therefore faster)     * @return        text with email-adresses transformed to links     */"
//TODO: Return content encoding according to the mime part in the mail
//TODO: Return content type according to the mime part in the mail
// hack to support dockable view title update // TODO replace with listener pattern
/*TODO stop polling thread?! */
// TODO @author hubms: bad: if there is a icon it is tagged or // not
// TODO categoryEnumeration
// hack: if start and end time is at 00:00:00:000 it is // an all day event
// register interest on store changes // TODO the dependency should be the other way around
// TODO: fix layout to look good, even if there's not enough information provided
// FIXME: ugly cast to ContactModel
// @TODO dont use deprecated method
/* TODO must get polling interval from config file */
//      TODO: reactivate when feature is supported
// If this folder has children add them // TODO: In the future we should try to fetch additional children on demand // when the tree of the dialog is opened
// TODO (@author fdietz): Add more special entities - e.g. accenture chars such as ?
// TODO (@author waffel): encrypt AND sign dosN#t work. The message is // always only // encrypted. We need a function that knows, here // is an encrypted AND signed Message. Thus first encyrpt and then // verifySign the message // if this message is signed/encrypted we have to use // GnuPG to extract the decrypted bodypart // - multipart/encrypted // - multipart/signed
"/**     * Transforms urls into HTML just as substituteURL(String),     * but tries to ignore urls, which are already links, if the ignore     * links flag is set.     * <br>     * This extended functionality is necessary when parsing a text which     * is already (partly) html.     * <br>     * FIXME: Can this be done smarter, i.e. directly with reg. expr. without manual parsing??     *     * @param         s                                input text     * @param        ignoreLinks                if true link tags are ignored. This gives a     *                                                         wrong result if some urls are already links     *                                                         (but uses reg. expr. directly, and is     *                                                         therefore faster)     * @return        text with urls     */"
// TODO @author fdietz: ensure that we don't fetch individual // headers // to reduce client/server roundtrips
// ??? bad to have release hardocoded here. Fix later...right.
//TODO: Open stream from the mime part specified by contentID of the  //currently viewed mail
// something is very wrong here
// its maybe better to leave this option out of the dialog // -> make it configurable in the xml file anyway
// TODO: Make this hack more i18n compatible
/*TODO move resources to a resource file */
// TODO: use UndoableEditEvent to make this really work
// TODO: Should we take some action to ensure signature is valid // html?
/* XXX should this be fired by a different thread? */
//TODO:add a configuration of the cache size
"/**	 * Command executes the search.	 * <p>	 * In case new result results arrive, it ensures that all interested	 * listeners are notified from inside the EDT.	 * <p>	 * FIXME: fdietz: No locking of folders currently implemented! TODO: fdietz:	 * create new Command for every provider to introduce real ""parallel"" search	 * 	 * @author fdietz	 */"
/*XXX this is not thread-safe, though luck. It isn't supposed to be. */
// TODO (@author fdietz): move this to AbstractMessageFolder constructor
//TODO: Should this be renamed to cLoc or something more appropriate than clock?
"/*         * TODO (@author karlpeder): Guess that right thing to do is to get height as getDrawingSize().getHeight(),         * since this should take top- and bottom margin of this print         * object into account. But the height seems not to be set         * correctly in computePositionAndSize() (*20030604, karlpeder*)         */"
// we can't use SystemClassLoader here, because that // wouldn't work with java webstart, // ResourceBundle uses its own internal classloader // if no classloader is given //  -> set classloader = null
//  // Note: We intentionally don't remember internal plugins, because // we don't want them to appear in the plugin manager currently. //  // TODO: improve plugin manager dialog to support internal plugins // which can't be removed, etc.
// FIXME calendar?
// TODO @author hubms have this flags, until the speed of the entitymanager // is improved
// cleanup: remove port number file
// TODO: There's probably a better way to do this hack...
"/*TODO before inserting, find out if there's already a menu item     * with the same action command. if so, replace it, otherwise insert new     */"
// TODO (@author fdietz): add import feature
// TODO (@author hubms): implement custom menuitem renderer
// TODO @author fdietz: no paging used currently // show only first 5 results
// real stupid recreation of whole menu model
// TODO: throw IllegalArgumentException in case a variable == null
//TODO (@author fdietz): associate help with button and root pane
// FIXME -- This will most likely not work. //          You want the element removed if the contents are the same //          Not just if the element reference is the same.
// // @author: fdietz // using shutdown-manager is wrong here, because this // automatically also calls the FrameManager, which  // also starts a second shutdown thread // -> This leads into two parallel shutdown thread which // -> is why sometimes config-files, etc. get messed up //
// @author fdietz: hackish way of creating a search toolbar //JToolBar searchToolBar = new ExtendableToolBar();
"/** * A Command uses the information provided from {@link DefaultCommandReference} * to execute itself. * <p> * TODO: remove IFrameMediator dependency *  * @author Timo Stich <tstich@users.sourceforge.net> */"
// manually rewrite the connection url, because // if there is no rewrite the database files are created // in the starting directory, we don't want that!
// TODO: fix updateActions //enableActions(getCurrentOwner());
// TODO: @author hubms check what is neccessary // remove old filters // searchFolder.getFilter().getFilterRule().removeAll(); // add filter criteria // searchFolder.getFilter().getFilterRule().add(c);
//TODO Let the AttachmentViewer get the focus so that this works
//TODO: Open in message frame //TODO: Handle also message attachments from OpenInComposer action
// TODO (@author fdietz): add central place, which keeps a list of all possible //       colors, and provides a custom color configuration possibility
// TODO (@author fdietz): implement custom menuitem renderer
// FIXME (@author fdietz): Do we need this implementation in a TempFolder? // If not, just put an empty method here, just like in VirtualFolder.
// TODO Ristretto should handle the logging of streams in another // way.
// TODO (@author fdietz): All this code for creating a new // IMAPRootFolder should // be moved to a FolderFactory // -> this way "path" would be handled in the factory, too // parent directory for mail folders // for example: ".columba/mail/" // String path = // MailConfig.getInstance().getConfigDirectory().getPath();
// turn of focus stealing (workaround should be removed in the // future!)
// wait, if there is an active transaction // TODO @author hubms retrycount!
"/**	 * this regular expression should cover anything from a@a.pt or a@a.com to	 * a@a.info. Permits usage of invalid top domains though.	 * <p>	 * [bug] fdietz: added ""."" and ""-"" as regular characters	 * (example:mail@toplevel.mail.de)	 * <p>	 * TODO: see if we can replace the matching code with Ristretto stuff	 *	 */"
// @author: fdietz // This is a workaround. Generally, the contact dialog editor // should ensure that all necessary fields are available //
// TODO: replace view with more detailed info view
// TODO we should check if we need an vector or better another list // implementation; checking also, if the list // must be syncronized or not (performance)
// FIXME is this correct for
//TODO externalize string //$NON-NLS-1$
// TODO: multiplicity checks
// TODO (@author fdietz): until we can get all the settings update // immediately // we just open a message box, telling the user to restart
// TODO: real IM status here
// FIXME: should we align the menu to the left instead? // menu.show(b, b.getWidth() - menu.getWidth(), b.getHeight());
// @author: tstich // Its better to call the Shutdownmanager // since the above is called automatically from it. // ShutdownManager is modified to allow one shutdown // call only, so we never should have multi-shutdown // problems again.
/* TODO should come up with a better name for the menu item */
// TODO (@author fdietz): add export feature
// Since Columba is doing its own logging handlers, we should not // use handlers in the parent logger.
// The JavaHelp can't be added to a BorderLayout because it // isnt' a component. For this demo we'll use the embeded method // since we don't want a Frame to be created.
// @author: fdietz // // PROBLEM: Extensions don't run using Java Webstart (JWS) //  // Even though we assign "all-permission" in our columba.jnlp file, this // only applies // to the initial Java Webstart classloader. But, we create our own // classloaders for // loading extensions. These classloaders don't have the same permission // settings anymore.
// what to do here? we could start a new server...
// WORKAROUND: //  // System.setSecurityManager(null); // // This call effectly disables the sandbox mode and seems to work fine. // // Below I use another way. The policy for all classloaders is set to // "all-permissions". // Don't really know the difference though.
// For the Mac ScreenBarMenus to work, this must be declared before // *ANY* AWT / Swing gets initialised. Do *NOT* move it to plugin init // location because that is too late...
// kids - don't do this at home
// @author: fdietz // // The following line is not working - just don't know why // Main.mainClassLoader.addURLs((URL[]) urlList.toArray(new URL[0])); // // WORKAROUND: // // Modify the system class loader instead - horrible! But it works!
// // @author: fdietz // WORKAROUND: // we simply append URLs to the existing global class loader // and use the same as parent //  // Note, that we create a new URL classloader for every class // we instanciate. We might want to support hot-swapping // of changed classes later.
// we can't use SystemClassLoader here, because that doesn't work // with java webstart // -> instead we use this.getClass().getClassLoader() // -> which seems to work perfectly
// TODO (@author karlpeder): If existing meta tags are to be kept, code changes are // necessary
/* TODO create exception for this */
// TODO (@author javaprog): better exception handling
// TODO (@author fdietz): fix account info panel check
// TODO (@author fdietz): move this to AbstractMessageFolder constructor // create filterlist datastructure
// TODO: @author fdietz replace with regular expression
// TODO implement me!
//TODO (@author fdietz): implement
// TODO implement validation
"/**	 * 	 * create Subject headerfield in using the senders message subject and	 * prepending ""Fwd:"" if not already there	 * 	 * @param header	 *            A <code>ColumbaHeader</code> which contains the headerfields	 *            of the message we want reply/forward.	 * 	 * FIXME (@author fdietz): we need to i18n this!	 * 	 */"
// TODO finish marshalling of all available properties
// TODO finish unmarshalling of all available properties
// TODO implement
// TODO: implement this
"/**	 * 	 * create subject headerfield in using the senders message subject and	 * prepending ""Re:"" if not already there	 * 	 * @param header	 *            A <code>ColumbaHeader</code> which contains the headerfields	 *            of the message we want reply/forward.	 * 	 * FIXME (@author fdietz): we need to i18n this!	 */"
// TODO (@author karlpeder): Implementation of undo/redo missing
// html - quoting is done by inserting a div around the // message formattet with a blue line at left edge // TODO (@author fdietz): Implement quoting (font color, stylesheet, // blockquote???)
// TODO (@author fdietz): show error dialoghere
// TODO (@author fdietz): add error dialog
// TODO: Show dialog
// TODO (@author fdietz): make i18n!
// TODO (@author javaprog):sizeComboBox can be enabled as // paragraphComboBox when implemented
//TODO: Add dialog to inform user that the smtp server // does not support authentication
// TODO @author hubms show if there is already a virtual folder for // this tag
// update status message // TODO (@author fdietz): i18n
//TODO (@author fdietz): keep track of progress here
// TODO localize filter action names
//TODO (@author fdietz):  i18n
// TODO implement clear()
// TODO (@author fdietz):: implement action for font size combo box!
// TODO (@author fdietz):  i18n
// FIXME threaded-view auto collapse
// get selected folder
// Create a FormLayout instance.
// g2.setColor(fillColor); // g2.fillRect(0,0,w,h);
// no filterlist treenode found // -> create a new one
// associate with JavaHelp
// if it is in a scroll pane, then we add to the end of the // list.
// try to get instance of FilterAction
// remove from header-list
// notify folder tree model
// ---- telephoneTextField2 ----
// set component values
// write text to file
// cancel
// user didn't select any folder // -> make Inbox the default folder
// ---- fullnameButton ----
// all / match any JComboBox
// *20030926, karlpeder* Added html support // MimePart mp = tree.getFirstTextPart("plain");
// remove XmlElement
// check if firstname, middlename or lastname contain only valid // characters
//String userVisibleName = pluginHandler.getUserVisibleName(id);
// filter description JTextField
"/*				 * c.gridx = GridBagConstraints.REMAINDER; c.anchor =				 * GridBagConstraints.NORTHEAST; gridbag.setConstraints(				 * removeButton, c ); panel.add( removeButton );				 */"
"/*			 * *20040210, karlpeder* Remove html comments - they are not			 * displayed properly in the composer			 */"
// get values from components
// ->set source reference in composermodel // when replying this is the original sender's message // you selected and replied to
// int type = action.getActionInt();
// ---- calendarLabel ----
// JCheckBox overwriteOptionsCheckBox;
// Date header // we got a date header (store this // fact for later use
// iterate through all foldertypes to find suitable ones
"/*			 * BufferedReader in = new BufferedReader( new InputStreamReader(			 * new FileInputStream(file), model.getCharsetName()));			 */"
// getting next node
// Add child to parent
// Do decoding stuff
// table registers interest in tree selection events
// enabled/disabled
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#remove(int)   */"
// criteria.setPattern((String) textField.getText());
"// create config-folder //		File file = new File(""test_config""); //		file.mkdir(); // //		new Config(file); // //		Logging.DEBUG = true; //		Logging.createDefaultHandler(); // //		// init mail component //		new MailMain().init(); //		new AddressbookMain().init(); // //		// now load all available plugins //		PluginManager.getInstance().initExternalPlugins();"
// Fall back to today
// ensure tzid matches date-time timezone.. // Parameter tzId = dtEnd1.getParameters().getParameter( // Parameter.TZID);
// create a form builder
// get root folder
// wrong xml-format
// create mandatory IMAP Inbox folder
"/*TitledBorder etched = javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "" Login "");centerPanel.setBorder( etched );*/"
//private JLabel enableTextIndexingLabel;
"//		TagList tagList = new ContactTagList(this); //		JScrollPane tagListScrollPane = new JScrollPane(tagList); //		tagListScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); //		tagListScrollPane //				.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));"
// couldn't find folder associated with this uid // -> open the select folder dialog
//mod: 20040629 SWITT for redirecting feature //If FROM value was set, take this as From, else take Identity
// Add the custom color item.
// treePathButton.setMargin(new Insets(0,0,0,0));
// use "mark as read" as default fallback mechanism
//      ->set source reference in composermodel // when replying this is the original sender's message // you selected and replied to
// focus name textfield
// 3 columns //$NON-NLS-1$
// add message to folder
// associate inbox with root folder
// @author tstich: Added Lucene gui element here //builder.add(enableTextIndexingLabel, cc.xy(2, 13));
// Where, in the drag image, the mouse was clicked
// which parents are possible ?
// select new item
// Create a FormLayout instance. //$NON-NLS-1$
// attachments found... // insert start and end for html
// return the result as boolean value true or false
// you need a sound.wav in your program folder
// convert the condition string to an int which is easier to handle
// public abstract IHeaderListStorage getHeaderListStorage();
// just a simple example
// parent directory for mail folders // for example: ".columba/mail/"
// Logging.log.severe("Error parsing body for attachments", e);
// create copy command
// debug messages for diagnostics
// Server does not support UTF-8 // -> fall back to System default
// adjust description field
// If the cause is a SMTPExcpetion then only password // wrong // else bogus authentication mechanism
// Groups are separated by at least one WS character
// VALIDATION DISABLE ! Sebastian Witt 25.07.04, // "NAME" <email@somewhat.de> isnt true, which should :( // root@localhost is valid, but not with this check. :( // root is also valid (with local mailserver), but not with this check // :(
// charset is specified - find it
// setPreferredSize(new Dimension(250, 300));
// add email addresses
// Logging.log.severe( // "Error while looking for charset", // e);
"/*         * buffer.append(getShortClassName(record.getSourceClassName()));         * buffer.append("".""); buffer.append(record.getSourceMethodName());         * buffer.append("" - "");         */"
// roll correctly over years
//$NON-NLS-1$ //enableLabel.setFont(boldFont);
// bottom.add( Box.createHorizontalGlue() );
// user changed folder name
// Encrypt the cleartext
// create EmptyBorder between components and dialog-frame
"/*        UIManager.put(""Label.font"", mainFont);        UIManager.put(""Textfield.font"", mainFont);        UIManager.put(""TextArea.font"", mainFont);        UIManager.put(""MenuItem.font"", mainFont);        UIManager.put(""MenuItem.acceleratorFont"", mainFont);        UIManager.put(""Menu.font"", mainFont);        UIManager.put(""Menu.acceleratorFont"", mainFont);        UIManager.put(""MenuBar.font"", mainFont);        UIManager.put(""Tree.font"", mainFont);        UIManager.put(""Table.font"", mainFont);        UIManager.put(""Button.font"", mainFont);        UIManager.put(""CheckBoxButton.font"", mainFont);        UIManager.put(""RadioButton.font"", mainFont);        UIManager.put(""ComboBox.font"", mainFont);        UIManager.put(""ToggleButton.font"", mainFont);        UIManager.put(""CheckBoxMenuItem.font"", mainFont);        UIManager.put(""RadioButtonMenuItem.font"", mainFont);        UIManager.put(""TabbedPane.font"", mainFont);        UIManager.put(""List.font"", mainFont);        */"
// charset is found from line, not lcLine => not // forced lower case
// group
// Add components to the panel:
"/*		 * If no Content-Type header was found, it is necessary to construct a		 * new one (for outgoing msg Eudora never includes a Content-Type =>		 * html msg is not shown correctly).		 */"
"/*		 * JPanel panel= new JPanel(); panel.setLayout(new BorderLayout());		 * panel.add(resetButton, BorderLayout.EAST); builder.add(panel,		 * cc.xywh(5, 7, 1, 1));		 */"
"/* * Test for XmlElement(String,String) */"
"/*		 * overwriteOptionsCheckBox = new JCheckBox(""Overwrite global		 * settings""); overwriteOptionsCheckBox.addActionListener(this);		 * overwriteOptionsCheckBox.setActionCommand(""OVERWRITE"");		 */"
// defaultShapeFactory.setShape(AShapeCreator.createTraslucentShapeHorizontal(), // null);
//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$
// search across all providers
// c.gridwidth = GridBagConstraints.RELATIVE;
"/*LinkedList testList = new LinkedList(listFull_I);ListTools.intersect(testList,listFull_I);assertTrue(testList.equals(listFull_I));testList = new LinkedList(listFull_I);ListTools.intersect(testList,new LinkedList());assertTrue(testList.size()==0);testList = new LinkedList(listFull_I);ListTools.intersect(testList,listPart1_I);assertTrue(testList.equals(listPart1_I));testList = new LinkedList(listFull_I);ListTools.intersect(testList,listPart2_I);assertTrue(testList.equals(listPart2_I));testList = new LinkedList(listPart1_I);ListTools.intersect(testList,listPart2_I);assertTrue(testList.size()==0);*/"
// if there is no search engine, try the default one
// execute command -> use mock object class as worker which does // nothing
// read attribute "value"
// save boolean headerfields, compressing them to one int value
//protected RemoteSearchEngine searchEngine;
"/*					 * Such a header is used by Eudora to indicate attachments					 * for outgoing messages. Outgoing messages have no					 * Content-Type specified. Therefore the Content-Type header					 * can be safely set here without risk of conflicts with the					 * modifications made above					 */"
// AShape textShape = new TextAShape("text", "$" + GridRow.NAME + "$", // textRect, TextAShape.TYPE_SINGE_LINE, font, fgColor, // AtFraction.CENTER, AtStart.START0, Boolean.FALSE);
// only local folders have an full-text indexing capability
"/*		 * mainConstraints.fill = GridBagConstraints.BOTH;		 * mainConstraints.insets = new Insets(0, 0, 0, 0);		 * mainConstraints.gridwidth = GridBagConstraints.REMAINDER;		 * mainConstraints.weightx = 1.0; mainConstraints.weighty = 1.0;		 */"
// TODO i18n "Close" button
// get unique boundary (not checked against att. // list part - but guess its ok)
// get column of list
// if user cancelled task exit immediately
// display status message
// group item
// parameters ~ rest of string
// enable lucene search index by default //$NON-NLS-1$ //$NON-NLS-2$
// save last message (while loop terminated before last msg was saved)
// Create the header of the multipart
// Logging.log.severe( // "Not enough tokens in \"" // + dateStr // + "\" to create Date: header. Returning null", // e);
// notify configuration changes listeners // @see org.columba.mail.gui.table.util.MarkAsReadTimer
"/*							 * mixed or unknown multipart type (to be treated as							 * mixed). This is typically a message with							 * attachments. Eudora just stores links to them -							 * therefore we create a new multipart/mixed message							 * with 2nd part = html page with links to							 * attachments							 */"
// get list of all uids
//notifyTableListeners(new TableModelEvent(this, 0, logMessages.size()));
// move message to trash if marked as expunged
// ask the user about the destination file
// don't instantiate this class
// register for configuration changes
// get headerfield to search in (for example: Subject)
// button panel
// listener updates menu in case the tags where changed
// return (ChatMediator) chatList.get(index);
// notify listeners // @see org.columba.mail.gui.composer.SubjectController
"/* (non-Javadoc) * @see org.columba.core.gui.themes.plugin.AbstractThemePlugin#setLookAndFeel() */"
// send notification event // @see org.columba.mail.gui.message.TextViewer
// apply transparent icon
// example: fdietz@jabber.org/Jabber-client // -> remove "/Jabber-client"
// replace with "MyListCellRenderer" for simple one-line renderer // replace with "MyComplexListCellRenderer" for an additional description line
// notify listeners
// mandatory String-based attribute
"/*		 * Gets the platform specific default theme. This is in all cases but		 * MacOS X the Plastic theme. On MacOs X we use the System L&F.		 *		 */"
// skip the first column
// selected buddy in buddylist
// private void addStatus(String tooltip, ImageIcon icon) { // JLabel label = new JLabel(icon); // label.setToolTipText(tooltip); // // comboBox.addItem(tooltip); // }
// update list view
// didn't find any group for this buddy
// Set recipients from the recipients vector
"//		Border border = new CompoundBorder(BorderFactory.createEmptyBorder(2, //				4, 2, 4), border1);"
"/*         * If this is a unix-based system, check the 2 best-known areas for the         * aspell binary.         */"
// create new default options
// add all groups as folder to JTree
// add new element
// update status information
// remove all old elements
// create To headerfield
// @author fdietz // -> Moved code for updating mailfolderinfo to markMessage() // intentionally! //
// some other version of the constructor
// execute resyncing command
// re-select folder to make changes visible to the user
// update treenode
// setup to, references and account
// composer
// 2 columns // rows are added dynamically (no need to define them // here)
//builder.nextLine();
//layout.setRowGroups(new int[][]{ {1, 3, 5, 7, 9, 11, 13, 15} });
// re-use identity type for recipient list
//Set up color chooser for setting quoted color
// clear the tooltip message previously displayed in the status bar
// tree has focus
//      convert criteria into int-value
// create chat connection, if not available yet
// private JComboBox loginMethodComboBox; // String loginMethod;
// create command
// Shadow
// view -> model
// modify card properties in folder
// JPanel mainPanel = new JPanel(mainLayout); // mainPanel.setBorder(Borders.DIALOG_BORDER);
// implement your own search-engine here
// if this is the last token, check if the last element // is the same than in the array
// model -> view
"/*	 * Test method for	 * 'org.columba.mail.parser.ListBuilder.createStringListFromItemList(List<IHeaderItem>)'	 */"
// used by virtual folder only
// counts how many messages has been // processed // date fetched from "From ???@??? ..."
// putValue(LARGE_ICON, ImageLoader.getIcon(IconKeys.DOCUMENT_SAVE_AS));
// get message body
// Html: Insertion of text before and after original message // get necessary headerfields
// create filter
// create group containing first contact
// If f==null because of deleted AbstractMessageFolder fallback to // Inbox
// get selected contact/group card
// top panel
// user's can't edit default account
// centerpanel
// check number of cached MessageNodes //assertEquals(2, model.getMap().size());
// create stream from string
// topPanel.setLayout( );
//  execute command -> use mock object class as worker which does // nothing
// if something goes wrong here, fall back to "mark as read"
// check number of cached MessageNodes //assertEquals(1, model.getMap().size());
// Must go backwards or else the list will remove the wrong filters.
// 3 columns // rows are added dynamically (no need to define them here)
"/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */"
// c.fill = GridBagConstraints.HORIZONTAL;
// try to fill the contact list
"/*		 * dragSource.startDrag( event, new Cursor(Cursor.DEFAULT_CURSOR),		 * ImageLoader.getImageIcon(""contact_small"",""Add16"").getImage(), new		 * Point(5, 5), new StringSelection(""contact""), this);		 */"
// top-level structure
// string to search
// disabled IMAP folder tests as they require connection // to remote IMAP server // setup(suite, new IMAPTstFactory());
// cancel if headerfield doesn't exist
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.profiles.IProfileManager#getProfileForName(java.lang.String)	 */"
"//		builder.append(showAttachmentsInlineCheckBox, 4); //		builder.nextLine();"
// finally, add all external extension menu additions // for example: Hello World Plugin
// add all addresses
// if in debug mode, register context debugger view
// Create list of unsubscribed folders
// create one list containing the marked items, which have to be "unmarked" // and another list containing the items remained to be marked
// see if theirs a match
// check if mediator supports docking
// decode headerfield
"//				IMAPRootFolder parentFolder = FolderFactory.getInstance() //						.createIMAPRootFolder(account); //				IMailFolder inbox = FolderFactory.getInstance() //						.createIMAPFolder(parentFolder, ""INBOX"");"
// get condition and convert it to constant as defined in // FilterCriteria
//cache.clear();
// folders have same root folder // -> for example: two IMAP folders on the same server // -----> this means we use server-side copying which // -----> is much faster than using inputstreams here // // also used for local folders, which saves some parsing work
// Process personal namespaces
// create a Command for every action of this filter // -> create a compound object which encapsulates all commands
// Deactivate this vFolder because changes are about to happen // and the search needs to be redone.
// vertical light gray column separator line
// First sort so that Events from one folder stick together
// END1 because the draw should be // correct
// create default namespace
// if line doesn't start with "From" or line length is 0 //  -> save everything in StringBuffer
// Something is wrong // Sync again
// Now we have the subscribed folders in subscribedFolders // and the unsubscribed folders in unsubscribedFolders // Next step: Create a treestructure
// get message header
// register for text selection changes // controller.getEditorController().addObserver(this);
//bottom.add( Box.createHorizontalGlue() );
// set initial enabled state of combo boxes // XmlElement optionsElement = MailConfig.getInstance().get( // "composer_options").getElement("/options"); // XmlElement htmlElement = optionsElement.getElement("html"); // String s = htmlElement.getAttribute("enable", "false"); // boolean enableHtml = Boolean.valueOf(s).booleanValue();
// INBOX is always subscribed
// Handling of paragraph combo box // select the item in the combo box corresponding to present format
"/*			 * HeaderItem[] items = new HeaderItem[selection2.length]; items =			 * selection2;			 * HeaderItemDNDManager.getInstance().setHeaderItemList(items);			 */"
// FormLayout layout = new FormLayout( // "default, 3dlu, default, 3dlu, default, 3dlu, " // + "default, 3dlu, default, 3dlu, default, 3dlu, " // + "default, 6dlu, default, 3dlu, default, 3dlu, " // + "default, 3dlu", "fill:default"); // PanelBuilder b = new PanelBuilder(this, layout); // // CellConstraints c = new CellConstraints(); // // b.add(paragraphComboBox, cc.xy(1, 1)); // b.add(sizeLabel, cc.xy(3, 1)); // b.add(sizeComboBox, cc.xy(5, 1)); // b.add(boldFormatButton, cc.xy(7, 1)); // b.add(italicFormatButton, cc.xy(9, 1)); // b.add(underlineFormatButton, cc.xy(11, 1)); // b.add(strikeoutFormatButton, cc.xy(13, 1)); // b.add(leftJustifyButton, cc.xy(15, 1)); // b.add(centerJustifyButton, cc.xy(17, 1)); // b.add(rightJustifyButton, cc.xy(19, 1));
// this can throw a ChangedCharsetException
// can be only one
// get selected search criteria
// get list of all filter actions
// add stream to folder
// removeElement();
// this action is disabled when the text/plain editor is used // -> so, its safe to just cast to HtmlEditorController here
// select search folder
// interate through all filter actions
// check three entries
// message size should be at least 1 KB
"/*		 * *20030906, karlpeder* Method signature changed to take an		 * AbstractEditorController (instead of an TextEditorView) as parameter		 * since the view is no longer directly available		 */"
// name is used to load plugin
//DefaultItem item = new DefaultItem(element); //item.set("header_enabled", getState());
"/*JSCFDriverManager.registerJSCFDriver(new GPGDriver());JSCFConnection con = JSCFDriverManager.getConnection(""jscf:gpg:""+pgpItem.get(""path""));*/"
"/*		 * builder.append(sslLabel, 3); builder.nextLine();		 *		 * builder.append(disableSSLConnectionRadioButton, 2);		 * builder.nextLine(); builder.append(enableSSLConnectionRadioButton,		 * 2); builder.nextLine();		 * builder.append(enableSTARTTLSExtensionRadioButton, 2);		 * builder.nextLine();		 */"
// Plain text components don't fire these events
/* check for new files in the scripts directory */
// no match with link tags
// enable/disable textfield in-dependency of selected criteria
// register for configuration changes for the html(enabled/disabled) // state
// show all search results
"// small icon for menu //		putValue(SMALL_ICON, ImageLoader //				.getSmallImageIcon(""configure_16_mail.png""));"
// create Command reference
// encapsulate bodytext in html-code
// get inputstream of this message from folder
// view headerlist in message list viewer
// create filter criteria based on selected type
// else set it to 23:59:59.999
"//	 header-item"
"/*                 * *20031216, karlpeder* Changed handling of dates.                 * Previously columba.date header was used. Now we                 * use the Date header instead                 */"
// execute custom search
// type-cast here is safe
"/*		 * assertEquals(""copied message should be marked as recent"", true, flags		 * .getRecent()); assertEquals(""copied message should be marked as		 * flagged"", true, flags .getFlagged()); assertEquals(""copied message		 * should be marked as not expunged"", false, flags.getExpunged());		 */"
// set criteria for search folder
// set source folder UID
// remove old filters
// Synchronize the complete folder
// add search to history
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.gui.table.model.TableModelModifier#remove(java.lang.Object[])	 */"
// get search folder
// tree selection event
// Choice btw. text and html will be based on stored option
// create selection handlers
// the following lines add cut/copy/paste/undo/redo/selectall // actions support using the Columba action objects. // // This means that we only have a single instance of these // specific actions, which is shared by all menuitems and // toolbar buttons.
// directly execute search
// Resetting contents buffer. // Assuming that tags either tag content or children, not both. // This is usually the case with XML that is representing // data strucutures in a programming language independant way. // This assumption is not typically valid where XML is being // used in the classical text mark up style where tagging // is used to style content and several styles may overlap // at once.
// get currently selected folder
// get command reference
// if necessary decrypt/verify message
// execute command -> use mock object class as worker which does nothing
// public IContentPane getContentPane() { // return this; // }
// header = (ColumbaHeader) message.getHeaderInterface();
"//		 add message ""0.eml"" as inputstream to folder"
// Register Alt-Up hotkey for moving up folder when folder tree or // table have focus
// Register F2 hotkey for renaming folder when the folder tree itself // has focus
// Register Alt-Down hotkey for moving up folder when folder tree or // table have focus
// set flags
// folder-based configuration
// light gray line every day
// simply demonstration of how to change the docking title
// update message list view title
"/*	 * private JTextField textField; private JPanel leftPanel; private	 * JTabbedPane rightPanel; private JButton addButton; private JButton	 * removeButton; private JButton editButton; private JButton upButton;	 * private JButton downButton;	 * 	 * private JFrame frame;	 */"
// show message content
// update frame title
// close Columba, if composer is only visible frame
// select node
// is the message marked as draft ?
// bottom.add(c, BorderLayout.CENTER);
// get selected row
// return super.getListCellRendererComponent(arg0, arg1, arg2, arg3, // arg4);
// edit message in composer
// get inbox-folder from pop3-server preferences
// open message in new message-frame
// remember search folder for "show total results" action
// mail folder tree
// contains headerfields which are to be displayed
// message list
// If we have new messages add them to the headerlist
// this has to be set by themes //setDividerSize( 5 );
// tooltip text
// overwrite this method
//splitPane.setDividerSize(1); //setDividerSize(5);
// small icon for menu
//      add message "0.eml" as inputstream to folder
// Which Bodypart shall be shown? (html/plain)
"//		 @author: fdietz never request focus //requestFocus();"
// add contact to addressbook
// short cut key
// some server have a bogus apop // try user/pass to check if the password is // correct
// dark gray line at 12 and 13
// we don't need any configuration here
// new selection
"/*		 * l_year = new JLabel(); p1.add(l_year);		 */"
// pass it along to parent frame
// notify all interested listeners
// putValue(LARGE_ICON, ImageLoader.getSmallIcon(IconKeys.FOLDER_OPEN));
// exit immediately
// delete all files in folder
// copy selected URL to clipboard as string
// save previously selected folder options
// create Address from URL
// get current message list selection
// map to new reference
// create empty value
// -2 because of the decrement in line 317 // removedLocalUids = localUids.size() - 2 - position;
// old command-specific selection
// login and get # of messages on server
// icons
// second row showing the minutes
// register for status events
// b.append("Pass&word:", passwordTextField);
// ensure that there is an HTML part in the email, otherwise JTextPanel // throws a RuntimeException
"//		 select message in message list"
// JPanel bottom = new JPanel(); // bottom.setBackground(backgroundColor); // // bottom.setLayout(new BorderLayout());
// getting current node (under the selection)
// this has to be set by themes //splitPane.setDividerSize( 5 );
// if the node is not null
// Update only if the selection did not change
// Find missing uids loop
"/*           * initialize file observer thread with a reference to our           * beanshellScripts map           */"
// show selected message
// set name of organization
// create new search folder, but re-use old search folder
// from email address
// add command for execution
// create message value
// fill semantic context
//$NON-NLS-1$ //recentLabel.setFont(boldFont); //$NON-NLS-1$
// display changes
//$NON-NLS-1$ //sizeLabel.setFont(boldFont); //$NON-NLS-1$
// get messagecontroller of frame
// set value
//$NON-NLS-1$ //totalLabel.setFont(boldFont); //$NON-NLS-1$
// get flags
// disable toolbar text
// get selected message UID
// Check if the message still exists // or has been moved by e.g. a filter
// in case no attachment handler was executed correctly // -> fall back to default handler
"/* * Test for boolean equals(Object) */"
// empty line, means new contactcard
// if attachment can't be opened, save it only
// abort if nothing selected
// substitute special characters like: // <,>,&,\t,\n
// if it is in a table, then we need to insert it at the // selected position.
// decode filename
// remove from old mediator's listener list
// create string from inputstream
// updateBackground();
// reset progress bar
// show context menu
// Sanity tests
// rename "*.part" file to destination file
// add initial messageframe treenode
// get pop3 or imap account xml node
//      use global table options
// create reference to this message
// check if the returned String is has a length != 0
// update(observable, null);
// just show the encrypted raw message
// !!! Subject: test // create filter configuration // -> check if <Subject> <contains> pattern <test>
// return null;
// call AbstractFilter to do the tricky part
// init configuration
// construct new Message from decrypted string
// example: "columba://org.columba.mail/<folder-id>/<message-id>"
// else we set the body to the i18n String
// the first child must be the signed part
// add the rest of the original body - and transfer back to body var.
// get selected message
// the second child must be the pgp-signature
// update connection state
"// Determine whether there are 1, 2, or 3 names specified. These names should be separated by spaces //	or commas. If a comma separates the first two names, assume that the last name is specified first,  //	Otherwise, assume the first name is specified first. Middle name is always specified after the first name."
// fall back to first account as default
// create filter configuration
// name of font
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getStatus(org.columba.mail.folder.imap.IMAPFolder)	 */"
// parse for email addresses and substite with HTML-code
// item and item2 should be two different objects
// create filterlist datastructure
// check if a single entry is selected
// register interest on configuratin changes
// Create the closing boundary
// Edges of the poly shape
// query provider
// if we don't use this here - actions like reply would only work // on the // the encrypted message
// insert document type decl.
// Reply-To headerfield isn't specified, try to use From instead
// prepend
// Reset the selection
// cast to Local AbstractMessageFolder is safe here
// item and item3 should not be equal
// if size > than 1000 KB, transform to MB
// check if the charset is US-ASCII then there is something wrong // -> switch to UTF-8 and write to log-file
// add rest of body until start of </body>
//private File file;
"/*		 * builder.append(quotedColorCheckBox, quotedColorButton);		 * builder.nextLine();		 */"
"/*		 * builder.append(spellLabel, spellButton); builder.nextLine();		 */"
// get array of source references
// add smilies
//How to retrieve the mime part's contentID: String contentID = url.getRef(); //initialize stuff here
"/*	 * (non-Javadoc)	 * 	 * @see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList,	 *      java.lang.Object, int, boolean, boolean)	 */"
// Does the server support the namespace extension?
// suggestionsJScrollPane.setMinimumSize( new Dimension( 200, 300 ) );
// parse for quotings and color the darkgray
// We are done - clear the status message with a delay
// Process other users namespaces
"/*		ipcHelper.executeCommand(ExternalToolsHelper.getSALearn()				+ "" --no-rebuild --spam --single"");				*/"
// get interval value
// if 1/3 of all characters are digits
// paint right outside border // g2d.setPaint(p1);
// Handle special case in which INBOX has a NIL delimiter // -> there might exist a pseudo hierarchy under INBOX+delimiter
// get Outbox folder from reference
// Get Text for Icon
// add this message to frequency database
// split the hierarchical name with at the delimiters
"/*     * wait for stream threads to die     *     */"
//Do nothing
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#search(org.columba.core.filter.FilterRule, org.columba.mail.folder.imap.IMAPFolder)	 */"
// add filter criteria
// update headerlist of destination-folder // -> this is necessary to reflect the changes visually // but only do it if the target folder is still in sync!
// false if search/replace is currently working
// double-click mouse listener
// expect a different hashcode from a newly created item...
// Display resulting MimeParts
"//		 create MH folder // -> use homeDirectory as top-level folder // -> this has to be an absolute path"
// set double-click action for attachment viewer
// Register F2 hotkey for renaming folder when the message panel has // focus
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#setFirstLoginAction(org.columba.mail.imap.IFirstLoginAction)	 */"
// listen for configuration changes
// Get Tooltip for Icon
//$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-1$//$NON-NLS-2$
// public JComponent getContentPane() { // JComponent c = super.getContentPane(); // // // // return c; // }
// load xml document
// ---- titleTextField ----
// get message node at selected row
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */"
// Singleton
//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-1$
// found match
// definition of a second
// timer to use
//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
// add new renderer
// does not occur
// add headerfields which are about to show up
// make Columba logger parent of macchiato logger
// enable/disable smilies configuration
//Do not access the inputstream after this line!
"//	public String marshall(IStructureType type); //	public IStructureType unmarshall(String xmlString);"
// get composer controller // -> get all the account information from the controller
// super(node, folderItem); // super(getDefaultItem("IMAPRootFolder", getDefaultProperties()));
"/*(.*://.*?)""  ""something"" with ://          (could be .*? but then the Pattern would match whitespace)             (      (&gt;).*  a html-Encoded > followed by anything                                                  |  or([""+punc+""]*)""  any Punctuation        (<br>)? 0 or 1 trailing <br>             )$  end of String*/"
// apply additional handcrafted rules
// Shall we use the HTML-IViewer?
// Which Charset shall we use ?
// check if this message was already learned // -> only add if this is not the case
// get header from folder
"/*	 * validate command parameters. At the moment only checks if there are any	 * invalid email addresses	 *	 */"
// Read Stream in String
// this is a HTML message
// execute filter
// strip HTML message -> remove all HTML tags
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#getStatusMessage()	 */"
// XmlElement selectedBrowser = // messageviewer.getElement(OptionsItem.SELECTED_BROWSER); // selectedBrowser.addObserver(this);
// init new renderer
// same object
"/*	 * (non-Javadoc)	 * 	 * @see java.util.Observer#update(java.util.Observable, java.lang.Object)	 */"
// apply model
// open connection to SMTP server
// parse key:value lines
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.gui.config.general.MailOptionsDialog	 *	 * @see java.util.Observer#update(java.util.Observable, java.lang.Object)	 */"
// this is a text/plain message
// now send message source
// remove old renderer
// setText(body);
// use new viewitem
// final URL url = extractURL(ev);
"// icon //		putValue(SMALL_ICON, ImageLoader //				.getSmallImageIcon(""apply-filters-16.png""));"
// Some error in the client/server communication //  --> fall back to default login process
// if have already a suitable folder skip the search
// shortcut key // no shortcut here, because F10 conflicts with system accelerator key // putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_F10, // 0));
// return default-account SpamItem instead
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getMimePartSourceStream(java.lang.Object,	 *      java.lang.Integer[])	 */"
// TODO (@author fdietz): this should be changed into a "real" window
// super.getTableCellRendererComponent( table, value, isSelected, // hasFocus, row, column );
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#messageRemoved(org.columba.mail.folder.event.IFolderEvent)	 */"
// ======== this ========
// open context-menu // -> this has to happen in the awt-event dispatcher thread
"/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getAttribute(java.lang.Object,     *      java.lang.String)     */"
// scale image
// synchronize local UID list with server UID list
//private boolean pop3;
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.api.command.Command#execute(org.columba.api.command.Worker)	 */"
// buf.append("<b>" + title + "</b><br>");
"/* (non-Javadoc) * @see javax.swing.table.TableCellRenderer#getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int) */"
// return default-account ImapItem instead
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#setHeader(org.columba.ristretto.message.Header)	 */"
// fetch date from // "From ???@??? // ..."
// vector.add(moreButton);
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#count()	 */"
// Create Multipart/Mixed if necessary
// insert head section with charset def.
// 2 columns
// parse line by line
// custom headers
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.shutdown.IShutdownManager#register(java.lang.Runnable)	 */"
// NOTE if SSL is possible we just need the plain login // since SSL does the encryption for us.
// remove body part if already shown in text viewer
// concrete implementation of actions
//  Set id on from address
// update folder selection
// wait 10 seconds and check for pending commands again // this is useful if a command causes a deadlock
// TODO i18n "Help" button
// leave dialog empty if no source contact model specified
// can no longer assume that sendMessageDialog has been displayed
// getting current uid
// is true if the last search was successful // a position of the word after the last search ivokation; -1 if nothing found // a position of the word after the last replace ivokation; -1 if nothing was replaced
// send as text/html
// create search folder
"/* (non-Javadoc)     * @see org.columba.core.filter.IFilterActionList#remove(int)     */"
// compose message body as text/plain
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#registerDockable(java.lang.String, java.lang.String, javax.swing.JComponent, javax.swing.JPopupMenu)	 */"
// setup filter configuration
// important for cancel
// add <head> section
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#dock(org.columba.api.gui.frame.IDockable, org.columba.api.gui.frame.IDock.REGION, float)	 */"
// write charset to header
// message doesn't contain this headerfield
// Remove the BodyPart(s) if any
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#indexOf(org.columba.core.filter.Filter)   */"
// *20030831, karlpeder* Also location is restored
// if message-size is bigger skip download of this message
// button.addMouseListener(new LinkMouseListener());
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#setCondition(java.lang.String)   */"
"/* (non-Javadoc)	 * @see org.columba.addressbook.gui.table.model.TableModelDecorator#getRowCount()	 */"
// to allow empty messages
// create search criteria
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#add(org.columba.core.filter.FilterCriteria)   */"
// Init Mime-Header with Default-Values (text/plain)
// skip, if filter is disabled
"/*		 * *20030918, karlpeder* Tags are stripped if the model contains a html		 * message (since we are composing a plain text message here.		 */"
// replace <head> section
"/*           * I specifically want this here to ensure that the directory exists and           * this method never returns null.           *           * Any files that were in the observation list have already been           * previously removed by checkFiles().           */"
// reset row height
//        putValue(LARGE_ICON, ImageLoader //                .getImageIcon("mark-as-important-16.png"));
// add signature if defined
"/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IGroupItem#getContactCount()	 */"
// update tree-node (for renaming the new folder)
"/*	 * (non-Javadoc)	 * 	 * @see com.miginfocom.calendar.datearea.ActivityDragResizeListener#activityDragResized(com.miginfocom.calendar.datearea.ActivityDragResizeEvent)	 */"
// get message with UID
// start parsing line
// Set Default Charset or selected
// message belongs to which account?
// Setup the XML that is to be written
// Some error in the client/server communication // --> fall back to default login process
// insert link tags for urls and email addresses
// backwards compatibility
// for text comparisons
"/*					 * For multipart Content-Types we need to take action (if					 * boundary is nonexistent): Eudora stores content type =					 * multipart even though the message is not really multipart -					 * e.g. because an attachment already has has been decoded					 * by Eudora)					 */"
// tests, if the list substracted with an empty list is equal to itself
// if the parent is a virtual folder the search cannot be applied directly // look for the correct uids by finding the first non virtual folder
// retrieve the actual search result data
// headerfield is empty
// --> correct token data
// date
// server message numbers start with 1 // whereas List numbers start with 0 // -> always increase fetch number
// Init Mime-Header with Default-Values (text/html)
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterCriteria#setCriteria(int)   */"
// compose text part
// make sure this mailbox is selected
//attachments
// On the first try check if we need to show the password dialog // -> not necessary when password was stored
// compose html part
// ======== panel8 ========
// copy flags
// substitute special characters like: // <,>,&,\t,\n,"
// If the cause is a IMAPExcpetion then only password // wrong // else bogus authentication mechanism
// Now we can search this folder since no mail from // this folder will come in the list
// From this point we have a username and password // from configuration of from the dialog
// change subject column renderer back to default
// set the attachment flag
// get value of Subject, From or To header
// Get all MimeParts
// an url - check whether its already a link
// Return if not clicked on any column header
// If the same message is still shown // Mark it as read
// search for closing bracket separately to account for attributes in tag
// If tooltip is null, removes any tooltip text.
// button.addMouseListener(new LabelMouseListener());
// contains "," comma character
// Color backgroundColor = // UIManager.getColor("TextField.background");
// current position in s
// an email adress was found - check whether its already a link
//super.dock(messageViewerDockable, IDock.REGION.CENTER);
// Combine the results in one array
// Maps TableColumn objects to tooltips
// create attachment component with text, icon // tooltip, context menu and double-click action
// Current column whose tooltip is being displayed. // This variable is used to minimize the calls to setToolTipText().
// if the closing mark is after the s1 mark do not insert a link
// *20040229, karlpeder* Use default account as fall back
// at any time i get here uids of length 0. If this is so we should // return and do nothing
// getting last selection
// retrieve event from store
// awt-event-thread
// make sure that we have a Message-ID
// RFC822 - Header
// AND or OR ? -> AND is implicit, OR must be specified
/* remove from script list */
// move
// contains not
// Quote according model type (text/html)
"/*             \\b  Start at word boundary         ((\\w*(:\\S*)?@)?  [user:[pass]]@ - Constructprot + ""://  protocol and ://       [""+any+""]  match literaly anything...         ) (?=\\s|$)  ...until we find whitespace or end of String*/"
// get list of plugins
// just look if the first character alrady an < // so can use this mailaddress as the correct address
// plain text
"/*        * it's the script responsability to define the ""metadata"" by invoking        * .setName(), .setAuthor() and .setDescription()        */"
// UnsupportedFlavorException, IOException
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#selectAll() */"
// load plugin handler used for the columns
"/*		 * AbstractMessageFolder destFolder = (AbstractMessageFolder) treeView		 * .getDropTargetFolder();		 */"
// example: X-BeenThere: columba-devel@lists.sourceforge.net
// create html element, if it doesn't exist
// at the moment we are only supporting gpg. So let us code hard // here the gpg driver
//    shortcut key
"/* * *20030623, karlpeder* "" and space handled also */"
// select all rows
//int getRow(MessageNode node);
// We save only the first item in the cc-list
// expand all rows
"/* (non-Javadoc)     * @see org.columba.core.filter.IFilterActionList#addEmptyAction()     */"
// changing the selection to the first row
// Process the events
// load plugin
// only do checking if we are in online state
// if there are entries in the table
// tests, if the listPart substracted
"//			 @author: fdietz never request focus //requestFocus();"
// getting the node
// update status message
// if subject doesn't start already with "Fwd:" prepend it
// folder in which the update occurs
// enable, if more than zero treenodes selected
// scrolling to the first row
"//					 re-select folder"
"/*			 * // scrolling to the first row			 * scrollRectToVisible(getCellRect(row, 0, false)); requestFocus();			 */"
// fall-back to global resource loader
// don't clear selection
// Remove the ending separator and whitespace, if any exist
// init threaded-view model
// ensure tzid matches date-time timezone.. // Parameter tzId = // dtStamp1.getParameters().getParameter( // Parameter.TZID);
// remove all columns for column model
// pass tree to model, used by the threaded-view
// make it translucent
// init sorting model
// fill formatted textfield
// if subject doesn't start already with "Re:" prepend it
// notify observers (sorting state submenu)
// If address contains a comma, enclose the display name portion in double-quotes
// get translation
// *20030919, karlpeder* Added handling of html messages
// init view
// One is the easiest case
// column IDs are all lower case
// create new event with new UUID
// Assign a tooltip for each of the columns
// Unregister/register as Folder listener
// clear model
// substract the uids on the server from the downloaded uids -> // headerUids are the uids that have been removed from the server
// register interest on folder events
// make selected row visible again
// We don't need to issue a additional NOOP // here since the ensureLogin() call above // ensures also the correct Status in a // MIN_IDLE interval timeframe.
// if message was removed from JTable
// get current selection
// get inputstream of message body
// for example: "Re: this is a subject"
// skip if user didn't specify search term for this criteria
"/* * Test for boolean not equals(Object) */"
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#recentChanged(java.lang.String, int)	 */"
// get configuration
"/*				 * case WorkerStatusChangedEvent.FINISHED : setVisible(false);				 * break;				 */"
//MessageNode getMessageNode(Object uid);
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#undo() */"
// remember selected node
// loginMethod = (String) loginMethodComboBox.getSelectedItem();
// when marking messages, don't touch selection
"/*	 * (non-Javadoc)	 * 	 * @see com.miginfocom.calendar.datearea.ActivityMoveListener#activityMoved(com.miginfocom.calendar.datearea.ActivityMoveEvent)	 */"
// update infopanel (gray panel below the toolbar) // showing total/unread/recent messages count
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#recreateFilterRows()	 */"
// re-select previous selection
"/* (non-Javadoc)	 * @see org.columba.calendar.ui.calendar.api.IActivitySelectionChangedListener#selectionChanged(org.columba.calendar.ui.calendar.api.ActivitySelectionChangedEvent)	 */"
// only re-select if only a single row was formerly selected
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#getView()	 */"
// enable/disable cut/copy/paste/selectall actions // FocusManager.getInstance().updateActions();
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isRedoActionEnabled() */"
// load options of newly selected folder
// implemented for completeness. // Time-out for clearing text is ignored here.
// select row
"/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IGroupItem#setContacts(java.util.List)	 */"
// remember previously selected folder
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isPasteActionEnabled() */"
// if new columns were added, we have to initialize the tooltips
// String definitions for the charsetnames // NOTE: these are also used to look up the // menuentries from the resourceloader
// Member variables...
// remove all columns from table model
"/*         * (non-Javadoc)         *          * @see org.columba.api.command.IWorkerStatusController#removeWorkerStatusChangeListener(org.columba.core.gui.statusbar.event.WorkerStatusChangeListener)         */"
// selected nodes
"/*         * (non-Javadoc)         *          * @see org.columba.core.taskmanager.ITaskManager#removeTaskManagerListener(org.columba.core.taskmanager.TaskManagerListener)         */"
// expand all unread message nodes
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#setName(java.lang.String)   */"
"/* * Test for hashCode() */"
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#moveUp(org.columba.core.filter.Filter)   */"
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#get(int)   */"
//MessageNode getRootNode();
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#addAll(org.columba.core.filter.FilterList)   */"
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#add(org.columba.core.filter.Filter)   */"
// clear messagenode cache
// let us hard coding the gpg for each connection. Later we should // support also other variants (like smime)
// repaint table header
"/*	 * (non-Javadoc)	 * 	 * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)	 */"
// notify the model to sort the table // sorter.sort(column);
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IFrameMediator#savePositions()	 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.frame.IFrameManager#openView(java.lang.String)	 */"
//AbstractFolderOptionsPlugin getPlugin(String name);
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#dock(org.columba.api.gui.frame.IDockable, org.columba.api.gui.frame.IDockable, org.columba.api.gui.frame.IDock.REGION, float)	 */"
"/* (non-Javadoc)	 * @see org.columba.core.print.cParagraph#print(java.awt.Graphics2D)	 */"
// simulate charset changed to initialize selectedMenuItem
//setEnabled(false);
"/* (non-Javadoc)         * @see javax.swing.table.TableCellRenderer#getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int)         */"
//TableView getView();
// int column = view.convertColumnIndexToModel(viewColumn); // int column2 = view.convertColumnIndexToView(viewColumn);
// disable every icon // -> set appropriate icon for selected column
"/* (non-Javadoc) * @see org.columba.mail.folder.RootFolder#getInbox() */"
// view the message under the new node
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.gui.table.model.TableModelModifier#set(org.columba.mail.message.HeaderList)	 */"
// getting from the next node the uid
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.FolderTreeNode#addSubfolder(org.columba.mail.folder.FolderTreeNode)	 */"
// user struct
// select folder again after move operation
// locate body start- and end tags
// use ResourceBundle's internal classloader
"/*	 * Test method for 'org.columba.core.tagging.TagManager.getAllTags()'	 */"
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#update(java.lang.Object, org.columba.mail.message.IColumbaHeader)	 */"
// test if the size of self substracted list is 0
"/*		 * xp[0] = x + 6; xp[1] = x + 12; xp[2] = x; yp[0] = y - (c.getHeight() /		 * 4); yp[1] = y + (c.getHeight() / 4); yp[2] = y + (c.getHeight() / 4);		 * 		 * g2.setColor(Color.white); g2.drawLine(xp[0], yp[0], xp[1], yp[1]);		 * g2.drawLine(xp[1], yp[1], xp[2], yp[2]); g2.setColor(Color.gray);		 * g2.drawLine(xp[2], yp[2], xp[0], yp[0]);		 */"
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#clear()	 */"
// There is no parent
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#remove(java.lang.Object)	 */"
"/* * Test for int hashCode(). */"
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#containsValue(java.lang.Object)	 */"
// select it
//  -> uncomment to enable/disable action
// set default html or text based on stored option // ... can be overridden by setting the composer model
// getByName
// check if the node is not null
// loop until signing was sucessful or the user cancels the passphrase // dialog
// and set this to the actual ref
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#getCondition()   */"
"/*	 * Test method for 'org.columba.core.tagging.TagManager.addTag(String)'	 */"
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#addMessage(java.io.InputStream)	 */"
"/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getFlags(java.lang.Object)     */"
// create config-folder
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#insert(org.columba.core.filter.Filter, int)   */"
"/*		 * ((MailFrameMediator)		 * frameMediator).registerTableSelectionListener(this);		 */"
"/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getMimePartBodyStream(java.lang.Object,     *      java.lang.Integer[])     */"
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#folderAdded(org.columba.mail.folder.event.IFolderEvent)	 */"
// remove configuration directory
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getHeaderFields(java.lang.Object,	 *      java.lang.String[])	 */"
// saving the last selection for the current folder
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#connectionClosed(java.lang.String, java.lang.String)	 */"
"/* (non-Javadoc) * @see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList, java.lang.Object, int, boolean, boolean) */"
// MULTIPLICITY.ONE is default
"/* (non-Javadoc)     * @see org.columba.mail.gui.composer.AbstractEditorController#setViewText(java.lang.String)     */"
// default value is 200 pixel // int pos = // viewItem.getIntegerWithDefault("splitpanes","attachment", 200);
"// icons //		putValue(SMALL_ICON, ImageLoader.getIcon(""folder_delete.png"")); //		putValue(LARGE_ICON, ImageLoader.getIcon(""folder_delete.png""));"
"/* * Test for getColor() */"
"/*   * (non-Javadoc)   *    * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)   */"
// toolbar text
"/* (non-Javadoc)     * @see org.columba.core.gui.selection.ISelectionListener#selectionChanged(org.columba.core.gui.selection.SelectionChangedEvent)     */"
// add profile to profiles.xml
// icon for toolbar
"/* (non-Javadoc)         * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)         */"
// find all possible plugin directories
// warn user in any other cases
// clear message-list selection
"/*     * (non-Javadoc)     *      * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)     */"
// clear message list
"//		 necessary for the message-frame only"
// icon for menu
// ---- officeTextField ----
"/* * Test for clone() */"
// clear message-viewer
// get selected stuff
// set toolbar text
// now instanciate the folder classes
"/*		 * *20030906, karlpeder* Method signature changed to return an		 * AbstractEditorController		 */"
// If the tree is in a DND action then we dont need to update all // listeners, since this only a temporary folder selection.
// message contains list of attachments
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#checkSupportedAuthenticationMethods()	 */"
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#copy(org.columba.mail.folder.imap.IMAPFolder, java.lang.Object[], org.columba.mail.folder.imap.IMAPFolder)	 */"
//      shortcut key
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#subscribeFolder(java.lang.String)	 */"
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#append(java.io.InputStream, org.columba.ristretto.imap.IMAPFlags, org.columba.mail.folder.imap.IMAPFolder)	 */"
// message body
// do not only update the tag search result when click on a different // tag, also do a refresh of the same tag when double click on it
// getting prev node
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getAllHeaders(java.lang.Object, org.columba.mail.folder.imap.IMAPFolder)	 */"
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchFlagsListStartFrom2(int, org.columba.mail.folder.imap.IMAPFolder)	 */"
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getMimeTree(java.lang.Object, org.columba.mail.folder.imap.IMAPFolder)	 */"
// date range (start time, end time) definition
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#markMessage(java.lang.Object[], int, org.columba.mail.folder.imap.IMAPFolder)	 */"
// add result panel as listener for new search results
// MULTIPLICITY.ZERO_TO_ONE is default
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getMessageFolderInfo(org.columba.mail.folder.imap.IMAPFolder)	 */"
// shortcut key
"/* (non-Javadoc)	 * @see org.columba.core.gui.themes.plugin.AbstractThemePlugin#setLookAndFeel()	 */"
// get a list of MessageNode objects of the first // hierachy level
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#setObservable(org.columba.api.command.IStatusObservable)	 */"
// do the search
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#update(java.util.Observable, java.lang.Object)	 */"
// date time timezone definition
// for each element in the message-header-reference or in-reply-to // headerfield: - find a container whose message-id matches and add // message, otherwise create empty container
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.message.HeaderInterface#getFlags()	 */"
// don't prompt user if composer should be closed
// shortcut key is STRG-E ;mod: 20040629 SWITT
"/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#setHeader(org.columba.ristretto.message.Header)     */"
// toolbar text is usually a bit shorter ;mod: 20040629 SWITT
// tooltip text ;mod: 20040629 SWITT
// Platform maintainers: add your platform here
// icons //        putValue(SMALL_ICON, //            MailImageLoader.getIcon("email_edit.png")); //        putValue(LARGE_ICON, MailImageLoader.getIcon("email_edit.png"));
"/*	 * (non-Javadoc)	 *	 * @see org.columba.chat.ui.roaster.IRoasterTree#getSelected()	 */"
// pass command to scheduler
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#isSignedOn()	 */"
//mod: 20040629 SWITT
"/*                 * If the height of a view exceeds the paperheight, there should                 * be no break before (since it will be impossible to fit it in                 * anywhere => an infinite loop). We don't have access to the                 * pageheight here, therefore an ""educated guess"" is made:                 * No breaks are inserted before views starting within the first                 * 1% (chosen to avoid round-off errors) of the available space                 * given by actBreakHeight. If the view starts after the first 1%,                 * a break is inserted and the view will start at the top of the                 * next page (i.e. withing the first 1% this time).                 */"
// identity definition
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.ui.conversation.IConversationController#addChat(java.lang.String)	 */"
"/*		 * folder.getConfiguration().set(""property"", ""enable_threaded_view"",		 * enableThreadedView);		 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#setPresenceMode(org.jivesoftware.smack.packet.Presence.Mode)	 */"
// if this is set to true, we use the local selection, instead // of using the table selection
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.folder.mailboximport.DefaultMailboxImporter#getDescription()	 */"
// setJMenuBar(menubar);
"/* (non-Javadoc)	 * @see org.columba.core.gui.plugin.AbstractConfigPlugin#updateComponents(boolean)	 */"
// clear statusbar message
"/*         * calculate a new break height according to the contents, possibly         * smaller to break before some content (i.e. not to break in the         * middle of something         */"
// cancel command execution/updateGUI methods, if folder selection // has been modified
// *20030614, karlpeder* only enabled when message(s) selected
"/*		 * ( ( AbstractMailFrameController) frameMediator)		 * .registerTableSelectionListener( this);		 */"
// Default signature
// shortcut key //putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_F, 0));
// uncomment to enable action
//        putValue(LARGE_ICON, ImageLoader.getImageIcon("drafts-16.png"));
// look for default view settings (if not found, null is returned)
// shortcut key //putValue(ACCELERATOR_KEY, // KeyStroke.getKeyStroke(KeyEvent.VK_BRACELEFT, 0));
// create a panel with all 4 buttons of the window // columns  // rows
// -> move messages to trash
// register as Observer
"// remove color //			add color selection to reference"
// createSubMenu();
// *20040510, karlpeder* columns may be null (first time we // visit a folder!?) // IDefaultItem item = new DefaultItem(xmlElement);
// toolbar text is usually a bit shorter
// close window
// // composer_options.xml: // //<options> //<gui> //  <view id="0"> //    <window maximized="false" height="700" width="600" y="0" x="0" /> //    <toolbars infopanel="true" main="true" /> //    <splitpanes header="200" attachment="100" main="200" /> //    <addressbook enabled="false" /> //  </view> //</gui> //<spellcheck executable="/usr/bin/aspell" /> //<external_editor enabled="false" /> //<forward style="attachment" /> //<subject ask_if_empty="true" /> //<html send_as_multipart="true" enable="false" /> //</options>
// optional String-based attribute
// create referenc
"//		 putValue(SMALL_ICON, //		            MailImageLoader.getIcon(""email_open.png""));"
// load all internal addressbook plugins
"/*        putValue(SMALL_ICON, ImageLoader.getSmallImageIcon(""redirect_small.png""));        putValue(LARGE_ICON, ImageLoader.getImageIcon(""redirect.png""));        */"
// add color selection to reference
// create virtual folder for each criteria
// get original folder
// should be virtual
// icons ;mod: 20040629 SWITT
// if all messages are tagged with tag, then return true, else false
//      putValue(LARGE_ICON, ImageLoader.getImageIcon("reply_small.png"));
// for some weird reason the table loses its inter-cell spacing // property, when changing the underlying column model // -> setting this to (0,0) again
// trash folder is selected // -> delete message
// listener updates selection status, when ever a message selection changes
// if this is a message-viewer frame viewing a message only // the window should be closed, too
// init table model
// turn off SSL for the future
// no specific renderer found // -> use default renderer
// necessary for the message-frame only
// add array to vector
// tc.setCellEditor(new CustomTreeTableCellEditor());
// view message list
// mark as bold if message is unseen
// setup and load constructor
"//	public JComponent getComponent() { //		JPanel panel = new JPanel(); //		panel.setLayout(new BorderLayout()); // //		panel.add(messageController, BorderLayout.CENTER); // //		 // //		return panel; //	}"
// get language configuration
// sort all the results
// if header contains more fields than the cached header
// open composer
"/*this.rootNode = root;parse();createMissingElements();*/"
// ---- otherPOBoxLabel ----
// Shortcut key //putValue(ACCELERATOR_KEY, // KeyStroke.getKeyStroke(KeyEvent.VK_BRACELEFT,0));
// // create a view more button, responsible for // // opening the attachment viewer popup // JButton moreButton = createAttachmentMoreButton();
// only update table if, this folder is the same // as the currently selected
//$NON-NLS-1$ //nameLabel.setFont(boldFont);
// FIXME r.setPos();
// // Writer interface //
// fetch the headerlist
// *20030621, karlpeder*
// register as configuration change listener
// reopen the port
// parse for urls and substite with HTML-code
// clear message list viewer
// this is needed to be able to open attachments of the decrypted // message
// large icon for toolbar
// if the pgp mode is active we should get the decrypted part
// Register as SelectionListener to track the selection // of the tree
// End class XmlIO
// add every header from HeaderList to the table as MessageNode
//setText(accountName);
// write to temporary file
// Important!! // -> replacing this character must happen first
// update treemodel
//      notify tree //getRealModel().getTreeModel().nodeStructureChanged(getRootNode()); //}
// only import VEVENT and VTODO for now
// save every MessageNode in hashmap for later reference
// add this node to cache
// init bottom panel with OK, Cancel buttons
// create MessageNode
// get unique id
// ensure tzid matches date-time timezone.. // Parameter tzId = // dtStart1.getParameters().getParameter( // Parameter.TZID);
// if no Message-Id: available create bogus
// create tree structure
// putValue(LARGE_ICON, ImageLoader.getIcon(IconKeys.FOLDER_OPEN));
// get header
"/*		 * int index = locationToIndex(new Point(x, y));		 * 		 * setSelectedIndex(index);		 */"
// do the sorting
// load profile config file
// the last element is the direct parent
// save every message-id in hashtable for later reference
// send from address and recipient list to SMTP server // ->all addresses have to be normalized
"// table is empty // -> just display empty table			"
// return if selection change is in flux
// save every message in a list
// immediately update text and progress bar // updateGui();
// check if there are messages marked as recent //  -> in case underline parent node
// has children
// observable connects the sorting table with the sort menu (View->Sort // Messages)
// recent found
// bottom.setBorder(new SingleSideEtchedBorder(SwingConstants.TOP)); // bottom.setLayout( new BoxLayout( bottom, BoxLayout.X_AXIS ) ); // bottom.add( Box.createHorizontalStrut());
//filterList = new Vector();
"//		 go through whole tree and sort the siblings after date"
// getting folder info
// define false < true
// Error
//$NON-NLS-1$ //locationLabel.setFont(boldFont); //$NON-NLS-1$
// Load a file. This is what starts things off.
// TreePath path = tree.getPathForRow(row);
// use local date settings
// setOpaque(true); //MUST do this for background to show up.
"/*		 * matchComboBox.addItem(""is""); matchComboBox.addItem(""is not"");		 * matchComboBox.addItem(""begins with""); matchComboBox.addItem(""ends		 * with"");		 */"
// First find the beginning element
// Create the XML reader... // xr = XMLReaderFactory.createXMLReader();
// private boolean isBordered = true;
// *20040510, karlpeder* columns may be null (first time we visit a // folder!?)
// Set the ContentHandler... // xr.setContentHandler( this );
// add command to CompoundCommand
//setText("!");
// create a virtual folder with all messages holding this tag
// Maximum data to put on a "one liner"
//setForeground( Color.red );
"/*	 * // Default constructor public XmlIO() { }	 */"
// saving last selected Message to the folder
// make sure this configuration is also visually working immediately
// frame.listView.update();
//setForeground( Color.blue );
// fall-back if error occurs
// Top level element (Used to hold everything else)
// Color bgPaint = new Color(255, 150, 150);
//eteTextForeground( Color.blue );
// String userVisibleName = pluginHandler.getUserVisibleName(id);
// maybe the plugin wasn't loaded correctly // -> use default // row = new MarkActionRow(this,action);
// The current element you are working on
"/*	 * protected XmlElement createDefaultConfiguration(String id) { XmlElement	 * child = super.createDefaultConfiguration(id);	 * 	 * XmlElement splitpanes = new XmlElement(""splitpanes"");	 * splitpanes.addAttribute(""main"", ""200""); splitpanes.addAttribute(""header"",	 * ""200""); splitpanes.addAttribute(""attachment"", ""100"");	 * child.addElement(splitpanes);	 * 	 * return child; }	 */"
// attachment controller doesn't support paste actions
// create URI representing the contact
// current path is the parent of the current element
// user is still manipulating the selection
// private AdapterNode actNode;
// store id
// add account to mail-checking manager
// abort if not in debugging mode
// block transfer to self!
// third column is a JCheckBox column
//setText("!!");
//setForeground( Color.red ); //setText("!!");
// notify all observers
// this node is category folder // -> don't make it editable
// no rows are selected
// print all collected profile data
// should be a MutableTreeNode
// current time
// this profiling point is parent of the next one
// create a virtual folder
// plugin wasn't correctly loaded
// if there is nothing selected return
// enabled/disabled checkbox must be editable
// update message list
"/*// enable/disable pluginString id = currentNode.getId();MainInterface.pluginManager.setEnabled(id, b.booleanValue());*/"
// ensure that we are currently in the mail component
// TODO: re-enable feature, the following code violates our // design, accessing folders is only allowed in Command.execute()
// attachment controller doesn't support redo operation
// create new menu
"/*		 * // copy CopyMessageCommand command = new CopyMessageCommand(result);		 * CommandProcessor.getInstance().addOp(command);		 */"
// Get the salutation if one is specified
// Remove the title and the preceding comma
// disable max occurrences
// Remove the salutation
// If the fifo could not be restored initialize it
"/*         * JPanel innerPanel = builder.getPanel();         * FormDebugUtils.dumpAll(innerPanel); setLayout(new BorderLayout());         * add(innerPanel, BorderLayout.CENTER);         */"
// Initialize title strings
"/*   * public FilterCriteria getCriteria(int index) { return (FilterCriteria)   * list.get(index); }   */"
// public CalendarItem getSelected() { // int row = getSelectedRow(); // // return ((CheckableItemListTableModel) getModel()).getElement(row); // }
// search in subfolders recursively
"//		TagList tagList = new CalendarTagList(this); //		JScrollPane tagListScrollPane = new JScrollPane(tagList); //		tagListScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); //		tagListScrollPane //				.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));"
// skip if message doesn't contain the requested headerfield
// get first selected message
// save expanded state
// body untouched
// concate the full name of the new mailbox
// MUST do this for background to show up.
// Save the authentication modes
// Do nothing if we are hovering over the root node
// get configuration from tree.xml file
// recursivly expand all children
// expand folder
// warn user
// match all matches
// safe to cast to IMailFolder here, because only those are visible to the user
// re-add all top components like recipient editor/subject editor
// no sorting
// If rootFolder is not cached traverse the tree
// if window is maximized -> ignore the window size properties // otherwise, use window size property // but ensure that the window is completly visible on the // desktop
// create temporary folder in "<your-config-folder>/mail/"
// Check for default Ports
// check if it contains comma character
// get headerfields
// ok pressed
//putValue(SMALL_ICON, ImageLoader.getIcon("script.png"));
// Note: we negate the expanded state because this is // a will-expand/collapse listener
// attributPanel.add(imapPanel, BorderLayout.CENTER);
"//box.setBackground(new Color(248, 248, 248)); //		JScrollPane pane = new JScrollPane(box); //		pane.setBorder(null);"
// calculate mailbox size in background worker
// search all criteria in specific provider only
// register at shutdownmanager // -> when closing Columba, this will automatically save all folder data
// associate ui component with FocusOwner
"// icon for menu //		putValue(SMALL_ICON, ImageLoader //				.getSmallImageIcon(""16_configure_folder.png""));"
// set parent folder uid
// cast to Folder
// create composer model
//centerPanel.add( Box.createRigidArea( new java.awt.Dimension(0,5) ) ); //centerPanel.add( Box.createRigidArea( new java.awt.Dimension(0,5) ) );
// only use the first selected folder
// // Tell frame model that frame is closing. If this frame hasn't been // opened using FrameManager methods, FrameManager.close does nothing. //
// Test if there is a trailing html tag
// ---- homepageButton ----
"/*        ((MailFrameController) frameMediator).registerTreeSelectionListener(                this);        */"
// it is safe here to cast to AbstractMailFrameControlller
// ---- emailTextField1 ----
// close stream
// cancel pressed
"/*		 * listView = new FilterListTable(filterList, this);		 * listView.getSelectionModel().addListSelectionListener(this);		 * JScrollPane scrollPane = new JScrollPane(listView);		 * scrollPane.setPreferredSize(new Dimension(300, 250));		 * scrollPane.getViewport().setBackground(Color.white);		 * centerPanel.add(scrollPane);		 */"
// save old framemediator in cache (use containers's old id)
// try to set selection
//Folder folder = (AbstractMessageFolder) r[0].getFolder();
// select node in JTree
// initialize completer
// show error message
// implement this
// get global sorting state
// BUGFIX but don't know why that bug occurs
// sorting is enabled
// Drag, resize interactions
// layout center panel
// We have a special Command for VFolders
// apply sorting state
// successfully connected and autenthenticated to SMTP server
// sorting is disabled
// If no exception happened we have successfully logged // in
//tstich: Someone added <html> tags here. This is not the right place!
"/*		 * XmlElement filter = new XmlElement(""filter"");		 * defaultElement.addElement(filter);		 */"
// set subject
// if mediator contains a sortable treemodel
// set tooltip text
// need to be called before search/replace to set up all the states we need
// make sure there is nothing within the root dockingport
// make sure we are logged in
// Show first time Account Wizard
// skip the first column // builder.setLeadingColumnOffset(1); // Add components to the panel:
// If it isnt a message folder, then it must be a root, and those // should not be sorted.
"/*		 * If no Date header was found, it is necessary to contruct a new one		 * (this is the case for outgoing messages from Eudora)		 */"
// setting default Values // setFont(plainFont); // setToolTipText("");
// set label text
// Check if the frame controller has been registered, else do nothing
// end of text was reached -> begin at the start
// name of folder
// retrieve contact model from folder
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getDelimiter()	 */"
// Register as listener to the SelectionManger // to check for selection changes
// create message
//lastreplaceposition = lastfoundposition; //+ replaceWith.length();
// add selection listener
// find backwards
"/* RIYAD: The Prefs API cannot be used to read the Window's registry, * it is coded to use the registry (if available) as a backing store * on in the SOFTWARE/JavaSoft/Prefs registry keys for HKEY_CURRENT_USER * and HKEY_LOCAL_MACHINE paths. I have seen a few java apps that use * the Windows registry and they all required a native lib to do it. */"
// default selection is local Inbox
"/*         * Component strut2 = Box.createRigidArea(new Dimension(30, 5));         * gridBagLayout.setConstraints(strut2, c); eastPanel.add(strut2);         *         * gridBagLayout.setConstraints(defaultButton, c);         * eastPanel.add(defaultButton);         */"
// Transferable interface methods...
// select the "Normal" entry as default
// Constants...
// name = textField.getText();
// Set the width, height and image type
// try again, but ignore charset specification in the html
// Create a graphics context for this buffered image
// need to change selection // Set ignore flag
// convert to inputstream
//lastreplaceposition = lastfoundposition;
// if not specified return empty iterator
// only update if timestamp is equal
//$NON-NLS-1$ //unreadLabel.setFont(boldFont); //$NON-NLS-1$
// match whole word
// result.append(", ");
// append recent message count // -> using blue font
// comments are not displayed // correctly in composer
// don't care
// draw folder name and unseen count // -> using bold font
"/* (non-Javadoc)     * @see org.columba.core.filter.IFilterActionList#get(int)     */"
// if IMAP selectable folder // -> lightgray font color and italic
// table should be updated when tree selection changes
// LOGIN is always supported
// send cancel event to worker
// register for model changes to enable/disable when // user switches between html or text plain mode
//intern variable which is used for text replace purposes
// close the mailbox if it is selected
//bottom.add( Box.createHorizontalStrut());
// register interest on tree selection changes
// Set the readOnly flag
// we generate most buttons using the actions already instanciated
// Quote original message - different methods for text and html
"/*		 * // use wrapper class for easier handling of references array adapter =		 * new FolderCommandAdapter( (MailFolderCommandReference[])		 * getReferences());		 *  // get array of source references MailFolderCommandReference[] r =		 * adapter.getSourceFolderReferences();		 */"
// private JTextField loginTextField;
// user = loginTextField.getText();
// and getting the uid for this node
// private JFrame frame;
// JButton[] buttons = new JButton[2];
// create <type> element
// bottom.setLayout( new BoxLayout( bottom, BoxLayout.X_AXIS ) );
// Use reply-to field if given, else use from
// bottom.add( Box.createHorizontalStrut());
// create IMAP protocol
// Just use the default as fallback
// Stick with the default charset
// CAPAs say that SSL is not supported
// if CAPA was not support just give it a try...
// shall we switch to SSL?
// start a new search -> clear all previous search results
// make sure we are already logged in
// remove // the // 'AUTH='
//Layout a row and column "grid"
// Used to control the state in which // the automatic updated mechanism is
// AUTH?
// CAPA not supported
// add to folder
// combine them to one string
// create In-Reply-To:, References: headerfields
// Login loop until authenticated
"//		 register interest on tree selection changes"
// AUTH
"/*	 * Test method for 'org.columba.core.tagging.TagManager.removeTag(String)'	 */"
// No response means zero!
// User pressed OK
// User cancelled authentication
// if none selected select this folder instead of getting the status
// Convert to a MailboxStatus
// Save or Clear the password in the configuration
// login failed?
// Here we get the new mailboxinfo for the folder
// check if the mailbox already exists -> subscribe only
// disabled IMAP folder tests as they require connection // to remote IMAP server //setup(suite, new IMAPTstFactory());
// This exception is not because wrong username or // password
// number of headerfields
// copy every headerfield the original message contains
// build message orginal ; mod:2004629 SWITT
// load database from file
// Entry does not exist on server // -> add nothing
// notify configuration changes listeners // @see org.columba.mail.gui.message.TextViewer
// create the mailbox on the server
// store the intermediate results in a list
"/*         * bottomPanel.setBorder(new WizardTopBorder()); Border border =         * bottomPanel.getBorder(); Border margin =         * BorderFactory.createEmptyBorder(15, 10, 10, 10);         * bottomPanel.setBorder(new CompoundBorder(border, margin));         */"
// Sync subscribed folders if this is the first login // in this session
// subscribe to the new mailbox
// if mnemonic is first character of this string
//fill sizes string array with numbers from 7 to 18
// dont forget the rest
// divide in packs
// the UIDS start UIDNext till UIDNext + uids.length
"//String checked = //	composerController.getComposerSpellCheck().checkText( //		composerController.getEditorController().getView().getText());"
// update the progress
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.api.command.Command#updateGUI()	 */"
"/* (non-Javadoc) * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int) */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#viewToday()	 */"
// strip remaining tags
"/* (non-Javadoc)	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */"
// get list of user-defined headerfields
// One or many arguments?
// add it to the headerlist
// remove leading or trailing whitespaces
// Now the state of the procotol is more certain correct
// setBorder(BorderFactory.createCompoundBorder(BorderFactory // .createEmptyBorder(5, 5, 5, 5), BorderFactory // .createCompoundBorder(new RoundedBorder( // new Color(220, 220, 220)), BorderFactory // .createEmptyBorder(5, 5, 5, 5))));
// return result
"/* (non-Javadoc)	 * @see org.columba.calendar.store.api.IStoreListener#itemChanged(org.columba.calendar.store.api.StoreEvent)	 */"
"/* (non-Javadoc)	 * @see org.columba.calendar.store.api.IStoreListener#itemRemoved(org.columba.calendar.store.api.StoreEvent)	 */"
// something else is wrong
//view.setSelectedItem( model.getHeaderField("X-Priority") );
// Use a caching mechanism for this
// update this point of time as last communication // since every functio calls this before communicating with // the server
"/*			 * clear existing attachments from the view *20031105, karlpeder*			 * Added to avoid dupplicating attachments when switching btw. html			 * and plain text.			 */"
// AFTER
// pass contact data along to AddressComboBox
// AND : simply create a list of arguments
// search for mnemonic
"/*	 * (non-Javadoc)	 * 	 * @see com.miginfocom.ashape.interaction.InteractionListener#interactionOccured(com.miginfocom.ashape.interaction.InteractionEvent)	 */"
// Also set the delimiter
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#getSelectedActivity()	 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#setViewMode(int)	 */"
// OR : the arguments must be glued by a OR SearchKey
"/* (non-Javadoc)	 * @see org.columba.calendar.ui.list.api.ICalendarListView#getSelected()	 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#viewPrevious()	 */"
"//		 re-select folder"
// add JPanel with useful HTML related actions.
// remove all items
// only prompt user, if composer contains some text
// split key/value pairs
// make sure that JFrame is not closed automatically // -> we want to prompt the user to save his work
"//		titlebar.setMidColor(INACTIVE_MID_COLOR); //		titlebar.setFillColor(INACTIVE_FILL_COLOR); // //		titlebar.setTitleColor(INACTIVE_LABEL_COLOR, INACTIVE_MID_COLOR, false);"
// check if totally out of range.
"/* (non-Javadoc)	 * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)	 */"
// Remove duplicates or the mail address from the receiver account
// create scrollapen
// account ID
// restart timer
// set small icon for menu // putValue(SMALL_ICON, ImageLoader.getImageIcon("stock_convert-16.png"));
// register interest on account changes
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#setVisibleDateRange(org.columba.calendar.model.api.IDateRange)	 */"
// select the account this mail was received from
// Update all component according to the new model
// set display text - possible with a mnemonic defined using &
// get list of all accounts
"/*	 * This method is called whenever the month or year changes. It's job is to	 * repaint the labels and determine whether any selection range limits have	 * been reached.	 */"
// very unlikely to happen
// figure out how many blank spaces there are before first day of // month, // and calculate coordinates of first drawn cell
/* IETF variant */
"/*		 * int index = list.size() - 1;		 * 		 * remove(index);		 */"
//private POP3ServerCollection popServer;
// ask user to kill pending running commands or wait
// only create new subfolders if we used the default "Search Folder"
// offline -> go online
// mnemonic found // ...and not at the end of the string (which doesn't make sence)
// for each account that is enabled and in the fetchalllist
// if the last selection for the current folder is null, then we show // the // first/last message in the table and scroll to it.
// Do not allow an empty name
// TableView view = tableController.getView();
// create tag vector
// search the src folder with the src uid array
//system beep
// Add this header to the list for later searching
// for each account
"// Check if the parentfolder is remote & we are online				"
// remove whitespaces
// ensure root exists
// re-select folder
// found matching account
//increase minimum height by line height and line spacing
// remove this account
// notify model
// new message
//  check if we are online
// do the parsing
"/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IGroupItem#getContacts()	 */"
// remove the bodypart from the mimeparts // that are added to the attachment viewer
// wait for 2 seconds until the dialog is openened
// message colour should be black as default
// Was this message actually copied?
//uid = o;
// ... or, add the file in case there was no "%1" used
// check if the optional value exists
// Check Internet Connection
// Check if Columba is the default mail client
// new NewMessageAction().actionPerformed(null);
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#getComponent() */"
// init Map
// Single OS identifiers: Window 95, Window 98, ...
// Activate all Virtual Folders
// check if contact is tagged
// Remove the double-quote characters from around the addresses in the string
// the next token is an token with the whole Mailaddress
"/*         * (non-Javadoc)         *          * @see org.columba.api.command.IStatusObservable#getCancelled()         */"
// use default account
// Copy the commandline from the client info to the Classes mailto entry
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isSelectAllActionEnabled() */"
// debug output
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isCopyActionEnabled() */"
// Create a emtpy header an back off
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isDeleteActionEnabled() */"
// no more matches - append rest of string
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#alertMessage(java.lang.String)	 */"
// the first token is irrelevant
"/*		((AbstractFolder)MailInterface.treeModel.getRoot()).add(cyrusRoot);		((AbstractFolder) MailInterface.treeModel.getRoot())        .getConfiguration().getRoot().addElement(        		cyrusRoot.getConfiguration().getRoot());		MailInterface.treeModel.nodeStructureChanged(cyrusRoot.getParent());		*/"
// The Stream finished before the header was completely // read!
// example: // "columba://org.columba.contact/<folder-id>/<contact-id>"
// check if its a group item
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#redo() */"
// found contact item in contact component
// method is not needed by IMAP
// found an url with links - is it the same?
// If we are online sync the subscribed folders on first // connection
// initialisation
// Convert to MessageOptions
// replace </p> with double newline
// something really got wrong here -> show error dialog // JOptionPane.showMessageDialog(null, e.getMessage());
// replace <br> and </br> with newline
// save last message, because while loop aborted before being able to // save message
// due to bug CA-174 changed: return EMAIL_PATTERN.matcher(s).replaceAll("<A HREF=\"mailto:$1\">$1</A>");
// The form of the entities must be a regexp!
// initial check of input:
// choose addressbook
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#getFilterActionList()   */"
// replace br, p and heading tags with newlines
// remove header
"/* (non-Javadoc)	 * @see org.columba.api.command.ICommand#execute(org.columba.api.command.IWorkerStatusController)	 */"
// try to re-use already instanciated class
//sb.append("&nbsp;");
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#getFilterRule()   */"
//Convert 4 WS in a row to a tab
//First replace all special entities
"/* (non-Javadoc)	 * @see org.columba.api.command.ICommand#updateGUI()	 */"
// remove characters after </html> tag
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#getEnabled()   */"
// insert surrounding html tags
"/* (non-Javadoc)	 * @see org.columba.addressbook.model.IEmailModel#getAddress()	 */"
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterAction#getUid()   */"
// stripHtmlTags called with true ~ p & br => newlines
// protected void layoutComponents() { // setLayout(new BorderLayout()); // // leftMainPanel = new JPanel(); // leftMainPanel.setLayout(new BorderLayout()); // // JPanel taskPanel = new JPanel(); // taskPanel.setLayout(new BorderLayout()); // // // Border border = getDefaultBorder(); // //Border margin = new EmptyBorder(0, 0, 0, 2); // // // taskPanel.setBorder(new CompoundBorder(border, margin)); // // taskPanel.add(taskButton, BorderLayout.CENTER); // // leftMainPanel.add(taskPanel, BorderLayout.WEST); // JPanel labelPanel = new JPanel(); // labelPanel.setLayout(new BorderLayout()); // // margin = new EmptyBorder(0, 10, 0, 10); // // labelPanel.setBorder(new CompoundBorder(border, margin)); // // // margin = new EmptyBorder(0, 0, 0, 2); // labelPanel.add(label, BorderLayout.CENTER); // // leftMainPanel.add(labelPanel, BorderLayout.CENTER); // // add(leftMainPanel, BorderLayout.CENTER); // // mainRightPanel = new JPanel(); // mainRightPanel.setLayout(new BorderLayout()); // // JPanel progressPanel = new JPanel(); // progressPanel.setLayout(new BorderLayout()); // // progressPanel.setBorder(new CompoundBorder(border, margin)); // // progressPanel.add(progressBar, BorderLayout.CENTER); // // JPanel rightPanel = new JPanel(); // rightPanel.setLayout(new BorderLayout()); // // rightPanel.add(progressPanel, BorderLayout.CENTER); // // JPanel onlinePanel = new JPanel(); // onlinePanel.setLayout(new BorderLayout()); // // onlinePanel.setBorder(new CompoundBorder(border, margin)); // // onlinePanel.add(onlineButton, BorderLayout.CENTER); // // rightPanel.add(onlinePanel, BorderLayout.EAST); // add(rightPanel, BorderLayout.EAST); // } // public Border getDefaultBorder() { // return UIManager.getBorder("TableHeader.cellBorder"); // }
// Check for missing  </html> tag
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#count()   */"
// error
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterAction#setAction(java.lang.String)   */"
// Check for missing  <html> tag
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterAction#setUid(java.lang.String)   */"
// shall we insert a link?
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterAction#getAction()   */"
// Do not take existing link tags into account
// no java task running -> start background tasks
// enable/disable button, too
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#remove(int)   */"
// rafter the user saved the file and closed the // external text editor, we read the new text from the file
// check if it is closed
// already handled
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#getConditionInt()   */"
// found an email address with links - is it the same?
// not the same
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchFlagsListStartFrom(int, org.columba.mail.folder.imap.IMAPFolder)	 */"
"/*		 * css = ""<style type=\""text/css\"">\n"" + ""body {font-family:\"""" + name +		 * ""\""; font-size:\"""" + size + ""pt; \""} \n"" + ""a { color: blue;		 * text-decoration: underline }\n"" + ""font.quoting {color:#949494;} \n"" + ""</style>\n"";		 */"
// found an open link
// no match with mailto link tags
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#deleteFolder(java.lang.String)	 */"
// open composer view
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#renameFolder(java.lang.String, java.lang.String)	 */"
// do the same for the XmlElement node
// simply all all group items to the list
// ensure map can be used by multiple threads
// execute search
// return body
// contact
// same url - just append and continue
// Add the signature
"/* (non-Javadoc) * @see net.javaprog.ui.wizard.Step#prepareRendering() */"
// Add pgp-specific content-parameters // we take as default hash-algo SHA1
"/* (non-Javadoc)         * @see net.javaprog.ui.wizard.AbstractStep#createComponent()         */"
// Add the MimePart that will be signed
// notify all listeners // @see org.columba.core.gui.util.FontProperties // @see org.columba.mail.gui.message.TextViewer // @see org.columba.mail.gui.composer.text.TextEditorController
// Create the header and body of the multipart
// Create boundary to separate the mime-parts
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.frame.IFrameManager#getActiveFrameMediator()	 */"
// locale definition
// Check the type
"/* (non-Javadoc) * @see net.javaprog.ui.wizard.AbstractStep#createComponent() */"
// delete message from server
// transaction is needed for the underlying jpa architecture
"/* (non-Javadoc) * @see junit.framework.TestCase#setUp() */"
// notify all listeners that new search results arrived
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#registerDockable(org.columba.api.gui.frame.IDockable)	 */"
// Add the ControlMimePart
// save passphrase in hash map
// Add pgp-specific content-parameters
// getting the path to gpg
"/*		 * notifyListeners(new ModelChangedEvent(ModelChangedEvent.ADDED,		 * server));		 */"
// Add the encrypted MimePart
//con.getProperties().put("USERID", pgpItem.get("id"));
// add status information observable
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.profiles.IProfileManager#getCurrentProfile()	 */"
"/*		 * notifyListeners(new ModelChangedEvent(ModelChangedEvent.REMOVED));		 */"
// query using all criteria
// set headercache dirty flag
//Hashcode value should be buffered.
// folder selection changed
"//	public Object getObject(ILocator locator); //	public IStructureValue getChild(ILocator locator);"
// Store the complete stream in a source so that we can parse it
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.profiles.IProfileManager#getProfile(java.lang.String)	 */"
// substract the uids that we already downloaded -> // newUids contains all uids to fetch from the server
// set dirty flag
// update the cache
// we only use the first message
// return the uids that are new
// if mouse button was pressed twice times
// Message already deleted from server
// remove memorized search folders
// create <email> element, if it doesn't exist yet
"/* (non-Javadoc)	 * @see java.net.URLClassLoader#findResource(java.lang.String)	 */"
// single sender - re-use identity type
// We need a place to store the color the JLabel should be returned // to after its foreground and background colors have been set // to the selection background color. // These ivars will be made protected when their names are finalized.
// open a port to the server
// Build the remote lists of messages that are UNSEEN, FLAGGED, DELETED, // JUNK
"//		taskButton = new JButton(); //		taskButton.setIcon(ImageLoader.getImageIcon(""group_small.png"")); //		taskButton.setToolTipText(""Show list of running tasks""); //		taskButton.setRolloverEnabled(true); //		taskButton.setActionCommand(""TASKMANAGER""); //		taskButton.addActionListener(this); // //		taskButton.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));"
// APOP?
// get parent
// set new calendar id
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.shutdown.IShutdownManager#shutdown(int)	 */"
// first, create bucket for each provider
"/* (non-Javadoc)	 * @see org.columba.core.search.api.ISearchResult#getTitle()	 */"
"/*			 * // always enable the menuitem again			 * r[0].getPOP3ServerController().enableActions(true);			 */"
// create top-level configuration directory
// fill with nulls
"/* (non-Javadoc)	 * @see org.columba.core.search.api.ISearchResult#getLocation()	 */"
// USER/PASS is always supported
"/* (non-Javadoc)	 * @see org.columba.core.search.api.ISearchResult#getDescription()	 */"
// put size at the specified place
// compatibility - using SORTSTRING internally
"/* (non-Javadoc)	 * @see org.columba.mail.message.HeaderInterface#count()	 */"
// only download new messages
"/* (non-Javadoc)	 * @see org.columba.mail.message.HeaderInterface#getFlags()	 */"
// now search through all buckets
// comma-separated category list // <category>value1,value2,value3</category>
// APOP not supported
// initialize progressbar with total number of messages
"/*		 * JPanel p2 = new JPanel(); p2.setLayout(new		 * FlowLayout(FlowLayout.LEFT)); top.add(""East"", p2);		 * 		 * b_lyear = new JButton(""<""); b_lyear.addActionListener( this );		 * //b_lyear.setMargin(KiwiUtils.emptyInsets);		 * b_lyear.setFocusPainted(false); b_lyear.setOpaque(false);		 * //b_lyear.addActionListener(this); p2.add(b_lyear);		 * 		 * l_year = new JLabel(); p2.add(l_year);		 * 		 * b_ryear = new JButton("">""); b_ryear.addActionListener( this );		 * //b_ryear.setMargin(KiwiUtils.emptyInsets);		 * b_ryear.setFocusPainted(false); b_ryear.setOpaque(false);		 * //b_ryear.addActionListener(this); p2.add(b_ryear);		 */"
// get first item
// <adr> // <work> // <pobox>value</pobox> // <street>value</street // .. // </work> // .. // </adr>
// logout cleanly
// display downloaded message count in statusbar
// super(node, folderItem);
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#setSource(org.columba.ristretto.message.io.Source)	 */"
// <im> // <aol>value</aol> // <yahoo>value</yahoo> // <jabber>value</jabber> // </im>
// not needed anymore
"/*     * (non-Javadoc)     *      * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */"
// download message
// delimiter found // -> recursively create all necessary folders to create // -> the final folder
// fire up search command
// Since JUNK is a non-system Flag we have to set it with // an addtitional STORE command
// try to authenticate
// ****************** // more than one year // ******************
// if result is already in hashtable remove from result set
"/* (non-Javadoc) * @see org.columba.mail.folder.RootFolder#getTrashFolder() */"
// gc.draw3DRect(xp, yp, cellSize, cellSize, true); // if the cell is selected, fill it with the highlight color
// check if its a contact component
"/* (non-Javadoc)	 * @see java.util.Iterator#next()	 */"
// in case of an error -> fall-back to Swing's built-in JTextPane
//timer.start();
// move message to trash
// is message marked as spam
// score message and mark as "spam" or "not spam"
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#getUids()	 */"
// synchronize local UID-list with server
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.folder.AbstractMessageFolder#loadMessageFolderInfo()	 */"
// This method is called just after a new entry has been added
// <phone> // <business>value</business> // <home>value</home> // </phone>
// apply filter on message
"/* (non-Javadoc)     * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)     */"
// mark message as recent
/* find out if the interpreter is already registered */
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#add(org.columba.mail.message.IColumbaHeader, java.lang.Object)	 */"
/* any errors that may occur cannot stop other scripts from running */
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#keySet()	 */"
// check if string is a number
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.PersistantHeaderList#persist()	 */"
// remember request id for "search in results"
// <office>value</office>
// user cancelled sending operation // open composer view
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.RootFolder#getInbox()	 */"
// ask password from user
"/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getMimePartSourceStream(java.lang.Object,     *      java.lang.Integer[])     */"
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.Folder#isInboxFolder()	 */"
// oh oh! casting to a specific implementation here ;-)
// get first one
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getMessageSourceStream(java.lang.Object)	 */"
// select invisible virtual folder
// optional parts
// create virtual folder for criteria
// AbstractFolder.append also automatically removes the folder // from its parent
// return empty result, in case the criteria doesn't match the search // term
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.AbstractMessageFolder#save()	 */"
"/* (non-Javadoc)     * @see org.columba.mail.folder.IDataStorage#saveInputStream(java.lang.Object, java.io.InputStream)     */"
"/* (non-Javadoc)     * @see org.columba.mail.folder.IDataStorage#getFileSource(java.lang.Object)     */"
"/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getHeaderFields(java.lang.Object,     *      java.lang.String[])     */"
// scripting.xml configuration file should reside in <config-folder>
// this search request is covered by the query engine
// no esmtp - use POP3-before-SMTP instead
// <url>value</url>
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.selection.SelectionHandler#getSelection()	 */"
// seconds
// Find the index of the largest local Uid
"/* (non-Javadoc)     * @see org.columba.mail.folder.IMailbox#addMessage(java.io.InputStream, org.columba.ristretto.message.Attributes)     */"
// get outbox folder
// Init Values // user's email address
// select activity before opening context context-menu // selectedInternalActivitiy.getStates().setStates( // GenericStates.SELECTED_BIT, true);
// memorize total result count
/* multicast bit */
// Start login procedure
// ShapeGradientPaint bgPaint = new ShapeGradientPaint(new Color(235, // 235, 235), new Color(255, 255, 255), 180, 1f, 0.5f, false);
// remove all memorized search folders
// retrieve tag/category to be selected
// ensure we are in existing result range
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getMimePartBodyStream(java.lang.Object,	 *      java.lang.Integer[])	 */"
// compose the message suitable for sending
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#folderPropertyChanged(org.columba.mail.folder.event.IFolderEvent)	 */"
// Close Port
// activity belongs to calendar id ?
// No Authentication available
// there seems to be no username set in the smtp-options //  -> use username from pop3 or imap options
// process all events collected until now
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#messageFlagChanged(org.columba.mail.folder.event.IFolderEvent)	 */"
//Turn off authentication for the future
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#addMessage(java.io.InputStream,	 *      org.columba.ristretto.message.Attributes)	 */"
// Authentication is not supported
// vertical grid lines
//Fallback to Securest Login method
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailFolder#removeFolder()	 */"
// EHLO not supported -> AUTH not supported
// authentication was successful // -> save name/password
// Add a default PLAIN login as fallback
// get the SendableMessage object
// textAShape.setAttribute(AShape.A_REPORT_HIT_SHAPE, Boolean.TRUE);
// Sent folder
// start with week view
// icon
//load default headerfields, as defined in RFC822
// skip message if there's no account // available to send it
// PlaceRect bgAbsRect = new AbsRect(new AtStart(0), new AtStart(0), new // AtEnd(0), new AtEnd(0), null, null, shadowInsets);
// start command
// FeatherAShape shadow = new FeatherAShape("shadow", filledShadow, new // Color(255, 255, 255, 0), 5, shwSI);
// use the default account
// get UID list of messages
"/*   * (non-Javadoc)   *    * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)   */"
// send all messages
// trigged if activity is moved or daterange is modified
// move all successfully send messages to the Sent folder
// Fetch these uids and compare them to the // local list
// start move command
// sent folder
// Find the messages that have been deleted
//String invalidRecipient = null;
// mark message as answered
"/* (non-Javadoc) * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent) */"
// close composer view
// ((DefaultDateArea) localDateAreaBean.getDateArea()) // .addActivityMoveListener(this);
// enable selection
// open connection
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.selection.ISelectionListener#selectionChanged(org.columba.core.gui.selection.SelectionChangedEvent)	 */"
//Find out if we already loaded the needed ResourceBundle //object in the hashtable.
// Collect the uids for one folder
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.selection.SelectionHandler#setSelection(org.columba.api.command.DefaultCommandReference[])	 */"
/* check if script directory exists */
"/* (non-Javadoc)     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)     */"
// unchanged
// All the other local mails are deleted
// save message in Sent folder
// set all tags/categories to be *not* selected
// send message
// update tree model
// <fn>value</fn>
// mark as read
// this internally used headerfields can be of every basic // type, including String, Integer, Boolean, Date, etc.
/* nothing to dispose, yet... */
// this is needed to update the titlebar
// check current file list for changes
/*in case of a stop-start */
/* start pooling thread */
//should not occur, otherwise the static initializer should have thrown // a RuntimeException
//overwrite old bundle
// recoverable inputs
// private CheckableItemListTableModel model;
//retrieve new bundle // use ResourceBundle's internal classloader
// unrecoverable inputs
// delete all data in directory
// create directory <config-folder>/mail/spamdb
// close send message dialog
// save composer window state
// show attachment panel
// do not prompt user if composer should be really closed
// Sort the uid list
// mark message as *not* spam
// *************** // MONTH VIEW TEST // ***************
//does not occur
// private ImapOperator operator;
// get headers
// new vis range = Start: Sep 23, 2007 12:00:00 AM (RAW:1.0, DST:-1.0)   End: Nov 3, 2007 11:59:59 PM (RAW:1.0, DST:0.0)  Time zone: null  Locale: null // new vis range = Start: Oct 1, 2007 12:00:00 AM (RAW:1.0, DST:-1.0)   End: Nov 11, 2007 11:59:59 PM (RAW:1.0, DST:0.0)  Time zone: null  Locale: null // should be // new vis range = Start: Oct 1, 2007 12:00:00 AM (RAW:1.0, DST:-1.0)   End: Nov 10, 2007 11:59:59 PM (RAW:1.0, DST:0.0)  Time zone: null  Locale: null
// private TreeView treeViewer;
// using default english language, shipped with Columba
"/*	 * (non-Javadoc)	 *	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */"
// use default account as fallback
"/*	 * (non-Javadoc)	 *	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */"
// get stream
// cleanup DB -> remove old tokens
// gota go now
// put headers in list
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#ensureSelectedState(org.columba.mail.folder.imap.IMAPFolder)	 */"
// get new inputstream
// ---- label2 ----
// this is ok
// we use the SortDecorator, because the indices are sorted
// only save if changes exist
// public SelectFolderTree tree;
// message already exists // --> correct token data
// message already exists
"/*AdapterNode name;AdapterNode uid;AdapterNode type;AdapterNode rootNode;*/"
// check if this message was already learned
"/*	 * Methods called by the Variable parsers	 */"
// city
// insert space btw. double newlines
// train message as spam or non spam
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#isSupported(java.lang.String)	 */"
//does not happen
"/*	 * @see TestCase#tearDown()	 */"
// try to get the account using the email address
// get source folder
// register interest on tree node changes
// check if the user entered valid data
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#logout()	 */"
// initialize progress bar with total number of messages
// ensure that the text does not start with a newline
"/* (non-Javadoc) * @see org.columba.addressbook.gui.tree.AddressbookTreeNode#getName() */"
// For getHeight() to return the right Value
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#append(java.io.InputStream, org.columba.mail.folder.imap.IMAPFolder)	 */"
// train message as ham
// check if contact with given email address exists already
// get array of message UIDs
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getHeaders(java.lang.Object, java.lang.String[], org.columba.mail.folder.imap.IMAPFolder)	 */"
// strip tags //body = parser.stripHTMLTags(decodedBody, true); //body = parser.restoreSpecialCharacters(body);
// skip if contact item is not valid
// Margins
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#list(java.lang.String, java.lang.String)	 */"
// SizePolicy
// Orientation
// headers
// mark non spam messages
// example: "columba://org.columba.contact/<folder-id>/<contact-id>"
// mark spam messages
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#createMailbox(java.lang.String, org.columba.mail.folder.imap.IMAPFolder)	 */"
// convert to lower-case
// retrieve all contact items and add those to the list only
// break before start of view
// this.addressbookModel = addressbookModel;
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#unsubscribeFolder(java.lang.String)	 */"
// save current location statically for next time
// add group items
// if already detected before
"/*	 * public AddressbookTreeNode(String name) { super(name); this.name = name; }	 */"
// -- Text Fields
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getMimePartBodyStream(java.lang.Object, java.lang.Integer[], org.columba.mail.folder.imap.IMAPFolder)	 */"
// train message as spam
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchNamespaces()	 */"
// calculate break height for child, and use updated // value in the further processing
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchUids(org.columba.ristretto.imap.SequenceSet, org.columba.mail.folder.imap.IMAPFolder)	 */"
// don't need this
// spam found
// create list containing all contact item of this folder
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#parseError(java.lang.String)	 */"
// --no-rebuild option is deprecated in recent SpamAssassin versions
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#setFlags(java.lang.Object[], org.columba.ristretto.imap.IMAPFlags, org.columba.mail.folder.imap.IMAPFolder)	 */"
// contact doesn't exist in parent folder anymore // -> remove it
// check if sender is already in addressbook
// if next node is null (the end of the list) return
// skip, if null
// view starts on page and exceeds it
// start parsing line by line
// view can be broken
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getMessageSourceStream(java.lang.Object, org.columba.mail.folder.imap.IMAPFolder)	 */"
// We compare three classes: plain, md5 and popbeforesmtp
// SASL Mechanisms
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchSubscribedFolders()	 */"
// the model which is decorated
// create open file dialog
// new Dimension( suggestionsJScrollPane.getPreferredSize().width, 75 ) // );
"//		 get selected contact/group card"
// -- Buttons
"// Add components to the panel: //		builder.append(defaultAccountCheckBox, 7); //		builder.nextLine();"
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getIndex(java.lang.Integer, org.columba.mail.folder.imap.IMAPFolder)	 */"
"/*            PluginManager.getInstance().setEnabled(id,                ((Boolean) value).booleanValue());                */"
// -- Other components
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#existsChanged(java.lang.String, int)	 */"
// suggestionsJScrollPane.setMaximumSize( new Dimension( // Integer.MAX_VALUE, Integer.MAX_VALUE ) );
//SMTP
// -- Overall Dialog box
// remember last selected folder treenode
// setSize( 750, getPreferredSize().height );
//if user pressed OK button
// Protocol defined Mechanisms
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#warningMessage(java.lang.String)	 */"
// Default
// table has focus
// skip '#'
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#setUpdateFlagAction(org.columba.mail.imap.IUpdateFlagAction)	 */"
"/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#getMimePart(int)     */"
// create a CDATA section for the label
//setCellRenderer(new AddressbookListRenderer());
// create <adr>, if it doesn't exist
// test self equality...
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#setExistsChangedAction(org.columba.mail.imap.IExistsChangedAction)	 */"
// first account item
// whitespace detected
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getItem()	 */"
// 2 columns // rows are added dynamically (no need // to // define them here)
"/* (non-Javadoc) * @see java.util.Iterator#hasNext() */"
"//$JUnit-END$	"
// create contact card
// expect a different hashcode for item and item3
// second account item
// read VCARD file into string buffer
"/*		 * Component strut1 = Box.createRigidArea(new Dimension(30, 6));		 * gridBagLayout.setConstraints(strut1, c); eastPanel.add(strut1);		 * 		 * gridBagLayout.setConstraints(killButton, c);		 * eastPanel.add(killButton);		 */"
// third item, a bit different from the first
// should have the same hashcodes...
// update table
"/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#getBodyPart()     */"
// item and item2 should be equal...
"/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#setSource(org.columba.ristretto.message.io.Source)     */"
// ---- workCityTextField ----
// ---- departmentLabel ----
"/* (non-Javadoc)	 * @see org.columba.core.gui.plugin.AbstractConfigPlugin#createPanel()	 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.composer.MimePartRenderer#render(org.columba.ristretto.message.StreamableMimePart)	 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.ui.conversation.IConversationController#get(int)	 */"
// Account is an IMAP account -> change root folder name
// remove contacts/group cards from folder
// remove folder from parent
// get message attributes
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.themes.plugin.AbstractThemePlugin#setLookAndFeel()	 */"
// super(str); // set menu text incl. mnemonic if specified
// ---- managerTextField ----
// !!! From: alice@mail.org // create filter configuration // -> check if <From> <contains> pattern <alice@mail.org>
// ---- companyTextField ----
// ---- departmentTextField ----
// ======== mailingAddressPanel ========
// ---- officeLabel ----
// add to options if possible (so it will be saved)
// item should not be equal to a newly created item or null
"/*                 * *20030604, karlpeder* Fixed minor flaws to be able to print text                 * messages. Further more added support for html messages.                 */"
// ======== scrollPane2 ========
// ---- privateCountryLabel ----
// ---- notesTextArea ----
// 2 columns // rows are added dynamically (no need to define them here)
// ---- privateCityLabel ----
// shortcut key //putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke("B"));
// ---- workAddressLabel ----
"/*			 * It is HTML, try to find out which charset from meta tag: NB: The			 * seach for charset below is very simple. It assumes that the meta			 * tag to find is on ITS OWN LINE, i.e. "" <meta"" can be found at the			 * beginning of the line, and all the content of the tag is found on			 * the same line! Could be better, but this is first shot...			 */"
// no childs - we have a leaf view (i.e. with contents)
// ---- workPOBoxLabel ----
// ======== buttonBar ========
// A child got removed -> stay at this position to // get the next
// ---- imTextField4 ----
// ---- workCountryLabel ----
// ---- otherCityLabel ----
// system beep
// gettext //$NON-NLS-1$ //$NON-NLS-1$
// remove all children
//FocusOwner lost = (FocusOwner) map.get(event.getSource());
// settext //$NON-NLS-1$ //$NON-NLS-1$
"/* (non-Javadoc)     * @see org.columba.core.gui.plugin.AbstractConfigPlugin#createPanel()     */"
// add children
// scrollPane.setPreferredSize( new Dimension(200,200) );
// get header of message
// true if action is enabled, false otherwiese
// skip this message, if it doesn't exist in source folder
// get message source stream
// calculate scaling and return it
//current = lost;
//register for status events
"/*		 * sourceFolder = new CachedMHFolder(""test"", ""CachedMHFolder"",		 * FolderTstHelper.homeDirectory + ""/folders/"");		 */"
"/*Overwrite the method to maintain line breaks when copying 		 * messages form the MessageViewer.		 * @author aoki-y		 * @see javax.swing.text.html.HTMLDocument#getReader(int)		 */"
// retrieve list of all group members
// ======== scrollPane4 ========
// mainPanel.add( topBorderPanel, BorderLayout.NORTH );
// Get body of message depending on user preferences
// view starts on page - print it
// create remainder
"/*			 * HeaderItem[] items = new HeaderItem[selection1.length]; items =			 * selection1;			 * HeaderItemDNDManager.getInstance().setHeaderItemList(items);			 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.frame.IFrameManager#switchView(org.columba.core.gui.frame.IContainer,	 *      java.lang.String)	 */"
// this happends if there's nothing left for the next page
// modify "this" to start where remainder ends
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isCutActionEnabled() */"
// return (possibly) updated value
// substitute special characters like: <,>,&,\t,\n
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#getDockableIterator()	 */"
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IFrameMediator#loadPositions()	 */"
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IFrameMediator#isInitialized()	 */"
// Does the user prefer html or plain text?
// ensure contents is layed out properly
// set renderers for columns
// return new DefaultHeaderRenderer(controller.getSortDecorator(), // name);
// get inputstream of mimepart 0 from folder
// return item.getUid();
// resize jTextPane component to calculate height and get it
"/*		 * // use wrapper class for easier handling of references array adapter =		 * new FolderCommandAdapter( (MailFolderCommandReference[])		 * getReferences()); // get array of source references		 * MailFolderCommandReference[] r = adapter.getSourceFolderReferences();		 */"
// compare both messages
//  no component has the focus // -> disable all actions
"/*		 * FolderTreeNode node = tree.getSelectedNode(); FolderItem item =		 * node.getFolderItem();		 */"
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#dock(org.columba.api.gui.frame.IDockable, org.columba.api.gui.frame.IDock.REGION)	 */"
"//		 register as focus owner"
//  // options.xml // //<options> // <gui> //  <messageviewer inline_attachments="false"> //   <smilies enabled="true" /> //   <quote color="0" enabled="true" /> //  </messageviewer> //  <tree> //   <sorting sorted="true" ascending="true" comparator="alphabetic" /> //  </tree> // </gui> // <html prefer="true" /> // <markasread delay="2" enabled="true" /> // <headerviewer style="0" headerfields="Subject Date Reply-To From To Cc Bcc" /> //</options>
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IFrameMediator#getContentPane()	 */"
"// init addressbook plugin handlers //		PluginManager.getInstance().addHandlers( //				""org/columba/addressbook/plugin/pluginhandler.xml"");"
// fall-back to email address
// calculate size and return it
// fall-back to formatted name
// height of content // + top margin // + bottom margin // height corrected for scaling
// get flags of message
// <email> // <work>value</work> // <home>value</home> // </email>
// close streams
// this property is ignored under java 1.5.
// width unchanged
// <org>value</org>
// <n> // <family>value</family> // <given>value</given> // <prefix>value</prefix> // <suffix>value</suffix> // <additionalnames>value</additionalnames> // </n>
// handle child view by recursive call
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#setSplitProportion(org.columba.api.gui.frame.IDockable, float)	 */"
// close inpustream
// scale the graphics
// in the future, it will be possible to also add new addresses
// mark message as read
// backwards compatiblity // -> its not possible anymore to create a contact model without email // address
//      get flags of message
//tstich: CA-41 bugfix
// create folders, etc.
// translate g to line up with origin of print area (trans 1)
"/*         * (non-Javadoc)         *          * @see org.columba.core.taskmanager.ITaskManager#addTaskManagerListener(org.columba.core.taskmanager.TaskManagerListener)         */"
// list.repaint();
// public String getAgent() { // return agent; // }
"//   	 create Command reference"
//      create Command reference
// parse header
// translate graphics object back to original position and reset clip and scaling
"//    	 create Command reference"
// Return a String representation of the cipher text
// An individual 3 digit number
// child views exist - operate recursively on these
// do not start a second time!
// if folder is message folder // ->TODO (@author fdietz):  there should be an interface, instead of the AbstractMessageFolder // class
// following java guidelines I'm setting this to low priority // -> this should make the gui more responsive, because the // -> background worker has low priority whereas the gui worker // -> has normal priority
// delete folders
// this is no integer value
// set size of mPane according to the available width // and fetch root view
"/*             * *20030609, karlpeder* Introduced scaling             */"
// ask the user
// get origin & size information (height as "total" height minus current pos.)
// // views.xml // // <view header="100" header_enabled="true" id="ThreePaneMail" // infopanel="true" main="100"> // <window maximized="true" height="721" width="1034" y="26" x="0"></window> // <toolbars infopanel="true" main="true"></toolbars> // <splitpanes header="200" header_enabled="true" main="283" // attachment="100"></splitpanes> // </view>
// disable plugin
// reset starting position in y-direction
// <context> // <core> // <identity> // </identity> // <datetime> // </datetime> // </core> // </context>
// register at shutdown manager // -> this will save all configuration data, when closing Columba
// ---- okButton ----
// add message "0.eml" as inputstream to folder
// END public class XmlElement
// calling CopyMessageCommand.execute() here! //super.execute(worker);
// this is a headeritem from autocompletion
"/*		 * Font f = getFont(); setFont(new Font(f.getName(), Font.BOLD,		 * f.getSize()));		 */"
// ---- label3 ----
// ---- otherAddressLabel ----
// private JButton b_lyear, b_ryear, b_lmonth, b_rmonth;
"/*	 * Determine what day of week the first day of the month falls on. It's too	 * bad we have to resort to this hack; the Java API provides no means of	 * doing this any other way.	 */"
// save message stream to file
// draw horizontal lines
// mark as spam /as not spam // for each message
// Check for the new messages
// make sure to close all file handles // to the currently cached message // -> necessary for windows to be able to delete the local file
// ---- otherCountryLabel ----
// Block mouse moves to the underlaying component won't restore the // Cursor
// update tag list if mode changes
// if spam filter is not enabled -> return
// Add some messages
"/* GPG for windows is an executable-only download, fortunately there is * a windows registry file included in the download and has this as the * default installation path in it. While users will probably install GPG * into many other places, this is atleast a best-guess start. */"
//  add message "0.eml" as inputstream to folder
// try to get account using the account ID
"//		OptionsItem optionsItem = MailConfig.getInstance().getOptionsItem(); //		String selectedBrowser = optionsItem.getStringWithDefault( //				OptionsItem.MESSAGEVIEWER, OptionsItem.SELECTED_BROWSER, //				""Default"");"
// ---- privatePOBoxLabel ----
// model should contain the data
// different border for recurrent events // ActivityInteractor.setStaticOverride( // AShapeUtil.DEFAULT_OUTLINE_SHAPE_NAME, AShape.A_STROKE, // new OverrideFilter() { // public Object getOverride(Object subject, // Object defaultObject) { // return ((ActivityView) subject).getModel() // .isRecurrent() ? new BasicStroke(1.0f, // BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, // 0, new float[] { 9 }, 0) : defaultObject; // } // });
// Check for success
// the group of the given parent
// on startup, there's shouldn't be any recent messages // -> we simply remember 0 recent messages here // property.addAttribute("recent", "0");
// for each JComboBox item
// this probably means that the configuration // is wrong // -> change this to a sane default value
// ok, now the tool is initialized correctly
// for time consuming tasks you need to create // your own Command
"//		 create Command reference"
"/*	 * Uses the FrameManager instance in MainInterface to open a new addressbook	 * window.	 */"
// ---- privateAddressLabel ----
// just ignore unknown people
// set folder changed flag // -> if not, the header cache wouldn't notice that something // -> has changed. And wouldn't save the changes.
// the next new folder will get this UID
// the close method manipulates the viewList so we have to // remove the existing element and fill in our temporarily // stored ones
// load docking settings from last user session
"// TextAShape titleText = new TextAShape(DEFAULT_TITLE_TEXT_SHAPE_NAME, //		""$startTime$ - $endTimeExcl$ ($timeZoneShort$)"", //		titleTextAbsRect, TextAShape.TYPE_SINGE_LINE, textFont, //		textPaint, new AtStart(0), new AtStart(-3), GfxUtil.AA_HINT_ON);"
// Map<String, ISearchProvider> historyMap = SearchHistoryList // .getInstance().getHistoryMap();
// icon (we can't use the setIcon-method this time, as it relies on the border being set)
// ---- label1 ----
//  execute command -> use mock object class as worker which does // nothing
// ======== scrollPane1 ========
"/* (non-Javadoc)     * @see org.columba.core.gui.plugin.AbstractConfigPlugin#updateComponents(boolean)     */"
//AccountList list = MailConfig.getInstance().getAccountList(); //list.addEmptyAccount("pop3");
// only used by VirtualFolder
// check number of JTree rows
// ---- birthdayLabel ----
// check number of JTable rows
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#move(int, int)   */"
// transform string to Date representation
// 3 columns table
// We need to sort the uids in order // to have the correct association // between the new and old uid
//putValue(SMALL_ICON, ImageLoader.getSmallImageIcon("mail-new.png"));
"/* (non-Javadoc)   * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)   */"
// ======== scrollPane3 ========
// create sample headerlist
// notify listeners // @see org.columba.mail.gui.table.action.ForwardAction
// check number of tree nodes
// ---- notesLabel ----
"/*	 * test with empty list	 */"
// size // -> @see org.columba.mail.folder.cache.CachedHeaderfields for a // -> complete // -> list of possible attributes
// jar-file found
// ---- managerLabel ----
// remove MessageNode with uid=0
// extend existing menu
// create new class loader using the global class loader as parent
//IAccount account = object.getAccount();
// get plugin handler for filter actions
// all Java plugins package their class-files in "plugin.jar"
"/*         * The fields on this object is in fact represented in the xml         * structure found as getRoot(). Therefore super.equals()         * should do the job         */"
// save to profiles.xml
// use our global class loader
// use user's config folder in his/her home-folder // all plugins reside in "<config-folder>/plugins"
// ---- workCityLabel ----
// remove all options
// remove plugin from view
// check for at least 10 whitespaces
// create group with two contacts
// modify listmodel
"/*	 * test with null list	 */"
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#moveDown(org.columba.core.filter.Filter)   */"
//plugin = instanciateJavaClass(className, arguments);
"/*	   * does exactly the same thing as EditPropertiesAction when contact	   * table is focused	   * */"
// url decode
// disable extension
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#move(org.columba.core.filter.Filter, int)   */"
// first group contains first contact item
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#setCondition(int)   */"
// use default Java classlodaer
// if this worked, remove it from tree.xml configuration, too
"/*	 * Test with all kinds of input data	 */"
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#remove(org.columba.core.filter.Filter)   */"
// add contact to roaster, nickname="", group=null
// Border border = BorderFactory.createCompoundBorder(new // ShadowBorder(),BorderFactory.createEmptyBorder(10, 10, 10,10)); // ((JPanel) getContentPane()).setBorder(border);
// we are only interested on subscription requests
// mock folder class, only returns folder id
// Must create a ExceptionProcessor
//public abstract IChatMediator getChatMediator();
// register as focus owner
//public abstract void setChatMediator(IChatMediator mediator);
// mock object folder facade, only returns folder list
// add to "Uncategorized" node
"/*	 * (non-Javadoc)	 *	 * @see org.columba.chat.ui.roaster.IRoasterTree#updateBuddyPresence(org.columba.chat.api.IBuddyStatus)	 */"
// parse plugin metadata
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.ui.conversation.IConversationController#closeSelected()	 */"
// set message body
// Add list of attachments if applicable
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#getName()	 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#setStatusMessage(java.lang.String)	 */"
// contacts item
// add all contacts as leafs of group folders
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.ui.conversation.IConversationController#getSelected()	 */"
"/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#getMimePartCount()     */"
// persist changes on exit
// updateTimer.start();
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#setChatMediator(org.columba.chat.api.IChatMediator)	 */"
// and add it to the buddylist
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#getChatMediator()	 */"
// add "Uncategorized" note
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#setSignedOn(boolean)	 */"
"/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#getSource()     */"
// buddy already exists
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.message.HeaderInterface#set(java.lang.String,	 *      java.lang.Object)	 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.message.HeaderInterface#count()	 */"
// get presence
"/* (non-Javadoc) * @see java.util.Iterator#remove() */"
// add to global buddy list
"/* (non-Javadoc) * @see java.util.Iterator#next() */"
// found group for buddy
"/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#getHeader()     */"
// create new buddy
// open stream to file
// use selected buddy
// load properties from stream
// create account object
// use key/value properties file
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterCriteria#getCriteria()   */"
// if external plugin, we need the directory of it
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#flagsChanged(java.lang.String, org.columba.ristretto.imap.IMAPFlags)	 */"
// create stream to file
// save properties to file
// store account data in properties
// add contact to folder
// fonts
// prompt for jabber id
// register interest on contact selection changes
// skip non-matching elements
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#removeLast()   */"
// skip if no <extension> element found
// don't search in subfolders recursively
// register interest on table selection changes
// if user cancelled action
// add new group to folder
// checkBox.addItem("Custom Message...", null); // checkBox.addItem("Leave...");
"//		 get selected folder"
// couldn't find correct constructor
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#search(org.columba.ristretto.imap.SearchKey, org.columba.mail.folder.imap.IMAPFolder)	 */"
// tempFolder = new AddressbookFolder(null,addressbookInterface);
// protected AddressbookFolder tempFolder;
// check if this buddy belongs to a group
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#count()   */"
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#isSelected(org.columba.mail.folder.imap.IMAPFolder)	 */"
// if extension wasn't already registered
// found new token
// skip if it doesn't exist
// if no plugin directory exists -> return
"/*	 * @see TestCase#setUp()	 */"
// clear text box
// Search in packs beginning from newest to oldest // -> in most cases this should save us a lot of uid fetchings to // find the deleted messages
// load configuraation
// header file found
//DateFormat format = DateFormat.getTimeInstance(DateFormat.SHORT); // green color
// create message object
// remove node
//DateFormat format = DateFormat.getTimeInstance(DateFormat.SHORT);
// remove xml config
// notify that a new worker is available
//create new client and try to connect to server
// private SendButtonController sendButton;
"/*	 * public String getPassword() { return passwordTextField.getText(); }	 */"
"/*		 * *20030921, karlpeder* The old code was (accidentially!?) modifying		 * the attachment list of the model. This affects the composing when		 * called a second time for saving the message after sending!		 */"
// passwordTextField = new JPasswordField(10);
// b.addSeparator("Account Options");
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#removeAll()   */"
// connect to server // new ConnectAction(this).actionPerformed(null);
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchHeaderList(org.columba.mail.message.IHeaderList, java.util.List, org.columba.mail.folder.imap.IMAPFolder)	 */"
"/*			 * setIconTextGap(5); setVerticalAlignment(JLabel.CENTER);			 */"
// register all extensions
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#addEmptyCriteria()   */"
// private JPasswordField passwordTextField;
// fire new message event to interested listeners
// IAccount account = object.getAccount();
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#expunge(org.columba.mail.folder.imap.IMAPFolder)	 */"
"/*         * (non-Javadoc)         *          * @see org.columba.api.command.IWorkerStatusController#addWorkerStatusChangeListener(org.columba.core.gui.statusbar.event.WorkerStatusChangeListener)         */"
// FAILURE!!!
"/*         * (non-Javadoc)         *          * @see org.columba.api.command.IWorkerStatusController#getTimeStamp()         */"
// parse "/plugin.xml" file
// clear list and collect uids for new folder
// Force that the last line in buffer does NOT have a newline
//private File addressbookFile;
// create new contact card
// we got this from headerfieldtree
// set clipping for the graphics object
//private JTable logTable;
"/* (non-Javadoc)	 * @see org.columba.api.command.ICommand#getReference()	 */"
// load all internal core plugins
// update timer event
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#clone()   */"
// *20030515, kpo* '\n' appended
// public abstract Class getDefaultChild();
//"right:max(40dlu;pref),3dlu,
// Set bean properties
//notifyTableListeners(new TableModelEvent(this, logMessages.size(), logMessages.size(), TableModelEvent.ALL_COLUMNS, TableModelEvent.INSERT));
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#getName()   */"
// The following methods override the defaults for performance reasons
"//		copy all internally used headerfields"
// Make sure we get all log info as fast as we can get ahold of it.
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#setEnabled(boolean)   */"
// navigate to treenode "text"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.SelectionHandler#getSelection()	 */"
// open configuration file
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#get(int)   */"
// found new message
// state/province/county
// This should never happen since superclass is Object
"// create config-folder //		File file = new File(""test_config""); //		file.mkdir(); // //		new Config(file); // //		Logging.DEBUG = true; //		Logging.createDefaultHandler(); // //		//		 init mail component //		new MailMain().init(); // //		new AddressbookMain().init(); // //		// now load all available plugins //		PluginManager.getInstance().initExternalPlugins();"
"/* (non-Javadoc) * @see org.columba.mail.folder.mailboximport.AbstractMailboxImporter#importMailbox(java.io.File, org.columba.api.command.IWorkerStatusController) */"
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#paste() */"
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#delete() */"
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getMimePartSourceStream(java.lang.Object, java.lang.Integer[], org.columba.mail.folder.imap.IMAPFolder)	 */"
// if line doesn't start with "From ???@???" or line length is 0 //  -> save everything in StringBuffer
// view -> model // write configuration given the data the user entered in the gui
// Changing the Divider Border Visibility *********************************
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#copy() */"
// menu.add(new CMenuItem(new OpenNewMailWindowAction(null))); // menu.add(new CMenuItem(new // OpenNewAddressbookWindowAction(null))); // menu.addSeparator(); // menu.add(new CMenuItem(new AboutDialogAction(null))); // menu.add(new CMenuItem(new ShowHelpAction(null))); // menu.addSeparator(); // menu.add(new CMenuItem(new ExitAction(null)));
// model -> view // read configuration and set gui elements appropriately
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isUndoActionEnabled() */"
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#cut() */"
// a header
// strip "'s
// If there is an existing lock then it must be from a // previous crash -> remove it!
// replace with the modified classpath
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchUid(org.columba.ristretto.imap.SequenceSet, org.columba.mail.folder.imap.IMAPFolder)	 */"
// step // past // spaces // find position of '>', '"'. or ' ' which is = end // of charset name
// automatically generate the help statement
// the boundary parameter
// reset for new message
// we reached "From ..." (start of new message)
// *********** // edge values // ***********
// divide message into headers and body
// ** End of method importMailboxFile
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.gui.table.model.TableModelModifier#modify(java.lang.Object[])	 */"
// ** End of method getDateHeader
// invalid date format - not enough tokens in it!!
// set background of scrollpane, in case the list is smaller than the // dockable
// day of week // month // day of month // time // year
// load all internal calendar plugins
// add all native jars
// Setup the path // Platform maintainers: add your platform here // see also initPlatformServices() method
// boundary not found - Content-Type must be changed
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#getPresenceMode()	 */"
// no attachments found - just insert a // Content-Type header // extra // header // necessary // X-Attachments header is // replaced
// handle header
// parse // Content-Type
// attachments found
// Do not exit
// no attachments found - just convert it to // text/plain or text/html
// just convert it to text/plain or text/html
// extra // header // necessary // X-Attachments header is // replaced
// store port number in file
// JScrollPane tableScrollPane = new JScrollPane(navigationController // .getView()); // tableScrollPane.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, // 0));
// port is in use, try next
// monthlyActivityAShapeBean = new ActivityAShapeBean();
// Logging.log.severe("Error while looking for charset", e);
"/*public AdapterNode addEmptyFilterCriteria(AdapterNode filterRuleNode) {        Element child = createElementNode(""filtercriteria"");        Element subNode = createTextElementNode(""headeritem"", ""Subject"");        addElement(child, subNode);        subNode = createTextElementNode(""criteria"", ""contains"");        addElement(child, subNode);        subNode = createTextElementNode(""pattern"", ""pattern"");        addElement(child, subNode);        subNode = createTextElementNode(""type"", ""Subject"");        addElement(child, subNode);        filterRuleNode.domNode.appendChild(child);        return new AdapterNode(child);}*/"
// ** End of method convertAndSavemessage
// update progressbar
// we have now added // such a header
// save message to destination folder
"/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IGroupItem#addContact(org.columba.addressbook.facade.IContactItem)	 */"
// ** End of while loop over headers
// Logging.log.severe("Error saving converted message", e);
// should throw exception as attribute type "name2" is not defined in // type structure
// initialize tagging
// ** End of method divideMessage
// unique boundary found
"//	the implementation of the replace function. It returns always the  position of the NEXT replaced word."
// create full msg from headers and body
// private Hashtable<String, String> table = new Hashtable<String, // String>(10);
// NB: This is the saveMessage method def. in // DefaultMessageImporter
// Lines not starting with "From ???@???" is part of the message // (headers or body)
// ... and save it
// Color bulletPaint = new Color(100, 100, 100);
// ** End of method saveMessage
"// //		 w+=1; //			h+=1; //		 g.setColor(edge); //		 // bottom //		 g.drawLine(x+2, h, x+w, h ); //		 // right //		 g.drawLine(x+w, y+ovalHeight+2, x+w , y+h);"
// Put properties that should be copied from parent here
// initial guess
// make sure file is deleted automatically when closing VM
// build new message body
// text which we are looking for, or want to replace // replaced text which we want to have   // text where we make a search // search/replace is case sensitive  // search/replace matches whole words only // search/replace works backwards on the text
// hide splash screen
// handle attachment (by creating a link)
// restore frames of last session
// element name
// we are using this inpustream multiple times // --> istream will be closed by CloneStreamMaster
// (tstich) reduced to 3 because all need to be // search when activated on startup // we only want 3 subfolders // -> if more children exist remove them
// set application wide font
// meta tag with content definition found
// patch submitted by forum user Turbo Chen // FIXED: user wasn't able to enter chinese text in Composer Subject textfield
// init all components
// VirtualMessage m = new VirtualMessage(f, uid, index);
// now load all available plugins // PluginManager.getInstance().initExternalPlugins();
// for easier search / // matching
"//	 need to be called after search/replace to make some changes in the states"
// only accept client from local machine
// this will terminate the loop
// ignore this yet
// initialize platform-dependant services
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#getJabberId()	 */"
// we found what we were looking for
// init plugin handler
// is it HTML or plain text
"/*			 * *20030917, karlpeder* Set the model to html or text based on the			 * body specified on the command line. This is done using a simple			 * check: Does the body contain <html> and </html>			 */"
// loop over headers and modify them as needed
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#getHeader()	 */"
// ** End of method guessBodyContentType
// end of while loop
// no attachments found - should in fact have been checked by the // caller
// show splash screen
// init controllers for different parts of the composer
// register protocol handler
// send all unsent messages found in Outbox
// through reflection
// use heavy-weight popups to ensure they are always on top
// check if there are columns which need to be saved
// JMenu options = (JMenu) menuBar.add(new JMenu("Options")); // options.setMnemonic('O');
// keep track of active windows (used by dialogs which don't have a // direct parent)
// can be an email address in a link BUG CA-174 // fix that with looking for an open link in the same line before // on the way from left to the current position of the email at s1 // find the last open link <a
// enable debugging of repaint manager to track down swing gui // access from outside the awt-event dispatcher thread
// enable time pickers
// initialize configuration with selected profile
// if the message it not yet seen
// it has to be set
// memorize all URLs
// More than 3 tokens. Assume the last token is the last name and take the rest of the names as the first name. // This handles names like this: "Sue & Gene Stark".
// We trigger an update only when the exists changed // which should be equal with a Recent change.
// draw the outline of the cell // gc.setColor(MetalLookAndFeel.getPrimaryControlShadow());
// use global class loader to bootstrap Columba
// no attachments found
// base64 encode photo byte[] to string
// build new body part
// if user doesn't overwrite logger settings with commandline arguments // just initialize default logging // Logging.createDefaultHandler();
// prompt user for profile
// initialize global class loader
"/*     * Gets fired if configuration has changed.     *     * @see org.columba.mail.gui.config.general.MailOptionsDialog     *     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)     */"
// insert header for attachment list
"/*     * (non-Javadoc)     *      * @see java.io.InputStream#read()     */"
// create random port number within range
// Use static variables so the date is only updated once // during runtime
// do nothing here, just continue
"/*     * (non-Javadoc)     *      * @see java.io.InputStream#read(byte[], int, int)     */"
/* everything is up and running, start services */
//private JTextPane textpane;
// Select the charset of the original message
// part of body
// differnt outline color is selected
// insert start and end for html
// This is necessary because getArgList returns the path in // square brackets
// run garbage collector
// Runs on the event-dispatching thread.
// ** End of method createAttachmentListFromHeader
"/* (non-Javadoc)     * @see javax.swing.event.CaretListener#caretUpdate(javax.swing.event.CaretEvent)     */"
// namespaceAware = false
// force object finalization
// remember parent path // (this is necessary for IMAPRootFolder sync operations)
// set global class loader to null
// This Method delivers the next line
// 6. Line with Buttons
// date area grid line
// horizontal grid lines
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#getMimePart(int)	 */"
// start command which adds message to folder // and calls apply-filter on this specific message
// get folder item configuration
// This Method frees a given String from Comments defined in Rfc822
"/*	 * // setup and load constructor public XmlIO(String FilePath) {	 * currentElement = null;	 *  }	 */"
"// get first provider //				ISearchProvider provider = searchPanel.getSearchManager() //						.getAllProviders().next(); //				ISearchCriteria defaultCriteria = null; // //				SearchBar.this.searchPanel.searchInCriteria( //						textField.getText(), provider.getTechnicalName(), //						provider.getDefaultCriteria(textField.getText()) //								.getTechnicalName(), searchInsideCheckBox //								.isSelected());"
// horizontal light gray column separator line
// north header cell decorator
// ** End of class EudoraMailImportFilter
// define activity layout
// showing the week number
"/* (non-Javadoc)	 * @see org.columba.calendar.store.api.IStoreListener#itemAdded(org.columba.calendar.store.api.StoreEvent)	 */"
// ** End of method createAttachmentListFromAttachmentConverted
// XmlElement.printNode( getRoot(), "");
// // activity setup //
// Get the title if one is specified
// wrap with observable stream for progress bar updates
// test if our To headerfield contains or contains not the search // string
// get the "Cc" headerfield from the header
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.profiles.IProfileManager#getProfiles()	 */"
// get the header of the message
// set initial value for height where this print object should be broken // in points, without scale
// get the "To" headerfield from the header
// since the indices on the pop server start with 1 we add // a dummy null for the 0 element in the list
// do the same for the Cc headerfield and OR the results
"/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IGroupItem#removeContact(org.columba.addressbook.facade.IContactItem)	 */"
// return parts
/* really delete file */
// parse for urls / email adresses and substite with HTML-code // html = HtmlParser.substituteURL(html); // html = HtmlParser.substituteEmailAddress(html);
"/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IHeaderItem#setId(java.lang.String)	 */"
// @author: fdietz // Disabled this testcase, as it doesn't really fit into // this category of message operations // It fails because we would have to create a folder-hierarchy // including parent folders to execute the move
// unchanged, i.e. no breaks before this view
//display error message
"/*		 * TreeController treeController = (TreeController) ((TreeViewOwner)		 * frameController) .getTreeController();		 * 		 * TreeView treeView = treeController.getView();		 */"
// "-L" use local tests only // String cmd = "spamassassin -L"; // String cmd = "spamc -c -L";
// correct for starting position if printing should not start at the top
// Byte
//      map selection to this temporary message
// do not scale up, i.e. no scale factor above 1.0
// get Columba's top-level configuration directory
//no server running, start our own
// 2 columns // rows are added dynamically (no need to // define them here)
//if we stopped at line break, increase array index pointer
// // we can't just load the first constructor // -> go find the correct constructor based // -> based on the arguments //
// Setup file logging
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#folderRemoved(org.columba.mail.folder.event.IFolderEvent)	 */"
// if already in roster
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.folderoptions.AbstractFolderOptionsPlugin#restoreUISettings()	 */"
// init font configuration
// loop through all extensions this plugin uses // -> search the corresponding extension handler // -> register the extension at the extension handler
//MUST do this for background to show up.
// append the new Date // header
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#messageAdded(org.columba.mail.folder.event.IFolderEvent)	 */"
// mock objects contact facade, only returns getContactItem() and // getAllGroups()
// protected CharsetMenuItem selectedMenuItem = new CharsetMenuItem(null);
// init console handler
// define allocation rectangle (startY is used to compensate for // different start point if printing shall not start from the top)
// if line doesn't start with "From" or line length is 0 // -> save everything in StringBuffer
// *20030614, karlpeder* In main view only enabled when // message(s) selected
// Never mind
// do nothinh here ... use finalClose
// only if tempfile was corrupted
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailFolder#getRootFolder()	 */"
// // Logging stuff //
// add welcome message to new account inbox
// public IChatMediator getChatMediator() { // return mediator; // }
// delete any cached information
// Add some new messages // and remove the same number of old messages
// empty the worker list until one is left
//list[2].setHorizontalTextPosition( JLabel.LEADING );
// System.setProperty("javax.net.debug", // "ssl,handshake,data,trustmanager"); // init java.net.ssl // debugging
// setResourceRoot
// loop through all extensions this plugin uses
// attempt
"/* (non-Javadoc)	 * @see org.columba.calendar.ui.list.api.ICalendarListView#getView()	 */"
// ensureDirectory
// we only update changes for events currently
// commandline arguments which can't be handled by the core // are passed along to other subcomponents
"/* (non-Javadoc) * @see javax.swing.table.TableModel#isCellEditable(int, int) */"
// url = ClassLoader.getSystemResource(path);
// getResourceStream
"/*		 * builder.addSeparator(""Full-text indexing"");		 * 		 * builder.add(enableLabel, cc.xywh(1, 7, 5, 1));		 * builder.add(enableTextIndexingCheckBox, cc.xywh(2, 9, 4, 1));		 */"
// Download any CIDs in the html mail
// -> get source reference of message // when replying this is the original sender's message // you selected and replied to
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getAttribute(java.lang.Object,	 *      java.lang.String)	 */"
"//		TagList tagList = new MailTagList(this); //		JScrollPane tagListScrollPane = new JScrollPane(tagList); //		tagListScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); //		tagListScrollPane //				.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));"
// g.setColor(bg); // g.fillRect(0, h - 3, 3, 3); // g.fillRect(w - 3, 0, 3, 3); // g.fillRect(w - 3, h - 3, 3, 3);
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.Folder#getUids(org.columba.api.command.IWorkerStatusController)	 */"
// Open the output file
// cancel command execution/updateGUI methods, if folder or message // selection // has been modified
// Close the stream
// stylesheet is created dynamically because // user configurable fonts are used
// don't instantiate this
// default encoding is plain
// get position of the pattern in the text
// Open the ZIP file
// cancel question dialog and don't close composer
// Transfer bytes from the ZIP file to the output file
// Trigger synchronization of the selected Folder
"/*         * By using an instance of SyncHTMLEditorKit, the html should load         * synchroniously - so everything is loaded before printing starts         */"
// Get the first entry
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getFlags(java.lang.Object)	 */"
// There is no charset info -> the default system charset is // used
// we are done - clear status text with a delay // (if this is not done, the initial text will stay in // case no messages were sent)
// name of helpset resource
// selected rows before updating the model // -> used later to restore the selection
// mark found pattern //text.grabFocus();
// append "_tooltip"
// private Border unselectedBorder = null; // // private Border selectedBorder = null; // // private Color background; // // private Color foreground;
// could not find it!
// maybe based on HS?
// set whether the model should handle html or plain text
// enable timer
// if user is currently changing selection, don't do anything // -> wait until the final selection is available
// delete marks (unselect)
"/*		 * DocType docType = factory .docType(""iCalendar"", ""-//IETF//DTD		 * XCAL/iCalendar XML//EN"",		 * ""http://www.ietf.org/internet-drafts/draft-hare-xcalendar-01.txt"");		 * doc.setDocType(docType);		 */"
// set UI manager properties here that affect Quaqua
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#search(java.lang.Object[], org.columba.core.filter.FilterRule, org.columba.mail.folder.imap.IMAPFolder)	 */"
"/* (non-Javadoc)	 * @see java.util.Iterator#remove()	 */"
//replaceall action performed
"/*	 * private String body;	 *	 * private URL url;	 */"
"/* (non-Javadoc)	 * @see org.columba.mail.message.ICloseableIterator#close()	 */"
//text.grabFocus();
"/* (non-Javadoc)	 * @see java.util.Iterator#hasNext()	 */"
// create a panel with a border and 3 options // columns  // rows
"/* (non-Javadoc)     * @see org.columba.mail.folder.IDataStorage#getMessages()     */"
// delete marks
// attachment controller doesn't support undo operation
// if HTML stripping is enabled
// we don't need to check for running commands here because // there aren't any, shutdown plugins only use this thread
"/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getMessageSourceStream(java.lang.Object)     */"
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.Folder#save()	 */"
// look and feel
// set allocation (defines print area together with the clipping // and translation made above), and print...
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.Folder#isTrashFolder()	 */"
// read configuration from options.xml file // create css-stylesheet string // set font of html-element <P>
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.RootFolder#getTrashFolder()	 */"
// update popup menu with search term before its made visible // textField.addPopupMenuListener(this);
"/* (non-Javadoc) * @see org.columba.ristretto.composer.MimePartRenderer#render(org.columba.ristretto.message.StreamableMimePart) */"
// add toolbar // panel.add(toolbar, BorderLayout.NORTH);
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#keyIterator()	 */"
// small icon for menu // putValue(SMALL_ICON, ImageLoader.getSmallImageIcon("stock_about-16.png"));
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#headerIterator()	 */"
//textField.showPopup(); //textField.requestFocus();
"/*	 * (non-Javadoc)	 *	 * @see org.columba.api.command.Command#execute(org.columba.api.command.Worker)	 */"
// add message "1.eml" as inputstream to folder
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#get(java.lang.Object)	 */"
// vertical // grid // lines
// temporary hashtable to check for duplicated
"/*		 * RIYAD: Even though we don't do anything with this value, what it is		 * doing is setting up the selection colors and such as implemented per		 * the default cell rendered.		 */"
// Implement the content hander methods that // will delegate SAX events to the tag tracker network.
// if the character / is found shows the user a error message
//replace action performed
// The type of DnD object being dragged...
"/* (non-Javadoc)	 * @see org.columba.addressbook.model.IEmailModel#getType()	 */"
// we can't just load the first constructor // -> go find the correct constructor // -> based on the arguments
// select current day
// We're always doing a MOVE // and this is handled in the exportDone method.
// We use the attributes and flags from the cache // but the parsed header from the parsed message
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#getSource()	 */"
// find action performed
// Get the list of the uids on the server // Important: Use a clone of the List since // we must not change it!
// comments are not // displayed // correctly in composer
// overwrite look and feel font settings
// switch for restoring last session of Columba. // if true, restores all windows.
// one line is added to the header for each attachment // (which has a filename defined)
// get plugin id
//Integer priority = Integer.valueOf(pattern); //return priority;
// ---- emailTextField2 ----
// user/pass worked -> this is indeed // a bogus server.
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#getMimePartCount()	 */"
// resync search engine // -> this is only needed for Lucene right now
/* initialize services before dismissing the splash screen */
// do something with the arguments..
// ---- professionLabel ----
// handle the commandline arguments of the modules
//DocumentParser parser = new DocumentParser(); // decode message body with respect to charset
// clear message viewer // /tableController.valueChanged(new // ListSelectionEvent(this,-1,-1,false));
// layout.setVisualDateRangeRounder(new BoundaryRounder(DateRangeI.RANGE_TYPE_DAY, true, false, false)); // DateRangeRounder for AllDay Events
// load user-customised language pack
// -- Availables Actions
// First remove all headers that are in the headerlist but // not the Folder
//UNTIL=20070627T215959
// just in case that someone who developers on a plugin // adds the plugin files to his classpath, we try to // load // them with the default classloader
// convert special characters
// create virtual folder
// set the start to 00:00:00
// Get the current classpath from the sysloader // through reflection
// if the end is on 00:00:00, round it to 23:59:59.999
// if the collapsible is collapsed, we do not want its border to be // painted.
// Font font = MainInterface.columbaTheme.getControlTextFont();
// search request isn't covered by query engine // -> fall back to default search engine
// found email address
// putValue(AbstractColumbaAction.LARGE_ICON, ResourceLoader // .getImageIcon("new_appointment-32.png")); // putValue(AbstractColumbaAction.SMALL_ICON, ResourceLoader // .getImageIcon("new_appointment.png"));
// There are still more messages to update // -> issue another fetch messages command
//      -> get source reference of message // when replying this is the original sender's message // you selected and replied to
// Init Plugins
// Color shadowPaint = new Color(0, 0, 0, 100);
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#getBodyPart()	 */"
// deprecated config-file support
"/* (non-Javadoc) * @see org.columba.mail.folder.FolderTreeNode#getName() */"
"/* (non-Javadoc)	 * @see org.columba.mail.message.HeaderInterface#set(java.lang.String, java.lang.Object)	 */"
// setFloatable(true);
// register Component as FocusOwner // FocusManager.getInstance().registerComponent(this);
// to mark a text in the JTextPane
// toolbar buttons always need an icon
// just the animation, if there are more than zero // workers running
// all day events
// re-open composer view
// calculate message score
// this is save because the only shutdown plugin // to stop this server, the configuration isn't touched
// we assume user cancelled search // -> remove cached command
// Must go backwards or else the filters will swap places with each // other.
// get size of content (width, height is size without scaling) // scaled size
//should not occur, otherwise the bundlePath would not be in the // hashtable
"//	public VirtualFolder(FolderItem item) { //		super(item); // //		headerList = new MemoryHeaderList(); // //		ensureValidFilterElement(); //	}"
// small icon for menu //putValue(SMALL_ICON, ImageLoader.getSmallImageIcon("16_sign.png"));
//public int type;
//bottom.setLayout( new BoxLayout( bottom, BoxLayout.X_AXIS ) ); //bottom.add( Box.createHorizontalStrut());
// try the system aqua look and feel
// instanciate theme
// create list of search requests
// close connection to server
// get plugin-handler
// add all existing tags to the menu
// user may have changed hostname. use dialog settings instead of // stored settings
// fire callback to remove all tags from selected items
// changing the selection to the specified row // changeSelection(row, 0, true, false);
// also register interest in tree seleciton events // for updating the title
// no charset specified -> automatic mode // -> try to determine charset based on content parameter
// *20040510, karlpeder* columns may be null (first time we // visit a folder!?)
// create a view more button, responsible for // opening the attachment viewer popup
// table is empty // -> just display empty table
// fill list model with tags
// HTTP proxy
// Folder trash = (AbstractMessageFolder) // MainInterface.treeModel.getTrashFolder(); // trash folder has uid==105
// get account information from message
// @author: fdietz never request focus //view.requestFocus();
// popup menu
// folder.showFilterDialog(((AbstractMailFrameController) // getFrameMediator()));
// IMAP folder specific // - Is this folder selectable (does it contain messages?)
// minimal unchecked time is 30 Seconds // in ms
// remove old activity
// to lower case
// initialization
// compare if item starts with str
// TreePath path = tree.getSelectionPath();
// jpanel1.add(addActionButton, cc.xy(1, 1));
// initialise protocol layer
// remember last message
// update text and progress bar
// passive: if not initialized do it now
// exit immediately, nothing more to do
// remember if Look And Feel has been changed
// enabled event-firing
// we currently only support a single category per activity
/* version 4 */
// init update timer
// persist modified calendar
// update start/end time
// update store
// load configuration from persistence
// make sure configuration is saved when exiting
// retrieve subject
// generate default unique id
// copy all attributes
// layoutComponents();
// java.util.Calendar stamp = event.getDtStamp();
// create recurrence
// search is finished // -> enable search button again
// no recurrency, so nothing in the string
// do layout again
//private JButton taskButton;
// remove everything which is not A-Za-z0-9-_
// build string
// if complex use the last search folder
// gather result results
"/* (non-Javadoc)	 * @see org.columba.calendar.store.api.ICalendarStoreFactory#getLocaleStore()	 */"
// MouseListener sorts table when clicking on a column header
// save contact to outputstream
// skip, if UID, dtStart or dtEnd is not defined
// if there is no string given, return a number
// sort-string
// found category
//Element child = getParentElement().getChild(ICALENDAR.CATEGORIES); //List list = child.getChildren();
// find the property in the rrule string
// generate new UUID if it does not exist yet
// remove old data
// generate xml document
// add new data to local store
// filename = "uuid.xcs"
// remove ".xcs"
//ICalendarStore store = (ICalendarStore) next.getSource();
// create new activity
// copy activity
// enable all menuitems
// retrieve selected activity
// disable this calendar's id
// this should not happen, the templates seem to be missing
// get selected calendar id
// get selected calendar
// create search history
// A recurring event
// this is for the calendar component and only used internally
// contentPane.add(dockingPort, BorderLayout.CENTER);
// background
// DocumentListener Methods
// paint right inside border // g2d.setPaint(p2);
// create all individual search criteria for this provider
// select first item
// glocal grid line colors
// activityAShapeBean = new ActivityAShapeBean();
// general grid size - if we don't set this property there won't be // vertical scrollbars
// west header
// first row showing the hour
// north header background
// first header showing Day info
// update popup menu based on searchterm
// dark gray line every hour
// light gray line every 30 min
// select nodes
// bold outline if selected
// paint outer border // g2d.setPaint(OUTER);
// Color titleBgPaint = null;//new Color(200, 50, 50, 255);
// Color selectedTitlePaint = new Color(200, 100, 100);
// Color textPaint = new Color(0, 0, 0, 50);
// even
// First (left) tab
// Second (right) tab
// Fallback shape for small sizes
// Resize events
// **************************************** // * Static example shape creation // ****************************************
// AShapeUtil.addMouseFireEvent(outlineAShape, trigger, // DefaultDateArea.AE_CATEGORY_DRAG_PRESSED, false, false, button);
// States
// FillAShape filledShadow = new FillAShape("shadowShape", new // RoundRectangle(0, 0, 1, 1, 5, 5), bgAbsRect, new Color(0, 0, 0, 100), // GfxUtil.AA_HINT_ON);
// SliceSpec shwSI = new SliceSpec(new Insets(10, 10, 10, 10), // SliceSpec.TYPE_TILE_CUT, SliceSpec.OPT_BORDER);
// AbsRect textRect = new AbsRect(new AtStart(4), AtStart.START0, new // AtEnd(-4), AtEnd.END0);
// check value after :
// root.setAttribute(AShape.A_REPORT_HIT_SHAPE, Boolean.TRUE);
// Animations for text
// toolbar container
// Title
// Content
// Outline
// Build tree
// Color moOutlinePaint = new Color(0, 0, 0);
// private ThemeDateAreaContainer view;
// every year?
// for leap years!
// LOG.severe("no number!")
// save header and attributes. Copy the flags!
// prepend From line
// FillAShape filledShadow = new FillAShape("shadowShape", new // RoundRectangle(0, 0, 1, 1, 5, 5), bgAbsRect, new Color(0, 0, 0, 100), // Boolean.TRUE);
// DrawAShape outlineShape = new DrawAShape("bgFill", new Rectangle(0, // 0, 1, 1), AbsRect.FILL, outlinePaint, new BasicStroke(1f), // Boolean.FALSE);
// SizeConstraint sConstr1 = new SizeConstraint(new AtFixed(10), new // AtFraction(1), 1.0f);
// SizeConstraint sConstr2 = new SizeConstraint(new AtFixed(0), new // AtFraction(0.5f), 1.0f);
// define filter rule
// get reference
// Save message source for each selected message
// addEnterExitOverride(outlineAShape, outlineAShape, AShape.A_PAINT, // moOutlinePaint, false, true);
// setting lastSelection for srcFolder to null
// which kind of mark?
// update progress bar
// retrieve new selection
//reset progress bar
// save each message
// save message
// user pressed "Search" button
// check if happens in calendar, but not on activity
// end of for loop over uids to save
// create new
// restore original clip
// parse for urls / email adr. and substite with HTML-code
// message composed of headers and body
// skip "Search All"
// its always possible that no folder is currenlty selected
// ignore - columba.date is used instead
// all headers should be included
// add from, to, date, subj so they are the last elements
// get destination foldedr
// intersect this with the existing clip
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#viewNext()	 */"
// cancel, if source equals destination folder
// get messgae UIDs
// mark all messages as expunged
// to enable button again after search is finished
// it will not be done correctly, if the first statement is // omitted
// get filter
// new folder, fire to the old folder
// TimeSpan span = activityList.get(i);
// add child to this node
// table.put(item.getId(), item.getName());
// perform other database configurations
// show search dialog
"//	true, if message has attachments, false otherwise"
// on "RETURN" start seach
// Junk flag
// We need IMAPFlags
// list of nick names
// Apply filter if enabled
// fall back to the english version
// disable time pickers
// Check the Noselect flag
// first remove all subfolders recursively
// show docking view
// init result view //createContextStackedBox();
// Analyze the Filter
// get source folder reference
// disable button
// no end
// row count
// this message doesn't exit in this folder anymore
// disable date picker
// enable until
// calendar list
// check if this folder is overwriting global options
// description
// location
// date range
// default button title
// execute background search
// save changes
//private ImageIcon image2 = null; //private ImageIcon image3 = null;
// set the body text
// clear autocomplete hashmap
// skip empty strings
// create command reference
// disable text in toolbar
// category filtering is disabled as default
// add mimepart to model
// setup charset and html
// two column
// add attachment
// open composer frame
// model->view update
// query only a single provider
// create visual container for result panel
// store reference to source message
// add to search panel
// clear previous search results
// add tag id as last
// Set the focus to the editor pane and set cursor to the top
// show search docking view
//setBorder( BorderFactory.createEmptyBorder(0,1,0,0) );
// builder.add(panel, cc.xy(1, 7));
// Enable when implemented
// Update the composer
// update calendar viewer
// END public ExternalEditor(String EditorCommand)
// create big size font to display in the composer textfield
// set old font properties
// END public boolean startExternalEditor()
//Plain text components don't fire these events
// query all criteria of all providers
"//$NON-NLS-1$		"
// disable components
// update signature -> will notify all listeners that signature changed
// repaint box
// builder.nextLine();
// b.nextLine(); // b.append(loginLabel, loginTextField);
// Add previously fetch authentication modes
// if securest write DEFAULT
// that is the expected case
// ************ // normal cases // ************
"/*		 * builder.append(alwaysEncryptCheckBox, 3); builder.nextLine();		 */"
// query with only a single criteria
//remove(topPanel);
// create command reference array for the command
// restore settings
// Process shared namespaces
// fire in EDT
"/*	 * private TitledBorderLabel m_titledborderlabel1 = new TitledBorderLabel();	 * 	 * private TitledBorderLabel m_titledborderlabel2 = new TitledBorderLabel();	 */"
// needs to be private so that subclasses won't forget calling // fireCharsetChanged
// create identity value
// clear message viewer
// add message to temporary folder
// the second child must be the encrypted message
"/* * * make quotes font-color darkgray * */"
// search across a few specific search criteria at once
// only show view if message is marked as spam
// mark as not spam
"/*	 * 	 * encapsulate bodytext in HTML code	 * 	 */"
// append
// transform headers if necessary
// TODO i18n "attachments" label
// search individual provider and individual criteria
// disable subject column renderer, use tree-cellrenderer instead
// set name of column
// Logging.log.info("setting size =" + size);
// which menuitem was selected?
// all headerfields are lowercase in property file
// search individual provider
// Mark the messages as deleted
// select message in message list
// get active charset - necessary to decode msg for saving
// private SearchResultView searchResultView;
// remove all children from tree
// add node to tree
// skip all non-mail component items
// i18n stuff
// open search dialog
// Init components
//private StackedBox box;
// append unseen count to folder name
// if IMAP selectable folder
//box = new StackedBox();
//bottom.setLayout( new BoxLayout( bottom, BoxLayout.X_AXIS ) );
// register interest on status updates
// try to determine delimiter
// Show the password dialog
// Try to get Password from Configuration
// ensure that we are logged in already
// if mailbox is not already selected select it
//top.setOpaque(true);
// still not ready, exit!
// disable logging for the startup
// non-ascii
// start JPA entity manager
// If this also does not work // -> fall back to no charset specified
// recreate menu
// calculate rest
// menuitem/toolbar button action
// system peep on new messages
"//	generate label for menuitem"
// recreate name of menuitem
// timer action
"//		popupMenu.setFocusable( false ); //		popupMenu.setRequestFocusEnabled(false); "
// nothing to do yet
// icon (we can't use the setIcon-method this time, as it relies on the // border being set)
// Check default mail client
// We save only the first item in the to-list
// Remote double-quotes
// shutdown hsql
// if the database is not started, don't do it
// if config-folder is really empty // -> delete folder
// remove extra whitespace
// tag stripping can leave some double spaces at line beginnings
// theme selection changed
// sleep 5 minutes
// strip tags
//replace the other entities
// test if a task is already running
// same email adress - just append and continue
// add aNewPattern to take place of aOldPattern
// correct limits if body tags where not found
// remove comments
// Get the uids from the headercache
// Init PGP
// register interest on status bar information
// Delete old message from server if the feature is enabled
"//			g.setColor(borderColor2); //			g.drawLine(x, y + height - 1, x + width, y + height - 1);"
// check if we are online
// which UID should be downloaded next
// check if message isn't too big to download
// now download the message
// reset the startIdx to just after the current match, to see // if there are any further matches
// apply spam filter
// controller
"/*         * (non-Javadoc)         *          * @see org.columba.core.taskmanager.ITaskManager#unregister(org.columba.core.util.SwingWorker.ThreadVar)         */"
// Is it already locked from locker ?
// Check if locked
// Wake up the others!
// exception handler should handle all error handling stuff
// "new value" is used to pass on the delay
// we support up to 4 phone entries
// Create the cipher //$NON-NLS-1$
// we support up to 4 email addresses
// -> import message in Columba
// use preselected profile
// // Table model stuff //
// private JLabel iconLabel = new JLabel();
// // LIST model stuff //
// do something with link
// fall back to default profile
// ======== contentPane ========
// we support up to 4 im
// ======== tabbedPane2 ========
// delete all directories
// Sort in with respect to priority and synchronize: // Commands with higher priority will be processed // before commands with lower priority. // If there is a command that is of type synchronize // don't put this command in front.
// we support up to 4 phones
// We have to process this command first // -> break here!
// Is the location still existing?
// load config-file from disk
// final String key = (String) keys.next();
// initialize default view options
// tstich: Default values are set in the loadPostions() method
"/*	 * (non-Javadoc)	 *	 * @see org.columba.core.config.IConfig#getConfigDirectory()	 */"
// create profile config file
// get current list selection
// use commandline-specified location
"/*	 * private JButton enableButton; private JButton disableButton;	 */"
// can't delete currently running profile
// if everything worked out all right, we copy the tmp file to the destination file
// try directory
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.profiles.IProfileManager#getSelectedProfile()	 */"
// document definition
// user's can't delete default account
// create directory, if it doesn't already exist
// create profile
// single attachment
// delete all files
// Try the built-in mime table
// ======== contactPanel ========
// add to listmodel
// if win32 platform, prepend cmd.exe // necessary for system environment variables usage
// ======== panel7 ========
"/*		 * action.addAttribute( ""class"",		 * ""org.columba.mail.filter.action.MarkMessageAsReadFilterAction"");		 */"
// ---- pictureButton ----
// condition: match all (AND) = 0, match any (OR) = 1 // private AdapterNode conditionNode;
"/*		 * //AdapterNode filterListNode = getFilterListNode();		 * 		 * AdapterNode node =		 * MailInterface.config.getFolderConfig().addEmptyFilterNode(		 * getFolder().getNode() ); Filter filter = new Filter( node );		 * 		 * add( filter );		 * 		 * return filter;		 */"
// list.add(f);
// if folder creation failed // -> don't update tree ui
// ---- nicknameLabel ----
//add( panel, BorderLayout.CENTER );
// Java 1.5 enumeration
// rename profile in profiles.xml
// ---- fileunderLabel ----
// private JLabel l_date, l_year, l_month;
// asupport = new ActionSupport(this);
//c.fill = GridBagConstraints.HORIZONTAL;
// get notified if search result arrived, to update view
// allow out-of-range selection // selectedDate.set(Calendar.DATE, selectedDay);
// b_ryear.setEnabled(y < y1);
// repaint the calendar pane
// ---- categoriesButton ----
// set the clip rect to exclude the border & insets
// find out how many days there are in the current month
// set the pen color depending on weekday or weekend, and paint // the // day number in the cell
//protected JButton defaultButton;
//mainPanel.add( topBorderPanel, BorderLayout.NORTH );
"//		 top panel"
// set display text
//topPanel.setLayout( );
// no mnemonic found - just set the text on the menu item
//draw the gray squares overlapping the white background squares
// Add the default colors items.
// Accessing Properties **************************************************
"// Constructor...	"
// get plugin directory
// extract plugin
//insets.top    += spacing; //insets.bottom += spacing;
//add the component's border insets to our minimum dimension
// if plugin has config extension point
//put them into the array
// the plugin directory is "<config-folder>/plugins/<plugin-id>"
// toolbar
// language
// this is just a folder // ->disable all actions
// get theme plugin-handler
// set language config based on selected item
// 3 columns
// the path to the plugin.xml descriptor file is: // "<config-folder>/plugins/<plugin-id>/plugin.xml
// use the collapse/expand icons from the JTree UI
// Third Line with Lists
// unknown category found // -> just add this plugin to "Uncategorized"
// try name first
// jpanel1.add(addCriteriaButton, cc.xy(1, 1));
// JPanel p = new JPanel(); // p.setLayout(new FlowLayout());
// start search
// tree must be editable, otherwise you can't collapse/expand tree nodes
// ---- emailTextField3 ----
// modal JDialog
// notify tree model
// make new node visible
// this plugin doesn't define a category to which it belongs
// make "version" column fixed size
// This method is called when editing is completed. // It must return the new value to be stored in the cell.
// make "enabled" column fixed size
// ((DefaultTreeModel) // model.getTree().getModel()).setAsksAllowsChildren(true);
// message
//int iconOffset = getHorizontalAlignment() + getIcon().getIconWidth() + 1;
// model->view
// modal dialog
// ---- emailTextField4 ----
// get plugin handler for handling frames
// close every open frame
// enable/disable tree node
// fall back to default image
// Return the configured component
// search through defaultViews to get settings for given id
// removed previous default values
// save in cache
// this is the last frame so store its data in the viewList
//Can we use the Java way to maximize the window
"//	This method is called when a cell value is edited by the user."
// register statusbar at global taskmanager
// update content-pane
// add to new mediator's listener list
// default toolbar
// *20030831, karlpeder* Now also location is stored
// remove old content pane
// // add new componnet
// hide window
// ---- preferHtmlCheckBox ----
// add action to menu
// scroll window to the beginning
// make window visible // LOG.finest("setVisible()");
// public ColumbaMenu getMenuBar() { // return menu; // }
// remove old toolbar
// first column is a tree
// register for change of the frame mediator
// ---- telephoneTextField1 ----
"/*	 * Opens a new mail window using the FrameManager instance in MainInterface.	 */"
// small icon for JMenuItem
// set JavaHelp topic ID // setTopicID("cancel");
// ---- telephoneTextField3 ----
// ---- telephoneTextField4 ----
// ---- imTextField3 ----
// ======== personalInfoPanel ========
// create menuitems for all registered new items
// create menuitems for all registered frame extensions
// border
// ---- weblogLabel ----
// ---- homepageTextField ----
// ======== panel5 ========
// textPane.setMargin(new Insets(5, 5, 5, 5));
// setup base url in order to be able to display images // in html-component
// ---- weblogButton ----
// ---- weblogTextField ----
// we insert new menus between the "Edit" and the "Utilities, Help" menu
// make sure that we don't end up with two separators
// Configure the component with the specified value
// ---- freebusyTextField ----
// ---- freebusyButton ----
// ======== panel6 ========
// ---- professionTextField ----
// add node
// ---- freebusyLabel ----
// ---- cancelButton ----
// ---- calendarButton ----
// ---- titleLabel ----
// ---- companyLabel ----
// delete plugin from disk
// ---- calendarTextField ----
"/*     * Close all open frames, which leads to exiting Columba     */"
// protected JButton defaultButton;
// delete directory recursivly
// check if this is a management frame instance // -> if so create submenu to switch perspectives // -> otherwise, don't create submenu
// show profile choosing dialog
// remove profile xml-element
// topPanel.add(iconLabel, BorderLayout.WEST);
// GeneralPath path = generatePath(h, w); // g2.setColor(fillColor); // g2.fill(path); // // path = generateTopPath(w); // GradientPaint painter = new GradientPaint(0, 0, startColor, 0, 5, // midColor); // g2.setPaint(painter); // g2.fill(path); // // path = generatePath(h, w); // g2.setColor(UIManager.getColor("controlDkShadow")); // g2.draw(path);
//defaultBox.removeAll();
// create new stacked box
// add window listener
// paint the text and icon
// enable/disable search bar during search
// big icon for JToolBar
// if only one task left
// stop update timer
// set text
// clear text with delay
// clear label
// stop clear timer
// disabled Kill button, because feature is not supported
// fall-back
// force repaint
// update menu if tags are changed
// don't want to have two separators
// mark tag, if the current selection is tagged with it
// if no theme available -> set "Plastic" as default
// apply theme
// set the Quaqua Look and Feel in the UIManager
// no text!
"/* (non-Javadoc)		 * @see java.lang.Thread#run()		 */"
// JavaHelp support
// apply transparent icon //button.setDisabledIcon(ImageUtil.createTransparentIcon(icon));
// deprecated config-file support // -> skip creation of "Cancel" button
// tray icon not supported on Mac
// columns  // rows
// if some action was performed
// setup the finder
// mark found pattern
// grant "all-permissions"
// load window position // loadPositions(getViewItem());
// get text where to find pattern
// find pattern
// add search bar to main toolbar, in case its a managed frame mediator
// saveStringInFile
// shutdown Columba
// deleteDirectory
// emptyDirectory
// throws // java.io.IOException
// getResourceURL
// copyFile
// copyResource
// try to restore from previous session
// Try again after shutdown
// do nothing here
// add a new inputstream to read from
// Delete the tempfile immedietly
// create logging file in "<users config-folder>/log"
// don't use // standard // XML // formatting
"//		JScrollPane scrollPane = new JScrollPane(tree); //		scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); //		 //		add(scrollPane, BorderLayout.CENTER);"
// enable flexdock ghost preview
// register shutdown manager
// register for cleanup
//$NON-NLS-2$
// // first load all extension handlers //
// load core extension handlers
// load addressbook extension handler
// load mail extension handler
// load all internal mail plugins
// // now load all external plugins residing in /plugins directory //
// Find all native jars
// add the old classpath
// Initialise system dependent stuff
// remove directories which don't contain a plugin
"/*	 * protected static ClassLoader loader = ClassLoader.getSystemClassLoader();	 */"
// we have a plugin-handler for this kind of extension
// try to load all plugins
// try all possible version of readme files...
// retrieve inputstream from resource
// remember plugin metadata // pluginMap.put(id, pluginMetadata);
// try to load extensin handlers of all plugins
// this constructor has the correct number // of arguments
// skip if no <extensionlist> element found
// retrieve JDom Document from inputstream
// if available, load cached instance
// ok, we found a matching constructor // -> create correct list of arguments
"// // external plugin //				"
// use external Java URL classloader
// remember instance
// append URLs to global classloader
// plugin-directory
// save window position
// show/hide new toolbar
// add animated icon to right-hand side corner of menubar
// retrieve metadata
// example configuration (tree.xml): // // <filter description="gnome" enabled="true"> // <rules condition="matchany"> // <criteria criteria="contains" headerfield="To or Cc" pattern="gnome" type="To // or Cc"></criteria> // </rules> // <actionlist> // <action uid="120" type="Move Message"></action> // </actionlist> // </filter> //
// default core menu
// it isn't possible to undo whatever the script did
// the indent-number attribute causes an IllegalArgumentException under 1.4
// scripts should reside in <config-folder>/scripts/ directory
/* if so, remove it */
// retrieving the instance for the first time // creates an instance in ExtensionHandler subclass //  // instance reference is kept in hashmap automatically
// create toolbar
// memorize location URI
// used to temporarily store the values while the original // viewList gets modified by the close method
// ensure this is called in the EDT
// notify that search is finished
// retrieve total result count
// add statusbar
// Set the icon and the title
// create uuid
// we support up to 4 im entries
// don't wait, just continue shutdown procedure, // commands will be killed
// load xml configuration // -> will be automatically saved every couple of minutes and on // shutdown
// this will overwrite the "old" tag with same id
//private Hashtable properties = new Hashtable();
// createMenuBar();
// constructor for the class
// create pattern
// create new default frame controller
"// the implementation of the search next function. It returns always the  position of the NEXT found word.	"
"//	the implementation of the replace all function."
// JPanel panel = (JPanel) this.getContentPane();
// convert region enum to flexdock string
"//	private static final String[] SALUTATIONS = { ""Mr."", ""Mrs."", ""Ms."", ""Dr."", ""Congressman"", ""Congresswoman"", ""Senator"", ""President"", //		""Chancellor"", ""Minister"", ""Prime Minister"" };"
"//	private static final String[] TITLES = { ""PhD"", ""Ph.D."", ""PhD."", ""Esq."", ""Esquire"" };"
// Initialize salutation strings
// we cannot use an iterator here because the close method // manipulates the list
// Treat a null name input string the same as an empty input string
// Assume last name only
// store profiling point data
// For writing out the data // Indent for each level
// this.file = F;
//We can use the Java way to maximize the window
// Attr name
// accumulate the contents into a buffer.
//store.shutdown();
// Menuitems use this to display a string in the statusbar
// init selection handler
// shutdown Columba if no frame exists anymore
// store current view settings
// turn on floating support
// create test userlist data
// create a rounded clip LARGER than the comp
"/*	 * Test method for 'org.columba.core.tagging.TagManager.getTag(String)'	 */"
// If defaultViews doesn't exist, create it (backward compatibility)
// nothing to save
// Create a frame controller for this view // view = null => defaults specified by frame controller is used
//MessageNode getMessageNodeAtRow(int index);
// for example: "[columba-users]Re: this is a subject"
// found cached instance // -> re-use this instance and remove it from cache
// cancel, if we show already correct frame mediator
// Create a frame controller for this view
// create new instance // -> get frame controller using the plugin handler found above
// if Reply-To headerfield isn't specified, try to use from
// get enable attribute
// get element from view list
"/* If this is windows, check the default installation location for the * gpg.exe binary. */"
// get location of executable
// reply-to
// merge mimeparts and return
// should not occur
// add encoding if necessary
// init component before querying for sourceFile
//List mimeParts = model.getAttachments();
// compose message body as multipart/alternative
// send as multipart/alternative
// load all frames from configuration file
// if the id not currently set (for example in the security panel in // the account-config
// if not we haven't actually closed a frame, leave viewList as is
// size
"/*  	 * Add supported account formats here  	 * */"
// create if not available
// return default-account identityItem instead
"/*         * The fields on this object is in fact represented in the xml         * structure found as getRoot(). Therefore super.hashCode()         * should do the job.         */"
// store every open frame in our temporary list
"/*     * search for SecurityItem based on To headerfield     *     */"
// path to account templates for POP3/IMAP
// found mail component frame
// get plugin ID
"/* If this is a unix-based system, check the 2 best-known areas for the * gpg binary. */"
//apply initial version information
// dismiss char
// exit for-loop
// set configuration of this plugin
// show error dialog, with exception message and stack-trace // -> dialog also provides a button for the user to easily // -> report a bug
// get date
// check configuration
// create reference
// create xml node
"/*                    case '\'':                        sb.append(""&apos;"");                        i++;                        break;*/"
// Check if the MessageFolderInfo is sane
// if message with uid doesn't exist -> skip
// remove message
// start the configuration wizard
// Sanity checks
// Get the handler
"/* Couldn't find anything, so return null and let the wizard ask the * user. */"
// folderitem wraps xml configuration from tree.xml
// Root folder cache
"/*	public MailFolderCommandReference getCommandReference(MailFolderCommandReference r) {		return r;	}	*/"
// do the same for the XmlElement of child
"/* If this is windows, check the default installation location for the * aspell.exe binary. */"
// delete folder from your harddrive
// Get the mimepart
"/*			 * ((AbstractLocalFolder) destFolder).setFlags(destuid, (Flags)			 * getFlags( uids[i]).clone());			 */"
// menu.setVisible(true);
// process exception -> show error dialog to user
// Print the stacktrace to our log file.
//setMargin(new Insets(0,0,0,0));
// notify tree
// checkbox pressed
"/* If this is a unix-based system, check the 2 best-known areas for the * aspell binary. */"
// ButtonBarBuilder builder = new ButtonBarBuilder(buttonEastPanel); // // builder.addGlue();
//cache the old color //set the white color //draw the square //reset the old color
// First Line with Labels
// ButtonBarBuilder builder2 = new ButtonBarBuilder(buttonWestPanel);
// builder2.addGlue();
// this.contentPane = comp;
// Second Line with Names
//String envfonts[] = gEnv.getAvailableFontFamilyNames();
// we support up to 3 address entries (work/private/other)
// 5. Line with Preview
// 4. Line with PreviewLabel
// Spacings
"/*		 * FormLayout layout = new FormLayout(""default"", ""default, default"");		 * IContainer c = getContentPane(); c.setLayout(layout);		 * 		 * CellConstraints cc = new CellConstraints();		 * c.add(createCenterPanel(detailsButton.isSelected()), cc.xy(1, 1));		 * c.add(bottomPanel, cc.xy(1, 2));		 */"
// centerPanel.add(label, cc.xywh(3, 1, 1, 1));
// switch to new theme
// set fonts
// notify frame to update
// select Locale in ComboBox
// get config plugin-handler
// ID of configuration plugin of this theme plugin
//draw line
//check for line breaks
// don't override update(), get the default clear
// The length is 1 if no item is selected
// Instance Creation *****************************************************
//RGB values discovered using ZoomIn
// draw vertical lines
// Enable JavaHelp support if topic id is defined
//Dimensions
//Draw the white squares first, so the gray squares will overlap
// set mnemonic
//setBackground(new Color(236, 233, 216));
/* Get the minimum size of the component. */
// Set text, possibly with a mnemonic if defined using &
// setText(treeNode.getName()); // setIcon(getFolderIcon(treeNode, expanded));
/* Figure out which day the mouse click is on. */
/* mouse listener */
/* Get the preferred size of the component. */
// draw all the day cells
// advance to the next cell position
// paint the border
// draw the weekday headings
/* Copy the relevant portions of a date. */
// b_lyear.setEnabled(y > y0);
// Disable anything that would cause the date to go out of range. This // logic is extremely sensitive so be very careful when making changes. // Every condition test in here is necessary, so don't remove anything.
// fill the clipped area // g2d.setPaint(LIGHT_GRADIENT);
"/*		 * asupport.fireActionEvent(((o == b_lmonth) || (o == b_rmonth)) ?		 * MONTH_CHANGE_CMD : YEAR_CHANGE_CMD);		 */"
// paint inner border // g2d.setPaint(INNER);
// set display text - possibly with a mnemonic defined using &
// Let's at least make a half-assed attempt at conforming to the Metal // PLAF colors.
// p1.add(l_month);
// top.setBorder( BorderFactory.createEtchedBorder() );
// right
/* CEDRIC: not used right now. */
// private ActionSupport asupport;
// top
// augment y.
// paint original first
// augment x.
// bottom
// left
// g.drawRect(0, 0, w - 3, h - 3);
//repaint(x, y, width, height);
//setFont( UIManager.getFont("TextField.font") );
"/*         * wait for stream threads to die         *          */"
// load profiles.xml
// check if there's already an instanciation available // we can reuse here
// // following internal components plugin registration //
// we need this for the focus manager
// folder uid doesn't exist //  -> create default value
// example configuration (tree.xml) // // <actionlist> //  <action uid="122" type="Move Message"></action> // </actionlist>
"/*	 * public FilterCriteria getCriteria(int index) { return (FilterCriteria)	 * list.get(index); }	 */"
// check if service is registered
// Condition
// retrieve service instance
// load instance of service
// Wait for external editor to quit
// list of additional names (middle names)
// replace "%1" parameter with file argument ...
"//		titleBar.addButton(new PinIcon(), //				new PinAction(this.getPersistentId()), BorderLayout.EAST); //		titleBar.addButton(new MaximizeIcon(), new MaximizeAction(this //				.getPersistentId()), BorderLayout.EAST);"
// set title
// list of attachments
// notify all listeners that have a new search result // ensure this is called in the EDT
// icons // putValue(SMALL_ICON, ImageLoader.getSmallImageIcon("mail-read.png")); // putValue(LARGE_ICON, ImageLoader.getImageIcon("mail-read.png"));
// notify all listeners
// load xml configuration from file
// initialize context
// notify all listeners that search is finished
// create empty list
// create empty structure value
// check if default value exists
// remove old
// contains already a single element
// create initial version from default configuration file
// return plain document
// callback
//  // options.xml: // //<gui> // <theme name="Plastic" theme="Experience Blue"></theme> // <fonts overwrite="false"> //  <text name="Default" size="12"></text> //  <main name="Default" size="12"></main> // </fonts> // <toolbar text_position="false" enable_icon="true" enable_text="true"></toolbar> //</gui>
// set display text stored here to an empty string (~ cleared) //$NON-NLS-1$
// retrieve plugin manager instance
// fall back to default path
"/*		 * XmlElement child = getRoot().getElement(pathToElement);		 * 		 * return child;		 */"
// make a deep copy
// ---- imTextField1 ----
// Remove bogus Operation
// Create the workers
// no attachments // -> only show bodytext editor
// Return a String representation of the cipher text //$NON-NLS-1$
// this is the final folder // subFolder = addIMAPChildFolder(parent, info, subchild);
// Our cleartext as bytes //$NON-NLS-1$
"//	public static JButton createAnimatedIconButton() { //		ImageSequenceTimer button = new ImageSequenceTimer(); // //		return button; //	}"
// fire event
// this is executed on shutdown: store all open frames so that they // can be restored on the next start
// else keep waiting
// init event
// Initialize the cipher for encryption
// Our cleartext as bytes
// delete source message
"/*         * (non-Javadoc)         *          * @see org.columba.core.taskmanager.ITaskManager#register(org.columba.core.command.Worker)         */"
// startIdx and idxOld delimit various chunks of aInput; these // chunks always end where aOldPattern begins
// threadVar;
// register interested on changes in the running worker list
// list of suffices
// formatted name
// birthday
// get tree-like structure of mimeparts
// the final chunk will go to the end of aInput
// Platform identifiers: Windows, Linux, Mac OS, ...
// Check for no property
// return true for new files
// more than one item, very strange! duplicate entries! remove // all
// grab a part of aInput which does not include aOldPattern
"/*         * (non-Javadoc)         *          * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */"
// refers to the // entry in // persistence.xml
// one second (=1000 ms)
// shutdown entity manager
// no item exists in table // -> nothing todo
// creates a shallow // copy of this // object
// if path startsWith "/" -> skip
// should we really overwrite the Look and Feel font settings
// restore log level
// start HSQLDB
// set console handler to OFF
// print attributes
// add all suffixes
// needed for hibernate!
"//		 create config-folder"
"//	String getProperty(String name); //	void setProperty(String name, String value); //	 //	Hashtable getProperties();"
// ---- imTextField2 ----
//Make the renderer reappear.
// now load all available plugins
// delete all mails in folder
//new Config(file);
// iterate over all type elements
"/*	 * Class under test for HeaderItemList getHeaderItemList()	 */"
"/*	 * Class under test for Object add(Contact)	 */"
// remember search result
// doesn't support search inside yet
// delete folder
"// mark found pattern (select) //text.grabFocus();				"
// valid inputs
// create default root nodes <Local> and <Web>
// search in specific criteria
// close DB
// // now change all global categories //
// get source reference
// score message
// if message is spam
// // mark all activities with the tag //
// url to website/homepage
// address list
// not that the editor ui only supports max of 3 addresses to edit
// create new one
// this is the expected cases
// mark it as selected
// Event: Normal Event
// Event: All Day Event
// Event: Anniversary
// check if calendar item is tagged
// calendar is selected as default
// get calendar ui component depository
// check if its a calendar component
// showing the month number
// no grid lines
// setIntercellSpacing(new Dimension(2, 2));
// do not show header
// scrolling to the selected row
// startup Columba
// stop server when shutting down
// we add every jar-file in /lib, too // plugin-directory
// name of organisation
// dummy address
// summary
// frequency
// disable other
// disable all
// maximum occurrences
// enable all radio buttons
// client isn't from local machine
// end date
// enable button
// "store" html in jTextPane container // reset starting position in y-direction
// ======== panel1 ========
// in case we have to add another "0"
// create list of contact folders
// decode using default charset
// click on this button will open the recurrence dialog
// create jpim contact instance
// both values are okay, so create a correct time
// no correct value!
// there is no :
// custom renderer to convert from calendar id to calendar name
// correct value!
// check value before :
// set Look & Feel
// regexp for correct timestamp
// double-click on empty calendar // mediator.fireCreateActivity(null);
// clicked on calendar - not activity
// ---- homepageLabel ----
"//		 handle commandline parameters"
// update modification timestamp
// Add the tray icon to the System tray // ColumbaTrayIcon.getInstance().addToSystemTray( // FrameManager.getInstance().getActiveFrameMediator() // .getFrameMediator());
// the java methods return a nice week of year, we need hard facts
// mouse hovers over activity
// check if happens on the selected activity
// remember selected activity
// SizeConstraint sConstr4 = new SizeConstraint(new AtFixed(0), new // AtFraction(1), 0.0f);
// ShapeGradientPaint titlePaint = new ShapeGradientPaint(new Color(255, // 150, 150), new Color(255, 200, 200), 0, 0.7f, 0.7f, false);
// call the postStartups of the modules // e.g. check for default mailclient
// SizeConstraint sConstr3 = new SizeConstraint(new AtFixed(0), new // AtFraction(1), 0.0f);
// we are done - clear the progress bar
// generate UID for new message
// skip if account information is not available
// Check if the message is already cached
// remove mail-checking stuff
//retry copy
// this message is already cached
// Parse Message from DataStorage
// get header from cache
// create output stream
// get references
// message doesn't exist (this shouldn't happen here)
// message isn't cached // -> just return header from cache
// update MessageFolderInfo
// remove message from disk
// fireMessageRemoved(uid, getFlags(uid));
// Must be out of sync!
// cached headerfield list
// Check if still consistent
// oops, something went wrong
// header cache is stored in "headerlist" subfolder
// write message source to file
// for each message in folder i
// get message source from folder
// add check box for incl. of headers
// close output stream
// append newline
// for each message
// increase progressbar value
// mark messages
// un-mark messages
// no configuration available, create default config
// train bayesian filter
//vfolder.showFilterDialog((AbstractMailFrameController) getFrameMediator());
// cancel here if user requests
// skip if user didn't enable this option
// execute command
// set columba.color flag
// move message to user-configured folder (generally "Junk" // folder)
// create new locale xml treenode
// which kind of color?
// add source to destination folder
// get references to selected folder and message
// define criteria
// no message selected.
// uid for messages to save
"/*			 * classLoader = ClassLoader.getSystemClassLoader();			 */"
// set properties for virtual folder // default is inbox if parent is null
// get sender
// get folder that is going to be moved
"//	register for status events"
// get destination folder
// save headercache
// add sender to addressbook
// skip if no reference available
// end of loop over selected messages
// show dialog
//setup save dialog
// save message source under selected filename
// file exists, user needs to confirm overwrite
// remove source folder
// get charset from message
// get name of folder
// setup filters and filename for file chooser dialog
// mark message
// saving last selected message to the folder
// rename folder
// determine type of body part
// get source references
// expunge folder
// store whether all headers should be incl.
// Add default extension if no extension is given by the user
// use body as is
// list of prefixes
// default value
// First determine which charset to use
// mark quotings with special font
// test on extension
// read configuration from options.xml file
// create header table
// create css-stylesheet string
// create array and return
// loop over all headers
// process header value
// add toolbar button between last button and cancel button
// Print each message
// decode message body with respect to charset
// check if virtual folder, if yes, do not use these uids, use the // real uids instead
// uid for messages to print
// for every message
// selected folder
// selected messages
// Header
// the header key for date field
// Footer
// Setup print document for message
// ignore leading weekday name (e.g. "Mon,"), since this // seems to give problems during parsing
// special handling for dates
// *20030531, karlpeder* setting headerKeys to lowercase for // lookup!
// Add header information to print
// create a print object and return it
// Add body of message to print
// end of for loop over uids to print
// fall back to use the Date header contents directly
// print the print document (i.e. the message)
// create new local xml treenode
// try to fix broken html-strings
// create temporary file and save validated body
// if we have a result
// true ~ scaling allowed
"/*	 * Class under test for void remove(Object)	 */"
// search all messages which match this filter
// stop background-manager so it doesn't interfere with // shutdown manager
// If a msg has been read, import it into Columba
// setting lastSelection to null
// for each filter
// We are done - clear the status message after a delay
// clear
// initialize progressbar
// get filter list from folder
// Fetch the headers of the new messages ...
// If there is still a parent -> remove it
// Can't happen
// if "automatically apply filter" is selected & there // are // new // messages
// perform other environment configurations
//Update is unnecessary
// add command to scheduler //MainInterface.processor.addOp(command);
// parse all message files to recreate the header cache
// size of message
// we are done
"//	true/false"
// headerList.clear();
// priority as integer value
// was this message already fetched from the server?
// message flags
// host from which this message was downloaded
// properly decoded subject
// short from, containing only name of person
// message color
// POP3 message UID
// these are cached by default
//return h;
// Update the list of new and local uids
// save default headerfields, as defined in RFC822
// save other internal headerfields, of non-boolean type
// internally used headerfields // these are all boolean values, which are saved using // a single int value
// load boolean headerfields, which are compressed in one int value
// if value doesn't exist, use false as default
// load other internal headerfields, non-boolean type
// Compute the number of new messages
// Trigger Synchronization
// only called by FolderFactory
// next position in the local uid list
// if creating new folder
// Ensure sizes are correct
// Check if the mailbox has changed
// Seems to be no change!
// Compare inner loop
// Still not found -> do a binary search
// Check if all local uids have been deleted
// removedLocalUids = localUids.size() - 1 - position;
// all messages are new
// Fetch Pack outer loop
// Number of deleted messages is computed from exists on imap and local // newMessages
// Copy the header
// .. and set the flags
// First deleted all local uids that // are larger than the largest remote uid
// fire message added updates
// Number of deleted messages is computed from exists on imap and // local // newMessages
// Pack size is min 10, max 200 else mailboxsize / 10
// Build a list of the new uids
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.Folder#getObservable()	 */"
// IMAP Folders have no own lock ,but share the lock from the Root // to ensure that only one operation can be processed simultanous
// get IMAP rootfolder
// We found the uid of a deleted message // -> remove it from the headerlist
// Check if maybe no message at all got copied // In this case we are finished here
// the implementation of the search function. It returns always the position of the FIRST found word.
// update the local flags and ensure that the MailboxInfo is correct
// get header with UID
// update the HeaderList
// Parser the header
// Reenable Updating the mailbox
// locking mechanism
// MATCH ANY
// find colum
// if folder doesn't exist already
// Remove of lock didn't work -> delete by hand
// no delimiter found // -> this is already the final folder // if folder doesn't exist already
// recursively go on
// create and tag all subfolders on server
// maybe remove this folder
// private Filter filter; // private JDialog dialog;
// Check the Noinferior flag
// Buffer for collecting data from // the "characters" SAX event.
// Find special
// first clear all flags
// search for a folder thats on the IMAP account // first try to find the local translation of special
// This fixes the strange behaviour of the courier imapserver // which sets the \Noselect flag on INBOX
// Trigger synchronization of the IMAPFolder
// Trigger any pending Flag syncs
// Reenable the action
// has the imap account no trash folder using the default trash folder
// Find old numbers
// create reference of newly arrived messages
// Get the new numbers
// this is necessary to do!
// line contains "@" (evolution mbox style) or //  -> import message in Columba
// Check if index is consitent with mailbox
// MATCH_ALL
// line contains "-" (mozilla mbox style) //  -> import message in Columba
// we support 3 address types (work/home/other)
// enable lucene search index by default
// update message starts of following messages
// Could not delete the file - possibly someone has a lock on it
//delete the file containing the message in the file system
// Add all found virtual uids to the result
// selecting the message
// pass the work to IMAPStore
// filter is disabled
// ... delete it when Columba exists instead
// A list of all files that seem to be messages (only numbers in the name) //new Object[list.length];
"/*		 * worker.setDisplayText( ""Search Result: "" +		 * notDefaultEngineResult.size() + "" messages found in "" +		 * (System.currentTimeMillis() - startTime) + "" ms"");		 */"
// check for new headers
// result = mergeFilterResult(v, uids, match); // only for debugging purpose // printList( result );
// we found a suitable folder -> set it
// MATCH_ANY
// clear status bar message now we are done (with a delay)
// return searchMessages(filter, null);
//  This list is reduced, because most search requests can be  // answered anyway, using locally cached headerfields
// Find all VirtualFolders and rewrite the FolderReference
//super.removeFolder(); // do nothing
// Search again
// generally we can just use the same login for both servers
// set sort-string/displayname
// show neat error dialog here
// Find the body text part
// Convert the src uids back to virtual uids
// If no flags filter the seach is still valid
// only called by FolderTreeModel.createDirectories() and FolderTreeModel.add()
// copy all properties to the subfolder
// create default configuration
// redo the seach for the flags criteria
// if creation failed
// lets find a good name for our new vfolder
// create new subfolder
// update tree-view
// Create a src uid array
// Check if all uids are still exisiting
// change to new folder
// fire updates
// remove from virtual folder
// remove from source folder
// not supported
// We need to get the locks of all folders
"// GradientPaint painter = new GradientPaint(0, 0, midColor.brighter(), // 0, 5, midColor); // g2.setPaint(painter); //		 // g2.fillRect(0,0,w,5); //		 // new GradientPaint(0, h-1, midColor, 0, h-1-5, Color.red); // g2.setPaint(painter); //		 // g2.fillRect(0,h-5,w,5);"
// First try to get the lock of the virtual folder
"/*		 * ColumbaHeader header = (ColumbaHeader) headerList.get(uid);		 * header.getAttributes().put(key, value);		 */"
// deactivate the folder
// Copy the rest
// Update the Virtual Header
// if no folder was passed as argument, use global options
// global option
// not supported by virtual folder
"/*     * validates a hostname, i.e.:     * mail.myhost.com     * mail.us.myhost.com     * 127.0.0.1     * */"
// add column to JTable column model
// create element if not available
// use folder specific options
// add columns
// only local options have overwrite attribute
// use global options
// use folder-based options
// save width
// remove all child nodes
// should we re-use the last remembered selection?
// these are the items, enabled as default
// resize column width
// no messages in this folder
// changing the selection to the first/last row based on ascending // state
// sorting order
// row count == 0 --> empty table
// if a lastSelection for this folder is set // getting the last selected uid
// enable max occurrences
// if we search in The MessageConroller
// ViewItem viewItem = getViewItem();
// use global settings
// listen to changes in the Subject to update the title bar // of the message composer window
// remove disabled column
// check for new messages
// get the message controller
// check if we should use the folder-based configuration // or the global table configuration
// init model (defaults to empty plain text message)
// Global # 1
// if no account exists, return
// @author Erich Schaer, Dmytro Podalyuk
// East Europe # 10
// West Europe # 4
// Automatic Generation of Groups
// composer can either edit in html or plain text mode // listen for configuration changes
// if message contains attachments
// East Asian # 17
// Hack to ensure charset is set correctly at start-up
// add splitpane to the center
// init controller for the editor depending on message type
// set model based on configuration
// create default element if not available
// ignore this
// remove all components from container
// West Asian # 30
// show signature viewer
// email addresses and phone numbers
// create splitpane containing the bodytext editor and the // attachment panel
// set first name
// show attachment panel if necessary
// update panel
// re-paint composer-view
// enable/disable html toolbar
// update ComposerModel based on user-changes in ComposerView
"/*		 * return isToolbarEnabled(ACCOUNTINFOPANEL);		 */"
// default ~ plain text
// Setup DnD for the text and attachment list control.
// convert body text to comply with new editor format
// sync model with the current (old) view
// retrieve Command of filter action
// switch editor and resync view with model
// change ui container
// sync view with new update to date model
// save charset
// close composer
// hide signature viewer
// save html state
// Display error ? // As it is inmutable
// original: "^[a-zA-Z0-9]+@[a-zA-Z0-9\\.\\-]+\\.[a-zA-Z]{2,4}+$";
"/* (non-Javadoc)	 * @see org.frapuccino.addresscombobox.PatternSeparatedAutoCompleter#acceptedListItem(java.lang.Object)	 */"
// Remove leading space after the separator character so that it is not removed from the text component's document, below.
// more initialization
// set message
// clear view
// notifyListeners();
// if this is no URI
// fill hashmap with all available contacts and groups
// Surround the selected element with double-quotes, if necessary
//model.setHeaderField("X-Priority",(String) view.getSelectedItem());
// remove from view
//      Get Tooltip for Icon
//setCellRenderer(new ListRenderer());
// remove from model
//setModel(listModel);
// font configuration
// add attachments (mimeparts) from view to the model
// transfer attachments from model to view
// set formatted name
// transfer attachments from view to model // clear existing attachments from the model
// add attachments (mimeparts) from model to the view
// attachment controller doesn't support copy actions
// currently used font
// attachment controller doesn't support copy-operation
// size of font
// view.setSelectionInterval(0, view.count() - 1);
"//	name of font"
// add listener to changes
// hide/show attachment panel
// ********** Methods necessary to hide view from clients ********
// if account selection changes, reload signature file
// register interest on configuration changes
// use default font settings
//SubjectDialog dialog = new SubjectDialog(composerInterface.composerFrame);
// check if we are currently editing a draft message
// remove listener from old account selection
// get "Drafts" folder of account
// view data ->model
// get selected account
// -> we need to replace old message
// message is already cached // try to compare the headerfield count of // the actually parsed message with the cached // headerfield count
// I need revalidate if node is root. but why?
// get mimeparts
// get list of all selected folders
//shortcut key
// We need to parse // get message with UID
// mark as read, mark as draft
// update view accordingly
// small icon for menu //putValue(SMALL_ICON, ImageLoader.getSmallImageIcon("send-later-16.png"));
// private MainInterface mainInterface;
// required for SwingWorker 3
// initialize MimeHeader as RFC822-compliant-message
//ComposerModel model = (ComposerModel) // ((ComposerController)getFrameController()).getModel();
//  add all attachments
// add all attachments
// build "quoted" message
// skip if bodypart (already added as quoted text)
// store header after processing
// Text: Addition of > before each line
// Add addresses to the addressbook
// get answer from template
// choose template
// retrieve headerlist of tempate folder
// template folder has uid=107
// Add all recipients to the collected addresses
// user pressed OK
// get bodytext of template message
// remove duplicates
// From which account is this mail?
// set subject ; mod:20040629 SWITT
"//$NON-NLS-1$			"
// ======== dialogPane ========
// html
// we only need the first message
// setRowMargin(5);
// get message flags
// get selected messages
// set From for redirecting; new: 20040629 SWITT
// Text: take org. message; mod:20040629 SWITT
// Html: Insertion of text before and after original message
// action buttons for moving contacts
// skip if message is *not* marked as spam
"// 	Stick with the default charset"
// addressbook list
// recipient lists
// models for addressbook/recipients lists
// labels
// b2.nextLine();
"/*	 * public IHeaderItemList[] getHeaderItemLists() { return headerItemList; }	 */"
"//			toListModel.clear(); //			ccListModel.clear(); //			bccListModel.clear();"
// get color from factory // ->factory shares color objects to save memory
// mark message as spam
// CellConstraints cc = new CellConstraints();
// register for changes to editor type (text / html)
// register for changes to the editor // controller.addContainerListenerForEditor(this);
// create virtual folder (is attached to parentFolder)
// builder.add(paraLabel, cc.xy(1, 7));
// view = editor.getView();
// private JTextPane view;
// selection in the paragraph combo box
// clear ignore flag
// only do something if ignore flag is not set
// enable controls if we are not in html edit mode
// int selectedIndex = sizeComboBox.getSelectedIndex();
// if no text is specified, we are done now
// set paragraph formatting according to the selection
// // This doesn't handle ChangedCharsetExceptions correctly. // view.setText(text);
// other IOExceptions than ChangedCharsetException
// delete old contents
// clear existing text
// load contents into document
// select the menu item corresponding to present format
// get list of all folders
// set paragraph formatting according to the given action
// register for text cursor/caret and formatting changes // to select/deselect action
//centerPanel.setLayout( new BoxLayout( centerPanel, BoxLayout.Y_AXIS ) );
//dialog.getContentPane().setLayout( new BoxLayout( dialog.getContentPane(), BoxLayout.Y_AXIS ) );
// END public ExternalEditor()
// ensure that we are currently in the contact component
// remember old font properties
// set last name
// add all additional names (middle names)
// END public class ExternalEditor
// set new text
// execute application, enabling blocking
//centerPanel.add( Box.createRigidArea( new java.awt.Dimension(0,5) ) );
"//		 for each JComboBox item"
"/*JPanel panel = new JPanel();panel.setLayout( new BoxLayout( panel, BoxLayout.X_AXIS ) );panel.add( hostLabel );centerPanel.add( panel );*/"
// First print a quote
// Do we have to insert a quoteprefix?
// here)
// 2 columns // rows are added dynamically (no need to define them
// @author: fdietz
// update tree label
// update configuration
// two different root folders // -> get inputstream from source-folder and add it to // -> destination-folder as inputstream // -----> moving of raw message source // (works also for copying from local to IMAP folders, etc.
//Create the file
// !!! Size = 12 // create filter configuration // -> check if <Subject> <contains> pattern <test>
// setup dialog title, active filter and file name
// add all nicknames
// add all prefixes
// disable selected item
// let exception handler process other errors
// String value = (String) theList.getSelectedValue();
// reactivate
// private ConfigFrame frame;
// disable the actionlistener for this period // to avoid an unwanted port check
// Update the Port
// Default Port
// insert into message right after <body...>
//this.frame = frame;
//private ConfigFrame frame;
// POP3s / IMAPs
// set website/homepage
//pathButton.setMargin( new Insets( 0,0,0,0 ) );
//typeComboBox.setMargin( new Insets( 0,0,0,0 ) );
// DateFormat
