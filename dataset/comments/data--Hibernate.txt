// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable
//perhaps not really necessary...
// todo : what else to do here?
//TODO: disable batch loading if lockMode > READ?
//TODO: to handle concurrent writes correctly, the client should pass in a Lock
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*
//note there is a wierd implementation in the client side
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.
// Do we need to drop constraints before dropping tables in this dialect?
"/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */"
// Does this dialect support check constraints?
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start
// Does this dialect support the UNIQUE column syntax?
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:
// Does this dialect support the FOR UPDATE syntax?
// todo : what is the implication of this?
// todo : YUCK!!!
// todo : again, how *should* this work for non-pojo entities?
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?
//TODO: really bad, evil hack to fix!!!
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?
//TODO: better to degrade to lazy="false" if uninstrumented
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?
//Icky workaround for MySQL bug:
// we have to set up the table later!! yuck
//TODO: Somehow add the newly created foreign keys to the internal collection
// This inner class implements a case statement....perhaps im being a bit over-clever here
//TODO: merge into one method!
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()
// TODO: what type?
//TODO: inefficient
//FIXME: get the PersistentClass
// todo : we can remove this once the deprecated ctor can be made private...
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here
//TODO: redesign how PropertyAccessors are acquired...
// TODO : not so sure this is needed...
//create an index on the key columns??
"/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a			 * slightly higer level in the stack (to get all the information we need)			 * Right now HbmBinder does not support the			 */"
//TODO: improve this hack!
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).
//use of trim() here is ugly?
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()
// can happen because of the multiple ways Cache.remove() // can be invoked :(
//ick!
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load
//TODO: should this be Session.instantiate(Persister, ...)?
//TODO: suck this into initLaziness!
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).
//TODO: is this right??
//ie. the subquery! yuck!
//use of a stringbuffer to workaround a JDK bug
//TODO: copy/paste from recreate()
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL
// todo : this eventually needs to be removed
// todo : remove
//just to help out during the load (ugly, i know)
// hack/workaround as sqlquery impl depend on having a key.
//TODO: handle the case of a foreign key to something other than the pk
//TODO: assumes all collections disassemble to an array!
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).
//TODO: deprecated, remove eventually
//TODO possibly relax that
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)
//use a degenerated strategy for backward compatibility
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.
// get the right object from the list ... would it be easier to just call getEntity() ??
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)
//TODO: this dependency is kinda Bad
//TODO: get SQL rendering out of this package!
// why does this matter?
// important, to account for newly saved entities in query // todo : some kind of check for new status...
//TODO: can we *always* use the "null property" approach for everything?
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...
// sql-server, at least needed this dropped after use; strange!
// is it necessary to register %exact since it can only appear in a where clause?
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays
// Does this dialect support the ALTER TABLE syntax?
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy
//TODO: reenable if we also fix the above todo
// orphans should not be deleted during copy??
// orphans should not be deleted during merge??
//TODO: suck this logic into the collection!
// todo : we can actually just determine this from the incoming EntityEntry-s
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't
// this class has no proxies (so do a shortcut)
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)
// todo : need map? the prob is a proper key, right?
//TODO: better to pass the id in as an argument?
//do we even really need this? the update will fail anyway....
//TODO: would it be better to do a refresh from db?
"/**	 * This form used from annotations (?).  Essentially the same as the above using a	 * resultset-mapping reference, but without cacheMode, readOnly, and comment.	 *	 * FIXME: annotations do not use it, so it can be remove from my POV	 * @deprecated	 *	 *	 * @param query The sql query string	 * @param resultSetRef The result-set-mapping name	 * @param querySpaces Any specified query spaces (used for auto-flushing)	 * @param cacheable Whether the query results are cacheable	 * @param cacheRegion If cacheable, the region into which to store the results	 * @param timeout A JDBC-level timeout to be applied	 * @param fetchSize A JDBC-level fetch-size to be applied	 * @param flushMode The flush mode to use for this query	 * @param parameterTypes parameter type map	 * @param callable Does the query string represent a callable object (i.e., proc)	 */"
//TODO: ugly here:
//TODO: not quite sure about the full implications of this!
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...
// todo : should we check the current isolation mode explicitly?
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?
"/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */"
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!
// TODO : better way?!?
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...
//TODO:this is only needed during compilation .. can we eliminate the instvar?
// TODO : absolutely no usages of this constructor form; can it go away?
//TODO: is this a bit ugly?
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate
// TODO : remove these last two as batcher is no longer managing connections
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...
// implicit joins are always(?) ok to reuse
//TODO: used to be exprNoParens! was this needed?
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.
// we do not know either type //BLIND GUESS!
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)
// short-circuit for performance...
// not absolutely necessary, but does help with aggressive release
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop
//yuck!
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...
//TODO: make this a bit nicer
// yuck!
// todo : potentially look at optimizing these two arrays
//note that i parameter is now unused (delete it?)
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur
//TODO: optimize this better!
//TODO: should we allow suffixes on these ?
//TODO: is this really necessary????
// TODO : not sure the best way to handle this. // The non-performant way :
//TODO: is there a better way?
//The class is now way to complex!
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...
//name from a super query (a bit inelegant that it shows up here)
//real hacky... // used to count the nesting of parentheses
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)
// FIXME Hacky workaround to JBCACHE-1202
//TODO: COPY/PASTE FROM SessionImpl, pull up!
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...
//Must be done here because of side-effect! yuck...
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?
//work around a bug in all known connection pools....
//TODO: reuse the PreLoadEvent
// Need a better way to define the suffixes here...
//workaround for WebLogic
//TODO: temporary
// TODO : YUCK!!!  fix after HHH-1907 is complete
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be
//This is not very nice (and quite slow):
//TODO: get SQL rendering out of here
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?
// worrying about proxies is perhaps a little bit of overkill here...
// todo : throw exception?  maybe warn if not the same?
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?
// TODO: copy/paste from ManyToOneType
//TODO: code duplication with SingleTableEntityPersister
// todo : throw exception?
//should this interface extend PropertyMapping?
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:
//TODO: implement caching?! proxies?!
// is this really necessary?
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call
//TODO: this is a bit arbitrary, expose a switch to the user?
"/**	 * @return collection removal	 * FIXME: even if isInverse=""true""?	 */"
// TODO: Fix this so it will work for non-POJO entity mode
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:
//TODO: would be nice to handle proxy classes elegantly!
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?
//TODO: is there a more elegant way than downcasting?
//TODO: remove use of instanceof!
//TODO: perhaps this should be some other RuntimeException...
//Yuck:
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors
//TODO: design new lifecycle for ProxyFactory
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here
// TODO: Should this really return null?  If not, figure out something better to do here.
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...
// create an index on the key columns??
//is this ok?
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names
// perhaps this should be an exception since it is only ever used // in the above method?
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)
//this is kinda the best we can do...
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */
//TODO: this needn't exclude subclasses...
//TODO: we use two visitors here, inefficient!
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()
//I suppose?
"// TBD should this be varbinary($1)? //		registerColumnType(Types.VARBINARY,     ""binary($1)"");"
//shortcut
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective
// TODO : probably better to calculate these and pass them in, as it'll be more performant
// todo : should we additionally check the current isolation mode explicitly?
//TODO: simply remove this override //      if we fix the above todos
// todo : is there really any reason to kkeep trying if this fails once?
// TODO : not sure this is correct, could not find docs on how to do this.
//HSQL has no Blob/Clob support .... but just put these here for now!
"// merges don't cascade to uninitialized collections //			//TODO: perhaps this does need to cascade after all...."
// yick!  need this for proper serialization/deserialization handling...
//TODO: should orphans really be deleted during lock???
// todo : move to StringHelper?
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);
// TODO: It would be really, really nice to use this to also model components!
//TODO: move to .sql package!!
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)
// TODO : add this info to the translator and aggregate it here...
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases
//TODO: code duplication with JoinedSubclassEntityPersister
//TODO: refactor to .sql package
//TODO: *two* hashmap lookups here is one too many...
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface
// Do we need to qualify index names with the schema name?
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer
//TODO: inefficient if that cache is just going to ignore the updated state!
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()
//TODO:refactor + make this method private
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()
//kinda ugly, but needed for collections with a "." node mapping
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...
//TODO: move to .sql package, and refactor with similar things!
//TODO: I am not so sure about the exception handling in this bit!
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties
// append the SQL to return the generated identifier //TODO: suck into Insert
//This is really ugly, but necessary:
// todo : modify the class definition if not already transformed...
//TODO: should we use SELECT .. FOR UPDATE?
"/** Create an action that will evict collection and entity regions based on queryspaces (table names).	 *  TODO: cache the autodetected information and pass it in instead.	 **/"
//TODO: is this 100% correct?
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..
//TODO: move into collection type, so we can use polymorphism!
// TODO should we just collect these like with the collections above?
// todo : should really move this log statement to CollectionType, where this is used from...
//hum ... should we cascade anyway? throw an exception? fine like it is?
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.
//TODO: copy/paste from insertRows()
//TODO: suck into event class
//TODO: never reached, since getTypeName() actually throws an exception!
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider
// xmlforest requires a new kind of function constructor
// TODO Is this a valid operation on a timestamps cache?
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used
// TODO Why not use the timestamp in a DataVersion?
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)
// unhappy about this being public ... is there a better way?
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...
// TODO: Replace this with a more elegant solution.
// short cut check...
//TODO: to handle concurrent writes correctly, this should return a Lock to the client
// this is ugly here, but needed because its a subquery
// TODO : will need reference to session factory to fully complete HHH-1907
// inheritance cycle detection (paranoid check)
// TODO: encapsulate the protected instance variables!
//polymorphism comment above
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.
// TODO: handle TypeDefs
//TODO: get all properties, not just the fetched ones!
//TODO: native ids
// TODO: bindpropertyresults(alias, returnElem)
//TODO: handle property-ref
//TODO: validate existing of property with the chosen name. (secondpass )
//TODO: check that entry.getIdentifier().equals(requestedId)
// TODO: RESTRICT VIOLATION
//TODO: assertion only, could be optimized away
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"
// TODO: toLowerCase was not done before. Only used in Template.
//TODO: arithmetic expressions, multiple new Foo(...)
// TODO: not visible to the user!
//TODO: proxies!
//TODO: can we limit stored procedures ?!
//TODO: formulas ?
// TODO: better error message since we actually support composites if names are explicitly listed.
//TODO: use these in methods above
//TODO: cache the persister, this shows up in yourkit
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables
//TODO: create uk loaders for component properties
// TODO : still need to make CollectionPersisters EntityMode-aware
//TODO: terrible implementation!
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()
// TODO: check if key contains the owner ID
//TODO: cache this in an instvar
// TODO : temporary initial step towards HHH-1907
// todo : remove this once ComponentMetamodel is complete and merged
//TODO: add owner argument!!
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings
//TODO: unnecessary for databases with ANSI-style joins
//TODO: maybe call it getRowSelection() ?
//TODO: make this handle multiple collection roles!
//TODO: include the rowids!!!!
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here
// TODO : or should we return 'containsTableAlias'??
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...
//TODO: avoid this for non-new instances where mightBeDirty==false
//TODO: theoretically non-threadsafe...
// todo : look at optimizing these...
// todo : cache this sql...
"/**	 * TODO: Check if Mimer SQL cannot handle the way DB2 does	 */"
//TODO: if we are using identity columns, fetch the identifier
//TODO check there is no actual definition elemnents when a ref is defined
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )
//TODO: return new Lock(ts);
// TODO : why aren't these the same?
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!
//TODO mappings.getLogicalTableName(ownerTable)
//TODO: if lock.getTimestamp().equals(ts)
//TODO: always true for now, but not if we later decide to support elements() in the from clause
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:
// See if the user configured a multiplexer stack
//root entity comes *last*
//==elementType ??
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)
//identifier collections not supported for 1-to-many
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...
// update removed rows fks to null
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );
"//			buf.append( selectFragment( lhsAlias, """" ) )//ignore suffix for collection columns!"
// initialize the Set of queried identifier spaces (ie. tables)
//use suffix for the entity columns
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent
// the class hierarchy structure
// remove the current element from insertions. It will be added back later.
//private final String rootTableName;
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...
//INITIALIZATION:
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//not null ... (start with 1) is implicit
// continue loop
// return existing object or initialized proxy (unless deleted)
// the list of entity names that indicate the batch number
//disassembled state gets put in a new array (we write to cache by value!)
// Add these directly to the executions queue
// Execute the SQL:
//sort the updates by fk
// This could also just be true all the time...
// the mapping of entity names to their latest batch numbers.
//chop the last union (all)
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"
//TODO: check this....
// for deprecated saveOrUpdateCopy()
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class
//expressionTerminators.add(","); // deliberately excluded
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression
// Multi-param numeric dialect functions...
// Use theta style (for regression) // Move the node up, after the origin node.
// Multi-param date dialect functions...
// add the main query
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//add the restriction to the outer select
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22
// This assumes you will want to ignore any update counts
//skip the FROM keyword in params
// Custom sql
// return a newly loaded object
// make it circular-reference safe
//Cope with special cases of AND, NOT, ()
// subclass closure properties
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!
// SUBCLASSES
//need to hydrate it.
//starts with 1, implicitly
// instantiate a new instance
// simple nullability constraint
//we need to upgrade the lock mode to the mode requested
"//	register the type of the out param - an Oracle specific type"
// look for a proxy
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~
// evicts don't cascade to uninitialized collections
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();
// might happen with a managed connection
// don't need subclass tables, because they can't appear in conditions
// not final-static to avoid possible classcast exceptions if using different oracle drivers.
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!
//private List aliases = new ArrayList();
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.
// register resolvers set via Environment property
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)
//update all the modified entries
// special case where we need to force incloude all subclass joins
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection
// binary %Stream // character %Stream
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);
// assumes that types are all of span 1
// hibernate impelemnts cast in Dialect.java
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list
//its the given optional object
//decide which ResultSet to get the property value from:
// properties of this class, including inherited properties
// otherwise assume the parent is the the criteria that created us
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class
// we can go straight to the first required row
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)
//before adding to collection!
// discriminator column
// Code to handle subclasses of topClass
//NONE, because its the requested lock mode, not the actual!
//private final Map propertyTableNumbersByName = new HashMap();
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap
// CLASS + TABLE
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.
// required to exception table // iconst_0 // i
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)
// checkcast // cast the bean into a raw bean
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)
// checkcast (case of primitive type) // invokevirtual (case of primitive type)
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).
/* | this | bean | args | i | raw bean | exception | */
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).
// new // BulkAccessorException
//"as" is not in KEYWORDS
// getfield // get field "$JAVASSIST_CALLBACK" defined already
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~
// dup
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel
// putfield // put field "$JAVASSIST_CALLBACK" defined already
// Configure the cache to use our TM
/* local variables | this | callback | */
// find the batch number associated with the current association, if any.
// invokeinterface
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"// seems to not really... //	public boolean supportsRowValueConstructorSyntax() { //		return true; //	}"
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// byte
// the column doesnt exist at all.
// note that %string is deprecated
//If the object is already loaded, return the loaded one
// create new lock that times out immediately
// convenience methods relating to operations across arrays of types...
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.
// DISCRIMINATOR
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.
// %upper is deprecated
// let this take precedence if defined, since it works for // assigned identifiers
//throw new UnsupportedOperationException("Can't write to a readonly object");
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed
// The syntax used to add a foreign key constraint to a table.
"//note: it is conceptually possible that a UserType could map null to //	  a non-null value, so the following is arguable:"
// note: interfaces is assumed to already contain HibernateProxy.class
// identifier-commalist
//assembled state gets put in a new array (we read from cache by value!)
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!
// disassemble named parameters
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction
// remove all collections for the entity from the session-level cache
// invokeinterface // callback.write*(..)
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// JOINS
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.
// classes mentioned in extends not available - so put it in queue
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//propertyTableNumbersByName.put( prop.getName(), join );
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally
//Access cached SQL
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//figure out which tables need to be fetched
"//	private final List persisters = new ArrayList();"
//figure out which columns are needed
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy
//figure out which formulas are needed
//get em on the second pass!
//render the SQL
// local cache, so we use synchronization
// SQL strings
"/*public static Object[] clone(Class elementClass, Object[] array) {		Object[] result = (Object[]) Array.newInstance( elementClass, array.length );		System.arraycopy(array, 0, result, 0, array.length);		return result;	}*/"
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//if there is no resulting row, return null
// *load_1 // each type
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html
// The optional SQL string defined in the where attribute
//pass this as an argument only to avoid double looking
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...
// added this caching as I noticed that getType() is being called multiple times...
//information about lazy properties of this class
// If there are any scalars (non-entities) selected, render the select column aliases.
//information about all columns/formulas in class hierarchy
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ( (Column) discrim.getColumnIterator().next() ).setType(type);
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// dynamic filters attached to the class-level
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// assume we are in an auto-commit state
// CUSTOM SQL
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);
// model.getKey().setType( new Type( model.getIdentifier() ) );
// The syntax used to add a column to a table
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:
// Completely optional cascading drop clause.
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.
// PROPERTIES
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );
// IDENTIFIER
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods
// VERSION
//operations which cascade as far as the collection also cascade to collection elements
//WHERE STRING
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level
// SUBCLASS PROPERTY CLOSURE
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.
//before add :-)
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization
// Handle any filters applied to the class level
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case
// only one-to-one is lazy fetched
// replicate does cascade to uninitialized collections
//note early exit here:
"/**	 * Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type.	 *	 * @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes)	 * @return a JoinFragment.XXX join type.	 * @see JoinFragment	 * @see SqlTokenTypes	 */"
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!
//deliberately ignore return value!
//strip leading ", "
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.
//otherwise return the "hydrated" state (ie. associations are not resolved)
// The name of the SQL function that transforms a string to lowercase
//null owner ok??
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...
// automatically makes a column with the default name if none is specifed by XML
// just ignore
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...
// if the property mapping consists of all formulas,  // make it non-updateable
// the user specifically supplied insert="true", // which constitutes an illegal combo
// if the property mapping consists of all formulas,  // make it insertable
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)
//Custom SQL
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );
// return
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);
//bad cast
"/*ArrayList list = new ArrayList();			list.addAll( getKey().getConstraintColumns() );			list.addAll( getIndex().getConstraintColumns() );			getCollectionTable().createUniqueKey(list);*/"
//property-refs for associations defined on a //component are not supported, so no need to slice
// we have an embedded composite identifier
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)
//stops flush being called multiple times if this method is recursively called
// Create a new FROM node for the referenced class.
// performance op to avoid the array search
// now get an existing proxy for each row element (if there is one)
// ORPHAN DELETE (used for programmer error detection)
// empty means no scoping
//Enable for HHH-440, which we don't like:
/*(LockMode) anything*/
//this.forceCacheRefresh = forceCacheRefresh;
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set
// an "embedded" component (composite ids and unique) // note that this does not handle nested components
// and perform the load
// ALIASES
// cache these since they are stateless // this one could even be static...
// a nested composite element
//Must occur after resolving identifiers!
// Get the persister for the _subclass_
// aliases for composite-id's
"//		SQLQueryParser parser = new SQLQueryParser( //				sqlQuery, //				processor.getAlias2Persister(), //				processor.getAlias2Return(), //				aliases, //				collAliases, //				collPersisters, //				suffixes, //				collSuffixes //		); // //		sql = parser.process(); // //		namedParameterBindPoints = parser.getNamedParameters();"
// Fetch embedded identifiers propertynames from the "virtual" identifier component
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush
// embedded composite ids ( alias.idname1, alias.idname2 )
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections
// TODO: skip formulas?
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// invokeinterface // invoke Enabled.getInterceptFieldCallback()
// hibernate seems to ignore this type...
//don't need filters for the static loaders
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock
//do two passes, for collection property-ref!
"/*public boolean dropTemporaryTableAfterUse() {		//we have to, because postgres sets current tx		//to rollback only after a failed create table		return true;	}*/"
// select the correct row by either pk or rowid
"//			optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( //					mappedClass, getterNames, setterNames, propTypes //			);"
//TODO: eventually, rowIdName[j]
//include the discriminator and class-level where, but not filters
//lazy = !join;
//not absolutely necessary, but helps for some //equals()/hashCode() implementations
// this is a property of the table, which we are updating
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)
// This should only be possible if the caches are constructor injected
// transactions marked for rollback-only cause some TM impls to throw exceptions
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression
"// IMPL NOTE : due to the delayed population of setters (setters cached // 		for performance), we really cannot pro0perly define equality for // 		this transformer"
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property
// contained elements:
// for non-inverse one-to-many, with a not-null fk, add a backref!
//to stop the class from being unloaded
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).
// for objects that came in via update()
//use dialect default properties
// increment the version number (if necessary)
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default
//information about all properties in class hierarchy
"//		String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); //		log.info( ""Bytecode provider name : "" + provider ); //		BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); //		settings.setBytecodeProvider( bytecodeProvider );"
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// we are using "all" or "dirty" property-based optimistic locking
// orphans should be deleted during save/update
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string
// do a check
"//			sqlAliasSuffixes[i] = element.getColumnAliasSuffix();"
"//	void setShowSqlEnabled(boolean b) { //		showSql = b; //	} // //	void setFormatSqlEnabled(boolean b) { //		formatSql = b; //	}"
//materialize associations (and initialize the object) later
"//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907"
//fetch="join" overrides default laziness //fetch="join" overrides default laziness
// drop them in reverse order in case db needs it done that way...
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)
"//	public ComponentTuplizerFactory getComponentTuplizerFactory() { //		return componentTuplizerFactory; //	}"
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...
// it is or was referenced _somewhere_
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here
// the root of the incoming property path matched one // of the embedded composite identifier properties
// add normal properties
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// add the discriminator
// handles arrays and newly instantiated collections
// if either its role changed,
//noncritical, swallow and let the other propagate!
// we will need to create new entries
// this piece is needed for usage in select clause
// no-op. We don't own the cache so we shouldn't stop it.
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself
// Get the names of the columns used to link between the collection // owner and the collection elements.
//let's assume that there is only one lazy fetch group, for now!
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type
// don't even bother trying to read any further
// prepend value and type list with null for any positions before the wanted position.
//+ "_" + referencedColumnName not used for backward compatibility
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// this property belongs on the table and is to be inserted
// need to extract the component values and check for subtype replacements...
// add the primary key
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return
"//		registerColumnType( Types.BLOB, 16777215, ""mediumblob"" ); //		registerColumnType( Types.BLOB, 65535, ""blob"" );"
// delegate already handles PK columns
//ie. e.status==DELETED
// kept for backward compatibility until after the 3.1beta5 release of HA
// legacy behavior, apply the bridge...
//if an exception occurs during flush, user must call rollback()
// Turn off includeSubclasses on all FromElements.
// can't just return null here, since that would // cause an owning component to become null
// the object is transient or detached
// Now update only the tables with dirty properties (and the table with the version number)
// Render the SQL query
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );
// TODO : shouldnt inserts be Expectations.NONE?
//a proxy cannot be transient and it breaks ForeignKeys.isTransient
//don't bother trying to update, we know there is no row there yet
// This is the root level node. // Generate an explicit from clause at the root.
// CHECK
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).
//if all fields are null, we might need to delete existing row
//note: updates to joined tables can't be batched...
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// starting index
// object have been loaded with setReadOnly(true); HHH-2236
"/**	 * Build a ResultSetMappingDefinition given a containing element for the ""return-XXX"" elements	 *	 * @param resultSetElem The element containing the return definitions.	 * @param path No clue...	 * @param mappings The current processing state.	 * @return The description of the mappings...	 */"
"//	private List collectionOwnerAliases = new ArrayList(); //	private List collectionAliases = new ArrayList(); //	private List collectionPersisters = new ArrayList(); //	private List collectionResults = new ArrayList();"
// Write any appropriate versioning conditional parameters
//check if the detached object being merged is the parent
//Render the SQL query
// determine if the collection elements are entities...
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued
// Let return-propertys override whatever the persister has for aliases.
// We should use the _current_ object state (ie. after any updates that occurred during flush)
// might need to run a different filter entirely after the flush // because the collection role may have changed
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode
"//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	  oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)"
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead
/* COLUMN and TABLE should be renamed but it would break the public API */
// For many-to-many joins, use the tablename from the queryable collection for the default text.
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;
// For the case of dynamic-update="true", we need to generate the UPDATE SQL
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Default to collections sharing entity cache if there is one
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);
// don't need to check laziness (dirty checking algorithm handles that)
"/*rootTableName = persistentClass.getRootTable().getQualifiedName( 				factory.getDialect(), 				factory.getDefaultCatalog(), 				factory.getDefaultSchema() 		);*/"
// For the case of dynamic-update="false", or no snapshot, we use the static SQL
//abort the save (the object is already saved by a circular cascade)
// if not "get", then try "is"
// remove initial " and "
// Default to sharing the entity cache if there is one
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces
// For the case of dynamic-insert="true", we need to generate the INSERT SQL
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases
// For the case of dynamic-insert="false", use the static SQL
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins
//a shortcut if its location didn't change!
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// new collections that get found + wrapped // during flush shouldn't be ignored
// meant to handle dynamic instantiation queries...
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)
// Always add the collection's query spaces.
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.
// detached collections that get found + reattached // during flush shouldn't be ignored
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.
// we need to utilize dynamic delete statements
// otherwise, utilize the static delete statements
// intentionally empty
"/*public boolean equals(Object other) {		read();		return bag.equals(other);	}	public int hashCode(Object other) {		read();		return bag.hashCode();	}*/"
//final boolean forceCacheRefresh,
//just a performance opt!
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.
// used to set the type of the parent dot node
//all joins join to the pk of the driving table
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type
//notice that we skip the first table; it is the driving table!
// aliases named identifier ( alias.idname )
//skip the driving table
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//get 'em in the right order (not that it really matters)
//NOTE EARLY EXIT!
// trying via forName() first to be as close to DriverManager's semantics
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness
"//	private boolean showSql; //	private boolean formatSql;"
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)
// try to make sure we don't wrap and already wrapped session
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.
//render the where and from parts
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.
// allow these to go through the the real session no matter what
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail
//we *could* regerate this inside each called method!
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//now render the joins
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn
// create a new batch for this type. The batch number is the number of current batches.
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// This will add the new from element to the origin.
//now render the select clause
// The keyword used to insert a row without specifying // any column values
//now tie it all together
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?
//insert/update/delete SQL
// The keyword used to specify a nullable column.
//select SQL
//overriden to avoid System.exit
//no need to check laziness, dirty checking handles that
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Fully resolve the map reference, create implicit joins.
// break the outer loop !!!
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);
// The basic implementation is to simply use the node's text
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using
//cascade to current collection elements
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//not really necessary, but good for consistency...
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used
// we can't cascade to non-embedded elements
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache
//a newly instantiated collection can't have orphans
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates
// check the version unsaved-value, if appropriate
// Create the SessionFactory from hibernate.cfg.xml
// handle orphaned entities!!
// check the id unsaved-value
"// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 		NOTE: decided to put this here rather than in the above loop as I was nervous about the performance //		of the loop-in-loop especially considering this is far more likely the 'edge case'"
// check to see if it is in the second-level cache
//Custom SQL (would be better if these were private)
// our column span is the number of columns in the PK
// For property references generate <tablealias>.<columnname> as <projectionalias>
// KEY
//force immediate execution of the insert
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Loaded entity instances, by EntityUniqueKey
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Identity map of EntityEntry instances, by the entity instance
// Write HTML footer
// Entity proxies, by EntityKey
// delete does cascade to uninitialized collections
// Snapshots of current database state for entities // that have *not* been loaded
// NativeSQL: collect key column and auto-aliases
// Identity map of array holder ArrayHolder instances, by the array instance
//cannot occur
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...
// try "get"
// pass control along to the rest of the processing chain
// Set of EntityKeys of deleted objects
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query
"/*protected void initPropertyPaths(			final String path,			final Type type,			final String[] columns,			final String[] formulaTemplates,			final Mapping factory)	throws MappingException {		//addFormulaPropertyPath(path, type, formulaTemplates);		initPropertyPaths(path, type, columns, formulaTemplates, factory);	}*/"
// Downgrade locks
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();
// do nothing...
// Deserialize //-----------------------------------------------------------------------
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.
"//	public boolean isShowSqlEnabled() { //		return showSql; //	} // //	public boolean isFormatSqlEnabled() { //		return formatSql; //	}"
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set
/*(array==null) ? tempList.size() :*/
//sort the updates by pk
// should be safe to only ever expect EntityPersister references here
//optimize the hash size to eliminate a rehash.
//unwrap the object
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...
// the entity associated with the current action.
// this page intentionally left blank :)
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance
//initialize + unwrap the object
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// do not do anything
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param
//return the proxied object
// else no collection element, but also no owner
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!
//overwrite old proxy
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries
// early exit...
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)
// or should it actually throw an exception?
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...
// The property is a component...
// the ids are fully resolved, so compare them with isDirty(), not isModified()
//cant instantiate
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);
//if it is a property of an embedded component, invoke on the "identifier"
// otherwise:
// starts with the name of a mapped class (new style)
//treat it just like a new collection
// skip finalize methods
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!
//do this work only at the very highest level of the load //don't let this method be called recursively
"//	public static JDBCException newJDBCException(String string, SQLException root, String sql) { //		string = string + "" ["" + sql + ']'; //		log.error(string, root); //		logExceptions(root); //		return new JDBCException(string, root, sql); //	} // //	public static JDBCException newJDBCException(String string, SQLException root) { //		log.error(string, root); //		logExceptions(root); //		return new JDBCException(string, root); //	}"
//note that each iteration of the loop may add new elements
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>
"/* This can never happen because this rule will always eliminate the child NOT.			case NOT:				return x.getFirstChild();			// (NOT (NOT x) ) => (x)*/"
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.
//no point doing this if NONE was requested
// while constructor is running
//there is probably a row there, so try to update //if no rows were updated, we will find out
// note: interface is assumed to already contain HibernateProxy.class
//do nothing to avoid a lazy property initialization
// interfaces // arguments
//Not called at runtime so doesn't matter if its slow :)
//TODO!
// Chop off the rest of the tree.
// Get the caller
// prefer re-generation of identity!
// Get the caller principals
// refresh doesn't cascade to uninitialized collections
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);
"/*public boolean isNonExistant(EntityKey key) {		return nonExistantEntityKeys.contains(key);	}*/"
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().
"/*public boolean isNonExistant(EntityUniqueKey key) {		return nonExistentEntityUniqueKeys.contains(key);	}*/"
//special case ... this is the leaf of the containment graph, even though not immutable
// iterate all the entities currently associated with the persistence context.
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed
// does this entity entry pertain to the entity persister in which we are interested (owner)?
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy
//check if the managed object is the parent
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.
// otherwise, the proxy was pruned during the serialization process
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast
// adds remove as a sort-of alias for delete...
//return lhsPersister.getSubclassPropertyColumnNames(property);
// saves / updates don't cascade to uninitialized collections
//EARLY EXIT
// create our own copy of the user-supplied tuplizer impl map
//if the identifier is quoted, remove the quotes
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)
//truncate the identifier to the max alias length, less the suffix length
//full joins are not supported.. yet!
"//		 You may still have other ResultSets or update counts left to process here //		 but you can't do it now or the ResultSet you just got will be closed"
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1
// properly handle property-ref-based associations
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy
// add another (inner) nested select // add the main query // close off the inner nested select
"//		origin.addDestination( destination ); // This was the cause of HHH-242 //		origin.setType( FROM_FRAGMENT );			// Set the parent node type so that the AST is properly formed. // The destination node will have all the FROM text. // The parent node is a collection join too (voodoo - see JoinProcessor)"
// then handle any user-defined entity modes...
// strip off any leading 'and' token
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available
// if the condition is not already there...
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop
//dontSpace.add("'");
"//	public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {"
//for MySQL
// Detect discriminator values...
"/**	 * Set a custom entity resolver. This entity resolver must be	 * set before addXXX(misc) call.	 * Default value is {@link org.hibernate.util.DTDEntityResolver}	 *	 * @param entityResolver entity resolver to use	 */"
// Handle any filters applied to this collection
//handle a property-ref
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)
//HashMap columnsUnique = new HashMap();
//null caused some problems
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join
// cascade the refresh prior to refreshing this entity
//not sure if this would ever be null but wanted to be careful
//even on inverse="true"
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information
// register hibernate types for default use in scalar sqlquery type auto detection
// If true then execute db updates, otherwise just generate and display updates
// SQLFunction implementation
// we only release the connection
//we only check the version when _upgrading_ lock modes
// deprecated option...
// only carry on if the method has no parameters
//woops we got an instance of another class hierarchy branch
// COMPOSITE-ID
// Create an OuterJoinGenerator for this dialect.
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback
// we need to step through the rows one row at a time (slow)
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Create an DotNode AST for the path and resolve it.
//its already loaded so don't need to hydrate it
// orphans should be deleted during delete
// swallow it, and continue to roll back JTA transaction
"// here, we have two possibilities: // 		1) the property-name matches the explicitly identifier property name //		2) the property-name matches the implicit 'id' property name"
// so the transaction is already rolled back, by JTA spec
// we found a collection element in the result set
// this method is a noop if there is a Synchronization!
// register the standard dialect resolver
// why is all others non final ?
// even though we might find a pre-existing element by join path, we may not be able to reuse it...
// HELLA IMPORTANT OPTIMIZATION!!!
"/*return that.type.equals(type) && 			EqualsHelper.equals(that.value, value);*/"
//null child could occur for no from clause in a filter
// The 'from element' that the property is in.
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping
// WebSphere, however, is not a sane JEE/JTA container...
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.
// for sane JEE/JTA containers, the transaction itself functions as its identifier...
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...
//swallow, the transaction was finished
//will be ignored, using the existing Entry instead
// 60 seconds
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"
// Don't hold a transactional lock for this
// some collections are not lazy:
// Fix up the resident flag
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries
// Set the attributes of the property reference expression.
// the current batch number is the latest batch for this entity type.
//take a snapshot
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables
// Never evict this node
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by
// Create the join element under the from element.
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved
// Moved here from SelectClause [jsd]
// pre-determine and cache the hashcode
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)
// Make sure the root node for the region exists and  // has a DataVersion that never complains
"//			ps.close(); //just close it; do NOT try to return it to the pool! //NOTE: early exit!"
// map of EntityMode -> Tuplizer
//Now write the values of fields onto the prepared statement
// this is a virtual id property...
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)
//this one needed only for guessEntityMode()
"/* will check current level if some of them are not null		 * or sublevels if they exist		 */"
// Build the dynamic-map tuplizer...
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...
// then dom4j tuplizer, if dom4j representation is available
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)
// do the work
// if its an uninitialized proxy it can't be transient
// We've been here before
//return the id, so we can use it to reset the proxy id //return result;
// return false here, as most databases do not properly support this construct...
// put the "standard" tuplizers into the tuplizer map first
// hit the database, after checking the session cache for a snapshot
// found a ctor, but it was not publicly accessible so try to request accessibility
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).
"//	private final SessionFactoryImplementor sessionFactory;"
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object
// cached for efficiency...
// sql server just returns automatically
"//		this.sessionFactory = sessionFactory;"
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//it was not embedded, so the argument is just an id
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance
//where fragment must be empty!
// or its key changed
"//					int parameterStart = getWalker().getNumberOfParametersInSetClause(); //					List allParams = getIdSelectParameterSpecifications(); //					Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();"
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// we will need to remove ye olde entries
// add the current fragment to the THETA_JOINS node
// force initialize!
// lock doesn't cascade to uninitialized collections
//return currentId;
//unquotedIdentifierColumnName = null;
//reset the id
//addInitializedCollection(collection, persister, id);
// CollectionPropertyMapping processes everything except 'index'.
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"
//reset the version
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.
// the default is to simply not lazy fetch properties for now...
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'
// else if it's elements changed
"//		 This assumes you will want to ignore any update counts "
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES
// now rebuild the insertions list. There is a batch for each entry in the name list.
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...
// session-start/post-flush persistent state
// allow the CollectionSnapshot to be serialized
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners
// Add the second join, the one that ends in the destination table.
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE
// Create SQL_TOKEN nodes for the columns.
// "current" means the reference that was found during flush()
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...
// ignore this row of results! Note the early exit
// Add the new node to the map so that we don't create it twice.
"//		return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();"
//not final because proxy factory creation can fail
// Register the FromElement with the FROM clause, now that we have the names and aliases.
// superclass entity-name
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// cascade-save to collections AFTER the collection owner was saved
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...
// "loaded" means the reference that is consistent  // with the current database state
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized
//init the aliases, after initing the constructornode
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed
// Multi-param string dialect functions...
// during flush, we navigate the object graph to // collections and decide what to do with them
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// The 'from element' that represents the elements of the collection.
// legacy behavior (with no abstract attribute specified)
// Constructors are always considered scalar results.
// Get ready to start adding nodes.
//use the id column alias
// Collection Types:
// #3 - note that this is also true of "datetime - :param"...
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)
//note: this affects the return value!
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated
// Generate the inner join -- The elements need to be joined to the collection they are in.
// otherwise, perform a "deep equivalence" check...
// Need to account for allowable '_' within the variant
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.
// If there is no WHERE node, make one.
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch
// Add the type to the list of returned sqlResultTypes.
// create one
// persists don't cascade to uninitialized collections
//lobs cannot be compared
//Blobs are ignored by merge()
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.
//value is the entity name
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)
//optimization
// the map of batch numbers to EntityInsertAction lists
//optimization //optimization
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query
//re-snapshot
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...
// for convenience to save some lookups
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx
//NOTE: this is not updated when properties are fetched lazily!
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.
//EARLY EXIT!
"//	public List getCollectionAliases() { //		return collectionAliases; //	} // //	/*public List getCollectionOwners() { //		return collectionOwners; //	}*/ // //	public List getCollectionOwnerAliases() { //		return collectionOwnerAliases; //	} // //	public List getCollectionPersisters() { //		return collectionPersisters; //	} // //	public Map getAlias2Persister() { //		return alias2Persister; //	} // //	/*public boolean isCollectionInitializer() { //		return isCollectionInitializer; //	}*/ // ////	public List getPersisters() { ////		return persisters; ////	} // //	public Map getAlias2OwnerAlias() { //		return alias2OwnerAlias; //	} // //	public List getScalarTypes() { //		return scalarTypes; //	} //	public List getScalarColumnAliases() { //		return scalarColumnAliases; //	} // //	public List getPropertyResults() { //		return propertyResults; //	} // //	public List getCollectionPropertyResults() { //		return collectionResults; //	} // // //	public Map getAlias2Return() { //		return alias2Return; //	}"
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();
//xml is the entity name
//named query parameter
//tolerates nulls
// check to see if our "propPath" actually // represents a property on the persister
// Add the token to the AST.
// Use the table fromElement and the property name to get the array of column names.
// Set up the cache factory
// we need to strip off the embedded parens so that sql-gen does not double these up
//memory optimization
/*sqlResultTypeList,*/
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).
// metaType is assumed to be single-column type
// End unit of work
// ROW ID
//MULTITABLES
"//			final List extendsQueue,"
// Make sure JBC doesn't look one up
// Get all the select expressions (that we just generated) and render the select.
// visit width-first, then depth
// If the uresolved property path isn't set yet, just use the property name.
// Look through the FromElement's children to find any collections of values that should be fetched...
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...
// collections of values
// copied from Session:
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.
// this should not happen since the DTD prevents it
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT
//check basic level one nullablilty
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.
//values is not null and is checkable, we'll look deeper
// Possibly handle :something parameters for the query ?
//for non null args, check for components and elements containing components
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:
//cache the hashcode
"/*public PropertyProjection project() {		return Projections.property(getPropertyName());	}*/"
//persistent collections may have components
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).
//test out the optimizer:
"//		registerColumnType( Types.VARCHAR, 16777215, ""mediumtext"" );"
// IDENT might be the name of a class.
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster
//TODO!!!
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only
//arbitrary on clause ignored!!
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only
// from javax.naming.Referenceable
// both are Timestamps
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!
// at least one is a plain old Date
//swallow it (the transaction _was_ successful or successfully rolled back)
//check for all components values in the collection
// after *all* persisters and named queries are registered
//do the test
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// If close() is called, guarantee unbind()
// or BYTE // or TEXT? // or MONEY
//noop
"//			        ( implied && DotNode.useThetaStyleImplicitJoins ) ) {"
// if the corresponding SQL value is NULL, the reader we got is NULL as well
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.
// Fetch Reader content up to the end - and put characters in a StringBuffer
// Return StringBuffer content as a large String
// The where clause was added to eliminate this statement from Brute Force Searches.
//or Types.LONGVARCHAR?
//TODO
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them
// for non-arrays, we don't need to know the element class //elementType.returnedClass();
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested
//different nullability rules for pk/fk
// if the types report logical equivalence, return true...
//cache this
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias
//only really need new array during semiresolve!
// classic translator does not support collection of ordinal // param metadata
//unwrap it
// an unfetched association can only point to // an entity that already exists in the db
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases
// let the interceptor inspect the instance to decide
"/*	 * The types represented in the SQL result set.	 *	 * @return The types represented in the SQL result set.	 */"
// let the persister inspect the instance to decide
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//TODO!!!!!!!
// Create a new FILTERS node as a parent of all filters
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.
// Establish the region root node with a non-locking data version
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;
//nothing to do
// we use the assumed value, if there is one, to avoid hitting // the database
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...
//int count = 0;
// putfield // new value of the field
//not really necessary, I guess...
//Clobs are ignored by merge() operation
//the first key found after the given key
// collections cannot be compared
//remember the uk value
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly
// collections don't dirty an unversioned parent entity
// return false;
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception
//NOTE: we avoid joining to the next table if the named property is just the foreign key value
// the key is the owning entity itself, so get the ID from the key
//checkForEnd = false;
//ignore subselect keywords
// copy elements into newly empty target collection
//end of array, start filling again from start
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection
//we ran out of keys to try
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...
//the first id found after the given id
//we ran out of ids to try
// get the elements back into the target making sure to handle dirty flag
// check if collection is currently being loaded
// check if it is already completely loaded, but unowned
// initialize this collection
// create a new collection wrapper, to be initialized later
// Some JDBC drivers erroneously return an empty array here for a null DB value :/
//cannot batch fetch by unique key (property-ref associations)
// we already know current is not null...
//the owner of the association is not the owner of the id
// ----------------------------------------------------------- Constructors
// ----------------------------------------------------- Instance Variables
// --------------------------------------------------------- Public Methods
// Compare the two maps for equality
// Simple tests that require no synchronization
//Sybase fail if we don't do that, sigh...
// stream closed in the finally
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders
// try to "pretty print" it
// otherwise, just dump it
//its an interface so we can't really tell anything...
// use default behavior
//NOTE: early return
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere
// Clone //-----------------------------------------------------------------------
// Serialize //-----------------------------------------------------------------------
// warning: can cause a recursive calls! (proxy initialization)
/* static methods only - hide constructor */
/*&& !('_'==character)*/
// returnign null!
// includes last '.'
// +1 to include the following '.'
// first time we find match!
// entityNames may now include slashes for the representations //classname may be an inner class
// wrapped iterators
// index of current iterator in the wrapped iterators array
// the current iterator
// the last used iterator
//it was a boolean expression
// call this before any Iterator method to make sure that the current Iterator // is not exhausted
//doable if needed
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)
// peek ahead
// if we reach the end of the string w/o finding the // matching end, that is an exception
// there were no queued additions // and the role has a cache
// Print page
// and this is not a forced initialization during flush
// we have a placeholder, spin forward till we find the end
// make sure spinning forward did not put us past the end of the buffer...
// First, try to locate this resource through the current // context classloader.
// Next, try to locate this resource through this class's classloader
// Next, try to locate this resource through the system classloader
// Anywhere else we should look?
// would need an IdentitySet for this!
//Arrays.asList doesn't do primitive arrays
// aload_0
//faster?
//pass the entity-name, if not a collection-id
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement
// the name of a class
// Its the listener class name
//allow 9,8,7,6,5,4,3,2,1
// default to element set if no elements() specified
// look for the instance by uuid
// first, lets determine whether to apply cglib or javassist based instrumentation...
// Make sure we don't override previous set values
//entirely optional!!
// Its the listener instance (or better be)
//readResolveObject
//cfg.setProperty("hibernate.show_sql", "true");
// Defensive, convenience methods
// Make sure you log the exception, as it might be swallowed
// Begin unit of work
// Write HTML header
// Handle actions
// Start the session to be used for this request
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// make the session available to the session factory's "current context"
// remove session from "current context"
// Eager fetch the collection so we can use it detached
"/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode(""participants"", FetchMode.JOIN)                .add( Expression.eq(""id"", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */"
// End of first unit of work
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);
// Begin second unit of work
// Reattachment of aPerson
// The getEmailAddresses() might trigger a lazy load of the collection
// We need our tm, so get it now and avoid doing other work // if there is a problem
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// the cache of the actual plans...
// (AS is always optional, for consistency with SQL/OQL)
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction
// is a primitive type // invokespecial
// Start performing the updates
// array of primitive type // do nothing
// jdbc params are 1-based
// don't care...
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style
//important: reuse the same event instances for performance!
// don't care about other param types here, just those explicitly user-defined...
//handle <=, >=, !=, is not, not between, not in
// named parameter
// could be either an ordinal or JPA-positional parameter
// strip the " where "
// a peek ahead showed this as an JPA-positional parameter
// make sure this "name" is an integral
// at the very least cleanup the data :)
//60 seconds
//cannot be instantiated
// transfer an explicitly defined entity name // handle the lazy attribute
//keep the behavior consistent even for boundary usages
// perform the actual work
//do the failfast put outside the scope of the JTA txn
// get meta's from // <joined-subclass>
//ignore!
// parameters on the property mapping should // override parameters in the typedef
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute
// DYNAMIC INSERT
// so we "clock over" on the first invocation
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// finally handle the exception
// a "detached" collection that belonged to a different entity
"//	void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { //		this.componentTuplizerFactory = componentTuplizerFactory; //	}"
//element //index -> id
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization
//saveOrUpdateCopy() is deprecated!
// Set it!
// collectionPersister should not be null, but we don't want to throw // an exception if it is null
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);
// a "detached" collection that originally belonged to the same entity
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list
"//		 You may still have other ResultSets or update counts left to process here  //		 but you can't do it now or the ResultSet you just got will be closed "
"// Note: For object <-> SQL datatype mappings see: //	 Configuration Manager | Advanced | SQL | System DDL Datatype Mappings // //	TBD	registerColumnType(Types.BINARY,        ""binary($1)""); // changed 08-11-2005, jsl"
// See if the second lookahed token can be an identifier.
// Case 2: The current token is after FROM and before '.'.
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type
// (EQ NULL b) => (IS_NULL b)
// Create nodes that track line and column number.
// Add NOT if it's negated.
// (EQ a NULL) => (IS_NULL a)
// The path AST should be a DotNode, and it should have been evaluated already.
//Force a substitution!
// if // if // Otherwise, handle the error normally.
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock
// now update the object .. has to be outside the main if block above (because of collections)
//Named Queries:
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed
//grab its state saved at deletion
// grab its current state
// this will throw an error if there's something wrong.
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)
//slice, to get the columns for this component //property
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!
// substitutes into values by side-effect
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object
// (NOT (EQ a b) ) => (NE a b)
// compare to cached state (ignoring collections unless versioned)
// if it was dirtied by a collection only
// check nullability but do not perform command execute // we'll use scheduled updates for that.
// This 'dot' expression now refers to the resulting from element.
// (NOT (LIKE a b) ) => (NOT_LIKE a b)
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value
// ie. we never have to null out a reference to // an uninitialized proxy
// (NOT (NOT_LIKE a b) ) => (LIKE a b)
//give the Interceptor a chance to modify property values
//now we might need to recalculate the dirtyProperties array
//use the current version
// object loaded by update()
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack
"// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	* currently, not yet used..."
// dirty check against the usual snapshot of the entity
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility
// wrap up any new collections directly referenced by the object // or its components
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...
// upgrade the lock if necessary: //lock(result, lockMode);
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush
// (NOT (NE a b) ) => (EQ a b)
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in
// Sub-insertions should occur before containing insertion so // Try to do the callback now
// (NOT (LE a b) ) => (GT a b)
// (NOT (GE a b) ) => (LT a b)
// (NOT (LT a b) ) => (GE a b)
//the entity is not associated with the session, so //try interceptor and unsaved-value
// ... and the expected token type was an identifier, then:
// igndore it...
// [jsd] The fix for HHH-558...
// If the token can tell us if it could be an identifier...
// we are now at a new tree level
// dirty check against the database snapshot, if possible/necessary
// the Interceptor handled the dirty checking
// Use the delegate.
// get meta's from <subclass>
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// get the id from the object
// do the put outside the scope of the JTA txn
//what is the version on the database?
/// HHH-2378
//will result in a SQL UPDATE:
//else do nothing (don't even reassociate object!)
// no existing row - do an insert
// --- Inner classes (moved here from sql-gen.g) ---
// reference type
// should be the first, but just to be safe...
//return a proxy if appropriate
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed
// ... and the token could be an identifer and the error is // a mismatched token error ...
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role
// return new uninitialized proxy
// this object was already loaded
// Entity was found in second-level cache...
// intializes result by side-effect
// NOTE : ( max - 1 ) because first is zero-based while max is not...
// A shallow query is ok (although technically there should be no fetching here...)
// Delegate to the QueryLoader...
// Remember the parameters for the compilation.
// -- Package local methods for the QueryLoader delegate --
// double
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );
// Use the token as an identifier.
//some statistics
//safe from concurrent modification because of how entryList() is implemented on IdentityMap
// Transform the tree.
// Parse the query string into an HQL AST.
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()
//only needed during compilation phase...
// Update the status of the object and if necessary, schedule an update
// Schedule updates to collections:
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations
//the database has changed now, so the subselect results need to be invalidated
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set
// PHASE 1 : Parse the HQL into an AST.
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity
//get a snapshot
"/*public final Currency getCurrency(int col) throws HibernateException {		return (Currency) get(col);	}*/"
// right represents a joins originating from left...
// If the query is already compiled, skip the compilation.
// remember that ordinal parameters numbers are 1-based!!!
// all clear
// Ignore the token class name parameter, and use a specific token class.
//this is a query and we are loading multiple instances of the same collection role
// EARLY EXIT!!!
// before any callbacks, etc, so subdeletions see that this deletion happened first
// Ensures that containing deletions happen before sub-deletions
// cascade-delete to collections BEFORE the collection owner is deleted
// cascade-delete to many-to-one AFTER the parent was deleted
// if it is an initialized proxy, let cascade // handle it later on
//assign the requested id to the proxy, *before* //reassociating the proxy
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()
//initialize properties of the event:
//return the id in the event object
//TRANSIENT or DELETED
// assume this is a newly instantiated transient object // which should be saved rather than updated
// this is a transient object with existing persistent state not loaded by the session
// check two "adjecent" nodes at the top of the from-clause tree
//cachedState,
//a "detached" collection!
// if the collection belonged to a different entity, // clean up the existing state of the collection
//log.debug( "calling onLoad()" );
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session
//ie. the entity came in from update()
//we need to check even if it was not initialized, because of delayed adds!
//NOTE: EARLY EXIT!
// if template is null we just write the function out as it appears in the hql statement
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// find any entities that are still transient after retry
// Initialize SQL nodes here.
// Check the persistence context for an entry relating to this // entity to be merged...
//DELETED
// Set the unresolved path in this node and the parent. // Set the text for the parent.
// 60 second lock timeout
"/*				 * Property prop = new Property(); prop.setName(""id"");				 * prop.setPropertyAccessorName(""embedded""); prop.setValue(id);				 * entity.setIdentifierProperty(prop);				 */"
//before cascade!
// continue...; we'll find out if it ends up not getting saved later
// cascade first, so that all unsaved objects get their // copy created before we actually copy
// check that entity id = requestedId
// Not a collection? // Return the entity property mapping.
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:
"//		origin.addDestination(destination); // Add the query spaces."
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.
"//explicit = true;	// This is an explict Select. //ArrayList sqlResultTypeList = new ArrayList();"
//sqlResultTypeList.add( type ); // Generate the select expression.
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...
// cascade first, so that all unsaved objects get their  // copy created before we actually copy
//copyValues works by reflection, so explicitly mark the entity instance dirty
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.
// no need to even collect this information if the persister is considered multi-table
// as soon as we encounter our first letter, return the substring // from that position
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object
//for arrays, replaceElements() may return a different reference, since //the array length might not match
// should not be able to reach last without maxPosition being set // unless there are no results
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch
// PERSISTER
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer
//maintain correct duplication if loaded in a cartesian product
"/*DataSource unpooled = DataSources.unpooledDataSource(				jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS)			);*/"
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array
// long
// Set the existing pool flag to true
// Validate that an alias name was provided to determine which pool to use
// We have created the pool ourselves, so shut it down
//the load() which takes an entity does not pass an entityName
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...
//it does not refer to an alias of a projection, //look for a property
// do nothing for persistent instances
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//assume true, since we don't really know, and it doesn't matter
// Show the modified AST.
// NOTE : firstRow is zero-based
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.
// Tell the dot node about the join type.
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//otherwise recreate the mapping between the collection and its key
// Create a parameter specification for the collection filter...
// Attach any mapping-defined "ORDER BY" fragments
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result
// Make sure that the persister is versioned
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful
// this function has a template -> redirect output and catch the arguments
// use the id assigned to the instance
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()
// If the data type is not an association type, it could not have been in the FROM clause.
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators
//first look for a reference to a projection alias
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// If there are no collection fetches, then no further checks are needed
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.
// Make #@%$^#^&# sure no alias is applied to the table name
// switch
// Use the explicitly declared select expression; determine the // return types indicated by each select token
// select clauses for insert statements should alwasy be treated as shallow
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...
// Alias references and identifiers use the same node class.
// make a new one
// these are just two unrelated table references
// again, both should be FromElements
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.
// PHASE 3 : Generate the SQL.
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)
"//			paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );"
// we are already processing a dot-structure
// Should mean that no such property was found
// Initialize the error handling delegate.
// Was there an explicit select expression?
// Resolve everything up to this dot, but don't resolve the placeholders yet.
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)
// Just add a 'not' parent.
// First, save off the pertinent ids, as the return value
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)
// First, save off the pertinent ids, saving the number of pertinent ids for return
// Start performing the deletes
// Don't forget to resolve the argument! // Resolve the collection function now.
// otherwise, everything ok.
// Re-arrange the tree so that the collection function is the root and the lhs is the path.
//    protected RegionRootListener listener;
// inject the WHERE after the parent
// Never include subclasses for implied from elements.
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root
// Prepare the left hand side and get the data type.
// If this dot has already been resolved, stop now.
// The property is another class..
// Otherwise, this is a primitive type.
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)
// For Timestamps, we default to a separate config
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse
// again, null != null here
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery
// we know only the lhs-hand type, so use that
// the referenced node text is the special 'id'
// only the identifier property field name can be a reference to the associated entity's PK...
// Append the new property name onto the unresolved path.
// Tell the destination fromElement to 'includeSubclasses'.
// If the lhs is a collection, use CollectionPropertyMapping
// Don't resolve the node again.
//lists, arrays //sets, maps, bags
// we have something like : "? [op] rhs"
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another
// Make sure we don't re-release the same cache
// We use a different delegate than the non-optimistic superclass default
// we have something like : "lhs [op] ?"
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );
//isSet = collection.isSet(); //isSorted = collection.isSorted();
// we know only the rhs-hand type, so use that
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit
// Double check the distributed cache
// Get an exclusive right to update JBC for this key from this node.
// one or the other needs to be a datetime for us to get into this method in the first place...
// Add the condition to the join sequence that qualifies the indexed element.
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)
// Now, set the text for this node.  It should be the element columns.
// Get the function return value type, based on the type of the first argument.
// This will call initialize(tok)!
// mutation depends on the types of nodes invloved...
// logic operators by definition resolve to booleans
// Generated select expressions are already resolved, nothing to do.
// The path may be a reference to an alias defined in the parent query.
// The HQL class alias refers to the class name.
// Associate the table alias with the element.
// try the parent FromClause...
// Make sure that all from elements registered with this FROM clause are actually in the AST.
// Invoke setScalarColumnText on each constructor argument.
// Collect the select expressions, skip the first child because it is the class name.
// return an empty Type array
// We ensure ASYNC semantics (JBCACHE-1175)
// if there is no order by, make one
// Initial load from JBC
// Find the WHERE; if there is no WHERE, find the FROM...
// Now, inject the newly built ORDER BY into the tree
// logic operators by definition resolve to boolean.
// Render the identifier select fragment using the table alias.
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).
// will still be issued when it used to be null
// Otherwise, use the property mapping.
// The standard comparator types are not Serializable but are singletons
// ignore!
// Generate implicit joins, only if necessary.
// If the property is a special collection property name, return a CollectionPropertyMapping.
// Collection of components.
// construct the cache
//ie. 60 seconds
// We need to seed the version value as part of this bulk insert
// make sure the lhs is "assignable"...
// false indicates to not generate parens around the assignment
// currently allowed...
// in non-select queries, the only time we should need to join is if we are in a subquery from clause
//return classAlias == null ? className : classAlias;
// This is an explicit FROM element.
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.
// Fetch can't be used with scroll() or iterate().
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.
// we need to wrtap the param in a cast()
// Since this is an explicit FROM element, it can't be implied in the FROM clause.
// Do nothing, eplicit from elements are *always* in the projection list.
// propertyName refers to something like collection.size...
// property name is a sub-path of a component...
// Notify the FROM element that it is being referenced by the select.
// DotNode uses null here...
// We represent a from-clause alias
// we are the RHS of the DOT representing a naked comp-prop-ref
// we represent a naked (simple) prop-ref
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...
// assume this ident's text does *not* refer to a property on the given persister
// just ignore it for now, it'll get resolved later...
// This is not actually a constant, but a reference to FROM element.
// these pieces are needed for usage in select clause
// assume we do *not* refer to a property on the given persister
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)
// set the Transaction Isolation if defined
// naked property-refs cannot be used with an aliased from element
// do *not* over-write the column text, as that has already been // "rendered" during resolve
// Look up class name using the first identifier in the path.
// toggle autoCommit to false if set
// Add to the query spaces.
// return the connection
// If the from element isn't in the same clause, create a new from element.
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join
// Get the configurator files (if available)
// A collection of entities...
// A collection of components...
// Default the Proxool alias setting
// A collection of scalar elements...
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted
// Don't include sub-classes for implied collection joins or subquery joins.
// Treat explict from elements in sub-queries properly.
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Append the stem to the proxool pool alias
// Configured using the JAXP Configurator
// Configured using the Properties File Configurator
// Remember Isolation level
// If the provider was leeching off an existing pool don't close it
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )
// the "root from-element" in correlated subqueries do need this piece
// Create the FROM element for the target (the elements of the collection).
// If the join is implied, then don't include sub-classes on the element.
// not really a many-to-one association *necessarily*
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.
//always overwrite nonversioned data
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.
//public Currency getCurrency(int col) throws HibernateException;
// Get the class name of the associated entity.
// default is POJO
// use setParameter for null values
//  origin, path, implied, columns, classAlias,
/*implied*/
// For implied many-to-many, just add the end join.
// Interceptor returned null, so do the dirtycheck ourself, if possible
// Note this!!
// Error message constants.
// the standard SQL function name is current_timestamp...
//scan for next non-whitespace token
// This causes the factory to instantiate the desired class.
//private Type[] sqlResultTypes;
//private CacheEntry cacheEntry;
"//		TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );"
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...
"/*public Type[] getSqlResultTypes() {		return sqlResultTypes;	}*/"
//sqlResultTypeList.add( type );
// Always add the type to the return type list.
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).
// this entity defines proeprty generation, so process those generated // values...
// add the fetched entities
// just especially for the trivial collection filter
// need to look it up from the persistence-context
//sort first by role name
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//update last non-whitespace token, if necessary
//then by fk
"// nothing to do		"
/*ArrayList sqlResultTypeList,*/
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!
// remove initial ", "
// Generate the select expression.
// now update all changed or added rows fks
"//			boolean put = persister.getCache().insert(ck, cacheEntry);"
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.
// Generate the property select tokens.
// Get the function name node.
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...
// Method expressions in a SELECT should always be considered scalar.
// areturn // return the value of the field
//do nothing - we only need to notify the cache...
//sort first by entity name
// If this is 'elements' then create a new FROM element.
//then by id
// Not elements(x)
// Dialect function
// to be safe...
// Collection 'property function'
// If the constant is an IDENT, figure out what it means...
// no transformations took place, so handle it as we would a // non-instrumented class
// IDENT is a class alias in the FROM.
// Resolve to an identity column.
// see if the entry represents a class file
// Otherwise, it's a literal.
// the name of an entity class
//the class discriminator value
// Add a space before the display text.
// Find or create the WHERE clause
// child == parent.getFirstChild()
// set the name of bulk accessor.
// invokespecial
// aload_1 // load bean
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().
// checkcast // cast bean
// Put the FILTERS node before the HQL condition and theta joins
// astore_3 // store bean
// add the current fragment to the FILTERS node
// Create a new THETA_JOINS node as a parent of all filters
// aload_2 // args
// Put the THETA_JOINS node before the HQL condition, after the filters.
// First, try to get the persister using the given name directly.
// iconst_i // continue to aastore // growing stack is 1
// unable to locate it using this name
// If that didn't work, try using the 'import' name.
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)
// locate the registered function by the given name
// determine the type of the first argument...
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.
// Append the text of the current node.
// If the node has a first child, recurse into the first child.
// new
// If there is a second child (RHS), recurse into that child.
// aload_3 // load the raw bean
// invokevirtual
// aastore // args
// istore_3 // store i
// aload_1 // load the bean
/* current stack len = 0 */
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.
// this is used during SqlGenerator processing
// start region to handling exception (BulkAccessorException)
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.
/*&& StringHelper.isNotEmpty( frag )*/
// iinc 3, 1
// The FROM fragment will probably begin with ', '.  Remove this if it is present.
// aload 4 // load the raw bean
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p
// oracle sql-state code for deadlock
// aload_2 // load the args
// Otherwise, try to use the no-arg constructor
// iconst_i
// eat it and try next
// aaload
// checkcast
//default mode
// checkcast (case of reference type)
/* current stack len = 2 */
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible
// end region to handling exception (BulkAccessorException)
// register in exception table
// Private constructor - stops checkstyle from complaining.
//reset the dotcount (but not the path) //after reset!
//after reset!
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here
// dotcount>=2
/* local variables | target obj | each oldvalue | */
// astore 5 // store exception
// aload 5 // load exception
/* | this | bean | args | raw bean | */
// iload_3 // i
// Do the corresponding RHS
// invokespecial // BulkAccessorException.<init>
// athrow
// WARNING: classfile only
//if its "id"
//swallow
//or its the id property name
//join = q.createJoinFragment(useThetaStyleJoin);
/* local variable | this | */
//important!!
// an association
// aload_0 // load this
//allow index() function:
// aload_1 // load callback
// case of non-static field
// log a message about potential connection leaks
// getfield // get each field
// ifnonnull
// *return // each type
// *store_1 // each type
//many-to-many
// ldc // name of the field
//opening paren in new Foo ( ... )
//if we are inside a new Result(), but not inside a nested function
// invokeinterface // invoke Callback.read*() // each type
//special case
// the name of an SQL function
//this is basically a copy/paste of OrderByParser ... might be worth refactoring
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p
// return aliases not supported in classic translator!
//register collection role
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.
// The keyword used to specify an identity column, if identity column key generation is supported.
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows
//crossJoins.add(name);
//ie no select clause in HQL
// invokeinterface // enabled.getInterceptFieldCallback()
// ifnonnull (label1)
// we are the LHS of the DOT representing a naked comp-prop-ref
// *load_1
//ie. no select clause
// putfield
//there _was_ a select clause
// return ;
// ldc // field name
// getfield // old value of the field
// return the concrete type, or the underlying type if a concrete type // was not specified
// not array
// array of reference type
//q.addCollection(collectionName, collectionRole);
// boolean
// char
// short
// classic parser does not support bulk manipulation statements
// float
// This is called when it's time to fully resolve a path expression.
// can't cache this stuff either (per-invocation)
// This is the legacy behaviour for HQL queries...
// bad type
// not known!
// boolean, byte, char, int, short
//Need this, since join condition can appear inside parens!
//expressionOpeners.add(","); // deliberately excluded
//Mainly for OSCache
//decrement the lock
//recache the updated state
// noop
//null clientLock is remotely possible but will never happen in practice
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.
// disassemble positional parameters
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)
// this is called from SettingsFactory irregardless; trivial to simply disregard
// Do nothing; subclasses may override.
// TABLE
//Inside a BETWEEN ... AND ... expression
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean
//ie. a many-to-many
//Cope with [,]
//Cope with a continued path expression (ie. ].baz)
//Cope with a subselect
// use the id value of a newly instantiated instance as the unsaved-value
//Close extra brackets we opened
//take note when this is a boolean expression
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load
// no-op; CCS did not have such a concept
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.
//process a token, mapping OO path expressions to SQL expressions
//Open any extra brackets we might need.
//Cope with special cases of AND, NOT, )
// the next one up must also be
// Add any joins
// get meta's from <hibernate-mapping>
// get meta's from <class>
//path expression
// DB-OBJECTNAME
// just decrement the lock, don't recache // (we don't know which transaction won)
// MUTABLE
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!
// WHERE
// POLYMORPHISM
// properties that we have tried to load, and not found in the database
// the path expression continues after a ]
// careful with this!
// the path expression ends at the ]
// "finish off" the join
//NOTICE: no " or . since they are part of (compound) identifiers
//cannot instantiate
// start by looking for HQL keywords...
// inner joins can be abbreviated to 'join'
// 'outer' is optional and is ignored
// now anything that is not a HQL keyword
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions
// treat it as a classname
// treat it as a path expression
// starts with a path expression (new style)
//allow ODMG OQL style: from Person p, p.cars c
//handle quoted strings
// VERSION / TIMESTAMP
// Primary key constraint
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity
//ignore whitespace
//do replacements
//handle HQL2 collection syntax
// uuid.hex is deprecated
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//hilo params
//sql = query;
//for EJB3
// performance opt
//sql = update;
//hilo config
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");
//count++;
// go ahead and set the lazy here, since pojo.proxy can override it.
// DYNAMIC UPDATE
// IMPORT
// BATCH SIZE
// we need to dirty check collections, since they can cause an owner // version number increment
// SELECT BEFORE UPDATE
// OPTIMISTIC LOCK MODE
//first element of array is reserved for the actual instance we are loading!
// do nothing until we hit the rsult set containing the generated id
// Use the delegate, resolve identifiers as FROM element aliases.
// Loaded entity instances, by EntityKey
// if the given name is un-qualified we may neen to qualify it
// the default...
// cascade-save to many-to-one BEFORE the parent is saved
// properties
// joined subclasses
//even process null collections
//keep the existing version number in the case of replicate!
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );
// Identity map of CollectionEntry instances, by the collection wrapper
// TABLENAME
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// join.getKey().setType( new Type( lazz.getIdentifier() ) );
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~
// prepare and execute the insert
// COLUMN(S)
// if everything went ok, commit the transaction and close the obtained // connection handle...
//fetch the generated id in a separate query
// we just hit the last position
// scroll ahead
// scroll backward
// column index
// we have not yet hit the last result...
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//column unique-key
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Caches
//Generators:
// cache region is defined by the root-class in the hierarchy...
//JNDI + Serialization:
//checking for named queries
//stats
// Check named HQL queries
//prevents this session from adding things to cache
//for a dynamic-class
//test this entity to see if we must query it
//NOTE EARLY EXIT
// for backward-compatability
// ignore this error for now
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization
// look for existing collection as part of the persistence context
// Make sure this is a defined parameter and check the incoming value type
// for each of the defined parameters, make sure its value // has been set
//we never need to apply locks to the SQL
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// select-range is terminated by declaration of "from"
// for an any
// insertable simply because that is the user did not specify // anything; just override it
// properties generated on update can never be updateable...
// updateable only because the user did not specify  // anything; just override it
// the user specifically supplied update="true", // which constitutes an illegal combo
// ROLENAME
// first, try to load it from the temp PC associated to this SS
// otherwise immediately materialize it
// no auto-flushing to support in stateless session
// FETCH STRATEGY
//after setting values to object, entityMode
// SORT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// unsorted, natural, comparator.class.name
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// set up second pass
// do not auto-flush while outside a transaction
// this is an internal error of some sort...
//do not return a proxy! //(this option indicates we are initializing a proxy)
// for an any // we will have to use reflection
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query
// not for internal use:
// otherwise, we only need to flush if there are in-memory changes // to the queried tables
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted
// decode row selection...
// basically just an adapted copy of find(CriteriaImpl)
// we need to writeObject() on this since interceptor is user defined
// the old-time stand-by...
// parameter bind values...
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy
// use old (HB 2.1) defaults if outer-join is specified
// we have a CGLIB enhanced entity
// we have a Javassist enhanced entity
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// should *not* need to grow beyond the size of the total number of columns in the rs
// should probably no-op commit/rollback here, at least in JTA scenarios
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// explicitly perform no checking...
// used from testsuite
// GENERATOR
// register synch; stats.connect()
// calls executeBatch()
//no big deal
// no big deal
// see explanation above...
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.
// EARLY EXIT!!!!
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ID UNSAVED-VALUE
// VERSION UNSAVED-VALUE
// not necessarily a *unique* property reference
// Bind the where
// refer to comment in StatefulPersistenceContext.addCollection()
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Note : success = false, because we don't know the outcome of the transaction
// Bind the order-by
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.
// Bind the filters
"// overriding inherited meta attribute. HBX-621 & HBX-793			"
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.
//SessionFactory name:
//JDBC and connection settings:
//Interrogate JDBC metadata
// user supplied JDBC connections
// Transaction settings:
//SQL Generation settings:
//Query parser settings:
// Second-level / query cache:
//SQL Exception converter:
//Statistics and logging:
//postInitialize() will be called after initialization
// cannot handle single quotes
//Schema export:
"// todo : for 4.0 //	private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); // this is the legacy logging 'category'..."
//if dotted and not load-collection nor return-join //regular property
// don't even bother trying to read further
"//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 //	private BytecodeProvider bytecodeProvider;"
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// generated properties can *never* be insertable...
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"//	public BytecodeProvider getBytecodeProvider() { //		return bytecodeProvider; //	} // //	void setBytecodeProvider(BytecodeProvider bytecodeProvider) { //		this.bytecodeProvider = bytecodeProvider; //	}"
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map
"//	protected List extendsQueue;"
"//		extendsQueue = new ArrayList();"
"//		componentTuplizerFactory = new ComponentTuplizerFactory();"
// if doc is null, then for whatever reason, the cached file cannot be used...
// position cursor to the last row
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading
// This method may be called many times!!
// force the proxy to resolve itself
// this is equivalent to the old behavior...
//if null, owner will be retrieved from session
"//			Iterator iterator = extendsQueue.iterator();"
"//		Iterator iter = extendsQueue.iterator();"
// found
//final String queryString,
"//	private final List extendsQueue;"
//<String, String>
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227
//orphan delete not supported for EntityMode.DOM4J
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );
//we can reuse it for each row
//can't reuse in this case
//needed for SOAP libraries, etc
// any earlier proxy takes precedence
// First we need to suspend any current JTA transaction and obtain // a JDBC connection
//if we only returned one entity, query by key is more efficient
// the element has been removed from the set
// the element has changed
//Careful: these methods do not initialize the collection.
//needed so that we remove this collection from the second-level cache
// override on some subclasses
//override on some subclasses
//do this bit after setting initialized to true or it will recurse
// create the collection holding the Orphans
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access
// iterate over the *old* list
/*(array==null) ? tempList.get(i) :*/
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)
//write(); -- doesn't
// this is the regression style determination which matches the logic of the classic translator
// handle empty collection
//handle empty collections
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)
// finally, what it's all about...
// here we do not bother with the discriminator.
// validate() instances of Validatable
//null version means the object is in the process of being loaded somewhere else in the ResultSet
//problematic for <key-many-to-one>!
//use the id passed in
// The property is a collection...
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!
//search for it //note that this code is incorrect for other than one-to-many
//a composite key
// if no batch, use "foo = ? and bar = ?"
//it must be a collection fetch
// needed later for many-to-many/filter application
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...
// belong to other persister // belong to other persister
// we found it
//we can use an inner join for the many-to-many
//disable a join back to this same association
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!
//alias may be null //EARLY EXIT
// if it is a compound path
// if its the root criteria, we are done
// otherwise, recurse
//the criteria instance
// the entity name
//not found in inner query , try the outer query
//it refers to an alias of a projection
//should never happen, i think
// Convert the string value into the proper type.
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us
// Otherwise, this is an ordinary value.
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")
// List OPERATIONS:
"//	private final String[] sqlAliases; //	private final String[] sqlAliasSuffixes;"
// this is only needed (afaict) for ResultTransformer processing...
// replace {....} with corresponding column aliases
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop
// apend everything up until the next encountered open brace
//pad with nulls from the current last element up to the new index
// it is a simple table alias {foo}
// passing through anything we do not know : to support jdbc escape sequences HB-898
// The current alias is referencing the collection to be eagerly fetched
// it is a property reference {foo.bar}
"//	private final List scalarTypes = new ArrayList(); //	private final List scalarColumnAliases = new ArrayList();"
// Now, process the returns
// already been processed...
// Make sure the owner alias is known...
"//		scalarColumnAliases.add( typeReturn.getColumnAlias() ); //		scalarTypes.add( typeReturn.getType() );"
// If this return's alias has not been processed yet, do so b4 further processing of this return
"//			collectionOwnerAliases.add( ownerAlias );"
// from Map
// from SortedMap
// cannot be instantiated
//inject the data
//default pool size 20
// if debug level is enabled, then log the password, otherwise mask it
// register a cleanup synch
// wrap the session in the transaction-protection proxy
// then bind it
// limit the methods available if no transaction is active
// allow these (deprecated) methods to pass through
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!
//private String propertyName;
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );
//" collection_ where " +
//unsupported
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"
// currently only the Hibernate-supplied DbTimestampType is supported here
//implicit polymorphism not supported (would need a union)
//pull off the last ", "
//always do an INSERT, and let it fail by constraint violation
//by default, natural-ids are "immutable" (constant)
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)
// astore 4 // store the raw bean
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...
// grrr... for differentiation of mysql storage engines
//String[] keyCols = collPersister.getKeyColumnNames();
// Oracle did add support for ANSI CASE statements in 9i
//refresh() does not pass an entityName
// Informix doesn't have a bit type
// (NOT (GT a b) ) => (LE a b)
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~
//pre H3.2 behavior: super.getReturnType(ct, m);
// finally use the sqltype if == on Hibernate types did not find a match.
//because numeric can be anything
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// standard sql92 functions (can be overridden by subclasses)
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// by default we report no support
//sqlResultTypes = selectClause.getSqlResultTypes();
// by default we report no support for NOWAIT lock semantics
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//by default
// This is now handled earlier in this method.
// -- Loader implementation --
// -- Loader overrides --
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)
// here assume SQLServer2005 using snapshot isolation, which does not have this problem
// --- Query translator methods ---
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time
//" cascade";
// -- Implementation private methods --
//trim off the length/precision/scale
// CHECK VIOLATION
// UNIQUE VIOLATION
// FOREIGN KEY VIOLATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user
// to support dialects that have their own identity data type
// NOT NULL VIOLATION
// ALL OTHER
// Register the type of the out param - PostgreSQL uses Types.OTHER
// seems to have spotty LOB suppport
// HHH-2300
// ignore (probably H2 not in the classpath)
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//used also for generation of FK names!
//usually useless
//do not add unique constraint on DB not supporting unique and nullable columns
//for backward compatibility, disable this:
//may be final //may be final //may be final
//may be final
// may be final
// Custom SQL
//Primary key constraint
// ignore it...
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// not null is implicit
// Display the dialect version.
// nothing to do in a stateful session
// The RDMS concat() function only supports 2 parameters
//flat recursive algorithm
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Original Dialect.java returns " for update";
//pass the column name (a generated id almost always has a single column)
//needed to satisfy KeyValue
// Verify the state of this new method in Hibernate 3.0 Dialect.java
// Origial Dialect.java returns true;
// index should be last column listed
// *** Sequence methods - start. The RDMS dialect needs these
// methods to make it possible to use the Native Id generator
//if it is a formula index, use the element columns in the PK
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns
// *** Sequence methods - end
// Used with DROP TABLE to delete all records in the table.
// no foreign key element of for a one-to-many
//TODO: we could just return all false...
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints
// the object is persistent
// RDMS supports the UNION ALL clause.
// Multi-param dialect functions...
// function templates
//not null is implicit
// this assumes schema support, which is present in 1.8.0 and later...
// HSQLDB only supports READ_UNCOMMITTED transaction isolation
//the entity is associated with the session, so check its status
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.
// new methods in dialect3
"/*public boolean supportsForUpdateNowait() {		return false;	}*/"
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...
// iterate entries ordered by capacity to find first fit
// add new ordered map
// expected type is intrinsic here...
//return memberPersister.getPropertyType(propertyName);
//return memberPersister.toColumns(alias, propertyName);
//return memberPersister.getType();
/*&& !indexIsFormula*/
"//		return !isOneToMany();"
//instanceof AssociationType;
// we need to determine the best way to know that two joinables // represent a single many-to-many...
//strip leading ','
//public boolean isSubselectLoadable();
//columns
//SQL statements
//extra information about the element type
//types
// custom sql
//private final String unquotedIdentifierColumnName;
"//		return ""select CURRENT_TIMESTAMP from RDB$DATABASE"";"
// dynamic filters specifically for many-to-many inside the collection
// dynamic filters for the collection
//registerColumnType data types
// IBID for current_time and current_date
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)
// Tell hibernate to use getBytes instead of getBinaryStream
// No batch statements
//ELEMENT
"/*		 * We might want a special case for 19,2. This is very common for money types		 * and here it is converted to 18,1		 */"
//no pointbase BIT
//no pointbase TINYINT
// NativeSQL: collect element column and auto-aliases
// INDEX AND ROW SELECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table
// NativeSQL: collect index column and auto-aliases
"//		registerColumnType( Types.CLOB, 16777215, ""mediumtext"" ); //		registerColumnType( Types.CLOB, 65535, ""text"" );"
"//		registerColumnType( Types.VARCHAR, 16777215, ""mediumtext"" ); //		registerColumnType( Types.VARCHAR, 65535, ""text"" );"
//GENERATE THE SQL:
//not all classpersisters implement PropertyMapping!
// Handle any filters applied to this collection for many-to-many
//if there is a user-specified loader, return that //TODO: filters!?
"// Take care of any entities that might have // been evicted!	"
// Run a subquery loader
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that
//Sybase BIT type does not support null values
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).
//needed by arrays
"//		 This assumes you will want to ignore any update counts"
//TODO: something with formulas...
//an assertion
// Remove all the old entries
//create all the new entries
//delete all the deleted entries
//insert all the new entries
