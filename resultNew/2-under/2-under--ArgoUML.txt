Iterator it = getPathItemFigs().iterator(); while (it.hasNext()) {
if (settings == null) { Project p = getProject();
return new SelectionRerouteEdge(this); }
LOG.error("Exception", e); }
File theFile = new File(saveDir, defaultName + "." + SaveGraphicsManager.getInstance().getDefaultSuffix());
return handle instanceof Component && false; // has <<subsystem>> stereotype
return String.class; }
// forceRepaintShadow(); }
private static PopupToolBoxButton buildPopupToolBoxButton(Object[] actions, boolean rollover) {
public final void focusLost(FocusEvent arg0) { doOnEdit(getEditor().getItem());
void nodeAdded(Object source, Object arg); void edgeAdded(Object source, Object arg);
setGraphModel(createGraphModel()); }
if (value instanceof Collection) { Collection newValue = new ArrayList();
private CollabDiagramGraphModel createGraphModel() { if ((getGraphModel() instanceof CollabDiagramGraphModel)) {
return Collections.emptyList(); }
return Collections.EMPTY_SET; }
Stereotype stereo2 = (Stereotype) extensionHelper.getStereotype(ns, stereo);
public Object getStateMachine() { GraphModel gm = getGraphModel();
extent.refDelete(); }
public TargetManagerPanel() { setLayout(new BorderLayout());
long startTime = System.currentTimeMillis(); if (nsa == null || type == null) {
private void translateWithContents(int dx) { for (Fig f : getFigPool().getEnclosedFigs()) {
if (contained(nsa, me)) { returnElements.add(me);
try { setName(name);
/* 4.5.2.18 ElementOwnership */ 
/* This solves issue 2287. */ tree.refreshSelection();
damage(); }
Usage usage = createUsage(); usage.getSupplier().add((ModelElement) supplier);
public List<String> getSearchPathList(); 
addTrigger("end_navigable"); }
tree.expandPath(tree.getPathForRow(1)); }
public class CrOppEndConflict extends CrUML { 
if (c == null) { throw (new UnresolvableException("Critic is null"));
p.addMember(model); parseXmiExtensions(p);
class UMLPartitionContentListModel extends  UMLModelElementListModel { 
LOG.error("Error registering profile " + p.getDisplayName()); throw e;
image = new BufferedImage(width, scaledBufferHeight, imageType); 
val = new ArrayList<String>(); defaultOut(node);
public StereotypeStyle getDefaultStereotypeView() { if (defaultStereotypeView == null) {
if (target instanceof FigEdgeModelElement) { hasEditableBoundingBox(false);
Project p = ProjectManager.getManager().getCurrentProject(); return super.isGenerateMementos() && p != null
public void remove(); 
if (UndoManager.getInstance().isGenerateMementos()) { UndoManager.getInstance().addMemento(memento);
FigRect fr = new FigRect(X0, Y0, 160, 200, DEBUG_COLOR, DEBUG_COLOR); fr.setFilled(false);
* @author jaap.branderhorst * @author penyaskito
int threshold = getThreshold(); Collection aes = Model.getFacade().getAssociationEnds(dm);
// self associations are special cases. No need to let the maze // runner find the way.
* @param threshold The threshold to compare to. */
/** * Add a concurrent region to a concurrent composite state
private static Object findNamespace(Object phantomNS, Object targetModel) { Object ns = null;
if (Model.getFacade().isASignal(value)) { icon = signalIcon;
* @since Jan 3, 2003 */
private volatile ListSet allOffenders; 
Class<?>[] interfaces = expression.getClass().getInterfaces(); iSel = -1;
public ListSet getOffenders() { // Extra care to be taken since allOffenders can be reset while
public interface ControlMech  { 
* @param o the given object * @return true if one of my figs has the given object as owner
LOG.debug("single: " + topLevelTabbedPane.getComponentAt(tab).toString());
tagValue = ""; // tagValue = true;
// TODO: Do nothing until code is reviewed if (true) {
Designer.disableCritiquing(); Designer.clearCritiquing();
{Abstraction.class, UmlClass.class, Interface.class, null, }, // The next 3 restrictions for Abstraction seem to be Argo specific
return null; }
return Property.class; }
boolean bContinue = true; for (int i = 1; i < tabValues.length && bContinue; i += 2) {
PersistenceManager.getInstance() .getDiagramMemberFilePersister();
private JPopupMenu popupMenu; 
int serial = getDiagramCount(); while (!isValidDiagramName(d.getName())) {
public void setDecisionPriority(String decision, int priority) { decisions.setDecisionPriority(decision, priority);
Object temp[] = node.getActualParameterListTail().toArray(); for (int i = 0; i < temp.length; i++) {
if (uri == null) { return UNTITLED_FILE;
mclassifier.getFeature().clear(); mclassifier.getFeature().addAll(result);
InputSource source = new InputSource(new XmiInputStream(
* @param e the element */
protected void updateBounds() { if (!isCheckSize()) {
minimumHeight = headFig.getMinimumHeight() + 10; 
return results; }
* @see org.xml.sax.ContentHandler#characters(char[], int, int) */
return handle instanceof Property && ((Property) handle).getClass_() != null;
panel.registerKeyboardAction(shortcut.getActionInstance(), keyStroke, JComponent.WHEN_FOCUSED);
if (!(handle instanceof InstanceSpecification)) { return false;
public void remove() { List<Fig> contents = new ArrayList<Fig>(getLayer().getContents());
Project project = getProject(); if (project == null) {
private static final int MAX_ROW_WIDTH = 1200; 
for (Object stereotype : Model.getFacade().getStereotypes(newOwner)) {
LOG.debug("single: " + topLevelTabbedPane.getComponentAt(tab).toString());
if (bodies.size() > 1) { throw new IllegalStateException(
// Why does the text get added to ALL the elements on the stack? - tfm //        for (int i = 0; i < nElements; i++) {
setForeground(Color.blue); setSelectionForeground(Color.blue.darker());
popUpActions.addElement( new ActionAddConcurrentRegion());
//   public void setGoalInfo(String goal, String info) { //     _goals.put(goal, info);
long critiqueStartTime; long cutoffTime;
critiquerThread = new Thread(this, "CritiquingThread"); critiquerThread.setDaemon(true);
* @param d the designer * @param reasonCode the reason
((ArgoDiagram) diagram).setDiagramSettings(getDiagramSettings()); super.setDiagram(diagram);
public void vetoableChange(PropertyChangeEvent pce) { SwingUtilities.invokeLater(new Runnable() {
/** * Interface to be implementable by figures which can be highlighted to visually
private UndoManager undoManager = new DefaultUndoManager(this); 
if ((node instanceof ToDoItem) && !flatChildren.contains(node)) { flatChildren.add((ToDoItem) node);
//        uri = PersistenceManager.getInstance().fixUriExtension(theProjectUri); uri = theProjectUri;
Object ep = Model.getUseCasesFactory().createExtensionPoint();
getClass().getResource(modelPath).toExternalForm()); inputSource.setPublicId(new File(modelPath).getName());
if (true) { return;
* @param overwrite if true, the file is going to be overwritten * @param file      the target file
if (o instanceof CompositeState) { // This enforces the following well-formedness rule.
if (feature.equals("clientDependency")) { return new HashSet<Object>(Model.getFacade()
if ((res.width + res.x) > 6000) { res.width = 6000 - res.x;
critique = (ArgoJMenu) add(new ArgoJMenu(MENU + prepareKey("Critique")));
getNameFig().setLineWidth(0); getNameFig().setBounds(getInitialX() + 2, getInitialY() + 2,
private ActionSettings settingsAction; private ActionAboutArgoUML aboutAction;
if (type == UMLClassDiagram.class) { diagram = new UMLClassDiagram(namespace);
if (myName == null || myName.equals("")) { return NO_PROBLEM;
// GenericArgoMenuBar, but should  be fixed if project open/close is moved // out of ProjectBrowser.
return (parFlavor.getMimeType().equals( DataFlavor.imageFlavor.getMimeType()) && parFlavor
addAllUniqueModelElementsFrom(availableTagDefs, paths, Model.getModelManagementHelper().getAllModelElementsOfKind(
showUml2warning = false; } else {
if (modelImpl.getFacade().isAPackage(ns)) { returnList.addAll(getAllImportedClassifiers(ns));
performCommandsInternal(commands); commands = null;
System.setProperty( "sun.awt.exception.handler",
Rectangle bounds = new Rectangle( f.getX() + FigConcurrentRegion.INSET_HORZ,
private void setLastModified(Project project, File file) { // set the lastModified value
protected void applyArrowHeads() { if (srcEnd == null || destEnd == null) {
nameFig.setFilled(true); nameFig.setText(placeString());
if (showUml2warning && Model.getFacade().getUmlVersion().startsWith("2")) {
public class UMLStimulusActionTextProperty  { 
if (Model.getFacade().isAClassifierRole(element)) { ports.addAll(Model.getFacade().getSentMessages(element));
* @see junit.framework.TestCase#setUp() */
void deleteEnumeration(Object elem) { if (!(elem instanceof Enumeration)) {
if (Model.getFacade().getUmlVersion().charAt(0) == '1') { return createMessage1(fromPort, toPort, messageSort);
// TODO: Must be the incoming messages or the sent ones? if (Model.getFacade().isAClassifierRole(element)) {
public final class ArgoEventPump { /**
public Object createAbstraction(); 
f.setTitle(Translator.localize(title)); AbstractArgoJPanel newPanel = (AbstractArgoJPanel) clone();
*            the Class or null * @return String
*            the Class or null * @return String
if (!(client instanceof TemplateableElement)) { throw new IllegalArgumentException(
return false; }
* Collects all the packages participating in a package dependency cycle * which originates from this package.
*                is the value * @deprecated for 0.25.5 by tfmorris. Use
org.tigris.gef.util.ResourceLoader.addResourceExtension("gif"); org.tigris.gef.util.ResourceLoader.addResourceExtension("png");
*            the Class or null * @return String
throw new NotYetImplementedException(); }
return "2.2"; //$NON-NLS-1$ }
LOG.warn("Not yet implemented - returning empty"); return Collections.emptySet();
operation.setName("newOperation"); }
Collection<Classifier> listToRemove = new ArrayList<Classifier>(); for (Classifier classifier : returnList) {
new String[] {eventName }); }
public ListSet getOffenders() { // TODO: should not be using assert here but I don't want to change to
try { for (Object o : ((Namespace) ns).getOwnedElement()) {
if (metatypeName.equals(mofClass.getName())) { return mofClass;
public class GoalModel extends Observable implements Serializable { private List<Goal> goals = new ArrayList<Goal>();
names[i++] = mofClass.getName(); }
modelImpl.getExtensionMechanismsFactory().buildStereotype(per, ModelManagementHelper.IMPORT_STEREOTYPE,
if (elem instanceof Element) { getCore().deleteElement(elem);
public Object getDefaultAttributeType(); 
synchronized (lock) { if (elementsToBeDeleted.contains(elem)) {
getCore().deleteEnumeration(elem); } else if (elem instanceof ProgrammingLanguageDataType) {
// 4.5.3.20 [2] No GeneralizableElement can have a parent // Generalization to an element that is a leaf.
// Create add and remove buttons if needed first if (addAction != null) {
SwingUIFactory builder = new SwingUIFactory(); builder.createGUI(target, panel);
public void refresh() { setTarget(target); } 
synchronized (items) { for (ToDoItem item : items) {
public abstract JPanel makePanel(int newStep); 
TabToDo ttd = (TabToDo) ProjectBrowser.getInstance().getTab(TabToDo.class);
Localizer.addResource("GefBase", "org.tigris.gef.base.BaseResourceBundle");
*            The stereotype to copy from. * @param target
Localizer.addResource("GefBase", "org.tigris.gef.base.BaseResourceBundle");
public static Locale[] getLocales() { return new Locale[] {
public Object getDefaultAttributeType(); 
* @see #buildClass() */
evt = sMFactory.buildTimeEvent(s, ns); weHaveAnEvent = true;
* @see #buildClass() */
public void moveToTrash(Object obj); 
return Component.class; }
Object getPackage(Object handle); 
public void updateRoots() { if (Model.getFacade().getUmlVersion().charAt(0) == '1') {
class SimpleStateTransformer implements Transformer { 
public class TestModelEventPump extends TestCase { 
private void computeExtensionLocations() { // Use a little trick to find out where Argo is being loaded from.
public String getUniqueDiagramName() { String s = uniqueName;
addModelInternal(theRoot); roots.clear();
LOG.debug("Deleting last diagram - creating new default diag"); Object projectRoot = getRoot();
public NotationSettings() { super();
String tagName = Facade.DERIVED_TAG; Object taggedValue = Model.getFacade().getTaggedValue(umlObject, tagName);
} }
public void testAttributeNewTypeNamespace() throws ParseException { Object attr;
} }
attributeSpecialStrings[assPos++] = new PropertySpecialString("addonly",
ZipEntry zipEntry = new ZipEntry(PersistenceManager.getInstance()
if (majval <= 0) { while (it.hasNext()) {
public static String encode(String str) { StringBuffer sb;
if (expr != null) { language = Model.getDataTypesHelper().getLanguage(expr);
fooClass = project.findType( "testProjectWithUserDefinedProfilePersistency-class", false);
public class CrConsiderFacade extends CrUML { 
// forceRepaintShadow(); }
throw new XmiFormatException(ex); }
*            the project to save * @throws SaveException
String xmiEntry = getEntryNames(file, ".xmi").iterator().next(); MemberFilePersister persister = getMemberFilePersister("xmi");
public final class ModeInspectorPanel extends JPanel implements ModeChangeListener { 
String name = attrList.getValue("name"); if (name != null && !name.equals("")) {
private void addTranslations() { addTranslation("org.argouml.uml.diagram.ui.FigNote",
/** * The PGML Parser.
private void setStyleAttributes(Fig fig, Map<String, String> attributeMap) { String name;
Editor editor = Globals.curEditor(); if (editor == null) {
Diagram d = super.readDiagram(is, closeStream); 
// Fig(Rectangle, DiagramSettings) for (Constructor constructor : constructors) {
Object parameters[] = new Object[2]; parameters[0] = bounds;
* @return "0"=hidden, null=shown */
public final class ModeInspectorPanel extends JPanel implements ModeChangeListener { 
for (Class clazz : persistersByClass.keySet()) { if (clazz.isAssignableFrom(pm.getClass())) {
* @throws DOMException * @throws ParserConfigurationException
public class TestXmiReaderImpl extends TestCase { 
loadModel(); return displayName;
if (str.equals("Class")) { dms.add(Model.getMetaTypes().getUMLClass());
private List<CrOCL> getAllCritiquesInModel() { List<CrOCL> ret = new ArrayList<CrOCL>();
for (Object object : packages) { if (Model.getFacade().isAPackage(object)) {
throw new RuntimeException(); }
CoreProfileReference.setProfileDirectory("uml22"); profileReference =
if (subject == null) { subject = vt.get("self");
List<String> vars = (ArrayList<String>) parameters[0]; Object exp = parameters[1];
public class UndoUmlHelperDecorator extends AbstractUmlHelperDecorator { 
throw new UnsupportedFlavorException(dataFlavor); }
UndoManager.getInstance().empty(); }
// solution for the fill color, better find a more general solution: // (I don't know if it's undoable this way - thn)
ArgoDiagram activeDiagram = DiagramUtils.getActiveDiagram(); for (Object t : TargetManager.getInstance().getTargets()) {
Object newNode = Model.getUmlFactory().buildNode(getArg("className")); return newNode;
* @param compositeState the given compositestate * @return Object the newly build objectflow state.
// We're looking at focus change to // flag the start of an interaction. This
private void loadTabs(String direction) { if (Position.South.toString().equalsIgnoreCase(direction)
return TemplateParameterSubstitution.class; }
private static boolean isMainApplication; 
private boolean isDeleteEventRequired( final Object element) {
private DetailsPane northEastPane; private DetailsPane northPane;
saveAction = new ActionSaveProject(); ProjectManager.getManager().setSaveAction(saveAction);
private Font defaultFont = new Font("Dialog", Font.PLAIN, 10); 
public void trySaveWithProgressMonitor( final boolean overwrite,
Project p = ProjectManager.getManager().getCurrentProject();
class UMLPartitionContentListModel extends  UMLModelElementListModel { 
* @deprecated in 0.29.1 This is only a helper class for save/load and will * become package scope. It is not designed for reuse outside this package.
private boolean isDeleteEventRequired( final Object element) {
GenericArgoMenuBar menu = (GenericArgoMenuBar) getJMenuBar(); if (menu != null) {
public void trySaveWithProgressMonitor( final boolean overwrite,
if (Model.getFacade().getUmlVersion().charAt(0) == '1') { type.addItem(PredicateMType.create(
abstract class UMLIncludeListModel extends UMLModelElementListModel { 
private static class ShadowFig extends FigNodeModelElement { 
if (target instanceof PathContainer) { PathContainer pc = (PathContainer) getPanelTarget();
public class TestModelEventPump extends TestCase { 
if (result.startsWith("Uml")) { result = result.substring(3);
public static void jumpToDiagramShowing(List targets) { 
ArrayList<ModeFactory> modeFactories = new ArrayList<ModeFactory>(); modeFactories.add(new ModeLabelDragFactory());
if (myMap instanceof HashMap) { grid.adjust((HashMap<String, Comparable>) myMap);
putDefaultShortcut(ACTION_AUTO_CRITIQUE, null, new ActionAutoCritique());
public class GenericArgoMenuBar extends JMenuBar implements TargetListener {
* @param tagName * @return the child element
this.add(new ActionDeleteModelElements()); }
public void addFileSaved(String filename) { mruList.addEntry(filename);
if (!multiSelect) { if (selectedItem instanceof UMLClassDiagram) {
this.add(new ActionDeleteModelElements()); }
public void structureChanged() { if (treeModel == null) {
Model.getPump().addClassModelEventListener(this, Model.getMetaTypes().getModelElement(), (String[]) null);
private static final UUIDManager INSTANCE = new UUIDManager(); 
if (!Model.getFacade().isATransition(mee.getNewValue())) { renderingChanged();
packagePerspective.addRule(new GoOperationToCollaboration()); packagePerspective.addRule(new GoOperationToSequenceDiagram());
treeModel.modelElementChanged(event.getSource()); } else if (event instanceof RemoveAssociationEvent) {
if (Model.getFacade().isAPackage(o)) { return null;
* MVW: These are the WFRs for DataType: * [1] A DataType can only contain Operations,
Collection<Object> newTargets = new ArrayList<Object>(); try {
String className = getClass().getName(); return className.substring(className.lastIndexOf('.') + 1);
* @see Designer * @author Jason Robbins
public void setThreshold(int threshold) { criticThreshold = threshold;
public class CrOppEndVsAttr extends CrUML { 
if (Model.getFacade().isAGeneralization(name1Object)) { continue;
if (Model.getFacade().isAStateMachine(o)) { Collection result = new ArrayList();
public List presentationsFor(Object obj); 
factories.put(type, factory); }
String getName(Object handle); 
getLayer().getGraphModel().removeGraphEventListener(getLayer()); 
Project p = ProjectManager.getManager().getCurrentProject(); if (p != null) {
if (!(UndoManager.getInstance() instanceof DiagramUndoManager)) { UndoManager.setInstance(new DiagramUndoManager());
setBigPort(new FigEmptyRect(r.x, r.y, r.width, r.height)); getBigPort().setFilled(false);
public class FigClassAssociationClass extends FigClass { 
setLineColor(LINE_COLOR); }
Editor curEditor = Globals.curEditor(); ModeManager modeManager = curEditor.getModeManager();
* @throws IllegalStateException If the target pointer is at the * beginning of the history.
public void setCompositeStateHeight(int h) { if (getNameFig() == null) {
Model.getCoreHelper().setMultiplicity(target, item); } else if (item instanceof String) {
public Object makeNode() { Object node = null;
if (Model.getFacade().isAModel(node)) { return false; // issue 3774
updateFields(); }
GridBagConstraints c = new GridBagConstraints(); c.fill = GridBagConstraints.HORIZONTAL;
typeInstanceValueList.addActionListener(new ActionListener() { 
if ((mee.getPropertyName().equals("incoming") || mee.getPropertyName().equals("outgoing"))) {
private Object target; private String propertyName;
private JTextArea stringField; 
if (!Model.getFacade().isATransition(mee.getNewValue())) { renderingChanged();
if ("name".equals(fieldName)) { return Model.getFacade().getName(target);
private boolean notifyModel; 
if (!contains(o)) { if (lm instanceof Ordered) {
public void propertyChange(PropertyChangeEvent evt) { ((UMLPlainTextDocument) getDocument()).propertyChange(evt);
updateStereotypeText(); 
// TODO: We need the property panels to have some reference to the // project they belong to instead of using deprecated functionality
*            model to use for namespace if namespace is null * @return The newly build Actor.
f = oper; } else if (source instanceof Method) {
public Collection<StateVertex> getAllPossibleSubvertices(Object oState) { Collection<StateVertex> result = new ArrayList<StateVertex>();
doCopyNamespace(source, target); doCopyGeneralizableElement(source, target);
Rectangle drawingArea = ProjectBrowser.getInstance().getEditorPane().getBounds();
ownedElements.addAll(((Namespace) elem).getOwnedElement()); for (ModelElement element : ownedElements) {
if (parent.isLeaf()) { throw new IllegalArgumentException("parent is leaf");
if (arguments != null) { List<TemplateParameter> params =
return usage; }
Set<ModelElement> results = new HashSet<ModelElement>(2000); Set<ModelElement> dupCheck = new HashSet<ModelElement>(2000);
if (isCompartmentVisible(Model.getMetaTypes().getAttribute())) { // TODO: We shouldn't actually have to do all this work
private void setNewTrigger(Transition transition, Event event) { transition.setTrigger(event);
.getConnections(relationship).iterator(); if (it.hasNext()) {
public Collection getAllBehavioralFeatures(Object ns) { // Get Classifiers in Namespace
final Set<ModelElement> dupCheck = new HashSet<ModelElement>(10);
public void delete(Object elem) { if (elem == null) {
return false; }
* <li>The 2nd column is the "from" element type. * <li>The 3rd column is the "to" element type.
layoutedObjects.add(obj); if (obj instanceof ClassdiagramNode) {
LOG.error("Property '" + attribute + "' for class '"
private Collection<String> getSubtypes(ModelPackage extent, ModelElement me) {
// We're looking at focus change to // flag the start of an interaction. This
|| Thread.currentThread().equals(eventThread)) { return;
if (base != null && !getAllPossibleBases(role).contains(base)) { throw new IllegalArgumentException("base is not allowed for "
return getInnerContainingModel( getModelElementContainer(handle));
// add the listeners to the newOwner listeners.add(new Object[] {newOwner, null});
protected void updateCompartment(Object metaType) { FigCompartment fc = getCompartment(metaType);
// Set up reader to be first filter in chain SAXParserFactory spf = SAXParserFactory.newInstance();
public Object createMultiplicity(int lower, int upper) { throw new NotImplementedException();
name = modelImpl.getFacade().getUMLClassName(element) + " <not nameable>"; //$NON-NLS-1$
private Map<Resource, Boolean> readOnlyMap = new HashMap<Resource, Boolean>();
@Override public void mouseClicked(MouseEvent me) {
if (!(classifier instanceof Classifier)) { throw new IllegalArgumentException(
if (me.getClickCount() >= 2) { Object lPkg = FigPackage.this.getOwner();
Element result = ((Element) handle).getModel(); if (result == null) {
EList<Class> eList = ((Stereotype) handle).getExtendedMetaclasses(); ArrayList<Class> list = new ArrayList<Class>();
return Collections.emptySet(); }
if (LOG.isInfoEnabled() && mee.getNewValue() == null) { LOG.info(Model.getFacade().getName(mee.getOldValue())
for (Property p : ((Classifier) handle).getAttributes()) { if (p.getAssociation() != null) {
return o instanceof State && ((State) o).getOwner() == null; }
* TODO We should loop round the compartments to build this string. That * way we have no attribute/operation knowledge at this level.
public final class ModeInspectorPanel extends JPanel implements ModeChangeListener { 
* @return true if the stereotype may be applied */
* equal to the given one - inheritance does not work.*/ public Object getStereotype(Object ns, Object stereo) {
* @param tagName * @return the child element
Object buildCompositeStateOnStateMachine(Object statemachine); 
Object type, Object multi,
public void setCompartmentVisible(FigCompartment compartment, boolean isVisible) {
public void populate() { 
for (Object f : getFigs()) { ((Fig) f).removeFromDiagram();
return Collections.emptySet(); }
List figList = fg.getFigs(); if (figList.size() > 0) {
newH = Math.max(minNameHeight + 2 * getLineWidth(), newH); 
String GENERATED_TAG = "GeneratedFromImport"; //$NON-NLS-1$ 
*            the Class or null * @return String
public Object createAbstraction(); 
public Object createAbstraction(); 
Iterator it = getPathItemFigs().iterator(); while (it.hasNext()) {
public Object createAbstraction(); 
public Object createAbstraction(); 
public Object createAbstraction(); 
public Object createAbstraction(); 
public Object createAbstraction(); 
public final class ModeInspectorPanel extends JPanel implements ModeChangeListener { 
* @return Object */
Object getStatebyName(String path, Object container); 
*            the Class or null * @return String
DiagramFactory.getInstance().registerDiagramFactory( DiagramType.Activity, (DiagramFactoryInterface2) null);
ToDoList tdList = Designer.theDesigner().getToDoList(); List<ToDoItem> items = tdList.elementListForOffender(getOwner());
protected boolean invisibleAllowed = false; 
// used to process PGML.tee forces this to be public. I don't understand why. // Is there a way around this?
* Default width for a node fig. * Used to be 60 (up to V0.20), later (from V0.22) it was 90.
setName(unnamed1, null); 
LayerPerspective lp = (LayerPerspective) getLayer(); if (lp == null) {
public ClearAction(String name) { super(name);
Object intType = project.findType("Integer", false); assertNotNull(intType);
private void setNewTrigger(Transition transition, Event event) { transition.setTrigger(event);
// Because UML 1.4 & 2.1 metamodels are organized differently we need // to traverse the hierarchy looking for our owning Package.
// Instead that subsystem should register its desired menus and actions. critique =
private void setNewTrigger(Transition transition, Event event) { transition.setTrigger(event);
ToDoItem item = hitClarifier(me.getX(), me.getY()); String tip = "";
@Override public void setFig(Fig f) {
public void setUnderline(boolean u) { if (getUnderline() == u) {
int iconX = getX(); int iconY = getY() - 10;
{"org.argouml.persistence", "org.argouml.ui"}, {"org.argouml.moduleloader", "org.argouml.persistence"},
*            The addAction to set */
Method m = obj.getClass().getMethod("getItemUID", (Class[]) null); rv = m.invoke(obj, (Object[]) null);
return r.getURIFragment((EObject) element); }
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
model, Namespace.class); for (Namespace ns : namespaces) {
private void deepUpdateFontRecursive(Font f, Object pathFig) { if (pathFig instanceof ArgoFigText) {
model, Namespace.class); for (Namespace ns : namespaces) {
protected void setSuppressCalcBounds(boolean scb) { this.suppressCalcBounds = scb;
if (titleLabel != null) { Icon icon = null;
@Override public Dimension getMinimumSize() {
private static JCheckBoxMenuItem getCheckItem(Action a) { String name = (String) a.getValue(Action.NAME);
me.consume(); }
public class SystemInfoDialog extends ArgoDialog { 
public TargetManagerPanel() { setLayout(new BorderLayout());
private void fixup(Object owner) { if (Model.getFacade().isAGeneralization(owner)) {
return ProjectManager.getManager().getCurrentProject(); }
public class TestProfileDefault extends TestCase { 
TableColumn elemCol = srcPathTable.getColumnModel().getColumn(0); elemCol.setMinWidth(0);
super.setLineColor(LINE_COLOR); super.setLineWidth(LINE_WIDTH);
for (Fig f : (List<Fig>) getPathItemFigs()) { f.setLayer(lay);
if (Model.getFacade().isANamedElement(own)) { final NotationName notation = Notation.findNotation(
boolean isTopState(Object o); 
* org.argouml.uml.ui.behavior.common_behavior. */
if (delegate instanceof FigNodeModelElement) { ((FigNodeModelElement) delegate).removeFromDiagramImpl();
* @author jaap.branderhorst@xs4all.nl * @since Jan 4, 2003
@Override public Point connectionPoint(Point anotherPt) {
class UMLStubStateComboBoxModel extends UMLComboBoxModel { 
public TargetManagerPanel() { setLayout(new BorderLayout());
ExplorerEventAdaptor.getInstance().structureChanged(); Model.getPump().startPumpingEvents();
*            The object becoming a copy. */
* Construct a new critic instance.  Typically only one instance of * each critic class is created and stored in a static variable, as
if (getOwner() == null) { return;
if (getStereotypeFig().isVisible()) { /* TODO: Test this. */
public class SourceUnit { /**
if (middleGroup != null) { middleGroup.calcBounds();
TargetManager.getInstance().addTargetListener(this); setOrientation(Horizontal.getInstance());
Rectangle drawingArea = ProjectBrowser.getInstance()
FigBaseNode(final Object owner, final Rectangle bounds, final DiagramSettings settings) {
* call to setSelectedItem() outside the "buildingModel", * otherwise the combo does not update
* call to setSelectedItem() outside the "buildingModel", otherwise * the combo does not update with the new selection.
abstract class UMLIncludeListModel extends UMLModelElementListModel { 
LOG.info("user pressed cancel"); }
public class ActionGenerateAll extends UndoableAction { 
// We're looking at focus change to // flag the start of an interaction. This
return super.getListCellRendererComponent(list, text, index, isSelected, cellHasFocus);
return ((target instanceof Diagram || Model.getFacade().isAUMLElement( target)) || target instanceof Critic
* @return the string s with all non-letters/digits stripped off */
class UMLStubStateComboBoxModel extends UMLComboBoxModel { 
|| target instanceof Critic)) { target = null;
/** * This class keeps all the nodes in one row together and provides basic
* @param newNode this is the new node that one of the ends is dragged to. * @param oldNode this is the existing node that is already connected.
public Object getTarget() { return target;
*            The edge for which the menu item will be added. */
public void setUnderline(boolean u) { if (getUnderline() == u) {
public void actionPerformed(ActionEvent event) { ProjectBrowser pb = ProjectBrowser.getInstance();
if (target instanceof FigEdge) { // In this case, the bounds are determined by the FigEdge
public class TabTaggedValuesModel extends AbstractTableModel implements VetoableChangeListener, DelayedVChangeListener, PropertyChangeListener {
diagramClasses.put(DiagramType.Class, UMLClassDiagram.class); diagramClasses.put(DiagramType.UseCase, UMLUseCaseDiagram.class);
ArgoDiagram diagram = createDiagram(ns, settings); 
LOG.warn("IllegalArgumentException caught", iae); }
* @see org.tigris.gef.graph.MutableGraphModel#connect( *          Object, Object, Class)
setExpandOnly(true); setReturnAction(FigText.INSERT);
JPanel setDefStereoV = new JPanel(); setDefStereoV.setLayout(new FlowLayout());
* @since Jan 3, 2003 */
String getName(Object handle); 
aValue = ""; }
private void setStyleAttributes(Fig fig, Map<String, String> attributeMap) { String name;
public String repair(); 
*            The property name the listener wishes to receive events for. * @throws IllegalArgumentException
*            ModelElement to be used as argument * @return newly created TemplateArgument
ExplorerEventAdaptor.getInstance().modelElementAdded( diagram.getNamespace());
if (Model.getFacade().isAClassifier(o)) { Collection result = new ArrayList();
if (Model.getFacade().isAStateMachine(o)) { Collection result = new ArrayList();
if (Model.getFacade().isAUMLElement(o)) { Collection result = Model.getFacade().getModelElementContents(o);
boolean changed = false; List<Fig> figs = fg.getFigs();
ProjectManager.CURRENT_PROJECT_PROPERTY_NAME) || pce.getPropertyName().equals(
* @param tagName * @return the child element
Project p = ProjectManager.getManager().getCurrentProject(); ProjectSettings ps = p.getProjectSettings();
Action action = new ActionAddExistingNode(
dontTest.add("Permission"); 
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
class SimpleStateTransformer implements Transformer { 
duplicate.put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, DEFAULT_MASK), KeyStroke.getKeyStroke(KeyEvent.VK_SUBTRACT, DEFAULT_MASK));
Project project = ProjectManager.getManager().getCurrentProject(); if (project == null) {
public void setShadowSize(int size) { super.setShadowSizeFriend(size);
public class ExceptionDialog extends JDialog implements ActionListener { 
elementName.getEditor() .getEditorComponent().setBackground(Color.white);
* @since Jan 3, 2003 */
private boolean isDeleteEventRequired( final Object element) {
eastPane  = makeDetailsPane(BorderSplitPane.EAST,  Vertical.getInstance());
"org.netbeans.mdr", "org.tigris.gef.base",
public class UndoUmlHelperDecorator extends AbstractUmlHelperDecorator { 
public TargetManagerPanel() { setLayout(new BorderLayout());
// convinced ourselves that everything with a getItemUID method // is implementing IItemUID
Object name = null; Object value = null;
Method m = obj.getClass().getMethod("getUUID", (Class[]) null); rv = m.invoke(obj, (Object[]) null);
public static void setProfileDirectory(String dir) { PROFILES_RESOURCE_PATH = "/org/argouml/profile/profiles/" + dir + '/';
String filename = modelFile.getName(); String extension = filename.substring(filename.indexOf('.'),
private static boolean registerPersister(Class target, String tag, Class<? extends MemberFilePersister> persister) {
for (Object edge : d.getLayer().getContentsEdgesOnly()) { FigEdge figEdge = (FigEdge) edge;
*                 if interrupted - should never occur in test environment */
* @since Jan 3, 2003 */
if ("org.argouml.uml.diagram.ui.PathItemPlacement".equals( classname)) {
stereotypesView.addRadioItem(new ActionStereotypeViewTextual(this)); stereotypesView.addRadioItem(new ActionStereotypeViewBigIcon(this));
if (Notation.findNotation(newLanguage) == null) { /* This Notation is not available! */
private final List<ProjectMember> members = new MemberList(); 
* @return the persister used and usable for file. * @throws SaveException if saving the file goes wrong.
*            model to use for namespace if namespace is null * @return The newly build Actor.
* @since Jan 3, 2003 */
public boolean getShowStereotypesValue() { return showExplorerStereotypes;
* @throws DOMException * @throws ParserConfigurationException
init(true, Configuration.makeKey("notation", "all")); 
private static final String UML_PATH_PREFIX; 
if (!"1.4".equals(Model.getFacade().getUmlVersion())) { c.remove("AssociationEnd");
* @since 0.17.3 * @see SourcePathController
* @return true if ModelElement is owned by the given Namespace and it is *         publicly visible.
// Specific classes to be remapped //      remap.put("", "");
public void setUri(final URI theUri); 
((ToDoPane) ProjectBrowser.getInstance().getTodoPane()) .selectItem(item);
public class TestModelEventPump extends TestCase { 
if (lastPanel != null) { splitPane.remove(lastPanel);
LOG.debug("single: " + topLevelTabbedPane.getComponentAt(tab).toString());
public class GoalModel extends Observable implements Serializable { private List<Goal> goals = new ArrayList<Goal>();
private boolean isDeleteEventRequired( final Object element) {
if (Configuration.getBoolean(getCriticKey(), true)) { addControlRec(ENABLED, Boolean.TRUE);
* @see org.tigris.gef.graph.MutableGraphModel#connect( *          Object, Object, Class)
public class GoalModel extends Observable implements Serializable { private List<Goal> goals = new ArrayList<Goal>();
class CurDecisionCM implements ControlMech { /*
public class GoalModel extends Observable implements Serializable { private List<Goal> goals = new ArrayList<Goal>();
public Object getDefaultAttributeType(); 
* commented out next piece to remove failure of testcase. The testcase * is probably correct but the implementation of DetailsPane is not
private Set<ResolvedCritic> resolvedItems; 
final FigGroup group = (FigGroup) getGroup(); if (group != null
private void setNewTrigger(Transition transition, Event event) { transition.setTrigger(event);
public int getEventEndRange() { return (getEventStartRange() == 0
private void setNewTrigger(Transition transition, Event event) { transition.setTrigger(event);
private void populateClassMaps( final Element classesNode,
private static boolean showUml2warning = true; 
*            the Class or null * @return String
firePropChange("text", oldText, s); // TODO: setText in GEF should call setBounds instead of directly
} 
public void setUnderline(boolean u) { if (getUnderline() == u) {
protected void positionChildren() { final Rectangle bounds = getBounds();
LayerPerspective lp = (LayerPerspective) getLayer(); if (lp == null) {
@Override protected void setBoundsImpl(
public class TestSequenceDiagramModule extends TestCase { 
FigPoly poly = (FigPoly) returnEdge.getFig(); poly.setComplete(true);
points[i].y = fe.getFirstPoint().y + DEFAULT_ACTIVATION_HEIGHT; }
+ nameFig.getMinimumHeight() + 4; if (h < DEFAULT_HEIGHT) {
public class TestSequenceDiagramModule extends TestCase { 
notationSettings.setShowSequenceNumbers(true); super.textEditStarted(ft);
final int x = node.getX()
@Override protected boolean determineFigNodes() {
public Object createAbstraction(); 
Rectangle r = new Rectangle(center.x - (size.width / 2), center.y - (size.height / 2),
public class UndoUmlHelperDecorator extends AbstractUmlHelperDecorator { 
public Object createAbstraction(); 
public Object createAbstraction(); 
private Collection internalGetAllRealizedInterfaces(Object o, Collection col, Set visited) {
private Collection internalGetAllRealizedInterfaces(Object o, Collection col, Set visited) {
public Object createAbstraction(); 
public Object createAbstraction(); 
void deleteEnumeration(Object elem) { if (!(elem instanceof Enumeration)) {
public Object createAbstraction(); 
public Object createAbstraction(); 
public Object createAbstraction(); 
public Object createAbstraction(); 
public Object createAbstraction(); 
*            The stereotype to copy from. * @param target
public class ActionAddTopLevelPackage extends UndoableAction { 
public Object createAbstraction(); 
public Object createAbstraction(); 
public Object createAbstraction(); 
public Object createAbstraction(); 
void deleteEnumeration(Object elem) { if (!(elem instanceof Enumeration)) {
public Object createAbstraction(); 
public Object createAbstraction(); 
public Object createAbstraction(); 
public Object createAbstraction(); 
public Object createAbstraction(); 
void deleteEnumeration(Object elem) { if (!(elem instanceof Enumeration)) {
if (!figList.equals(graph.selectedFigs())) { graph.deselectAll();
public Object createAbstraction(); 
public Object createAbstraction(); 
*            the Class or null * @return String
*            the Class or null * @return String
*            the Class or null * @return String
*            the Class or null * @return String
version = ApplicationVersion.getVersion(); 
*            the Class or null * @return String
throw new NotImplementedException(); }
// If we don't have a fig for this UML object, we'll need to add // one. We set the bounds, but they will be reset later.
ModelCommandCreationObserver mco = getModelCommandCreationObserver(); if (mco != null) {
private Collection internalGetAllRealizedInterfaces(Object o, Collection col, Set visited) {
* @return a List of directory paths */
class SimpleStateTransformer implements Transformer { 
class FacadeEUMLImpl implements Facade { 
return Collections.EMPTY_SET; }
return State.class; }
protected static final Logger LOG = Logger .getLogger(UMLValueSpecificationValueField.class);
if ("typedParameter".equals(name)) { return "parameter";
if (!(handle instanceof Collaboration)) { throw new IllegalArgumentException(
if (!(handle instanceof Collaboration)) { throw new IllegalArgumentException(
return null; }
return handle instanceof Element; }
try { modelImpl.getModelEventPump().stopPumpingEvents();
instanceof org.omg.uml.behavioralelements.commonbehavior.Object; }
return false; }
return handle instanceof MultiplicityElement; }
return AggregationKind.SHARED_LITERAL.equals(((Property) handle) .getAggregation());
return false; }
return false; }
return true; }
private AdapterFactoryEditingDomain editingDomain; 
addOwnedElement(container, handle); }
if (from == null || to == null) { return Collections.emptyList();
return handle instanceof Signal; }
if (!(element instanceof Classifier)) { throw new IllegalArgumentException(
if (sel instanceof SelectionClass) { ((SelectionClass) sel).hideButtons();
((MultiplicityElement) handle).setLowerValue(null); ((MultiplicityElement) handle).setUpperValue(null);
if (!(o instanceof BehavioralFeature)) { throw new IllegalArgumentException(
//       Update for UML 1.4 metamodel if not replaced by reflection private static final Class<?>[][] VALID_CONNECTIONS = {
throw new NotImplementedException(); }
if (!(bexpr instanceof ValueSpecification)) { throw new IllegalArgumentException(
editingDomain = new UML2AdapterFactoryEditingDomain( adapterFactory, commandStack, readOnlyMap);
private void initializeEditingDomain() { // If the eUML.resources system property is defined then we are in a
public void deleteCollection(Collection col) { Iterator it = col.iterator();
Iterator it = modelImpl.getCoreHelper().getSupertypes(object) .iterator();
Iterator<Package> iter = ((Profile) ns).getNestedPackages() .iterator();
for (Stereotype o : getStereotypes(model)) { if (name.equals(o.getName())
* <li>The 2nd column is the "from" element type. * <li>The 3rd column is the "to" element type.
public boolean isContainmentValid(Object metaType, Object container) { 
if (isATransition(handle)) { return ((Transition) handle).getStateMachine().getTop()
updateCompartment(Model.getMetaTypes().getAttribute()); }
if (rootModel != null && !(rootModel instanceof org.eclipse.uml2.uml.Package)) {
RunnableClass run = new RunnableClass() { public void run() {
@Deprecated public void setRootModel(Object rootModel) {
synchronized (idToObjectMaps) { entrySet =
Project p = ProjectManager.getManager().getCurrentProject(); Object model = p.getRoot();
public Object getExitPoint() { // UML 2.x only
private InputSource chainedTransform(String[] styles, InputSource input) throws XmiException {
String systemId = input.getSystemId(); if (systemId != null) {
File tmpFile = File.createTempFile(TEMP_XMI_FILE_PREFIX, ".xmi"); tmpFile.deleteOnExit();
public class TestReadCompressedFilesAndHref extends AbstractMDRModelImplementationTestCase {
if (classifier != null) { for (Feature f : getFeatures(classifier)) {
allEnds = new ArrayList<AssociationEnd>(allEnds); allEnds.remove(handle);
((Reception) reception).setSignal(null); return;
Stereotype stereo = (Stereotype)modelImpl.getExtensionMechanismsFactory()
modelUrl = getValidURL(fixupURL(systemId)); }
public Object getStereotype(Object ns, Object stereo) { if (!(ns instanceof Namespace)) {
Iterator it = modelImpl.getCoreHelper().getSupertypes(object).iterator();
final String suffix = getSuffix(systemId); 
// removing everything and adding it again. - tfm mclassifier.getFeature().clear();
((TagDefinition) handle).setTagType(tagType); return;
Include theInclude = ((Include) extend); if (base == theInclude.getBase()) {
if (ref == null) { return new XMIReferenceProvider.XMIReference(null, mofId);
LOG.error("Failed to resolve " + docId + "#" + xmiId ); }
return getUpper(ranges.get(ranges.size() - 1)); }
if (modelUrl == null) { if (CLASSPATH_MODEL_SUFFIXES != null
reverseUrlMap.put(modelUrl.toString(), relativeUri); reverseUrlMap.put(systemId, relativeUri);
if (modelUrl == null) { modelUrl = this.getClass().getResource(modelName);
return ((ClassifierRole) handle).getBase(); }
for (ElementImport ei : ((UmlPackage) pack).getElementImport()) { ModelElement element = ei.getImportedElement();
return Collections.unmodifiableCollection( new ArrayList<Message>(
return ((ElementImport) handle).getImportedElement(); }
public Object getContainer(Object handle) { try {
return ((EnumerationLiteral) value).getName(); } else {
Object value; if (refValues.size() > 0) {
} catch (InvalidObjectException e) { String uuid = getUUID(handle);
for (Message mes2 : listToChange) { mes2.setActivator(activator);
if (language != null && language.length() > 0) { result += " (" + language + ")";
private void registerClassEvent(PropertyChangeListener listener, Object modelClass, String[] propertyNames) {
StringBuffer result = new StringBuffer(); ModelElement template = templateParameter.getTemplate();
LOG.warn("Can't handled TaggedValue.dataValues which " + " aren't Strings.  Converting to String");
decrementEvents(); 
if (LOG.isDebugEnabled()) { if (metaobject == null || attributes == null) {
public Stereotype buildStereotype( Object theModelElementObject,
Parameter param = getCore().createParameter(); param.setName("T"); // default parameter name
private static final Class<?>[][] VALID_CONNECTIONS = { {Generalization.class,   GeneralizableElement.class, },
mclassifier.getFeature().clear(); mclassifier.getFeature().addAll(result);
final Collection<Permission> permissions = getPackageImports(ns); for (Permission imp : permissions) {
permission, ModelManagementHelper.ACCESS_STEREOTYPE) // TODO: Do we want to <<friend>> stereotypes too?
if ("1_N".equals(sarg)) { return modelImpl.getDataTypesFactoryInternal()
private Collection internalGetAllRealizedInterfaces(Object o, Collection col, Set visited) {
if (handle instanceof ModelElement && node instanceof ElementResidence) {
if (kindType.equals("composite")) { return AggregationKindEnum.AK_COMPOSITE.equals(associationEnd1.
ret = new ArrayList(ret); ret.add(model);
for (Iterator i = allOfType.iterator(); i.hasNext();) { Object me = i.next();
Set<ModelElement> allContents = new HashSet<ModelElement>(2000); for (GeneralizableElement parent : parents) {
if (!(child1 instanceof GeneralizableElement && parent1 instanceof GeneralizableElement
if (!(child1 instanceof GeneralizableElement && parent1 instanceof GeneralizableElement
Collection<Dependency> deps = ns.getClientDependency(); for (Dependency dep : deps) {
} 
(Classifier) handle); }
if (container != null && Model.getFacade().isACompositeState(container)
target.setMultiplicity(getMultiplicity11()); target.setChangeability(source.getChangeability());
@Deprecated public Multiplicity createMultiplicity(final List range) {
protected final void setPorts(Layer layer, FigEdge newEdge) { Object modelElement = newEdge.getOwner();
* @param isSpecification *            true of the element is specification
if ("name".equals(fieldName)) { return Model.getFacade().getName(target);
@SuppressWarnings("unchecked") protected void buildModelList() {
public void changedUpdate(final DocumentEvent p1) { updateModel();
public UMLExpressionLanguageField(UMLExpressionModel m, boolean n) { model = m;
JPanel p = new JPanel(); 
public TargetManagerPanel() { setLayout(new BorderLayout());
@SuppressWarnings("unchecked") protected void buildModelList() {
private Component scrollPane; 
valueExists = new JCheckBox(); 
if (Model.getFacade().getUmlVersion().charAt(0) != '1') { if ("aggregation".equals(propertyName) &&
@Override public void removeNotify() {
//	    if (Model.getFacade().isALiteralBoolean(sType)) { //		fieldControl = new UMLValueSpecificationValueFieldLiteralBoolean(model, true);
public void changedUpdate(DocumentEvent arg0) { updateModel();
* When display to user, we only show one body. A "..." button is enabled for * edit other.
removeAllElements(); build();
super("type", modelElement.getClass(), new ActionAddOFSState(),
return ret; }
for (Object importedElem : Model.getModelManagementHelper() .getAllImportedElements(ns)) {
KeyboardFocusManager focusManager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
if (Model.getUmlHelper().isMovable(metaType)) { getList().addListSelectionListener(moveUpAction);
if (language != null && language.length() > 0) { result += " (" + language + ")";
return null; }
public class CompoundCritic extends Critic { 
return name.hashCode(); }
report = "An inconsistency has been detected when saving the model."
private DiagramSettings settings; 
ToDoItem item = toDoItem(i.getOffenders().get(0), dsgr); return (item.equals(i));
LOG.warn("Configuration not loaded from " + propertyLocation, ioe); }
// Check if there is a LOG.debug(String, String) method that can // be used instead.
showBoldName = getSettings().isShowBoldNames(); return showBoldName ? Font.BOLD : Font.PLAIN;
GUI.getInstance().addSettingsTab(tab); }
throw new NotYetImplementedException(); }
// org.argouml.model.XmiException: Unknown element in XMI file : Model // because the UML 1.3->1.4 converter can only handle XMI 1.0, not 1.1
throw new NotYetImplementedException(); }
return handler; }
if (input.getSystemId() == null) { input.setSystemId(getJarResource("org.argouml.kernel.Project"));
* Show the description of a todo item. */
String id = inputSource.getPublicId(); if (id == null) {
for (ToDoItem item : tde.getToDoItemList()) { if (!item.supports(g)) {
* @return true if thisitem is still valid */
comp.setEnabled(false); } else if ("parameter".equals(prop.getPropertyName())) {
JLabel image = new JLabel(""); //image.setMargin(new Insets(0, 0, 0, 0));
detailsPanel.add(new JLabel(""), labelConstraints); detailsPanel.add(buttonPanel, fieldConstraints);
node.getLetExpressionTypeDeclaration().apply(this); }
* @since Jan 3, 2003 */
return ep; }
return ProjectManager.getManager().isSaveActionEnabled(); }
} 
CommentEdge ce = (CommentEdge) obj; LOG.info("Removing the link from " + ce.getAnnotatedElement()
private boolean creatingCurrentProject; 
private static String formatCountLabel(int size) { switch (size) {
// add Figs to the FigNode in back-to-front order addFig(getBigPort());
} 
if (currentProject == oldProject) { if (openProjects.size() > 0) {
return figNode; } else {
firePropertyChanged(OPEN_PROJECTS_PROPERTY, new Project[] {oldProject}, new Project[] {newProject});
add(tools); 
List<String> path = new ArrayList<String>(); String name;
if (isReception) { stereoStr =
LOG.error("Exception caught", e); } catch (NoSuchMethodException e) {
return modelImpl.getCoreHelper().getSource(relationship); } else if (relationship instanceof Message) {
if (Model.getFacade().isAModel(obj)) { return; //Can not delete the model
String extForm = getClass().getResource(Argo.ARGOINI).toExternalForm(); String argoRoot =
//        return dirty; return ProjectManager.getManager().isSaveActionEnabled();
boolean loadedClass = false; if (manifest == null) {
ms.setSelected(); 
if (argoRoot.startsWith(JAR_PREFIX)) { argoRoot = argoRoot.substring(JAR_PREFIX.length());
if ( Model.getFacade().getUmlVersion().charAt(0) == '1') { for (Object uml : Model.getFacade().getTaggedValuesCollection(
} }
private static final String DEFAULT_NOTATION_NAME = "UML"; 
public TargetManagerPanel() { setLayout(new BorderLayout());
private static NotationSettings initializeDefaultSettings() { NotationSettings settings = new NotationSettings();
} }
} }
//        try { parseExtensionPointFig(modelElement, text);
String getName(Object handle); 
private boolean showTypes; 
//                Model.getExtensionMechanismsFactory().buildTaggedValue( //                        tagName, new String[] {"true"}, Model.getFacade().getRoot(umlObject));
* Parse a string representing an extension point and return a new extension * point.<p>
Project project = ProjectManager.getManager().getCurrentProject();
static { attributeSpecialStrings = new PropertySpecialString[2];
/** * Class that reads a todo list from a todo xml file.
g = Model.getStateMachinesFactory().createGuard(); if (g != null) {
new TransitionNotationUml(t).parseTransition(t, line); /* Add this new one, and mark it to be retained: */
s.append((new TransitionNotationUml(trans)).toString(trans, settings));
} }
if (me == null || !(Model.getFacade().isAModelElement(me))) { return "";
result.append(name).append(separator); }
//		w.println("<!DOCTYPE profile SYSTEM \"profile.dtd\" >"); // but we need a 2nd line to make the funky UML persister work
return NO_PROBLEM; }
PGMLStackParser parser = new PGMLStackParser(project.getUUIDRefs(), defaultSettings);
break; case ArgoTokenTable.TOKEN_SHOWASSOCIATIONNAMES:
GridBagLayout gb = new GridBagLayout(); nameLocTab.setLayout(gb);
private static final String[] FONT_NAMES = { "dialog", "serif", "sanserif",
String varName = vars.get(0); Object oldVal = vt.get(varName);
node.getPathName().apply(this); feature = node.getPathName().toString().trim();
List<File> profileFiles = UserDefinedProfileHelper.getFileList( dirs.toArray(new File[0]));
if (entry != null) { url = makeZipEntryUrl(url, entry.getName());
} 
val = (int) Double.parseDouble(node.getReal().getText()); defaultOut(node);
node.getQualifiers().apply(this); }
node.getDeclaratorTypeDeclaration().apply(this); }
public class StylePanelFigText extends StylePanelFig { 
// these operations are ok for lists too if (subject instanceof Collection) {
setTarget(e.getNewTarget()); 
// Additional Operation 4.5.3.3 [1] if (feature.equals("upperbound")) {
if (feature.equals("sum")) { Integer sum = 0;
/* 4.5.2.3 Association */ 
} else if (sym.equals("OclExpression")) { return new OclType("OclExpression");
if (feature.equals("namespace")) { return Model.getFacade().getNamespace(subject);
return new HashSet<Object>(Model.getFacade() .getResidents(subject));
if (feature.toString().trim().equals("oclIsKindOf") || feature.toString().trim().equals("oclIsTypeOf")) {
if (!("namespace".equals(event.getPropertyName()))) { treeModel.modelElementChanged(((RemoveAssociationEvent) event)
ArgoEventPump.fireEvent(new ArgoStatusEvent( ArgoEventTypes.STATUS_PROJECT_LOADED, this, p.getName()));
List res = new ArrayList(); if (o instanceof Project) {
lineField.setSelectedItem(c); if (c != null && !lineField.getSelectedItem().equals(c)) {
if (feature.equals("supplierDependency")) { return new HashSet<Object>(Model.getFacade()
sel = Model.getFacade().getModelElementContainer(sel); }
putDefaultShortcut(ACTION_REORDER_FORWARD, KeyStroke.getKeyStroke( KeyEvent.VK_F, DEFAULT_MASK), new ReorderAction("Forward",
} 
updateStats(); 
tabs.addTab( Translator.localize(stp.getTabKey()),
final AbstractAction rememberedSaveAction = this.saveAction; this.saveAction = null;
perspectiveList.requestFocus(); }
Globals.showStatus(Translator.localize("action.setting-size", new Object[] {fi}));
textArea = new JEditorPane(); textArea.setContentType("text/html");
if (language != null && language.length() > 0) { result += " (" + language + ")";
Collection children = Collections.emptySet(); try {
LOG.error("Exception", e); }
removeTargetListener((TargetListener) tab); if (shouldEnable) {
public void dragGestureRecognized( DragGestureEvent dragGestureEvent) {
Collection str = Model.getFacade().getFeatures(dm); if (str == null) {
/* If the destination is not a NameSpace, then abort: */ if (!Model.getFacade().isANamespace(dest)) {
* @param tagName * @return the child element
} 
LOG.error("Explorer caught exception ", e); } else {
public void propertyChange(PropertyChangeEvent evt) { ((UMLPlainTextDocument) getDocument()).propertyChange(evt);
LOG.error(this.getClass().toString() + ": getSourcePort(" + edge.toString() + ") - can't handle");
return handle instanceof Action && false; // && ((Action) handle).get
if (conns == null || conns.size() != 2) { return NO_PROBLEM;
renderingChanged(); // TODO: Is this really needed?
p.destroy(); break;
public class DevActionFactory implements ContextActionFactory { 
public class UMLActivityDiagram extends UMLDiagram implements ActivityDiagram { 
addTrigger("end_navigable"); }
return popUpActions; }
//      if (Model.getFacade().isAOperation(base) //      || Model.getFacade().isANamespace(base))
Object newRegion = mee.getNewValue(); FigRegion rg = new FigRegion(newRegion);
if (mee instanceof AssociationChangeEvent || mee instanceof AttributeChangeEvent) {
if (eName == "incoming" || eName == "outgoing") { final Object owner = getOwner();
renderingChanged(); damage();
cl = new Checklist(); 
} }
* relocate() has been implemented. */ Collection c =  new HashSet();
* @param c the Classifier. If this is not a Classifier, then *          IllegalArgumentException is thrown.
// Status as of Nov. 2008 - Figs created, property panels exist, more // work required on explorer and assumptions about models not being
int iconX = getX(); ToDoList tdList = Designer.theDesigner().getToDoList();
private static final String EVENT_NAME = "ownerScope"; 
getGroup().calcBounds(); getGroup().setBounds(getGroup().getBounds());
updateOwnerScope(Model.getScopeKind().getClassifier().equals( pce.getNewValue()));
if (aboveAndRight) { dx = Math.abs(dx);
LOG.debug("Attempted to populate a FigEditableCompartment" + " using a deleted model element - aborting", e);
getFig().setLineColor(Color.red); ArrowHeadTriangle endArrow = new ArrowHeadTriangle();
stereotypeStyle = getSettings().getDefaultStereotypeView(); }
return /*"unnamed " + */ getLabelName(); }
setNamespace(ns); }
ce.getLayerManager().getActiveLayer().calcDrawingArea(); // If the diagram is empty, GEF won't write anything, leaving us with
if (!Arrays.asList(getComponents()).contains(toolbar)) { if (target != null) {
point.x = elemFig.getX() + elemFig.getWidth() + DISTANCE; point.y = elemFig.getY();
firePropChange("pathVisible", !visible, visible); ns.setShowPaths(visible);
Iterator it = delegate.iterator(); while (index >= 0) {
setText(); }
if (element instanceof Classifier) { result.addAll(((Classifier) element).allFeatures());
private Set<Object[]> listeners = new HashSet<Object[]>(); 
public void mouseReleased(MouseEvent e) { showPopup(e);
public class ImportStatusScreen extends JDialog implements ProgressMonitor, WindowListener {
*            of the project *
return Collections.EMPTY_SET; }
if (element instanceof Classifier) { result.addAll(((Classifier) element).allFeatures());
/** Default X offset of origin used when building figs */ static final int X0 = 10;
instructions = Translator.localize(
.getRoot()); }
getStereotypeFig().setVisible(true); 
* @return the string s with all non-letters/digits stripped off */
* Set the action as enabled when any row is selected * @param e the event
*            the model element to query for connections */
return packageName.replace('.', DIAGRAM_NAME_SEPARATOR) + DIAGRAM_NAME_SEPARATOR + DIAGRAM_NAME_SUFFIX;
JTextField text = new JTextField(ps.getDefaultPath()); add(text, createGridBagConstraints(true, false, false));
getConfigPanel(); 
} 
private String getQualifiedName(Object element) { StringBuffer sb = new StringBuffer();
return null /*ActionSequence.class*/; }
private List objects = new LinkedList(); 
public static String generateID() { return (new java.rmi.server.UID()).toString();
JOptionPane.showMessageDialog( null,
add(controlsPanel, BorderLayout.SOUTH); }
project.addMember(mmodel); 
* @see org.tigris.gef.graph.MutableGraphModel#connect( *          Object, Object, Class)
inAListExpressionListOrRangeTail(node); {
fireContentsChanged(this, 0, size - 1); return status;
// probably the TabText should only show an empty pane in that case setTarget(e.getNewTarget());
public class TestModelEventPump extends TestCase { 
removeTargetListener((TargetListener) lastPanel); }
//Parser.ParseAndUpdate(modelObject, s); }
if (isFiring() && !newValue.equals(getProperty())) { setFiring(false);
Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace();
Class targetClass = targetItem.getClass(); stylePanel = findPanelFor(targetClass);
* @since Jan 3, 2003 */
} 
super(Translator.localize("label.static"), ActionSetAssociationEndTargetScope.getInstance(),
* @see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent) */
* @see org.argouml.model.DataTypesHelper#getValueSpecificationValues(java.lang.Object) */
} if (fromPort != null && toPort != null) {
public class UndoUmlHelperDecorator extends AbstractUmlHelperDecorator { 
} }
ModuleLoader2.getDescription( ModuleInterfaceForTesting1.TEST_MODULE_NAME));
updateEdges(); //
private static String[] allModelElements = {
private int offset = 0; 
// Check superclass. //Make sure this class does not extend or reference non-ArgoUML classes
if (Model.getFacade().isACallAction(action)) { Iterator bases =
// get the source of the return message final Object returnMessageSource =
removeFig(act); act.setLocation(
updateMinimumHeight(); 
// [4] The parent must be included in the Namespace of the //     GeneralizableElement.
* @param compositeState the given compositestate * @return Object the newly build objectflow state.
*            the Class or null * @return String
throw new NotYetImplementedException(); }
*            model to use for namespace if namespace is null * @return The newly build Actor.
for (Region region : regions) { result.addAll(region.getTransitions());
return null; }
throw new NotYetImplementedException(); }
return false; }
throw new NotYetImplementedException(); }
public class TestModelEventPump extends TestCase { 
public Collaboration buildCollaboration(Object handle) { Collaboration collab = createCollaboration();
allMetaTypes = new ArrayList<Class<?>>(125); allMetaTypes.add(Abstraction.class);
list.addAll(Model.getModelManagementHelper() .getAllPossibleImports(getTarget()));
currentIndex = num; updateFields();
setFont(LookAndFeelMgr.getInstance().getStandardFont()); setRows(2); // make it stretch vertically
class UMLValueSpecificationPanel extends JPanel { 
} });
Object namespace = Model.getFacade().getNamespace(target); if (namespace != null && !elements.contains(namespace)) {
throw new NotYetImplementedException(); } else if (isAEvent(handle)) {
namespace = target; } else {
if (Model.getFacade().isAClassifier(o) && !Model.getFacade().isARelationship(o)) {
//   public void resolve(Object reason) { //     ToDoList list = Designer.theDesigner().getToDoList();
// Delete the old extent first if (umlPackage != null) {
result.addAll(getAllBehavioralFeatures(it.next())); }
Object container = pack; Object cc = modelImpl.getFacade().getModelElementContainer(pack);
// There actually don't appear to be any restrictions on the // namespace for a Generalization.  The UML 1.4 WFR 2.5.3.20 #3
if (ta == null || ta.getModelElement() == null) { continue;
LOG.debug( "Not implemented - getAllContents for: " + pack);
* TODO: Note this should not be ni UML2 version */
List<Pair> readOnlyListeners; synchronized (listeners) {
public AbstractArgoJPanel(String theTitle) { this(theTitle, false);
if (project != null) { project.setDirty(true);
setGraphModel(createGraphModel()); }
if (isReadOnly(element)) { throw new VetoChangeException(e.getSource(), null);
for (int i = 0; i < len; i++) { write(b[off + i]);
} }
return ro; }
if (values.size() + refValues.size() > 1) { LOG.warn("Don't know how to manage multiple values "
// TODO: not implemented for UML 2 - tfm // } else if (relationship instanceof Flow) {
if (activeDiagram == null) { activeDiagram = DiagramUtils.getActiveDiagram();
Model.getExtensionMechanismsHelper().addTaggedValue( obj, taggedValue);
if (handle instanceof Parameter && kind instanceof ParameterDirectionKind) {
for (Pair p : listeners) { if (p.listener == listener) {
((ComponentInstance) handle).setNodeInstance(null); return;
System.setProperty("com.apple.mrj.application.apple.menu.about.name", "ArgoUML");
"label.namespace.navigate.tooltip"), combo);
public boolean canFixIt(ToDoItem item) { return false; } 
*            is the JMenuItem to do this for. * @param key
private static Hashtable statuses = new Hashtable(); 
/** * This class is responsible for identifying one critic that has been resolved
node.getQualifiers().apply(this); }
System.out.println("VOILA!"); }
* @see javax.swing.Action#isEnabled() */
// Additional Operation in 4.5.3.9 if (feature.equals("allResidentElements")) {
return ""; //$NON-NLS-1$ }
* Supply the encoding to be used throughout the persistence * mechanism.
public AbstractArgoJPanel(String theTitle) { this(theTitle, false);
private void setNewTrigger(Transition transition, Event event) { transition.setTrigger(event);
private void checkOffs(ListSet offs) { if (offs == null) {
addFig(getBigPort()); addFig(getNameFig());
public Object makeNode() { Object node = null;
Rectangle r = getBounds(); setBounds(r);
protected ColorUIResource getPrimary1() { return primary1; } 
// static variables 
* Remove an edge from the graphmodel and notify GEF. *
getStereotypeFig().setBounds(X + 10, Y + NAME_FIG_HEIGHT + 1, 0, NAME_FIG_HEIGHT);
None
int maxWidth = 0; int height = 0;
if (Model.getFacade().isAGeneralization(subject)) { if (type.equals(".")) {
final GraphEdgeRenderer renderer = lay.getGraphEdgeRenderer();
Dimension minimumSize = getMinimumSize(); int newW = Math.max(w, minimumSize.width);
getNameFig().setBounds(x + (w - nm.width) / 2, y + h / 2 - nm.height / 2,
public List<AbstractArgoJPanel> getDetailsTabs() { List<AbstractArgoJPanel> result =
String release = getReleaseVersionFromFile(file); copyFile(originalFile, new File(originalFile.getAbsolutePath()
public void vetoableChange(PropertyChangeEvent pce) { SwingUtilities.invokeLater(new Runnable() {
/** * Tool to add an actor node.<p>
renderingChanged(); // update the relative sizes and positions of internel Figs
Rectangle bbox = getBounds(); setBounds(bbox.x, bbox.y, bbox.width, bbox.height);
public void layout() { Object first = null;
popUpActions.add(new JSeparator()); popupAddOffset = 1;
int      aggCount = 0; Iterator assocEnds = conns.iterator();
Action[] stereoActions = StereotypeUtility.getApplyStereotypeActions(getTarget());
f.setLayer(getLayer()); }
if (pName.equals("editing") && Boolean.FALSE.equals(pve.getNewValue())) {
final LayerPerspective lay = (LayerPerspective) getLayer(); final MutableGraphModel gm = (MutableGraphModel) lay.getGraphModel();
int mpn = recCountPredecessors(msg, ptr2) + 1; 
private Set<Object[]> listeners = new HashSet<Object[]>(); 
aSize.width = Math.max(WIDTH, aSize.width); 
final List<Action> modulesActions = ContextActionFactoryManager.getContextPopupActions();
for (Object stereotype : Model.getFacade().getStereotypes(feat)) {
List<ToDoItem> items = tdList.elementListForOffender(getOwner()); for (ToDoItem item : items) {
return false; }
items = tdList.elementListForOffender(this); for (ToDoItem item : items) {
// we return false }
textEdited((FigText) src); calcBounds();
return false; }
super.propertyChange(pve); }
addFig(getStereotypeFig()); 
modelChanged(pve); 
((TargetListener) listeners[i + 1]).targetSet(targetEvent); }
} 
if (sourceFig instanceof FigClassifierBox) { final Fig tempFig = sourceFig;
@Override public boolean equals(Object obj) {
} else if (setting instanceof PathListSelection) { PathListSelection pls = (PathListSelection) setting;
None
// static variables 
Notification.ADD, "stereotype",
//        putValue(Action.SHORT_DESCRIPTION, Translator.localize(s)); }
@Override protected final void setAttrs(Fig f, Attributes attrList)
ConfigurationKey key = Configuration.makeKey("diagramappearance", "all");
setTextFilled(false); setJustification(FigText.JUSTIFY_CENTER);
Fig separatorFig = epc.getSeparatorFig(); 
} catch (IllegalArgumentException iae) { // idem, e.g. for a generalization with leaf/root object
} 
DiDiagram dd = GraphChangeAdapter.getInstance() .createDiagram(diType, namespace);
public UMLEditableComboBox(UMLComboBoxModel model, Action selectAction) { this(model, selectAction, true);
if (f.getLayer() == null) { report.append("-- Fixed: layer was null\n");
return; }
public void addNodeRelatedEdges(Object node) { if (Model.getFacade().isANamedElement(node)) {
} 
private double calcX(double a, double b, double y) { assert a > 0;
if (end0 == null || end1 == null) { LOG.error("Edge rejected. Its ends are not attached to anything");
newEdge.setSourcePortFig(baseFN); newEdge.setSourceFigNode(baseFN);
// static variables 
Object cr = Model.getCollaborationsFactory().createClassifierRole(); FigClassifierRole figclassifierrole = new FigClassifierRole(cr, bounds, settings);
Point fcCenter = new Point(getSourceFigNode().getX() / 2,
assertTrue("GoalModel.removeGoal(goalName) failed", goalModel.getGoalList().size() == 0);
f.setLineColor(getLineColor()); f.setLineWidth(getLineWidth());
Notification.ADD, "stereotype",
this.setBetweenNearestPoints(true); edgeShape.setLineColor(LINE_COLOR);
critic.setPriority(Decision.UNSPEC.getPriority()); 
public void notationRenderingChanged(NotationProvider np, String rendering) { if (notationProviderName == np) {
@Override public void renderingChanged() {
redraw(); }
snooze.snooze(); assertTrue("SnoozeOrder.snoozed() failed", snooze.getSnoozed());
super.computeRouteImpl(); } else {
Object package1 = Model.getModelManagementFactory().buildPackage("test1");
srcPt = sourcePortFig.connectionPoint(p.getPoint(1)); dstPt = destPortFig.connectionPoint(p
*            the model element to query for connections */
Object sourceModelElement = null; Object destModelElement = null;
@Override public Object clone() {
Collection conns = Model.getFacade().getConnections(edge); Iterator iter = conns.iterator();
@Override protected void updateNameText() {
if (bounds != null) { setLocation(bounds.x, bounds.y);
@Override protected void textEditStarted(FigText ft) {
if (Model.getFacade().isAClassifier(node)) { Model.getCoreHelper().addOwnedElement(getHomeModel(), node);
* java.lang.Object, java.lang.Object) */
Object me = Model.getFacade().getModelElement(eo); if (oldOwned.contains(eo)) {
public String getTabKey() { return "tab.modules"; } 
popUpActions.add(popUpActions.size() - getPopupAddOffset(), buildModifierPopUp(ABSTRACT | LEAF | ROOT));
public boolean remove(Object o) { synchronized (mutex) {
super.setLineWidth(w); /* NameFig and StereotypeFig are handled by parent. */
public boolean relocate(Object base) { return false;
final int delta = 3; double angle = Geometry.segmentAngle(srcPt, dstPt);
} 
Collection clients   = Model.getFacade().getClients(edge); Collection suppliers = Model.getFacade().getSuppliers(edge);
getNodes().add(node); 
@Override public Selection makeSelection() {
fireNodeAdded(node); }
public void setTarget(Object t) { target = t;
getEdges().add(edge); 
@Override protected int getNotationProviderType() {
fireNodeAdded(node); }
} 
return true; }
public Class getColumnClass(int col) { switch (col) {
if ((Model.getFacade().isAActor(me)) || (Model.getFacade().isAUseCase(me))) {
public LayoutedObject getObject(int index) { return (LayoutedObject) objects.get(index);
removeEdge(me); }
LOG.debug("model added " + me); }
if (getOwner() != null) { if (isConcurrent()
super(); 
@Override public Point getClosestPoint(Point anotherPt) {
super.refresh(); 
if ((associationEnd0 == null) || (associationEnd1 == null)) { return false;
None
List regions = Model.getStateMachinesHelper().getRegions( encloser.getOwner());
getStereotypeFig().setBounds(getBigPort().getCenter().x, getBigPort().getCenter().y,
public void mousePressed(MouseEvent e) { showPopup(e);
} 
ArgoDiagramAppearanceEventListener, ArgoNotationEventListener,
super.modelChanged(mee); 
setFilled(true); setFillColor(FILL_COLOR);
private FigSingleLineText label; 
if (!multiSelect && selectedItem instanceof ProfileConfiguration) { this.add(new ActionManageProfiles());
Notification.ADD, "stereotype",
} 
trySomeActionErrors(m3); 
persLabel.setBorder(BorderFactory.createEmptyBorder( INSET_PX, INSET_PX, INSET_PX, INSET_PX));
if (TargetManager.getInstance().getTargets().size() == 1) { 
if (oldOwned.contains(eo)) { 
UndoManager.getInstance().addMementoLock(this); start();
epCheckBox.setSelected(false); epCheckBox.addItemListener(this);
assertTrue("Decision.setName() failed", decision.getName() == translatedName);
addFig(getBigPort()); addFig(getNameFig());
updateCompartment(Model.getMetaTypes().getOperation()); 
setDashed(true); 
private List objects = new ArrayList(); 
setDestArrowHead(endArrow); 
propPanelFactory = new ActivityDiagramPropPanelFactory();
setBetweenNearestPoints(true); }
@Override public void setLineColor(Color col) {
ArgoDiagram diag = DiagramUtils.getActiveDiagram(); if (diag instanceof UMLDiagram
if (Model.getFacade().getNamespace(me) == null && (TargetManager.getInstance().getTarget()
Object base = Model.getFacade().getBase(edge); Object extension = Model.getFacade().getExtension(edge);
if (encloser != null && (Model.getFacade().isAComponent(encloser.getOwner()))) {
FigNode baseFN = (FigNode) lay.presentationFor(base); FigNode extensionFN = (FigNode) lay.presentationFor(extension);
@Override public boolean canAddNode(Object node) {
newEdge.setSourcePortFig(clientFN); newEdge.setSourceFigNode(clientFN);
@Override public String getLabelName() {
getExtensionPointsCompartment(); 
protected boolean isValidElement(Object element) { return Model.getFacade().getReceiver(getTarget()) == element;
setExtensionPointsVisible(false); 
@Override public int getLineWidth() {
Fig b = new FigMyCircle(0, 0, 100, 60); b.setFilled(true);
Object sm = Model.getStateMachinesHelper().getStateMachine(dm); if (sm != null && Model.getFacade().getTop(sm) == dm) {
Vector popUpActions = super.getPopUpActions(me); 
public boolean conformsTo(Type type) { if (type instanceof ArgoAny) {
a = (x * b) / Math.sqrt(b * b - y * y); 
Object asc = Model.getFacade().getAssociation(ae); Collection allEnds = Model.getFacade().getConnections(asc);
return new Rectangle( x + (w - containerBox.width) / 2,
return NO_PROBLEM; }
@Override public void paint(Graphics g) {
if (h.index == -1) { if (hitBelow(
if (pips instanceof PathItemPlacement) { PathItemPlacement pip =
ArgoJMenu addMenu = new ArgoJMenu("menu.popup.add"); 
public Class getColumnClass(int col) { switch (col) {
popUpActions.add(popUpActions.size() - getPopupAddOffset(), buildModifierPopUp(LEAF | ROOT));
super.insertString(offset, str, a); 
double a; double b = rectSize.height / 2.0 + vertPadding;
if (Model.getFacade().isAPseudostate(dm)) { Object k = Model.getFacade().getKind(dm);
return new Dimension(((int) (Math.ceil(a) + getLineWidth()) * 2), ((int) (Math.ceil(b) + getLineWidth()) * 2));
if (!(Model.getFacade().isAAssociation(dm))) { return NO_PROBLEM;
@Override public Point connectionPoint(Point anotherPt) {
None
if (newOwner != null) { /* Register for name changes, added extensionPoints
* All Figs need to listen to "remove", too: */ listeners.add(new Object[] {newOwner,
/* Issue 689: Look for a transition that arrives * at a sub-state of the composite state: */
for (Object ep : Model.getFacade().getExtensionPoints(newOwner)) { listeners.add(new Object[] {ep, new String[] {"location", "name"}});
Collection conn = Model.getFacade().getConnections(asc); if (Model.getFacade().isAAssociationRole(asc)) {
if (extensionPointsFigCompartment == null) { extensionPointsFigCompartment = new FigExtensionPointsCompartment(
else { if ((!((fni instanceof  FigClass)
condition = new ArgoFigText(owner, new Rectangle(X0, y, DEFAULT_WIDTH, STEREOHEIGHT),
compartmentHeight += (requestedHeight - neededHeight) / getVisibleCompartmentCount();
fg = new FigTextGroup(owner, getSettings()); 
if (isCreateDiagramsSelected() && diagramInterface != null) { addFiguresToDiagrams(newElements);
fg.addFig(label); fg.addFig(condition);
public void setVisible(boolean arg0) { super.setVisible(arg0);
setDashed(true); }
public void setUp() throws Exception { assertNotNull(modelImplementation);
PropPanelFactory diagramFactory = new UseCaseDiagramPropPanelFactory(); PropPanelFactoryManager.addPropPanelFactory(diagramFactory);
if (!useAngle) { result.translate(offset.x, offset.y);
} 
protected Object getNewNodeType(int buttonCode) { return Model.getMetaTypes().getCallState();
@SuppressWarnings("unchecked") public Collection getRelocationCandidates(Object root) {
int d1 = Math.max(0, pathDistance - slopeSegLen / 2); // If our position was clamped, try to make it up on the other end
checkParseException(m3, "1.2.1 / 1.2 :"); 
// if this composite state is not attached to a statemachine // it is not the toplevel composite state.
} 
None
// encoding.  Specifying an encoding will produce more // predictable results
if (enc.startsWith("cp")) { enc = "windows-" + enc.substring(2);
Rectangle bounds = parseBBox(); if (bounds == null) {
@Override public Object clone() {
if (Model.getFacade().isAModel(objectToAccept)) { return false;
figNode = new FigPackage(modelElement, bounds, settings); }
} 
public void targetSet(TargetEvent e) { targetSetCalled = true;
* The ArgoUML editor. */
/** * Gets the path of the code base for a model element.<p>
TargetManager.getInstance().setTarget(addedTargets.get(0)); } else {
String endSectionId = null; do {
classTableModel = new TableModelClassChecks(); classTableModel.setTarget(nodes);
protected boolean isValidElement(Object element) { return Model.getFacade().isAClassifier(element)
JButton selectAllButton = new JButton(); nameButton(selectAllButton, "button.select-all");
Object ae = assocEnds.next(); 
outputDirectoryComboBox = new JComboBox(getClasspathEntries().toArray());
* @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType() */
// _compileCheckBox = new JCheckBox(); // nameButton(_compileCheckBox, "checkbox.compile-generated-source");
Collection<String> files = generator.generateFiles( nodeColl, basepath, false);
if (!f.isDirectory() && !f.getName().endsWith(".bak")) { // TODO: This is using the default platform character
LOG.info("Registering as listener"); Model.getPump().addModelEventListener(this, getOwner(), "region");
FileReader fr = new FileReader(f); BufferedReader bfr = new BufferedReader(fr);
* @see org.tigris.swidgets.Dialog#nameButtons() */
if (e.getSource() == getOkButton()) { String path = null;
Iterator assocEnds = Model.getFacade().getConnections(dm).iterator(); 
path = path.substring(0, path.length() - fileSep.length());
Object cs = Model.getFacade().getContainer(dm); if (cs == null) {
Map<String, Set<Object>> nodesPerPath = new HashMap<String, Set<Object>>();
None
} catch (Exception userPressedCancel) { // TODO: How does the pressed cancel become a java.lang.Exception?
//        if (pve instanceof AttributeChangeEvent) { //            modelAttributeChanged((AttributeChangeEvent) pve);
for (Map.Entry entry : nodesPerPath.entrySet()) { String basepath = (String) entry.getKey();
@Override public Color getLineColor() {
checked[j] = new HashSet<Object>(); }
return handle instanceof Classifier; }
JFileChooser chooser = new JFileChooser( (String) outputDirectoryComboBox.getModel()
if (!(Model.getFacade().isAAssociation(dm))) { return NO_PROBLEM;
None
public String getDescription() { StringBuffer result = new StringBuffer(desc);
/** * The UID.
public boolean accept(File f) { if (f == null) {
tryChangingDirection(m1, m6, m7); 
@Override public void deleteFromModel() {
JPanel setDefStereoV = new JPanel(); setDefStereoV.setLayout(new FlowLayout());
if (!(Model.getFacade().isAClass(Model.getFacade().getType(ae0)) && Model.getFacade().isAClass(Model.getFacade().getType(ae1)))) {
new ArgoStatusEvent(ArgoEventTypes.STATUS_TEXT, this, status));
if (currentProject == null) { throw new RuntimeException("current project not set yet");
None
addClassDiagram(p, name); }
public void actionPerformed(ActionEvent event) { ProjectBrowser pb = ProjectBrowser.getInstance();
@Override public synchronized void paint(Graphics g) {
FigClassifierBox existingFig = null; List figs = currentLayer.getContentsNoEdges();
public synchronized int read(byte[] b, int off, int len) throws IOException {
currentGM.addNodeRelatedEdges(classifier); }
results.add(curDir); continue;
currentModule = modules.get("Java"); if (currentModule == null) {
// TODO: This appears to expect that the UML 1.3 tag name // will appear as a property name in an event, but with the
if (Globals.curEditor().getGraphModel() instanceof ClassDiagramGraphModel) {
ClassGenerationDialog cgd = new ClassGenerationDialog(classes); cgd.setVisible(true);
suffixFilters = currentModule.getSuffixFilters(); }
LOG.warn("There was some unidentified problem"); throw oclExc;
Object model = ProjectManager.getManager().getCurrentProject().getModel();
Rectangle r = ce.getJComponent().getVisibleRect(); p.translate(r.x, r.y);
String fn = file.getAbsolutePath(); String lm = String.valueOf(file.lastModified());
if (Model.getFacade().isAModelElement(((Fig) target).getOwner())) { sure = sureRemoveModelElement(((Fig) target).getOwner());
} 
None
protected Remover() { // Listen for the removal of diagrams from project
monitor.setMaximumProgress(MAX_PROGRESS); int progress = 0;
public void removeActionListener(ActionListener l) { panel.removeActionListener(l);
public void actionPerformed(ActionEvent event) { ProjectBrowser pb = ProjectBrowser.getInstance();
String text = makeText(value); setText(text);
None
if (!(Model.getFacade().isNavigable(ae0) && Model.getFacade().isNavigable(ae1))) {
@Override public void approveSelection() {
protected Remover() { // Listen for the removal of diagrams from project
@Override public void cancelSelection() {
for (FigEdge edge : existingEdges) { figEdge.makeEdgePort();
if (isDiagramLayoutSelected()) { // TODO: Monitor is getting dismissed before layout is complete
* parsing "name1;name2;name3" and stereotypes. * Also supports deleting a literal by erasing text. */
if (problems != null && problems.length() > 0) { monitor.notifyMessage(
if (e instanceof AttributeChangeEvent && "discriminator".equals(e.getPropertyName())) {
if (packageName != null && !packageName.equals("")) {
if (Model.getFacade().isAInterface(element)) { diagramInterface.addInterface(element,
private StringBuffer printToBuffer(Exception e) { StringWriter sw = new StringWriter();
@Override public void calcBounds() {
* Create a GridBagConstraints object to use with the layout. *
private JRadioButton classOnly; 
protected void buildModelList() { removeAllElements();
private JRadioButton classAndFeatures; 
protected Object getSelectedModelElement() { return Model.getFacade().getContext(getTarget());
private JRadioButton fullImport; 
// clarifiers. ((Clarifiable) getContent()).paintClarifiers(g);
if (configPanel == null) { JPanel general = new JPanel();
JLabel importDetailLabel = new JLabel(Translator .localize("action.import-level-of-import-detail"));
return; }
private JComponent getConfigPanelExtension() { List<Setting> settings = null;
None
Diagram diag = ((LayerPerspective) lay).getDiagram(); if (diag instanceof UMLDiagram
theImport.setSelectedSuffixFilter(null); }
public void addElement(Object obj) { if (obj != null && !contains(obj)) {
progressLabel = new JLabel(); progressLabel.setHorizontalAlignment(SwingConstants.RIGHT);
@Override protected void textEdited(FigText ft) {
progress = new JProgressBar(); gbc.anchor = GridBagConstraints.CENTER;
panel = makePanel(); add(panel);
public int size() { return list.size();
File[] files = curDir.listFiles(); if (files != null) {
final String suffix = getSuffix(systemId); 
} 
if (recurse && !seenDirectories.contains(curFile)) { toDoDirectories.add(curFile);
messageArea.setText(messageArea.getText() + title + "\n" + introduction + "\n" + message + "\n\n");
if (icons[0] != null && hitAbove(cx + cw / 2, cy, icons[0].getIconWidth(), icons[0].getIconHeight(),
if (urls.size() == 0) { return;
protected Remover() { // Listen for the removal of diagrams from project
URL[] urlArray = new URL[urls.size()]; urlArray = urls.toArray(urlArray);
@Override protected void setStandardBounds(int x, int y, int w, int h) {
messageArea = new JTextArea(10, 50); gbc.weighty = 0.8;
gbc.fill = GridBagConstraints.BOTH; panel.add(new JScrollPane(messageArea), gbc);
cancelButton = new JButton(Translator.localize("button.cancel")); 
public void componentMoved(ComponentEvent e) { // ignored
protected void setProperty(String text) { Model.getCoreHelper().setDiscriminator(getTarget(), text);
// static variables 
for (int i = 0; i < len; i++) { char c = nameStr.charAt(i);
@Override public void actionPerformed(ActionEvent e) {
None
public Object getChild(Object parent, int index) { for (TreeModel tm : getGoRuleList()) {
northLabel = new JLabel(intro);
public void modelChanged(UmlChangeEvent evt) { if (evt instanceof AttributeChangeEvent) {
canceled = true; close();
public void actionPerformed(ActionEvent e) { Object source = e.getSource();
JPanel controlsPanel = new JPanel(); controlsPanel.setLayout(new GridLayout(0, 2, 50, 0));
removeButton.setEnabled(false); 
LOG.warn("failed to cancel editing - " + "model element deleted while edit in progress");
if (index == pathsModel.getSize()) { //removed item in last position
if (fn != null && Model.getFacade().isAComment(fn.getOwner())) { Object oldComment = comment;
index--; }
} 
// TODO: This should be hidden by default, but accessible on // via a "details" button or tab to provide more info to the user.
continueButton = new JButton(Translator.localize("button.continue")); abortButton = new JButton(Translator.localize("button.abort"));
public LayoutedObject[] getObjects() { return (LayoutedObject[]) objects.toArray();
continueButton.addActionListener(this); abortButton.addActionListener(this);
public Dimension getMinimumDiagramSize() { return new Dimension(
return true; //ArgoDiagram activeDiagram = DiagramUtils.getActiveDiagram();
buttonGroup.add(new JRadioButton()); 
if (depth > MAX_DEPTH) { return false;
OCLEditor.OPTIONMASK_AUTOSPLIT*/); mOcleEditor.setDoAutoSplit(false);
@Deprecated public static final String ADDONLY_COMMAND = "addonly";
/** * Should this tab be activated for the current target element?<p>
Iterator features = str.iterator(); while (features.hasNext()) {
for (int i = listeners.length - 2; i >= 0; i -= 2) { if (listeners[i] == TreeModelListener.class) {
public FontUIResource getSystemTextFont() { return systemFont; } 
public FontUIResource getUserTextFont() { return userFont; } 
public Object getValueAt(int row, int col) { if (row < elements.length) {
Object[] listeners = listenerList.getListenerList(); for (int i = listeners.length - 2; i >= 0; i -= 2) {
None
if (caseSensitiveComparison != 0) { return caseSensitiveComparison;
Object f = offs.get(0); Object ns = Model.getFacade().getNamespace(f);
setTargetInternal(target); }
public void add(LayoutedObject object) { objects.add(object);
// There is no need to test if classes is empty because // the shouldBeEnabled mechanism blanks out the possibility to
Iterator assocEnds = conns.iterator(); while (assocEnds.hasNext()) {
en.nextElement().setSelected(true); return;
uri = uri.appendFileExtension("xmi"); //$NON-NLS-1$ }
if (oTarget != null) { mOcleEditor.setModel(new ConstraintModel(oTarget));
critics.add(clsNaming); critics.add(new CrDisambigStateName());
Object mmeContext = OCLUtil .getInnerMostEnclosingNamespace(theMMmeiTarget);
public void propertyChange(PropertyChangeEvent evt) { ((UMLPlainTextDocument) getDocument()).propertyChange(evt);
return; }
int iter = 0; for (CheckItem item : list.getCheckItemList()) {
OclTree tree = null; 
if (Model.getFacade().isUtility(dm)) { return NO_PROBLEM;
if (euHelper.getDoAutoSplit()) { List lConstraints = euHelper.splitConstraint(tree);
None
if (Model.getFacade().getNamespace( theMMmeiTarget)
list.addItem("Test1"); list.addItem("Test2");
String path = System.getProperty("eUML.resources"); //$NON-NLS-1$ 
Object mcOld = null; 
theMMcConstraint = Model.getCoreFactory().createConstraint();
checkAssignIDToObject(figclassifierrole, true, true); 
if (!euHelper.isValidConstraintName(sName)) { throw new IllegalArgumentException(
public void notestXmiRoseUml14() { // TODO:
Model.getCoreHelper().setNamespace(cr1, collab); Model.getCoreHelper().setNamespace(cr2, collab);
None
try { OclTree tree = null;
if (nameID == 0) { node.setName(new TName(sName));
public String getRuleName() { return Translator.localize("misc.project.diagram");
} 
// static variables 
tryPredecessors(m1, m3, m4, m5, m7); 
if (Model.getFacade(). equalsPseudostateKind(k,
private void addNewTaggedValue(Object element, String type, String dataValue) {
Model.getUmlFactory().delete(model); Collection theDregs = Model.getFacade().getRootElements();
} 
public void changedUpdate(final DocumentEvent p1) { model.setLanguage(getText());
} 
ToDoItem item = new ToDoItem(critic, headline, priority, description, moreInfo);
instructions.setText(cue); instructions.setWrapStyleWord(true);
Object sourceVertex = Model.getFacade().getSource(dm); if (!(Model.getFacade().isAPseudostate(sourceVertex))) {
@Override protected int getInitialY() {
public String getH() { return "H";
} 
if (!Model.getFacade().equalsPseudostateKind( Model.getFacade().getKind(sourceVertex),
public boolean isDataFlavorSupported(DataFlavor parFlavor) { 
if (language != null && language.length() > 0) { result += " (" + language + ")";
setSelectedItem(evt.getNewValue()); }
public void targetSet(TargetEvent e) { lastEvent = "targetSet";
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
addElement(evt.getNewValue()); /* MVW: for this case, I have to move the
if (!topSystemIdSaved) { if (ref == null) {
fireListEvents = true; fireIntervalRemoved(this, first, last);
foo[i] = params[i].newInstance(); }
first = index; last = index;
if (Model.getFacade().isAModelElement(comboBoxTarget)) { Model.getPump().removeModelEventListener(this, comboBoxTarget,
public void removeSourceFlow(Object handle, Object flow) { super.removeSourceFlow(handle, flow);
last++; }
if ("1.1".equals(version)) { uml2 = false;
addOtherModelEventListeners(listTarget); 
checkGenerated(aState, "entry/test1\nexit/b\ndo/it\ninternal/activity", true, true, true, 1, false);
this.target = target; Model.getPump().addModelEventListener(this, target,
@Override public void setTextFilled(boolean filled) {
comboBoxTarget = null; removeAllElements();
protected void removeOtherModelEventListeners(Object oldTarget) { super.removeOtherModelEventListeners(oldTarget);
} }
@Override public void setLineWidth(int w) {
|| isValidElement(getChangedElement(e))) { valid = true; // we tried to remove a value
assertTrue("GoalModel not initilized with UnspecifiedGoal", goalModel.hasGoal(unspecifiedGoal.getName()));
} } else {
NotationProviderFactory2.TYPE_OPERATION, op,
"language", "body",
@Override public Object getExpression() {
* and an expression with no script, * then show the operation: */
Object t1g = checkGenerated(aState, "when(condition1)[guard]/effect", true, true, true, false);
parseMessage(m3, " 1.1.1 : "); assertTrue(Model.getFacade().getActivator(m3) == m2);
trySimpleMoving(m1, m2, m3); 
public void targetAdded(TargetEvent e) { targetAddedCalled = true;
String notationStr = notation.toString(it, NotationSettings.getDefaultSettings());
public void targetRemoved(TargetEvent e) { targetRemovedCalled = true;
int y = insets.top; int row = 0;
dontTest.add("Primitive"); dontTest.add("ProgrammingLanguageDataType");
public void setValueAt(Object ob, int row, int col) { elements[row][col] = ob;
setSelectedItem(getSelectedModelElement()); buildingModel = false;
parseMessage(m3, " / 1..2 : "); assertTrue(Model.getFacade().getActivator(m3) == m1);
modelValid = false; }
checkGenerateCD(m1, "1 : oper()", npSettings); checkGenerateSD(m1, "oper()", npSettings);
/* TODO: Should there really be () here? */ checkGenerateCD(m1, "1 : aEBody()", npSettings);
public boolean isCellEditable(int row, int col) { return col >= 1 && row < elements.length;
checkGenerated(aState, "\n\nEntry/a\n\nExit/b\n\nDo/it\n\n\n", true, true, true, 0, false);
public int getRowCount() { return elements.length;
attr = attrs.get(1); 
if (Model.getFacade().isAPackage(namespace)) { return true;
// TODO: Except this won't work because the names are different which // will cause a test in CheckUMLModelHelper to fail
if (eventSource == null || eventSource == target) { update();
public int getChildCount(Object parent) { int childCount = 0;
Object eventSource = event.getSource(); Object target = theContainer.getTarget();
String name; if (remap.containsKey(className)) {
if (!Model.getFacade().isANamespace(namespace)) { LOG.error("No namespace as argument");
// according to the UML spec, but we rely on the caller to enforce // that if desired.
Model.getUmlFactory().delete(model); Model.getUmlFactory().delete(model2);
Object candidate = Model.getFacade().getNamespace(ns); if (!Model.getFacade().isANamespace(candidate)) {
Collection rootElements = Model.getFacade().getRootElements(); for (Object rootElement : rootElements) {
if (Model.getFacade().getNamespace(parent) != null) { name =
public void dragExit(DragSourceEvent dragSourceEvent) { // empty implementation - not used.
setEnabled(true); textSource = (JTextComponent) e.getSource();
if (model != null) { return new RowSelector(model);
None
public void lostOwnership(Clipboard clipboard, Transferable transferable) { // do nothing
predicates.add(new DefaultPredicate()); }
+ "</profile>"; 
if (target instanceof Fig) { Object owner = ((Fig) target).getOwner();
sure = true; } else if (target instanceof ArgoDiagram) {
ModuleLoader2.getDescription( ModuleInterfaceForTesting1.TEST_MODULE_NAME));
ArgoDiagram diagram = (ArgoDiagram) target; if (diagram.getNodes().size() + diagram.getEdges().size() != 0) {
sure = true; }
return (ProjectManager.getManager().getCurrentProject() .getDiagramList().size() > 1);
@Override public void setEnclosingFig(Fig encloser) {
&& target.equals(ProjectManager.getManager().getCurrentProject() .getModel())) {
assertEquals("1:", todoPane, pane.getTabs().getSelectedComponent()); 
private static final Logger LOG = Logger.getLogger(ActionExecSilk.class);
public void itemStateChanged(ItemEvent e) { Object src = e.getSource();
public void targetAdded(TargetEvent e) { lastEvent = "targetAdded";
Model.getModelManagementHelper().getAllModelElementsOfKind( ns, Model.getMetaTypes().getClassifier());
public void remove(int offs, int len) throws BadLocationException { 
for (Class<?>[] modeElementPair : validItems) { if (modeElementPair[0].isInstance(fromElement)
Model.getCoreHelper().setKind(p1, Model.getDirectionKind().getReturnParameter());
a3 = Model.getCoreFactory().buildAssociation(c3, c4); Model.getCoreHelper().setName(a3, "A2");
String changeIndicator = ""; if (saveAction != null && saveAction.isEnabled()) {
protected void setUp() throws Exception { super.setUp();
boolean sure = false; if (Model.getFacade().isAModelElement(target)) {
Integer[] multArgs = {1, 1}; Class[] multArgTypes = {int.class, int.class};
String confirmStr = MessageFormat.format(Translator.localize(
Model.getUseCasesFactory().buildExtend(useCase1, useCase3); assertTrue(critic.predicate2(useCase1, null));
if (size > 0) { return true;
public int getColumnCount() { return columnNames.length;
if (e.getSource() == getOkButton()) { buttonOkActionPerformed();
isClearable = clearable; propertySetName = name;
if (e.getSource() == delButton) { deleteSelectedSettings();
private static String getNames(Node node) { // TODO: Do we want the top level package here instead of the immediate
int firstSel = rowSM.getMinSelectionIndex(); for (int i = 0; i < selectedIndexes.length && firstSel != -1; i++) {
public void insertUpdate(final DocumentEvent p1) { model.setLanguage(getText());
StringBuffer msg = new StringBuffer(); msg.append(Translator.localize("dialog.source-path-del.question"));
rowHeight = rowHeights.get(row).intValue(); if (rowHeight == 0) {
super.remove(0, getLength()); super.insertString(0, textValue, null);
diagram = DiagramFactory.getInstance().create(type, model, settings);
return false; }
rl.add(Model.getMetaTypes().getUMLClass()); rl.add(Model.getMetaTypes().getInterface());
Object[] options = {Translator.localize(
protected void tearDown() { TargetManager.getInstance().setTarget(null);
public void addTreeModelListener(TreeModelListener l) { }
protected void setUp() throws Exception { super.setUp();
buildModel(); model.setTarget(elem);
trySomePredecessorErrors(m2, m3); }
public void run() { resultsLabel.setText(Translator.localize("dialog.find.searching"));
protected ColorUIResource getPrimary2() { return primary2; } /*
//        actionClient.actionPerformed(new ActionEvent(this, 0, "foo")); 
ProjectManager.getManager().removeProject(proj); ProfileMother profileMother = new ProfileMother();
String s = Configuration.getString( Argo.KEY_MOST_RECENT_PROJECT_FILE, "");
FileFilter ffilter = chooser.getFileFilter(); if (ffilter instanceof AbstractFilePersister) {
chooser.setFileView(ProjectFileView.getInstance()); 
TransformerAction(String nameKey, Project project, Object sourceModelElement) { this(nameKey);
// static variables 
public Object getValueAt(int row, int col) { if (row < elements.length) {
None
public void propertyChange(PropertyChangeEvent evt) { ((UMLPlainTextDocument) getDocument()).propertyChange(evt);
document.setTarget(Model.getFacade().getTaggedValue( panelTarget, tagName));
File n = new File(theFile.getPath() + "."
tb.add(new ActionNewStereotype()); 
None
updateUI(); setAlignmentX(LEFT_ALIGNMENT);
public UMLEditableComboBox(UMLComboBoxModel model, Action selectAction, boolean showIcon) {
protected boolean isValidElement(Object element) { return Model.getFacade().isAAction(element);
public void actionPerformed(ActionEvent event) { ProjectBrowser pb = ProjectBrowser.getInstance();
@Override protected void initNotationProviders(Object own) {
public ActionExecSilk() { super("Exec SILK script...", NO_ICON);
assertTrue("Decision.setPriority() failed", decision.getPriority() == priority);
* setProperty("org.netbeans.lib.jmi.Logger.fileName", "") *              org.netbeans.mdr.Logger
public MBeanNotificationInfo[] getNotificationInfo() { return notifier.getNotificationInfo();
try { critics.add(new CrOCL("context AssociationClass inv:"
// static variables 
if (!(Model.getFacade().isAClassifier(dm))) { return NO_PROBLEM;
layouter.layout(); diagram.damage();
// only classes with name need a constructor private static CompoundCritic crCompoundConstructorNeeded;
if (Thread.interrupted()) { throw new InterruptedException();
if (aggCount > 1) { return PROBLEM_FOUND;
LOG.info("setTarget: there are " + TargetManager.getInstance().getTargets().size()
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
if (propPanel instanceof PropPanel) { ((PropPanel) propPanel).setOrientation(getOrientation());
FigActivation currentActivation = null; if (!hasIncomingCallActionFirst(figMessages)) {
Object[] listeners = listenerList.getListenerList(); for (int i = listeners.length - 2; i >= 0; i -= 2) {
public void mouseClicked(MouseEvent e) { showPopup(e);
None
if (fromElement.getClass() != toElement.getClass()) { return false;
Model.getFacade().isAAbstraction(o), Model.getMetaTypes().getAbstraction());
return (validConnectionMap.get(connectionType) != null); }
return PROBLEM_FOUND; }
for (Class<?>[] modeElementPair : validItems) { if (modeElementPair[0].isInstance(fromElement)
None
public TargetListener getTargettableModel() { return (TargetListener) getModel();
if (e instanceof MalformedXMIException) { throw (MalformedXMIException) e;
public void removeUpdate(final DocumentEvent p1) { model.setLanguage(getText());
if ((triggerAssociation == null) && (getToDoItem() != null)) { triggerAssociation = getModelElement();
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
String action = ""; 
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
JPanel thePanel = new JPanel(); thePanel.setLayout(new BoxLayout(thePanel, BoxLayout.X_AXIS));
// Give the parser a map of model elements // keyed by their UUID. This is used to allocate
selectedListModel = new UMLModelElementStereotypeListModel(); selectedList = new UMLStereotypeList(selectedListModel);
HashMap<String, Object> globalXmiIdToObjectMap = new HashMap<String, Object>(resolver.getIdToObjectMap());
addStButton = new JButton(">>"); addStButton.setToolTipText(Translator.localize("button.add-stereo"));
addSupportedDecision(UMLDecision.NAMING); setKnowledgeTypes(Critic.KT_SYNTAX);
} else if (e instanceof AddAssociationEvent) { //Remove the element from Available List
Object asc = /*(MAssociation)*/ dm; 
addStButton = new JButton(">>"); addStButton.setToolTipText(Translator.localize("button.add-stereo"));
addStButton.addActionListener(new AddRemoveListener()); removeStButton.addActionListener(new AddRemoveListener());
* The constructor. *
Object a = cf.buildClass("a", model); Object b = cf.buildClass("b", a);
@Override public boolean isEnabled() {
// Enumerate constructors 
public void setItem(Object anObject) { if (((UMLComboBoxModel) getModel()).contains(anObject)) {
public TagDefinition buildTagDefinition(String name, Object owner, Object namespace) {
public Component getEditorComponent() { return panel;
ta1 = Model.getCoreFactory().buildTemplateArgument( Model.getCoreFactory().buildClass("ta1a"));
public void addActionListener(ActionListener l) { panel.addActionListener(l);
Object p1 = null; while (p1 == null && params1.hasNext()) {
GridBagConstraints gridBagConstraints1 = new GridBagConstraints(); gridBagConstraints1.fill = GridBagConstraints.BOTH;
None
return false; }
if (defaultToProperties || lastNonNullTab < 0) { tabSelected = selectPropsTab(target);
.getAssociation(ends.iterator().next()); assertEquals(2, Model.getFacade().getConnections(assoc1).size());
try { Model.getCoreFactory()
String name = Model.getFacade().getName(elem); if (name != null && name.startsWith(text)) {
operSeen.add(op); }
if (oldValue == getSelectedItem()) { getEditor().setItem(getSelectedItem());
matches = registry.getMatches("key2", "foo"); checkSingle("main2", matches);
LOG.debug("register called twice for the same object " + "- ignoring second");
workAreaPane = new BorderSplitPane(); 
public void selectAll() { super.selectAll();
public Object getItem() { return panel.getText();
imageIconLabel.setOpaque(true); imageIconLabel.setBackground(theTextField.getBackground());
public final void focusGained(FocusEvent arg0) { getEditor().selectAll();
public boolean isRelevant(Critic c, Designer d) { return c.isEnabled();
@Override public void addKnowledgeType(String type) {
&& (o == null || "".equals(o)))) { toBeRemoved.add(o);
imageIconLabel.setBorder(BorderFactory .createEmptyBorder(0, 2, 0, 2));
for (Object o : operSeen) { if (signaturesMatch(op, o)) {
add(LabelledLayout.getSeparator()); 
final Object returnMessage = gm.connectMessage( returnMessageSource,
UMLTextArea2 comment = new UMLTextArea2( new UMLModelElementCommentDocument(false));
public String getColumnName(int col) { return columnNames[col];
UMLTextArea2 commentBody = new UMLTextArea2( new UMLModelElementCommentDocument(true));
@Override public void critique(Object dm, Designer dsgr) {
final Color inactiveColor = UIManager.getColor("TextField.inactiveBackground");
public Icon getClarifier() { return clarifier;
((FigEdge) target).getFig().removePropertyChangeListener(this); }
public List<Goal> getSupportedGoals() { return unspecifiedGoal;
FigClassAssociationClass ac = ((FigAssociationClass) target).getAssociationClass();
if (ac != null) { ac.removePropertyChangeListener(this);
currentLayer.add(newFig); currentGM.addNode(classifier);
// the responsibility of determining if the given target is a // correct one for this tab has been moved from the
public Icon getClarifier() { return clarifier;
updateArrow(); damage();
public void targetSet(TargetEvent e) { targetSetCalled = true;
public boolean canFixIt(ToDoItem item) { return false; } 
public void toDoItemsRemoved(ToDoListEvent tde) { LOG.debug("toDoItemRemoved");
public boolean hasState(String name) { LOG.warn("ArgoAny.hasState() has been called, but is "
if (downlinks.size() == 1) { ClassdiagramNode downNode = downlinks.get(0);
Object[] listeners = listenerList.getListenerList(); for (int i = listeners.length - 2; i >= 0; i -= 2) {
public Object getElementAt(int index) { if (index >= 0 && index < objects.size()) {
chooser.addPropertyChangeListener( JFileChooser.FILE_FILTER_CHANGED_PROPERTY,
if (y < getY()) { y = getY();
SwingUtilities.invokeLater(new Anonymous1(fileName)); }
return activatingMessage.getSourceFigNode() == messageFig.getDestFigNode();
if (drawingArea.width <= 0 || drawingArea.height <= 0) { Rectangle dummyArea = new Rectangle(0, 0, 50, 50);
ImageIO.write(i, "gif", s); 
super.actionPerformed(ae); }
private FigMessage activatingMessage; 
RenderedImage i = new DeferredBufferedImage(canvasArea, BufferedImage.TYPE_INT_ARGB, ce, scale);
new HashSet<Object>(TargetManager.getInstance().getTargets()), set1);
// Java SE 6 has a native GIF writer, but it's not in Java 5.  One // is available in the JAI-ImageIO library, but we don't currently
Layer layer = ce.getLayerManager().getActiveLayer(); 
} 
public class TestModelEventPump extends TestCase { 
setSourcePortFig(sourceFN); setSourceFigNode(sourceFN);
bounds.width -= bounds.x; bounds.height -= bounds.y;
DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();
// static variables 
Document document = domImpl.createDocument(null, "svg", null); // Create an instance of the SVG Generator
public void keyTyped(KeyEvent e) { // ignored
bounds.width = Math.max(bounds.width, fig.getX() + fig.getWidth()); bounds.height = Math.max(bounds.height,
if (currentActivation != null) { currentActivation.setHeight(
public void toDoItemsChanged(ToDoListEvent tde) { LOG.debug("toDoItemsChanged");
SVGGraphics2D svgGenerator = new SVGGraphics2D(document); 
curBody.getDocument().addDocumentListener(this); 
reader.readLine(); } else {
priorities = p; }
public void toDoListChanged(ToDoListEvent tde) { }
for (Iterator i = modelImpl.getUmlPackage().getCore().getTagDefinition() .refAllOfClass().iterator(); i.hasNext();) {
// static variables 
public boolean isLeaf(Object node) { for (TreeModel tm : getGoRuleList()) {
else if (Model.getFacade().isAMessage(element)) { ports.add(Model.getFacade().getSender(element));
public static List getEdges(Diagram diagram) { Layer lay = diagram.getLayer();
@Override protected void modelChanged(PropertyChangeEvent mee) {
public void componentShown(ComponentEvent e) { // Update our model with our saved target
return true; }
if (message.isCreateMessage() && equals(message.getDestFigNode())
public void keyReleased(KeyEvent e) { // ignored
int n = -1; for (int i = 0; i <= row; i++) {
public void toDoItemsAdded(ToDoListEvent tde) { LOG.debug("toDoItemAdded");
action = ac; operation = op;
return 0; }
public void stateChanged(ChangeEvent  e) { //TODO: should fire its own event and ProjectBrowser
public Set getDependencies(Object parent) { // TODO: What?
if (row == tvs.size()) { return "";
* @param tagName * @return the child element
selectItem(todo); break; // Only interrupt for one todoitem
} Object tv = Model.getExtensionMechanismsFactory()
FigVertex compositeState = (FigVertex) encloser; for (DiagramElement de :
} 
public void targetRemoved(TargetEvent e) { lastEvent = "targetRemoved";
None
public void bindPort(Object port, Fig f) { if (f.getOwner() != port) {
Model.getExtensionMechanismsHelper().addTaggedValue(target, tv); 
// static variables 
@Override protected void initNotationProviders(Object own) {
fireTableChanged(new TableModelEvent(this)); }
@Override protected int getInitialX() {
public String getParsingHelp() { return null;
return null; }
public void addModelEventListener(PropertyChangeListener listener, Object modelElement, String[] propertyNames) {
public void valueForPathChanged(TreePath path, Object newValue) { }
setCurrentDiagram(m); } else {
public void addModelEventListener(PropertyChangeListener listener, Object modelElement, String[] propertyNames) {
public List<AbstractArgoJPanel> getDetailsTabs() { List<AbstractArgoJPanel> result =
if (currentGM.canAddNode(classifier)) { FigClassifierBox newFig =
// static variables 
if (!isSelfMessage()) { FigClassifierRole dest = (FigClassifierRole) getDestFigNode();
((TreeModelListener) listeners[i + 1]).treeNodesChanged(e); }
public Type navigateQualified(String name, Type[] qualifiers) throws OclTypeException {
final File oldFile = new File(getOldDefaultPath()); if (oldFile.exists() && oldFile.isFile() && oldFile.canRead()
if (Model.getFacade().isAClassifier(node)) { Model.getCoreHelper().addOwnedElement(getHomeModel(), node);
public boolean contains(Object elem) { if (super.contains(elem)) {
@Override public int hashCode() {
public Vector getPopUpActions(MouseEvent me) { Vector popUpActions = super.getPopUpActions(me);
protected final void fireContentsChanged(Object source, int index0, int index1) { if (fireListEvents && !buildingModel)
public void removeTreeModelListener(TreeModelListener l) { }
// 1. Remember current message paths for (Fig workOnFig : figs) {
public void generatorAdded(ArgoGeneratorEvent e) { refresh();
* @param tagName * @return the child element
if (handle instanceof MultiplicityElement) { MultiplicityElement me = (MultiplicityElement) handle;
None
for (Fig fig : figs) { if (fig instanceof FigMessage && ((FigMessage) fig).isSelfMessage()
|| isValidElement(getChangedElement(e))) { valid = true; // we tried to remove a value
public AbstractArgoJPanel spawn() { TabResults newPanel = (TabResults) super.spawn();
super(Translator.localize("action.import-sources"), ResourceLoaderWrapper.lookupIcon("action.import-sources"));
notationProviderBody = NotationProviderFactory2.getInstance() .getNotationProvider(NotationProviderFactory2.TYPE_STATEBODY,
chooser.setAcceptAllFileFilterUsed(false); sgm.setFileChooserFilters(chooser, defaultName);
public FontUIResource getMenuTextFont() { return controlFont; } 
* Parse a given inputsource to a collection of top level model elements. *
public void componentHidden(ComponentEvent e) { // Stop updating model when we're not visible
private List createChildren(List children, Object parent, int currentLevel, int maxLevel, int numChildren) {
assertEquals("Got wrong namespace for first shared", c, ch.getFirstSharedNamespace(d, f));
Collection getProperties(Object arg0); 
extend = Model.getUseCasesFactory().buildExtend(uc1, uc2);
public void mouseExited(MouseEvent e) { if (hasPopup()) {
buttonPanel.putClientProperty("ToolBar.toolTipSelectTool", Translator.localize("action.select"));
Object ge = coreFactory.createClass(); 
buttonPanel.setMinimumSize(new Dimension(0, height)); buttonPanel.setPreferredSize(new Dimension(0, height));
project = persister.doLoad(file); project.postLoad();
dispatch = new UMLChangeDispatch(this, UMLChangeDispatch.TARGET_CHANGED_ADD);
for (TargetListener action : collectTargetListenerActions()) { list.add(TargetListener.class, action);
return handle; }
fireTargetSet(new TargetEvent( this, TargetEvent.TARGET_SET, null, new Object[] {target}));
public void parse(Object modelElement, String text) { 
* java.awt.event.ActionEvent) */
public void move(Object parent, Object element, Direction direction) { if (element instanceof Argument) {
public synchronized int read() throws IOException { 
if (container instanceof TabTarget) { SwingUtilities.invokeLater(new Runnable() {
@Override public void removeFromDiagramImpl() {
childHeight = getChildHeight(childComp); if (childHeight == 0) {
public Object findClassifierByName(Object ofs, String s) { if (!(ofs instanceof ObjectFlowState)) {
final JLabel jlabel = (JLabel) childComp; childComp = jlabel.getLabelFor();
if (childComp.getMaximumSize() != null && getMaximumWidth(childComp) < componentWidth) {
fooClass = project.findType( "testProjectWithUserDefinedProfilePersistency-class", false);
return getMinimumHeight(childComp); }
public Object getObjectFlow() { return ObjectFlow.class;
// WFR 2.10.3.3 #4 returnList.removeAll(mmh.getAllModelElementsOfKind(ns,
public XmiReferenceException(String message) { super(message);
rebuildModelList(); }
trySomeMoreComplexMoving(m1, m2, m3); 
vertex.setContainer((Region) region); return;
if (searchString != null && key == KeyEvent.VK_BACK_SPACE && searchString.length() > 0) {
Rectangle mousePoint = new Rectangle(x - 5, y - 5, 5, 5); // and find the Fig:
return null; 
public Collection getChildren(Object parent) { if (parent instanceof Project) {
public void caretUpdate(CaretEvent e) { textSource = (JTextComponent) e.getSource();
public void parse(Object modelElement, String text) { try {
State state = UMLFactory.eINSTANCE.createState(); Region region = UMLFactory.eINSTANCE.createRegion();
return false; }
return handle instanceof TemplateParameterSubstitution; }
public Object invokeFeature(Map<String, Object> vt, Object subject, String feature, String type, Object[] parameters) {
None
Project project = ProjectManager.getManager().makeEmptyProject(); assertTrue(project.getProfileConfiguration().getProfiles().contains(
rebuildModelList(); }
boolean hasContents = false; Transferable content =
private static String name = Translator.localize("label.name"); private static String typeName = Translator.localize("label.type");
public void handleResetToDefault() { // Do nothing - these buttons are not shown.
Icon icon = ResourceLoaderWrapper.getInstance().lookupIcon(value); if (icon != null) {
@Deprecated public void notationChanged(ArgoNotationEvent e) {
String type = null; if (Model.getFacade().isAModelElement(value)) {
public Profile lookForRegisteredProfile(String value) { if (value != null) {
public void handleStartElement(XMLElement e) throws SAXException { if (DBG) {
Project p2 = ProjectManager.getManager().makeEmptyProject(); assertTrue("New project does not get Default Setting",
public Project doLoad(File file) throws OpenException, InterruptedException { // let's initialize the progressMgr
public void valueChanged(ListSelectionEvent lse) { if (lse.getValueIsAdjusting()) {
public final String getMainTag() { return "todo";
protected String getDesc() { return Translator.localize("combobox.filefilter.uml");
public String getExtension() { return "uml";
public void load(Project project, InputStream inputStream) throws OpenException {
setTargetInternal(null); }
b = new JButton(); buttonPanel.add(b);
public void refresh() { super.refresh();
if (isVisible()) { setTargetInternal(target);
machine = target; } else {
public void handleSettingsTabRefresh() { assert p != null;
class ActionRemoveTaggedValue extends UndoableAction { 
setEnabled(false); }
None
public JPanel getTabPanel() { return this; } 
machine = Model.getStateMachinesFactory().buildStateMachine(target); } else if (Model.getFacade().isAStateMachine(target)
public boolean shouldBeEnabled(Object target) { ArgoDiagram diagram = DiagramUtils.getActiveDiagram();
public void targetAdded(TargetEvent e) { setTarget(e.getNewTarget());
public void handleSettingsTabSave() { assert p != null;
public boolean doCommand(String args) { lastInvoked = this;
throw new NotImplementedException(); }
bodies.clear(); langs.clear();
methodImpl.getBodies().set(bodyIndex, body); return;		// Job done.
addSupportedDecision(UMLDecision.RELATIONSHIPS); setKnowledgeTypes(Critic.KT_SYNTAX);
machine = Model.getStateMachinesFactory().createStateMachine(); if (Model.getFacade().isANamespace(target)) {
public void targetAdded(TargetEvent e) { setTarget(e.getNewTarget());
public void structureChanged() { // remove references for gc
labelWidth, label.getPreferredSize().height));
public void modelElementChanged(Object node) { traverseModified((TreeNode) getRoot(), node);
dialog = new JDialog(frame, title, true); Container contentPane = dialog.getContentPane();
Project p = ProjectManager.getManager().getCurrentProject(); Object ns = findNamespace();
if (event.getSource() == theButton) { Object item = theComboBox.getSelectedItem();
final Collection<FigEdge> existingEdges = getFigEdges(); for (Iterator<FigEdge> it = existingEdges.iterator(); it.hasNext(); ) {
None
* @see org.argouml.persistence.ProgressListener#progress(org.argouml.persistence.ProgressEvent) */
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
Object type = Model.getFacade().getType(ae); 
public void setFig(Fig f) { super.setFig(f);
Integer.parseInt(str); super.insertString(offset, str, a);
public Collection getChildren(Object parent) { if (Model.getFacade().getUmlVersion().charAt(0) == '2'
Collection c = Model.getFacade().getExtensionPoints( Model.getFacade().getBase(extend));
public String getRuleName() { return Translator.localize("misc.package.element-import");
int priority = 2; String name = "misc.decision.inheritance";
bindPort(element, bigPort); 
Iterator assocEnds = Model.getFacade().getConnections(dm).iterator(); while (assocEnds.hasNext()) {
if (Model.getFacade().getTargetScope(getTarget()) == null) { Model.getCoreHelper().setTargetScope(getTarget(),
Object inner = Model.getCoreFactory().buildClass(classifier); TargetManager.getInstance().setTarget(inner);
checkParseException(m1, " 1.1 : "); checkParseException(m2, " 1.1.1 : ");
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
@Override public void caseAFeaturePrimaryExpression(AFeaturePrimaryExpression node) {
Object kind = null; if (actionCommand.equals(SEQUENTIAL_COMMAND)) {
} else { Model.getCoreFactory().buildDependency(getTarget(), client);
return ""; //$NON-NLS-1$ }
public void actionPerformed(ActionEvent e) { classTableModel.setAllChecks(true);
final boolean result = copyFile(oldFile, file); if (result) {
None
try { // This is needed for a CommentEdge ...
for (Object st : stereotypes) { availableTagDefs.addAll(Model.getFacade().getAttributes(st));
setModelInvalid(); } else if ("stereotype".equals(evt.getPropertyName())) {
public void mouseClicked(MouseEvent e) { showPopup(e);
setModelInvalid(); } else if ("stereotype".equals(evt.getPropertyName())) {
public void pushNamespaceElement(NamespaceElement element) { ns.push(element);
} 
@Override protected void nameButtons() {
@Override public void critique(Object dm, Designer dsgr) {
// static variables 
return -1; }
if (!(assoc instanceof Association)) { throw new IllegalArgumentException(
return comparePaths(o1, o2); }
String name1, name2; try {
if (caseSensitiveComparison == 0) { if (name1 == null) {
rootPane.getActionMap().put(ACTION_KEY_ESCAPE, new AbstractAction() { private static final long serialVersionUID = 0;
goalModel.stopDesiring(unspecifiedGoal.getName()); 
if (caseSensitiveComparison != 0) { return caseSensitiveComparison;
assertTrue("GoalModel.setGoalPriority added an extra Goal", goalModel.getGoalList().size() == 1);
/** * Construct an element using the string.
case KeyEvent.VK_BACK_SPACE: case KeyEvent.VK_DELETE:
} 
case KeyEvent.VK_HOME: case KeyEvent.VK_END:
return null; } catch (IllegalArgumentException iare) {
public void keyPressed(KeyEvent e) { if (!e.isConsumed() && e.getKeyChar() == KeyEvent.VK_ENTER) {
return null; } catch (InvocationTargetException tie) {
return null; } catch (SecurityException se) {
return null; } catch (InvocationTargetException tie) {
Class cls = org.tigris.gef.base.Editor.class; cls = org.xml.sax.AttributeList.class;
Package pckg = saxObject.getClass().getPackage(); if (pckg != null) {
public void printStackTrace(PrintStream ps) { super.printStackTrace(ps);
a.putValue("popped", Boolean.valueOf(false)); blockEvents = false;
} }
LOG.error(ioe); }
if (step1Choice == null) { List<String> opts = buildOptions();
LOG.error("Mac OS X Adapter could not talk to EAWT:"); ex.printStackTrace();
public String getZipFileExtension() { return FILE_EXT;
setHandledMethod.invoke(event, new Object[] { Boolean.valueOf(handled) }); } catch (Exception ex) {
try { jdepend.addDirectory("build-eclipse");
try { jdepend.addDirectory("build/classes");
try { jdepend.addDirectory("target/classes");
*            the model element to query for connections */
Method enableAboutMethod = macOSXApplication.getClass().getDeclaredMethod("setEnabledAboutMenu", new Class[] { boolean.class }); enableAboutMethod.invoke(macOSXApplication, new Object[] { Boolean.valueOf(enableAboutMenu) });
protected ColorUIResource getPrimary3() { return primary3; } 
public boolean callTarget(Object appleEvent) { if (appleEvent != null) {
@Override public boolean predicate2(Object dm, Designer dsgr) {
// This error will throw when running from the ant setup. }
public void caseAMultiplicativeExpressionTail( AMultiplicativeExpressionTail node) {
* @since 0.15.3 * @author  mkl
suite.addTest(new TimeStamp()); for (int i = 0; i < clean.length; i++) {
int choice = -1; 
{"org.argouml.uml.diagram", "org.argouml.ui"}, {"org.argouml.ui", "org.argouml.notation.ui"},
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
}; for (int i = 0; i < dep.length; i++) {
public FontUIResource getControlTextFont() { return controlFont; } 
protected void printFooter() { // do nothing
if (findAssociation(dm, 0)) { return NO_PROBLEM;
assertNotNull(i.getDetailsTabs()); assertNotNull(i.getSettingsTabs());
@Override public Set<Object> getCriticizedDesignMaterials() {
ArgoEventPump.addListener(ArgoEventTypes.HELP_CHANGED, helpTracker); ArgoEventPump.addListener(ArgoEventTypes.HELP_REMOVED, helpTracker);
public void setFig(Fig f) { fig = f; } 
ArgoEventPump.removeListener(ArgoEventTypes.HELP_CHANGED, helpTracker); ArgoEventPump.removeListener(ArgoEventTypes.HELP_REMOVED, helpTracker);
final ArgoDiagramAppearanceEvent displayEvent = new ArgoDiagramAppearanceEvent(
} }
evt = new ArgoGeneratorEvent(ArgoEventTypes.GENERATOR_CHANGED, this); ArgoEventPump.fireEvent(evt);
} 
evt = new ArgoHelpEvent(ArgoEventTypes.HELP_CHANGED, this, "Test Event");
evt = new ArgoNotationEvent(ArgoEventTypes.NOTATION_CHANGED, this); ArgoEventPump.fireEvent(evt);
@Override public Class getWizardClass(ToDoItem item) {
totalEventsFired++; 
eventStatus |= (0x01 << event); }
public String computeSuggestion(String name) { String sug;
private TArgoHelpEventListener helpTracker = new TArgoHelpEventListener();
* @param i the todo item * @param d the designer
SwingUtilities.invokeAndWait(new Runnable() { public void run() {
if (thisFig == getStereotypeFig()) { clone.stereotypeFig = (FigStereotypesGroup) thisFig;
for (int events = eventStatus; events > 0; ++eventsFired) { events &= events - 1;
rc = new ResolvedCritic("rc", (List<String>) null); assertTrue("getCritic simple", "rc".equals(rc.getCritic()));
try { rc = new ResolvedCritic(c, null);
if (!(client instanceof BehavioredClassifier)) { throw new IllegalArgumentException(
/* testmc should now have an ItemUID so we should be able to * create without adding a new ItemUID */
rc = new ResolvedCritic(c, set, false); 
assertTrue("EnabledCM.isRelevant(Critic, Designer) is incorrect", cm.isRelevant(critic, Designer.theDesigner()));
critic.setEnabled(false); 
assertTrue("EnabledCM.isRelevant(Critic, Designer) is incorrect", !cm.isRelevant(critic, Designer.theDesigner()));
critic.snooze(); 
critic.unsnooze(); 
assertTrue("NotSnoozedCM.isRelevant(Critic, Designer) is incorrect " + "when critic not snoozed",
assertTrue("CurDecisionCM.isRelevant(Critic, Designer) is " + "incorrect with one decision and critic has priority 0",
assertTrue( "CurDecisionCM.isRelevant(Critic, Designer) is incorrect with "
* Next level in the settings hierarchy to inherit from if the value * isn't set (ie is <default>) at the current level.
assertTrue( "CurDecisionCM.isRelevant(Critic, Designer) is incorrect with"
public Object getDestination(Object relationship) { if (relationship instanceof Message) {
int priority = ToDoItem.HIGH_PRIORITY; String headline = "Test Headline";
ToDoList list = new ToDoList(); 
list.addElement(item); 
currentKeyStroke = decodeKeyStroke(confCurrentShortcut); }
list.addElement(item); 
assertTrue("ToDoList.size() is incorrect", list.size() == 1); 
public void doAction(int oldStep) { Object oper;
assertTrue("ToDoItem.get(0) did not return correct item", list.size() > 0 && list.get(0) == item);
public void paintIcon(Component c, Graphics g, int x, int y) { final Object modelElement = fig.getOwner();
assertTrue("ToDoItem.removeElement(item) failed to remove item", list .removeElement(item));
assertTrue("ToDoList.size() is incorrect", list.size() == 0); }
GoalModel goalModel = new GoalModel(); Goal unspecifiedGoal = Goal.getUnspecifiedGoal();
modelChanged(pve); 
goalModel.setGoalPriority(unspecifiedGoal.getName(), unspecifiedGoal .getPriority() + 1);
assertTrue("GoalModel not correctly updating goal priority", goalModel .getGoalList().get(0).getPriority() == unspecifiedGoal
goalModel.removeGoal(unspecifiedGoal); 
goalModel.startDesiring(unspecifiedGoal.getName()); 
assertTrue("GoalModel.startDesiring did not add a Goal", goalModel.getGoalList().size() == 1);
@Override public boolean predicate2(Object dm, Designer dsgr) {
UMLStateDiagram statediag = new UMLStateDiagram(); 
InitializeModel.initializeMock(); }
checkAssignIDToObject(statediag, true, true); 
@Override public void propertyChange(PropertyChangeEvent evt) {
Object iface = Model.getCoreFactory().createInterface(); FigInterface figinterface = new FigInterface(iface, bounds, settings);
// static variables 
checkAssignIDToObject(figinitialstate, true, true); checkAssignIDToObject(figjoinstate, true, true);
checkAssignIDToObject(figtransition, true, true); 
umlReserved.add("becomes"); umlReserved.add("call");
Decision decision = new Decision(name, priority); 
LOG.warn("A deleted element still exists on the diagram"); return Translator.localize("misc.name.deleted");
assertTrue("Decision.getName() is incorrect", decision.getName() == translatedName);
} }
priority = 1; decision.setPriority(priority);
if (returnParasSb.length() == 3) { returnParasSb.delete(0, returnParasSb.length());
name = "misc.decision.uncategorized"; translatedName = Translator.localize(name);
@Override public void initWizard(Wizard w) {
assertTrue("Decision.equals(Decision) failed", decision.equals(Decision.UNSPEC));
assertEquals(headline, item.getHeadline()); assertEquals(description, item.getDescription());
@Override public Dimension getMinimumSize() {
ChecklistStatus list = new ChecklistStatus(); 
assertTrue("ChecklistStatus.size() is incorrect", list.size() == 4); 
LOG.info("The user chose to exit and save"); trySave(ProjectManager.getManager().getCurrentProject() != null
destMult.textEdited(); }
assertTrue("ChecklistStatus items incorrectly added (category: " + category + ", description: )" + description,
ChecklistStatus list2 = new ChecklistStatus(); 
list2.addAll(list); 
// Find the preceding message, if any, on either end of the // association.
assertTrue("ChecklistStatus.addAll(Checklist) failed", list2.size() == 4);
public void actionPerformed(ActionEvent e) { Object source = e.getSource();
ChecklistStatus list = new ChecklistStatus(); 
CheckItem item = new CheckItem(category, description, moreInfo, PredicateTrue.getInstance());
public String getProfileIdentifier() { return "CodeGeneration";
category += "- Set Test"; description += "- Set Test";
CheckItem item2 = new CheckItem(category, description); 
// static variables 
assertTrue("CheckItem.getDescription() incorrect " + "after initialization (2)",
SnoozeOrder snooze = new SnoozeOrder(); 
snooze.unsnooze(); assertTrue("SnoozeOrder.unsnoozed() failed", !snooze.getSnoozed());
Object package1 = Model.getModelManagementFactory().buildPackage("test1");
Object aClass = Model.getCoreFactory().buildClass("Test", p.getRoot()); Object cls1 = Model.getCoreFactory().buildClass(aClass);
// Set the appropriate aggregation on each end 
Object machine = Model.getStateMachinesFactory().buildStateMachine(aClass);
//        putNotationArgument("showAssociationName", //                getSettings().isShowAssociationNames());
Model.getCoreHelper().setNamespace(machine, aClass); UMLStateDiagram d =
Object package1 = Model.getModelManagementFactory().buildPackage("test1");
None
if (rowObj == null) { return "";
Object actgrph = Model.getActivityGraphsFactory().buildActivityGraph(aClass);
saveNewFile = true; }
//            pce = (PropertyChangeEvent) rxdEvent.getSource(); //            assertTrue("Wrong event name",
assertTrue("CurDecisionCM.isRelevant(Critic, Designer) is incorrect " + "when critic has 0 decisions",
SwingUtilities.invokeAndWait(new Runnable() { public void run() {
ProjectManager.getManager().makeEmptyProject(); }
@Override public void critique(Object dm, Designer dsgr) {
ProfileManager profileManager = ProfileFacade.getManager(); Profile metaProfile = profileManager.getProfileForClass(
Object model = project.getUserDefinedModelList().get(0); assertNotNull(model);
project.getProfileConfiguration().removeProfile(metaProfile, model); // assert that the project's model element that had a dependency to
File projFile = File.createTempFile("projFile", ".zargo"); TestProjectWithProfiles.initAppVersion();
Object namespace = Model.getFacade().getNamespace(modelElement); if (namespace != null) {
// subsystem and contains a stereotype and this contains a // tag definition
tryGuardAndIteratorSyntax(m3); 
theStereotype = Model.getFacade().getStereotypes(foo).iterator().next();
pckge = project.getUserDefinedModelList().get(0); assertNotNull(pckge);
public JPanel makePanel(int newStep) { switch (newStep) {
ProfileManager profileManager = ProfileFacade.getManager(); Profile userDefinedProfile =
private static final String PTYPE_BOOLEAN_NAME = "Boolean"; private static final String PTYPE_INTEGER_NAME = "Integer";
project.getProfileConfiguration().addProfile(userDefinedProfile, model); Object fooClass = getCoreFactory().buildClass(
@Override public void critique(Object dm, Designer dsgr) {
File projFile = File.createTempFile("projFile", ".zargo"); TestProjectWithProfiles.initAppVersion();
SwingUtilities.invokeAndWait(new Runnable() { public void run() {
project = persister.doLoad(file); project.postLoad();
profileManager.removeProfile(userDefinedProfile); profileManager.removeSearchPathDirectory(testCaseDir.getAbsolutePath());
if (e.getCause() instanceof XmiReferenceException) { XmiReferenceException xre =
Model.getUmlFactory().delete(profileModel); return userDefinedProfileFile;
Model.getExtensionMechanismsHelper().addBaseClass(theStereotype, theClass);
Model.getExtensionMechanismsHelper().removeBaseClass(theStereotype, Model.getMetaTypes().getName(theClass));
suite.addTestSuite(TestExtensionMechanismsFactory.class); suite.addTestSuite(TestModel2.class);
return suite; }
for (int i = addedTargets.length - 1; i >= 0; i--) { putInHistory(addedTargets[i]);
public void setTaggedValue(Object handle, Object property, Object value) { if (!(handle instanceof Element)) {
public String getType() { return MEMBER_TYPE;
private static final boolean PERFORMANCE_TEST = false; 
InitializeModel.initializeMDR(); new InitProfileSubsystem().init();
} 
/** * Constructor for TestCoreHelper.
Object g1 = coreFactory.createGeneralization(); Model.getCoreHelper().setParent(g1, ge);
Runnable dispatch = null; if (t != target) {
private static final int CHILDREN_PER_NAMESPACE = 5; private static final int NAMESPACE_LEVELS = 5;
critic.setEnabled(true); 
Object g3 = coreFactory.createGeneralization(); Model.getCoreHelper().setParent(g3, ge2);
if ((System.currentTimeMillis() - startTime) > TIME_LIMIT) { break;
None
Object g2 = coreFactory.createGeneralization(); Model.getCoreHelper().setParent(g2, ge);
Object base = children.get(NAMESPACE_LEVELS); long startTime = System.currentTimeMillis();
trySomeGuardAndIteratorErrors(m3); 
c = helper.copy(k, m2); checkClassCopy(k, c);
GridBagConstraints c = new GridBagConstraints(); c.fill = GridBagConstraints.HORIZONTAL;
public Object getOwner() { if (!(getGraphModel() instanceof ActivityDiagramGraphModel)) {
public TestCopyHelper(String name) { super(name);
ModelManagementFactory mmf = Model.getModelManagementFactory(); mmf.setRootModel(mmf.createModel());
Object model = Model.getModelManagementFactory().createModel(); Object p1 = Model.getModelManagementFactory().createPackage();
Object theModelTarget = target instanceof Fig ? ((Fig) target).getOwner() : target;
Object copiedPackage = Model.getCopyHelper().copy(p1, p2); 
connection = getUseCases().buildExtend(toElement, fromElement); } else if (elementType == metaTypes.getInclude()) {
Model.getCoreHelper().addOwnedElement(p1, interface_); Model.getCoreHelper().addOwnedElement(nestedPackage, class_);
@Override public boolean predicate2(Object dm, Designer dsgr) {
assertNotNull(copiedPackage); assertTrue(p1.getClass() == copiedPackage.getClass());
Collection collection = Model.getCoreHelper().getAllClasses( copiedPackage);
collection = Model.getCoreHelper().getAllInterfaces(copiedPackage); assertNotNull(collection);
collection = Model.getFacade().getAttributes(copiedInterface); assertNotNull(collection);
o = helper.copy(k, m2); assertNotNull(o);
Model.getCoreHelper().setName(k, "TestClass"); Model.getCoreHelper().setVisibility(k,
@Override public Color getFillColor() {
x = x  * scale; y = y  * scale;
@Override public Selection makeSelection() {
Model.getCoreHelper().setName(k, "TestClass2"); Model.getCoreHelper().setVisibility(k,
public Object getRoot() { return root;
if (!objects.contains(o)) { objects.add(o);
public void remove(LayoutedObject object) { objects.remove(object);
c2 = helper.copy(k, m2); checkClassCopy(c, c2);
@Override public void setFig(Fig f) {
@Override protected void initNotationProviders(Object own) {
o = helper.copy(d, m2); assertNotNull(o);
Checklist cl; String cat;
c2 = helper.copy(k, m2); checkClassCopy(c, c2);
public Object getDependentElement() { return getStateMachine(); /* The ActivityGraph. */
o = helper.copy(i, m2); assertNotNull(o);
public boolean isRelocationAllowed(Object base)  { return false;
private void updateTaggedValue(Object element, String type, String dataValue) {
assertTrue("ArgoEventPump did not fire all " + "ArgoStatusEvents",
o = helper.copy(p, m2); assertNotNull(o);
o = helper.copy(s, m2); assertNotNull(o);
if ((name == null) || name.equals("")) { continue;
} emFactory.buildTagDefinition("myTD1", stereo, null);
if (namesSeen.contains(name)) { return PROBLEM_FOUND;
None
Collection ends = Model.getFacade().getAssociationEnds(class2); assertEquals(1, ends.size());
public void actionPerformed(ActionEvent event) { ProjectBrowser pb = ProjectBrowser.getInstance();
} Object elem = Model.getModelManagementFactory().createModel();
} 
validContainmentMap.put(Interface.class, new Class<?>[] {
} 
args.clear(); // NOTE: Although it's not shown in the UML 1.4 spec, a TemplateArgument
* then the "enclosed" Fig has been moved on the diagram. * This causes the model to be adapted as follows:
Object changeable = Model.getChangeableKind().getChangeable(); Object visibility = Model.getVisibilityKind().getPrivate();
@Override protected int getNotationProviderType() {
} 
public boolean isRemoveFromDiagramAllowed(Collection figs) { /* If nothing is selected, then not allowed to remove it. */
ref = stateMHelper.getPath(refObject); }
return false; }
@Override protected void modelChanged(PropertyChangeEvent mee) {
return false; }
validContainmentMap.put(UmlPackage.class, new Class<?>[] {
noteFig.setLocation(calculateLocation(diagram, firstTarget, noteFig)); 
} 
return ((UmlAssociation) handle).getConnection(); }
settings = renderSettings; super.setFontFamily(settings.getFontName());
validContainmentMap.put(Region.class, new Class<?>[] {
Model.getUmlFactory().delete(stereo); Model.getPump().flushModelEvents();
@Override protected void initNotationProviders(Object own) {
mockModelImplementation.reset(); }
// Indicate that the test was validated validated = true;
@Override public float calculateWeight() {
// Enumerate methods // Enumerate method arguments
@Override protected int getInitialWidth() {
validated = true; }
Boolean truth = truths.get(class1); if (truth == null) {
public void removeSourceFlow(Object handle, Object flow) { super.removeSourceFlow(handle, flow);
assertNotProhibitedClass(self.getClass().getSuperclass()); 
validContainmentMap.put(Stereotype.class, new Class<?>[] {
// Enumerate fields 
for (int i = 0; i < VALID_CONNECTIONS.length; ++i) { final Class<?> connection = VALID_CONNECTIONS[i][0];
Model.getFacade().isAAbstraction(o), Model.getMetaTypes().getAbstraction());
runTruthTest(Model.getFacade().isAModel(o), Model.getMetaTypes().getModel());
None
validContainmentMap.put(UseCase.class, new Class<?>[] {
Model.getFacade().isAAbstraction(o), Model.getMetaTypes().getAbstraction());
boolean valueOfTarget(Object t) { return Model.getFacade().isRoot(t);
TestCase.assertNotNull("toString() corrupt in " + c, mo.toString());
validContainmentMap.put(Operation.class, new Class<?>[] {
None
createMethod = findMethod(factory.getClass(), Factory.class, methodName, types);
// Find the preceding message, if any, on either end of the // association.
isAMethod = Facade.class.getDeclaredMethod(
deleteAndRelease(createMethod.invoke(factory, args)); } catch (IllegalArgumentException e) {
public boolean isStereotypeVisible() { return stereotypeVisible;
@Override protected void updateStereotypeText() {
"ActionSequence", "Argument",
public class TestModelEventPump extends TestCase { 
@Override protected void modelChanged(PropertyChangeEvent e) {
// TODO: This doesn't work, but should //        Collection elements = Model.getFacade().getRootElements();
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
assertSame(package1, Model.getFacade().getNamespace(assoc)); 
@Override protected void textEditStarted(FigText ft) {
assertFalse(Model.getFacade().isNavigable( Model.getFacade().getAssociationEnd(class1, assoc)));
public void outAIntegerLiteral(AIntegerLiteral node) { val = Integer.parseInt(node.getInt().getText());
return false; }
SAXParserFactory spf = SAXParserFactory.newInstance(); SAXParser parser = spf.newSAXParser();
Model.getCoreHelper().setNamespace(cr1, collab); Model.getCoreHelper().setNamespace(cr2, collab);
None
@Override protected final boolean isConnectionValid(Fig source, Fig dest) {
None
Object model = Model.getModelManagementFactory().createModel(); LOG.debug("Created model "  + model);
None
continue; }
None
if (factoryIF.isPrimitive() && factoryIF.getName().equals("void")) { return;
public abstract String getInputSourceEncoding(); 
if (factoryIF.isPrimitive() && factoryIF.getName().equals("boolean")) { return;
public String getTabKey() { return "tab.user"; } 
if (factoryIF.getName().equals("java.lang.Throwable")) { return;
protected Collection getUmlCollection() { return Model.getFacade().getEnumerationLiterals(getOwner());
if (factoryIF.getName().equals("java.lang.Object")) { return;
} else { throw new RuntimeException(e);
void toggleValueOfTarget(Object t) { Model.getCoreHelper().setVisibility(t,
} 
e.printStackTrace(); throw new MalformedXMIException();
NodeList list = doc.getElementsByTagName("Model:Class"); for (int i = 0; i < list.getLength(); i++) {
//      if (gen.getParent() == null || gen.getChild() == null) { //      return true;
public abstract boolean isRelocationAllowed(Object base); 
if (versionNode == null) { versionNode = attributes.getNamedItem("xmi.version"); // XMI 1.1
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
throw new NotImplementedException(); }
public CoreHelper getCoreHelper() { return theCoreHelper;
} String version = versionNode.getNodeValue();
@Override protected void modelChanged(PropertyChangeEvent e) {
if (className.equals(name) && remap.containsKey(pkgName)) { pkgName = remap.get(pkgName);
@Override protected boolean canEdit(Fig f) {
remap.put("Core:Stereotype", "ExtensionMechanisms:Stereotype"); remap.put("Core:TaggedValue", "ExtensionMechanisms:TaggedValue");
public void delayedVetoableChange(PropertyChangeEvent pce) { if (stylePanel != null) {
remap.put("Kernel", "Core"); remap.put("Interfaces", "Core");
@Override protected int getNotationProviderType() {
String[] array = new String[allModelElements.length - 1]; for (int i = 0; i < array.length; i++) {
tryTheActions(m3); 
@Override public boolean isEnabled() {
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
if (evt == null) { // case 1
@Override protected FigText getNameFig() {
Node pkg = node; while (pkg != null && !isPackage(pkg)) {
@Override protected void updateListeners(Object oldOwner, Object newOwner ) {
remap.put("Kernel:Expression", "DataTypes:Expression"); 
public void outARealLiteral(ARealLiteral node) { // TODO support real types
Object st = Model.getModelManagementHelper().getElement(
public boolean isMinimizeFigsSelected() { if (minimiseFigs != null) {
public abstract boolean isDescendSelected(); 
public final boolean getDefaultValue() { return defaultValue;
public boolean isDescendSelected() { if (descend != null) {
/** * Testing Use Cases elements.
Object k = Model.getFacade().getKind(dv); if (!Model.getFacade().
/* *  Extend, Include, UseCaseInstance & ExtensionPoint not implemented
public void updateSubTask(final String action) { SwingUtilities.invokeLater(new Runnable () {
//        assertNotNull(Model.getUmlFactory().buildNode( //                Model.getMetaTypes().getExtend()));
public List<String> getOptions() { return Collections.unmodifiableList(options);
Object t1t = checkGenerated(aState, "after(1s)[guard]/effect", true, true, true, false);
} 
//        assertNotNull(Model.getUmlFactory().buildNode( //                Model.getMetaTypes().getState()));
public void testCreatePropPanel() { SequenceDiagramPropPanelFactory factory =
if (getNewEdge() != null) { getSourceFigNode().damage();
Model.getCollaborationsHelper().addBase(role2, class1); 
} catch (Exception e) { fail("Test failed for " + methodToTest.toString()
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
} }
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
graphics.setClip(0, 0, width, scaledBufferHeight); graphics.translate(0, -clip.y / scale);
Set<Classifier> bases = new HashSet<Classifier>(); for (AssociationEnd end : aRole.getConnection()) {
public UMLEditableComboBox(UMLComboBoxModel model, Action selectAction, boolean showIcon) {
None
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
for (int i = 0; i < nrParameters; i++) { try {
assertFalse(settings.setNotationLanguage("foo")); // and leave things unchanged
assertEquals(Notation.DEFAULT_NOTATION, settings.getNotationLanguage()); // This one should work except Java is not registered by default
@Override public void setExpression(Object expression) {
public ActionExecSilk() { super("Exec SILK script...", NO_ICON);
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
public ActionExecSilk() { super("Exec SILK script...", NO_ICON);
} }
public Object getTarget() { return target;
Object t1s = checkGenerated(aState, "trigger1[guard]/effect", true, true, true, false);
public boolean buildPopup(JPopupMenu popup, int index) { // Add stereotypes submenu
Object t1c = checkGenerated(aState, "trigger1()[guard]/effect", true, true, true, false);
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
text = "after(a while)"; trans =
text = "when(it happens)"; NotationProvider notation = new TransitionNotationUml(trans);
public TargetListener getTargettableModel() { return ((UMLDocument) getDocument());
Object bClass = Model.getCoreFactory().buildClass("B", aClass); Object cClass = Model.getCoreFactory().buildClass("C", bClass);
public void targetAdded(TargetEvent e) { setTarget(e.getNewTarget());
return; }
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
Object m1 = Model.getCollaborationsFactory()
* (they are composed as "storageId":"serialNumber"). NOTE: The storage * manager only looks for a few property names such as the
trySomeErrors(m3); 
protected String getProperty() { return (String) Model.getFacade().getDiscriminator(getTarget());
if (isATransition(handle)) { return ((Transition) handle).getSource().getIncoming();
if (getModelElementContainer(handle) == null) { return handle;
public Object newExpression(String lang, String body) { LOG.debug("new boolean expression");
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
public Fig getPortFig(Object port) { return bigPort;
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
public ActivityGraphsHelper getActivityGraphsHelper() { return theActivityGraphsHelper;
parseMessage(m3, ""); assertTrue(Model.getFacade().getActivator(m3) == m1);
None
} }
npSettings.setShowSequenceNumbers(true); checkGenerateCD(m1, "1 : ", npSettings);
npSettings.setShowSequenceNumbers(false); checkGenerateCD(m1, "1 : ", npSettings);
* @param element The element to store. */
Model.getCoreHelper().setName(m1, "m1-name"); checkGenerateCD(m1, "1 : m1-name", npSettings);
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
checkGenerateCD(m1, "1 : oper()", npSettings); checkGenerateSD(m1, "oper()", npSettings);
checkGenerateCD(m1, "1 : aEBody()", npSettings); checkGenerateSD(m1, "aEBody()", npSettings);
* 		java.lang.String[]) */
checkGenerateCD(m1, "1 : oper()", npSettings); checkGenerateSD(m1, "oper()", npSettings);
protected Object getNamespace() { // Return a package to use as the Namespace.
/* TODO: Should there really be () here? */ checkGenerateCD(m1, "1 : aEBody()", npSettings);
public org.argouml.model.CopyHelper getCopyHelper() { return theCopyHelper;
checkGenerateCD(m1, "1 : aEBody (argument-value)", npSettings); checkGenerateSD(m1, "aEBody (argument-value)", npSettings);
public CommonBehaviorHelper getCommonBehaviorHelper() { return theCommonBehaviorHelper;
/* If a message has a name and a named operation * and a script with parameters but without name,
false, false, false, 1, false); }
public VisibilityKind getVisibilityKind() { return (VisibilityKind) controlVK.getMock();
checkGenerated(aState, "ENTRY/test2\nexIT/b\nDO/it", true, true, true, 0, false);
public boolean isEmpty() { return ns.isEmpty();
checkGenerated(aState, "internal(test3:int=5,b=4.0:float)[g]/" + "activity(params, p),act(ee);",
public PseudostateKind getPseudostateKind() { return theKindsObject;
checkGenerated(aState, "entrys/test4\nexiting/b\ndone/it", false, false, false, 3, false);
checkGenerated(aState, "a/a\nb/b\nc/c\nd/d\ne/e\nf/f\ng/g\nh/h\ni/i\nj/j\n"
protected ActionAddDiagram getAction() { return new ActionClassDiagram();
} 
public String getParsingHelp() { return null;
false, false, false, 0, false); 
public MessageSort getMessageSort() { return theMessageSort;
Model.getCommonBehaviorHelper().setScript(entry, null); notation.parse(aActionState, "testUA()");
return ret; }
*          java.lang.String[]) */
public UmlFactory getUmlFactory() { if (theUmlFactory == null) {
public ExtensionMechanismsFactory getExtensionMechanismsFactory() { return theExtensionMechanismsFactory;
File file = new File("test.xmi"); 
public ModelManagementHelper getModelManagementHelper() { return theModelManagementHelper;
loaded = false; } catch (InterruptedException iExc) {
@Override protected void updateListeners(Object oldOwner, Object newOwner ) {
Project p = doLoad("/testmodels/uml14/LinkedProfile.zargo"); 
testPersister = persistence.getPersisterFromFileName( "unknown." + new ZargoFilePersister().getExtension());
*          java.beans.PropertyChangeListener, java.lang.Object, *          java.lang.String[])
+ "\t\t<plugin>\n" + "\t\t\tUML 1.4\n"
public abstract void addModelEventListener(PropertyChangeListener listener, Object modelelement,
Project project = ProjectManager.getManager().makeEmptyProject(); ProfileConfiguration pc = new ProfileConfiguration(project);
public boolean containsAll(Collection arg0) { synchronized (mutex) {
ProfileConfigurationFilePersister persister = new ProfileConfigurationFilePersister();
@Override public int getNumSteps() {
project = ProjectManager.getManager().makeEmptyProject(); persister.load(project,
validContainmentMap.put(SimpleState.class, new Class<?>[] {
ProfileMother.DependencyCreator dependencyCreator = new ProfileMother.DependencyCreator() {
public Collection getAllClassifierRoles(Object ns) { return impl.getAllClassifierRoles(ns);
File dependentProfileFile = mother.createXmiDependentProfile( profileFromWhichDependsFile, dependencyCreator,
public Object getSource(Object link) { return impl.getSource(link);
assertTrue("The file to where the file was supposed to be saved " + "doesn't exist.", dependentProfileFile.exists());
public Object getValueOfTag(Object handle, Object property) { if (!(handle instanceof Element)) {
public Object getPackage() { return VisibilityKindEnum.VK_PACKAGE;
public Object getJunction() { return PseudostateKindEnum.PK_JUNCTION;
ProfileMother profileMother = new ProfileMother(); final String profileName = "testLoadingConstructorProfile";
public Object getInParameter() { return ParameterDirectionKindEnum.PDK_IN;
public Object getShallowHistory() { return PseudostateKindEnum.PK_SHALLOW_HISTORY;
File profileFile = new File(testDir, "testLoadingConstructor.xmi"); profileMother.saveProfileModel(model, profileFile);
*             if either Classifier is null */
manager.getRegisteredProfiles(); managerCtrl.setReturnValue(Collections.emptyList());
Collection rootElements = Model.getFacade().getRootElements(); for (Object rootElement : rootElements) {
|| (container instanceof StateMachine && elem instanceof StateVertex)
None
* @param namespace Namespace to get contents of * @return contents of namespace and all containing namespaces
String path = "C:" + File.separatorChar + "userProfilesDir" + File.separatorChar + fileName;
//        return struc.getOwner().getNamespace().getOwnedElement().contains( //                struc.getType());
baseProfileFile = FileHelper.moveFileToNewTempDirectory( baseProfileFile, "new-base-profile", XMI_FILE_EXTENSION,
// static variables 
assertFalse("A".equals(new DependentString("A"))); }
#public)->includes (r.participant) or d.supplier.oclAsType(GeneralizableElement).
new HashSet<Object>(TargetManager.getInstance().getTargets()), set1);
} }
/** * @param me is the type of object to test
HashMap<Class, Object> meMap = new HashMap<Class, Object>(); 
{Abstraction.class, UmlClass.class, UmlClass.class, null, }, {Abstraction.class, UmlPackage.class, UmlPackage.class, null, },
theDetailsPane.getTab(TabProps.class); //            theDetailsPane.getNamedTab(Translator.localize("tab.properties"));
saveImageAsJPEG((BufferedImage)createImageFromComponent( _propertyPane),
SwingUtilities.invokeAndWait(new Runnable() { public void run() {
assertNotNull(todoPane); assertNotNull(propertyPane);
TargetManager.getInstance().setTargets(Collections.EMPTY_SET); assertTrue(listener.countAdd == 0);
assertTrue(!((MockStylePanel) pane).isRefreshCalled()); target = new UMLClassDiagram();
((position.equals("West") || position.equals("East")) ? Vertical.getInstance() : Horizontal.getInstance()));
assertTrue(((MockStylePanel) pane).isRefreshCalled()); 
public void add(int arg0, T arg1) { synchronized (mutex) {
Object target1 = new Object(); TargetManager.getInstance().setTarget(target1);
assertTrue(!((MockStylePanel) pane).isRefreshCalled()); target = Model.getCoreFactory().createClass();
return modelImpl.getCoreHelper().getSource(relationship); }
new File(OUTPUT_FILE1).delete(); new File(OUTPUT_FILE2).delete();
UmlPackage oldPackage = umlPackage; umlPackage = null;
new String[] {eventName }); }
Object target3 = new Object(); TargetManager.getInstance().addTarget(target3);
TargetManager.getInstance().setTarget(target1); assertTrue(1 == TargetManager.getInstance().getTargets().size());
None
Collection<Object> s = new ArrayList<Object>(); s.add(target2); //reverse order
@Override public void setFillColor(Color col) {
TargetManager.getInstance().addTarget(target2); assertTrue(2 == TargetManager.getInstance().getTargets().size());
None
s.add(target1); TargetManager.getInstance().setTargets(s);
start = end + 1; end = NotationUtilityUml.indexOfNextCheckedSemicolon(text, start);
TargetManager.getInstance().setTargets(s); assertTrue(2 == TargetManager.getInstance().getTargets().size());
if (Model.getFacade().isADataType(dest)) { LOG.debug("No valid Drag: destination is a DataType.");
// For ant setup try {
ProfileMother.cleanAllExtents(); new InitProfileSubsystem().init();
assertFalse(cr.predicate2(dm, null)); }
modelImpl.createDefaultExtent(); }
public void testGetWizardClass() { assertTrue(cr.getWizardClass(null).equals(WizTooMany.class));
assertTrue(critic.predicate2(ns1, null)); assertTrue(critic.computeOffenders(ns1).size() == 2);
if (modelName.lastIndexOf(dot) > 0) { modelName = modelName.substring(0, modelName.lastIndexOf(dot));
assertFalse(critic.predicate2(ns1, null)); assertEquals(0, critic.computeOffenders(ns1).size());
"org.argouml.swingext", "org.argouml.taskmgmt",
Model.getCoreHelper().setName(a1, "A2"); assertFalse(critic.predicate2(ns1, null));
boolean copyAction = (action == DnDConstants.ACTION_COPY);
Model.getCoreFactory().buildInterface("B", ns1); assertTrue(critic.predicate2(ns1, null));
if (!dropTargetDragEvent.isDataFlavorSupported( TransferableModelElements.UML_COLLECTION_FLAVOR)) {
assertFalse(critic.predicate2(ns2, null)); assertTrue(critic.computeOffenders(ns2).size() == 0);
Model.getCoreHelper().setName(c1, "C1"); Model.getCoreHelper().setName(c2, "C2");
ghostRectangle.setRect(pt.x - clickOffset.x, pt.y - clickOffset.y,
assertTrue(critic.predicate2(useCase1, null)); assertTrue(critic.predicate2(useCase2, null));
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
Model.getCoreFactory().buildAssociation(useCase1, actor); assertFalse(critic.predicate2(useCase1, null));
public void mouseReleased(MouseEvent e) { showPopup(e);
graph.removeGraphSelectionListener(this); graph.setDiagram(newTarget);
public T set(int arg0, T o) { throw new UnsupportedOperationException("set() method not supported");
private DiagramSettings settings = new DiagramSettings(); private Rectangle bounds = new Rectangle(10, 10, 20, 20);
public boolean addAll(Collection< ? extends T> arg0) { return list.addAll(arg0);
public <A> A[] toArray(A[] arg0) { return list.toArray(arg0);
assertEquals(tabDiagram.getJGraph(), graph); } catch (Exception noHead) {
Model.getUseCasesFactory().buildInclude(useCase2, useCase1); assertTrue(critic.predicate2(useCase1, null));
new InitProfileSubsystem().init(); ProjectManager.getManager().makeEmptyProject();
public List<T> subList(int fromIndex, int toIndex) { return subList(fromIndex, toIndex);
long currentTime = (new Date()).getTime(); Object returnType = project.getDefaultReturnType();
@Override public int hashCode() {
private Rectangle bounds = new Rectangle(10, 10, 20, 20); private DiagramSettings settings = new DiagramSettings();
Model.getUmlFactory().delete(ns); Collection leftovers = Model.getFacade().getRootElements();
@Override public void mouseReleased(MouseEvent e) {
new InitProfileSubsystem().init(); ProjectManager.getManager().makeEmptyProject();
modelElem = Model.getCoreFactory().buildClass("AClass", model); taggedValue = Model.getExtensionMechanismsFactory().buildTaggedValue(
protected List getValidNamespaceClasses() { List rl = new ArrayList();
public FontUIResource getSubTextFont() { return smallFont; } 
return Model.getModelManagementFactory().createPackage(); }
modelImpl.getModelEventPump().stopPumpingEvents(); 
model = null; }
createDefaultExtent(); } else {
model = new UMLModelElementNameDocument(); model.setTarget(elem);
Object theTagDefinition2 = Model.getExtensionMechanismsFactory(). buildTagDefinition("TagDefinition2", theStereotype, null);
AbstractActionAddModelElement2 actionSupplier = new ActionAddSupplierDependencyAction();
public void update(Observable o, Object arg) { table.repaint();
proj = ProjectManager.getManager().makeEmptyProject(); model = proj.getUserDefinedModelList().iterator().next();
} box.doClick();
Object stereotype = TestStereotypeUtility.findModelElementNamed( ProfileMother.STEREOTYPE_NAME_ST,
proj.getProfileConfiguration().addProfile(profile, model); // create a class in the project model
repository.beginTrans(true); 
URL url = CheckMain.class.getClassLoader().getResource(filename); if (url != null) {
removePerspectiveButton.setEnabled(false); duplicatePerspectiveButton.setEnabled(false);
Object aClass = Model.getCoreFactory().buildClass("AClass", model); // add the profile stereotype to the class
Object tagDef = TestStereotypeUtility.findModelElementNamed( ProfileMother.TAG_DEFINITION_NAME_TD,
Method enableAboutMethod = macOSXApplication.getClass().getDeclaredMethod("setEnabledAboutMenu", new Class[] { boolean.class }); enableAboutMethod.invoke(macOSXApplication, new Object[] { Boolean.valueOf(enableAboutMenu) });
Rectangle scrSize = GraphicsEnvironment.getLocalGraphicsEnvironment()
// static variables 
private static final int AUTOSCROLL_MARGIN = 12; 
public void elementRemoved(RemoveAssociationEvent evt) { Object element = evt.getOldValue();
public int getIndexOfChild(Object parent, Object child) { int childCount = 0;
} else if (style.equals("rect")) { fig.setDisplayState(
// static variables 
public boolean isDataFlavorSupported(DataFlavor parFlavor) { 
None
JPanel setDefStereoV = new JPanel(); setDefStereoV.setLayout(new FlowLayout());
// static variables 
None
@SuppressWarnings("unchecked") public void caseALiteralCollection(ALiteralCollection node)
String dir = System.getProperty("argouml.tests.dir"); if (dir != null) {
List<Locale> v = getModifiedSupportedLanguages(); 
Model.getPump().flushModelEvents(); 
Runnable doWorkRunnable = new Runnable() { public void run() {
public List getPorts(Object nodeOrEdge) { List res = new ArrayList();
@Override public boolean canAddEdge(Object edge) {
if (lastArchiveFile.exists()) { lastArchiveFile.delete();
@Override public boolean getUseTrapRect() {
String token; String type = null;
if (handle instanceof AssociationEnd) { return ScopeKindEnum.SK_CLASSIFIER
@Override public void caseALetExpression(ALetExpression node) {
for (int i = 0; i < subkeys.length; i++) { List<T> list = entry.get(subkeys[i]);
None
public DataTypesHelper getDataTypesHelper() { return theDataTypesHelper;
StreamSource xsltStreamSource = new StreamSource(xsltUrl .openStream());
@Override public void setLineColor(Color col) {
if ((Model.getFacade().getName(dm) == null) || ("".equals(Model.getFacade().getName(dm)))) {
None
if (!(Model.getFacade().isAAssociation(dm))) { return NO_PROBLEM;
Object m = Model.getFacade().getRoot(oper); Object theStereotype = null;
* Overridden to set Argo-specific RenderingHints to determine whether * or not antialiasing should be turned on.
if (Model.getFacade().getStateMachine(cs) == null) { return NO_PROBLEM;
Editor curEditor = Globals.curEditor(); ModeManager modeManager = curEditor.getModeManager();
int[] selectedIndexes = getSelectedIndexes(); 
// static variables 
fireTableDataChanged(); }
for (int i = 0; i < componentCount; ++i) { final Component childComp = (Component) components.get(i);
} else { if (!isSystemClipBoardEmpty() && textSource != null) {
LOG.error("problem parsing And Checking Constraints", ioe);
super("stereotype", false); }
@Override public void setEnclosingFig(Fig encloser) {
* @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList() */
critic.setPriority(0); critic.addSupportedDecision(Decision.UNSPEC);
SwingUtilities.invokeAndWait(new Runnable() { public void run() {
if (Model.getFacade().getName(e1) == null) { assertNull(Model.getFacade().getName(e2));
public Type navigateQualified(String name, Type[] qualifiers) throws OclTypeException {
Object element = invoke(createMethod, factory, args); TestCase.assertTrue("Facade method " + isAMethodName
public boolean isCellEditable(int row, int col) { return col >= 1 && row < elements.length;
// TODO: Maybe a return message already exists. Check first and // and if the first found has no activator then set this call
public Any getClassifier(String name) { Project p = ProjectManager.getManager().getCurrentProject();
final Object returnMessageSource = Model.getFacade().getReceiver(message);
final Object returnMessageDest = Model.getFacade().getSender(message);
@SuppressWarnings("unchecked") @Override
String body = (String) o; StringTokenizer st2 = new StringTokenizer(body, "=\"' \t\n");
@Override public void caseAAdditiveExpressionTail(AAdditiveExpressionTail node) {
if ((SwingUtilities.windowForComponent((Component) source) == theWindow)) {
public void printStackTrace(PrintWriter pw) { super.printStackTrace(pw);
addSettingsTab(new SettingsTabPreferences()); addSettingsTab(new SettingsTabEnvironment());
public void caseAPostfixExpressionTail(APostfixExpressionTail node) { inAPostfixExpressionTail(node);
LOG.debug("target is null in set target or " + "not an instance of UMLDiagram");
for (int i = 0; i < tabPanelList.size(); i++) { JPanel tab = tabPanelList.get(i);
"label.namespace.navigate.tooltip"), combo);
@Override public Object clone() {
public void outABooleanLiteral(ABooleanLiteral node) { val = Boolean.parseBoolean(node.getBool().getText());
currentKeyStroke = defaultKeyStroke; } else if (confCurrentShortcut.compareTo("") != 0) {
if (file == null) { return;
public void windowActivated(WindowEvent e) { handleOpen();
LOG.info("Registering Quit handler for Mac"); OSXAdapter.setQuitHandler(this, getClass().getMethod(
return Collections.emptySet(); }
@Override public void caseAExpressionListOrRange(AExpressionListOrRange node)
} }
return result; }
// static variables 
public void windowClosing(WindowEvent e) { LOG.info("Detected attempt to close application - checking if save needed");
// static variables 
public void windowDeactivated(WindowEvent e) { // ignored - we only care about open/closing
None
public void keyTyped(KeyEvent e) { // ignored
FigSingleLineTextWithNotation comp = null; try {
public void handleSettingsTabCancel() { // Do nothing!
// static variables 
return collator.compare(getName(obj), getName(obj1)); }
if (fe instanceof MouseListener) { ((MouseListener) fe).mouseReleased(me);
// static variables 
// static variables 
if (newSourceFig == newDestFig) { 
if (!canAddNode(node)) { return;
public UndoableAction(String name) { super(name);
newEdge.setSourcePortFig(extensionFN); newEdge.setSourceFigNode(extensionFN);
final String suffix = getSuffix(systemId); 
Model.getCollaborationsHelper().setActivator( returnMessage, message);
public void dispose() { 
+ "<profile>\n" 
protected ColorUIResource getSecondary3() { return secondary3; } 
numOfMEsWithSrcPath = 2; }
public void mouseEntered(MouseEvent e) { if (hasPopup()) {
if (anotherPt.x > x + width) { x = x + width;
@Override public void mouseMoved(MouseEvent me) {
final FigMessage firstMessageAbove = getNearestMessage( (FigClassifierRole) getSourceFigNode(),
LOG.info("Looking for minimum space below"); final FigMessage firstMessageBelow = getNearestMessage(
JPanel setDefStereoV = new JPanel(); setDefStereoV.setLayout(new FlowLayout());
public Component getListCellRendererComponent( JList list,
List regions = Model.getStateMachinesHelper().getRegions( encloser.getOwner());
@Override public void addEdge(Object edge) {
LayerPerspective lay = new LayerPerspectiveMutable(this.getName(), gm);
UmlDiagramRenderer renderer = createDiagramRenderer(); lay.setGraphNodeRenderer(renderer);
if (ns == null) { if (getNamespace() != null) {
@Override public void setLineWidth(int w) {
it = xList.iterator(); while (it.hasNext()) {
public void mouseClicked(MouseEvent me) { int tab = tabs.getSelectedIndex();
// static variables 
None
// static variables 
// static variables 
// static variables 
public StateMachinesFactory getStateMachinesFactory() { return theStateMachinesFactory;
// static variables 
public void edgeRemoved(GraphEvent e) { Object source = e.getSource();
Object otherNode = null; 
if (!(Model.getFacade().isAAssociation(dm))) { return NO_PROBLEM;
// name compartment and build up. Dimension aSize = getNameFig().getMinimumSize();
public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) {
public void menuDeselected(MenuEvent me) { } 
int opposite = p2.y - p1.y; int adjacent = p2.x - p1.x;
ySender = figMessage.getFinalY(); currentActivation = createActivationFig(
currentActivation = createActivationFig( getOwner(),
ySender = figMessage.getFinalY(); currentActivation.setHeight(
ySender = figMessage.getStartY(); currentActivation.setHeight(
public T remove(int index) { synchronized (mutex) {
} 
public int compare(FigMessage m1, FigMessage m2) { int result = 0;
for (FigActivation act : activations) { // TODO: why do we need to remove then add the Fig?
if (Model.getFacade().isAClassifierRole(element)) { ports.addAll(Model.getFacade().getReceivedMessages(element));
return true; }
if (Model.getFacade().isAPackage(o)) { Collection ownedElements =
&& Model.getFacade().getNamespace(node) == getCollaboration(); }
assertTrue("CheckItem.getDescription() incorrect " + "after initialization (1)",
public void dragOver(DragSourceDragEvent dragSourceDragEvent) { //        Transferable tf =
if (Model.getFacade().isAAssociationRole(dm)) { return NO_PROBLEM;
x1 = me.getX(); x2 = me.getX();
while (intersects(points, result, size) && count++ < limit) { result.setLocation(
} 
public int compare(FigMessage m1, FigMessage m2) { int result = 0;
lastX1 = Math.min(snapPt.x, lastX1); // manage if cursor x is more than lastX2
public void valueChanged(ListSelectionEvent lse) { if (lse.getValueIsAdjusting()) {
lastX2 = Math.max(snapPt.x, lastX2); 
if (currentDirection == DIRECTION_UPWARD && dy > 0) {
} else { if (isVisible) { // show compartment
if (currentDirection == DIRECTION_UNDEFINED) { if (dy < 0) {
protected void applyOffsetAmount( Point p1, Point p2,
if (currentDirection == DIRECTION_DOWNWARD || currentDirection == DIRECTION_UPWARD) {
source.createActivations(); if (!figMessage.isSelfMessage()) {
g.fillRect(x1 - 10, y - 2, 20, 4); g.fillRect((x1 + x2) / 2 - 2, y - 10, 4, 20);
@Override public Dimension getMinimumSize() {
ke.consume(); } else {
@Override public boolean predicate2(Object dm, Designer dsgr) {
if (figMessage.getFinalY() > source.getY() + source.getHeight() - 10) {
&& ((FigMessage) fig).getDestFigNode() != null && ((FigMessage) fig).getSourceFigNode() != null
int x = getX() + getWidth() / 2 - width / 2; // put the x at the right side of the activation if needed
public UseCasesFactory getUseCasesFactory() { return theUseCasesFactory;
else if (y < lifeLineFig.getY()) { x = Geometry.ptClosestTo(headFig.getBounds(), anotherPt).x;
@Override public void addFig(Fig f) {
public void dropActionChanged( DropTargetDragEvent dropTargetDragEvent) {
protected void setStandardBounds(final int x, final int y, final int w, final int h) {
return NotationProviderFactory2.TYPE_SD_MESSAGE; }
@Override public void setFilled(boolean f) {
if (Model.getFacade().isACallAction(getAction())) { ArgoJMenu opMenu = buildOperationMenu();
public void nodeAdded(GraphEvent e) { Object source = e.getSource();
np = null; }
if (getDestPortFig() == null || getSourcePortFig() == null) { return getDestination().equals(getSource());
FigClassifierRole source = (FigClassifierRole) getSourceFigNode(); if (source != null) {
@Override protected void setStandardBounds(final int x, final int y, final int w,
LOG.error("Exception caught", e); }
protected void setStandardBounds(final int x, final int y, final int w, final int h) {
FigMessageSpline (Point start) { assert (start != null) : "Point can't be null";
public void actionPerformed(ActionEvent event) { ProjectBrowser pb = ProjectBrowser.getInstance();
switch (hand.index) { case Handle.NORTHWEST:
target = t; modelElement = null;
@Override public boolean canAddEdge(Object edge) {
public List getPorts(Object nodeOrEdge) { List res = new ArrayList();
public List getInEdges(Object element) { List ports = new LinkedList();
region = Model.getUmlFactory().buildNode( Model.getMetaTypes().getRegion(), encloser.getOwner());
public void setValueAt(Object ob, int row, int col) { elements[row][col] = ob;
@Override public void removeFromDiagramImpl() {
c.gridx = 0; c.gridy = 0;
public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) {
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
shouldDraw = false; me.consume();
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
for (Fig workOnFig : figs) { if (workOnFig instanceof FigMessage &&
for (Fig workOnFig : figs) { if (workOnFig instanceof FigClassifierRole) {
for (Fig workOnFig : figs) { if (workOnFig instanceof FigMessage) {
if (workOnFig instanceof FigClassifierRole) { FigClassifierRole f = (FigClassifierRole) workOnFig;
int startName = name.lastIndexOf('.') + 1; 
switch (hand.index) { case Handle.NORTHWEST:
if (workOnFig instanceof FigClassifierRole) { FigClassifierRole f = (FigClassifierRole) workOnFig;
MutableGraphModel gm = new SequenceDiagramGraphModel(); setGraphModel(gm);
for (Fig fig : (List<Fig>) getLayer().getContentsNoEdges()) { if (fig instanceof FigClassifierRole) {
public Object getOwner(Object port) { return port;
(new InitStateDiagram()).init(); (new InitClassDiagram()).init();
None
/** * Adds a listener to modelevents that are fired by some given modelelement
public List getInEdges(Object element) { List ports = new LinkedList();
/** * Adds a listener that listens to all events that are named eventNames and
Rectangle box = calculateCompartmentBoxDimensions( x, y, newW, newH);
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
} 
/** * Get the bases of a ClassifierRole.
/** * Return the next AssociationEnd in the owning Association. If this is the
/** * @param element a PackageImport
protected void setStandardBounds(final int x, final int y, final int w, final int h) {
/** * Create an empty but initialized instance of a UML TaggedValue.
/* * @see org.omg.uml.diagraminterchange.ADiagramElementProperty#add(
boolean addProperty(Object arg0, Object arg1); 
boolean addProperty(Object arg0, Object arg1); 
boolean hasProperty(Object diagramElement, String propertyName);
updateListeners(oldV, newOwner); }
* Getter for the ChangeableKind object. *
/** * @return Returns the GeneralizableElement.
/** * Add a tagged value.
public void actionPerformed(ActionEvent e) { Object source = e.getSource();
@Override public void caseAListExpressionListOrRangeTail(
// static variables 
None
public void dragExit(DropTargetEvent dte) { // ignored
File xmiFile = File.createTempFile("TestXmiRead", "xmi"); writeFile(xmiFile);
InputSource inputSource = new InputSource(new FileInputStream(xmiFile)); Collection elements = xmiReader.parse(inputSource, false);
@Override public boolean isSelectable() {
if (ignoredElements != null) { for (int i = 0; i < ignoredElements.length; i++) {
File emptyFile = File.createTempFile("TestXmiRead", "xmi"); try {
public void mouseClicked(MouseEvent e) { showPopup(e);
if (xe.getLineNumber() == -1) { // The netbeans SAXParser sets line number
assertEquals("CheckItem.equals(o) incorrect", item, item2); 
assertEquals(p.getRoot(), p.getModel()); }
List list = null; if (Model.getFacade().isAClass(element)) {
assertEquals("Unexpected line number", -1, xe.getLineNumber()); assertEquals("Unexpected column number",
assertEquals("Unexpected line number", 1, xe.getLineNumber()); assertEquals("Unexpected column number",
* @author Bob Tarling */
assertEquals("Wrong number of top level elements read", 1, elements .size());
List list = null; if (Model.getFacade().isAClass(element)) {
@Override public boolean hit(Rectangle r) {
LOG.info("Setting ignore delete for " + vertex); //$NON-NLS-1$ ModelEventPumpEUMLImpl pump =
public void mouseDragged(MouseEvent me) { 
protected Object getNewNode(int arg0) { return null;
@Override public List getGravityPoints() {
return null; }
public void modelChanged(UmlChangeEvent evt) { if (evt instanceof AttributeChangeEvent) {
} else if (handle instanceof OpaqueBehavior) { String ret = null;
*         javax.swing.JList, java.lang.Object, int, boolean, boolean) */
return handle; }
instanceof org.omg.uml.behavioralelements.commonbehavior.Object; }
@Override public void mouseReleased(MouseEvent e) {
if (!(handle instanceof Stereotype)) { throw new IllegalArgumentException();
public void render(Runnable r) { document.render(r);
private void selectChildren(ExplorerTreeModel model, ExplorerTreeNode node, Set targets) {
public Object getExitPoint() { // UML 2.x only
for (Relationship rel : ((Element) handle).getRelationships()) { if ((rel instanceof ElementImport)
TreeIterator<Notifier> ti = ep.eResource().getResourceSet().getAllContents();
&& !(handle instanceof String) && !(handle instanceof Enumerator)) {
public void delayedVetoableChange(PropertyChangeEvent pce) { fireTableDataChanged();
} }
return Collections.EMPTY_SET; }
return handle != null ? handle.toString() : null; }
List<Trigger> trs = ((Transition) handle).getTriggers(); if (trs.isEmpty()) {
return false; }
public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel,
return false; }
@Override public void actionPerformed(ActionEvent e) {
return modelElement instanceof InputPin || modelElement instanceof OutputPin;
* during draging. Use translateFig(int dx, int dy) to force change of the * y coordinate.
return false; }
public void propertyChange(PropertyChangeEvent e) { // TODO: This log entry tells us what events actually arrive
return false; }
return null; }
if (name.regionMatches(true, startName, "UML", 0, 3)) { startName += 3;
return handle instanceof DestroyObjectAction; }
|| handle instanceof OpaqueExpression; }
return false; }
} 
} 
public void setUp() throws Exception { assertNotNull(modelImplementation);
return false; }
LOG.error("some unidentified problem", t); }
return false; }
return false; }
return null; }
addPathItem(fg, new PathItemPlacement(this, fg, 50, 10)); 
@Override public void initWizard(Wizard w) {
return Property.class; }
public void addElement(Object o) { if (!(o instanceof String)) {
"There are no extensions in UML 1.x"); }
public void drop(DropTargetDropEvent dropTargetDropEvent) { 
if (isNew()) { newAction.setTarget(getTarget());
@Override public Point getClosestPoint(Point anotherPt) {
return Signal.class; }
return false; }
return; }
return InteractionConstraint.class; }
for (Iterator it = ((org.omg.uml.UmlPackage) instance .refOutermostPackage()).getCollaborations()
// and before the next $ or end of class name. int startName = name.lastIndexOf('.') + 1;
return false; }
Object guard = Model.getFacade().getGuard(dm); boolean noGuard =
return State.class; }
public void setToDoItem(ToDoItem i) { } 
} 
if (isNew()) { newAction.setTarget(getTarget());
Object target = TargetManager.getInstance().getModelTarget(); 
// specifies valid elements for an AssociationRole to contain validContainmentMap.put(UninterpretedAction.class,
exitItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, InputEvent.ALT_MASK));
} 
private Map<Object, List<Listener>> registerForElements = new HashMap<Object, List<Listener>>();
final Collection<FigEdge> existingEdges = originalEdgePort.getFigEdges();
private Map<Object, List<Listener>> registerForClasses = new LinkedHashMap<Object, List<Listener>>();
if (!(figBounds.equals(styleBounds))) { bboxField.setText(figBounds.x + "," + figBounds.y + ","
events.add(new EventAndListeners( new AddAssociationEvent(
// static variables 
private EUMLModelImplementation modelImplementation; 
return false; }
newPoint.translate(-deltax, -deltay); PathItemPlacementStrategy pips
list.add("LiteralString"); //list.add("LiteralInteger");//When other ok
Configuration.setString(Configuration.makeKey(oldAction .getKey()), "");
list.add("LiteralBoolean"); //list.add("LiteralUnlimitedNatural");//When other ok
if (!_initiallyLaidOut) { layoutEdge();
//list.add("LiteralReal");//UML 2.4 //End LiteralSpecification
public Object getOwner(Object port) { return port;
return newValueSpecification; 
CollaborationsPackage cPkg = ((org.omg.uml.UmlPackage) cr .refOutermostPackage()).getCollaborations();
} else if (handle instanceof LiteralString) { LiteralString ls = (LiteralString) handle;
OpaqueExpression oe = (OpaqueExpression) handle; List<String> bodies = oe.getBodies();
bodies.clear(); langs.clear();
} else if (handle instanceof LiteralString) { LiteralString ls = (LiteralString) handle;
public RefObject getReference (String docId, String xmiId) { RefObject ro = getReferenceInt(docId, xmiId);
if (Model.getFacade().isAActor(fromP) && Model.getFacade().isAActor(toP)) {
throw new NotYetImplementedException(); }
OpaqueBehavior methodImpl = null; 
role.getConnection().add(buildAssociationEndRole(from)); role.getConnection().add(buildAssociationEndRole(to));
for (Behavior impl : ((Operation) handle).getMethods()) { if (impl instanceof OpaqueBehavior) {
XmiReferenceResolverImpl(RefPackage[] extents, XMIInputConfig config, Map<String, XmiReference> objectToXmiref,
if (methodImpl == null) { // Create a new implementation.
methodImpl = UMLFactory.eINSTANCE.createOpaqueBehavior(); 
Collection<Fig> removeCollection = new ArrayList<Fig>(getFigs()); 
methodImpl.setSpecification((Operation) handle); 
((Operation) handle).getMethods().add(methodImpl); }
if (methodImpl.isSetLanguages()) { int bodyIndex = 0;
} bodyIndex++;
.getRoot()); }
methodImpl.getLanguages().add("java"); methodImpl.getBodies().add(body);
* This will collate e, E, �, � together, but not eliminate non-identical * strings which collate in the same place.
throw new IllegalArgumentException(); }
// so we won't implement it //        throw new NotImplementedException();
public void handleSettingsTabRefresh() { table.setModel(new ModuleTableModel());
String[] pieces = arg.trim().split("_"); if (pieces.length > 2) {
if (!flag) { // Because of this side effect we add the element to
*            is the JMenuItem to do this for. * @param key
throw new NotImplementedException(); }
if (mee.getPropertyName().equals("name")) { updateInclude();
Object supplier = ((Model.getFacade().getSuppliers(edge).toArray())[0]);
packageRegistry.put(XMI212UMLResource.UML_METAMODEL_2_1_1_NS_URI, UMLPackage.eINSTANCE);
Fig target = panelTarget; 
packageRegistry.put(UML212UMLResource.UML_METAMODEL_NS_URI, UMLPackage.eINSTANCE);
extensionToFactoryMap.put( UMLResource.FILE_EXTENSION, UMLResource.Factory.INSTANCE);
if (o instanceof RefBaseObject) { returns.add((RefBaseObject) o);
Model.getStateMachinesHelper().setConcurrent( umlCompositeState, true);
if (SwingUtilities.isEventDispatchThread()) { fireNotationEventInternal(event, listener);
SwingUtilities.invokeLater(new Runnable() { public void run() {
return new String[0]; }
/* Disabled since it gives various problems: e.g. the toolbar icons * get too wide. Also the default does not give the new java 5.0 looks.
String reference = ((XmiReferenceException) ex.getCause()).getReference();
Object osxAdapterProxy = Proxy.newProxyInstance(OSXAdapter.class.getClassLoader(), new Class[] { applicationListenerClass }, adapter); addListenerMethod.invoke(macOSXApplication, new Object[] { osxAdapterProxy });
for (Map.Entry<Position, DetailsPane> entry : detailsPanesByCompassPoint.entrySet()) {
Object changeable, Object visibility);
Project p = ProjectManager.getManager().makeEmptyProject(); ProjectManager.getManager().setCurrentProject(p);
// static variables 
Model.getFacade().getMultiplicity(multiplicityOwner); }
public Object getSource(Object relationship) { if (relationship instanceof Message) {
//            createProperty("label.properties-pane", //                    positions, TabProps.class);
st.mark("initialize modules"); SubsystemUtility.initSubsystem(new InitModuleLoader());
org.argouml.cognitive.Translator.setTranslator( new AbstractCognitiveTranslator() {
OpaqueBehavior method = UMLFactory.eINSTANCE.createOpaqueBehavior(); method.setName(name);
return UMLFactory.eINSTANCE.createGeneralization(); }
TargetManager.getInstance().addTargetListener(this); 
if (!(ns instanceof UmlPackage)) { while (ns != null) {
public Collection getCommonTaggedValueTypes() { // TODO: still not used, because in ArgoUML String is "hardwired"
public void propertyChange(PropertyChangeEvent evt) { ((UMLPlainTextDocument) getDocument()).propertyChange(evt);
Iterator<Package> iter = ((Profile) profile).getNestedPackages() .iterator();
public Object invokeFeature(Map<String, Object> vt, Object subject, String feature, String type, Object[] parameters) {
for (AssociationRole ar : associationRoles) { if (ar.getName() == null || ar.getName().equals("")) {
* Not implemented. * {@inheritDoc}
if (!internalsInfo.checkRetain(line)) { if (line.toLowerCase().startsWith("entry")
if (!classLoaderAlreadyAdded) { Translator.addClassLoader(classloader);
ext.destroy(); break;
if (prop.isMultivalued() && !(value instanceof Collection)) { Collection newValue = new ArrayList();
String msg = "parsing.error.object-flow-state.state-not-found";
Iterator it = attributes.entrySet().iterator(); while (found && it.hasNext()) {
value = col.iterator().next(); }
Stereotype stereotype = (Stereotype) prop.eContainer(); UMLUtil.setTaggedValue(elem, stereotype, prop.getName(), value);
if (feature.equals("targetScope")) { return Model.getFacade().getTargetScope(subject);
} 
Iterator<Package> iter = ((Profile) profile).getNestedPackages() .iterator();
Iterator<Package> iter = ((Profile) handle).getNestedPackages() .iterator();
{Extend.class,           UseCase.class, }, {Include.class,          UseCase.class, },
if (Model.getFacade().isAConstraint(subject)) { if (type.equals(".")) {
if (Model.getFacade().isATagDefinition(evt.getSource())) { LOG.debug("Got TagDefinition event " + evt.toString());
{AssociationClass.class, UmlClass.class, }, {AssociationEnd.class, Classifier.class, UmlAssociation.class, },
* Package-private constructor. *
None
connection = modelImpl.getCoreFactory().buildAssociation( (Classifier) fromElement, (AggregationKind) toStyle,
o = modelImpl.getModelManagementFactory().createSubsystem(); }
private static final Logger LOG; 
for (Class<?> containerType : validContainmentMap.keySet()) { 
Class<?>[] validElements = validContainmentMap.get(containerType);
for (Classifier base1 : bases)  { for (Classifier base2 : bases) {
public Object makeEdge() { return null; } 
* @return a copy of element, or null. *
* @param tagName * @return the child element
validContainmentMap.put(Profile.class, new Class<?>[] {
public void hitHandle(Rectangle cursor, Handle h) { super.hitHandle(cursor, h);
validContainmentMap.put(UmlClass.class, new Class<?>[] {
validContainmentMap.put(Classifier.class, new Class<?>[] {
validContainmentMap.put(Signal.class, new Class<?>[] {
validContainmentMap.put(Actor.class, new Class<?>[] {
validContainmentMap.put(Component.class, new Class<?>[] {
@Override public void removeFromDiagram() {
validContainmentMap.put(Node.class, new Class<?>[] {
damage(); }
Class<?>[] modeElementPair = new Class[2]; modeElementPair[0] = VALID_CONNECTIONS[i][1];
Class<?>[] modeElementPair = new Class[2]; modeElementPair[0] = VALID_CONNECTIONS[i][1];
@Override public void damage() {
// swap elements the elements and add again. if (VALID_CONNECTIONS[i].length < 4) {
validContainmentMap.put(DataType.class, new Class<?>[] {
public void handleSettingsTabSave() { if (elements != null) {
validContainmentMap.put(Action.class, new Class<?>[] {
try { URI uri = URI.createURI(extentName);
// so we won't implement it //        throw new NotImplementedException();
getGlassPane().setVisible(true); }
ce.getLayerManager().getActiveLayer().calcDrawingArea(); // If the diagram is empty, GEF won't write anything, leaving us with
if ("ownedElement".equals(pce.getPropertyName())) { List oldOwned = (List) pce.getOldValue();
try { modelImpl.getRepository().endTrans(true);
// static variables 
ErrorManager.Annotation[] annotations = ErrorManager.getDefault().findAnnotations(e);
@Override public void setLayer(Layer lay) {
} throw new XmiException(e);
if (isReadOnly(element)) { throw new VetoChangeException(e.getSource(), null);
InputSource xformedInput = serialTransform(transformFiles, input);
* @param target The target to set */
public Map<String, Object> getXMIUUIDToObjectMap() { if (resolver != null) {
assertTrue("Interaction not removed", Model.getUmlFactory().isRemoved(inter));
String xsltFileName = STYLE_PATH + styles[i]; if (LOG.isInfoEnabled()) {
File tmpOutFile = File.createTempFile(TEMP_XMI_FILE_PREFIX, ".xmi"); tmpOutFile.deleteOnExit();
if (!(handle instanceof BehavioralFeature)) { throw new IllegalArgumentException(
if (e.getModifiers() == 0) { showPopup();
for (int i = 0; i < styles.length; i++) { String xsltFileName = STYLE_PATH + styles[i];
jContentPane.add(jlblFamilies, gridBagConstraints4); jContentPane.add(jlblSize, gridBagConstraints5);
Transformer transformer = stf.newTransformer(xsltStreamSource); transformer.transform(myInput, result);
myInput = new SAXSource(new InputSource(new FileInputStream(
xmiHeader = new String(bytes); } catch (IOException e) {
if (umlPackage != null) { try {
None
MDRepository defaultRepository = MDRManager.getDefault().getDefaultRepository();
Collection<File> dirs = new ArrayList<File>(); collectSubdirs(file, dirs);
if (mofExtent == null) { 
theModelEventPump = new ModelEventPumpMDRImpl(this, repository); theModelEventPump.startPumpingEvents();
public DiagramInterchangeModel getDiagramInterchangeModel() { return null;
*         java.lang.Object, int, int) */
public Facade getFacade() { if (theFacade == null) {
public String getColumnName(int col) { return columnNames[col];
public ModelEventPump getModelEventPump() { return theModelEventPump;
public DirectionKind getDirectionKind() { return theKindsObject;
public ActivityGraphsFactory getActivityGraphsFactory() { return theActivityGraphsFactory;
setRowHeight(18); 
// TODO: Localize if (name != null
if (inputSource.getByteStream() != null || inputSource.getCharacterStream() != null) {
String dummyStr = Model.getFacade().getName(stimulus); Model.getCoreHelper().setName(stimulus, dummyStr);
if (uml13) { // Roll back transaction from first attempt & start new one
Thread currentThread = Thread.currentThread(); currentThread.setPriority(currentThread.getPriority() - 1);
repository.endTrans(true); repository.beginTrans(true);
resolver.clearIdMaps(); 
public int getColumnCount() { return columnNames.length;
theDataTypesFactory = new DataTypesFactoryMDRImpl(this); theDataTypesHelper = new DataTypesHelperMDRImpl(this);
theCopyHelper = new CopyHelper(this); theActivityGraphsHelper = new ActivityGraphsHelperMDRImpl();
None
synchronized (extents) { umlPackage = (UmlPackage) repository.getExtent(MODEL_EXTENT_NAME);
public CollaborationsFactory getCollaborationsFactory() { if (theCollaborationsFactory == null) {
public OrderingKind getOrderingKind() { return theKindsObject;
*      Change in explorer tree selection -> set target in target *      manager.
public CoreFactory getCoreFactory() { return theCoreFactory;
if (newValue != oldValue) { // Object[] args = { newValue };
public DataTypesFactory getDataTypesFactory() { return theDataTypesFactory;
* @see GUISettingsTabInterface#handleSettingsTabCancel() */
buf.append("+ Decki" + cpbi + "\n"); buf.append("+ Endi" + cpbi + "\n");
public ModelManagementFactory getModelManagementFactory() { return theModelManagementFactory;
protected final void fireContentsChanged(Object source, int index0, int index1) { if (fireListEvents && !buildingModel)
public Object getValueAt(int row, int col) { if (row < elements.length) {
public StateMachinesHelper getStateMachinesHelper() { return theStateMachinesHelper;
public UmlHelper getUmlHelper() { if (theUmlHelper == null) {
public UseCasesHelper getUseCasesHelper() { return theUseCasesHelper;
public ChangeableKind getChangeableKind() { return theKindsObject;
public AggregationKind getAggregationKind() { return theKindsObject;
public ScopeKind getScopeKind() { return theKindsObject;
@Override public Object hitPort(int x, int y) {
public ConcurrencyKind getConcurrencyKind() { return theKindsObject;
public int getRowCount() { return elements.length;
LOG.debug("Failed to remove index entries for mof ID " + mofId); return false;
private XmiWriterMDRImpl(MDRModelImplementation theParent, Object theModel, String version) {
modelImpl.getRepository().endTrans(); }
public FontUIResource getWindowTitleFont() { return windowTitleFont; } }
public Collection<Stereotype> getAllPossibleStereotypes(Collection models, Object modelElement) {
None
return handle; }
* When the ok or apply button is pressed. */
} 
Collection<String>   namesSeen = new ArrayList<String>(); 
FigSingleLineTextWithNotation comp = createFigText( bounds.x,
public Object getAbstraction() { return Abstraction.class;
Action action = (Action) elem; modelImpl.getUmlHelper().deleteCollection(
modelImpl.getUmlHelper().deleteCollection( ((org.omg.uml.UmlPackage) action.refOutermostPackage())
public void paint(Graphics g) { super.paint(g);
modelImpl.getUmlHelper().deleteCollection(instance.getLinkEnd()); 
events.add(new AddAssociationEvent( ae.getFixedElement(),
modelImpl.getUmlHelper().deleteCollection( ((org.omg.uml.UmlPackage) instance
Model.getPump().addClassModelEventListener(this, Model.getMetaTypes().getTagDefinition(), (String[]) null);
modelImpl.getUmlFactory().delete(link); }
public DataFlavor[] getTransferDataFlavors() { return flavors;
modelImpl.getUmlHelper().deleteCollection( ((org.omg.uml.UmlPackage) signal.refOutermostPackage())
events.add(new AttributeChangeEvent( ae.getFixedElement(),
modelImpl.getUmlHelper().deleteCollection( ((org.omg.uml.UmlPackage) signal.refOutermostPackage())
InitializeModel.initializeDefault(); new InitProfileSubsystem().init();
protected ColorUIResource getSecondary1() { return secondary1; } 
return ((Comment) handle).getBody(); }
ae.getFixedElement(), ae.getFixedElement(),
for (Iterator it = ((org.omg.uml.UmlPackage) stimulus .refOutermostPackage()).getCollaborations()
} else { Model.getCoreFactory().buildDependency(supplier, getTarget());
public void tableChanged(TableModelEvent e) { updateButtonsEnabled();
c.setName(((Classifier) classifier).getName() + "inState["
* @param elem *            the CallState to be deleted
validContainmentMap.put(Enumeration.class, new Class<?>[] {
public XMIReferenceProvider.XMIReference getReference(RefObject object) { String mofId = object.refMofId();
// substates in a concurrent composite state.<p> // If this is broken by deletion of substate then we
XmiReference ref = mofIdToXmiId.get(mofId); 
if (namespaces1 != Collections.EMPTY_LIST && namespaces1.size() > 0) {
return role; }
/** * Interface to set a boolean value.
@Override public boolean isLeaf() {
super(extents, config); modelImpl = modelImplementation;
validContainmentMap.put(AssociationRole.class, new Class<?>[] {
private static final javax.jmi.model.AggregationKindEnum MOF_COMPOSITE = javax.jmi.model.AggregationKindEnum.COMPOSITE;
if (mdrEvent instanceof TransactionEvent) { return;
* @param elem *            the UML element to be delete
protected ColorUIResource getSecondary2() { return secondary2; } 
Interaction i = message.getInteraction(); if (i != null && i.getMessage().size() == 1) {
super.register(resolvedSystemId, xmiId, object); } else {
String exts = "\\.jar|\\.zip"; String suffixWithExt = suffix.replaceAll(exts, "");
if (modelUrl == null) { if (public2SystemIds.containsKey(systemId)) {
modelUrl = getValidURL(public2SystemIds.get(systemId)); }
protected final void fireContentsChanged(Object source, int index0, int index1) { if (fireListEvents && !buildingModel)
String modelUrlAsString = findModuleURL(suffix); if (!(modelUrlAsString == null
public Object getSelectedItem() { return selectedObject;
modelUrl = findModelUrlOnClasspath(systemId); }
} 
modelUrl = super.toURL(systemId); }
((FigTextEditor) focusOwner).endEditing(); } else if (focusOwner instanceof JTable) {
URL url = pendingProfiles.remove(arg0); if (url != null) {
public void setSelectedItem(Object anItem) { if (!(anItem instanceof String)) {
} if (index == assocEnds.size() - 1) {
public Class getColumnClass(int col) { switch (col) {
super.readExternalDocument(arg0); } catch (DebugException e) {
LOG.error("Error reading external document " + arg0); throw new XmiReferenceRuntimeException(arg0, e);
validContainmentMap.put(CallState.class, new Class<?>[] {
validContainmentMap.put(ActionState.class, new Class<?>[] {
if (isATransition(handle)) { return ((Transition) handle).getTarget().getOutgoing();
settings = renderSettings; super.setFontFamily(settings.getFontName());
Collection<MofClass> metaTypes = getMetaClasses(); String[] names = new String[metaTypes.size()];
public void showStatus(String s) { statusBar.showStatus(s);
return "Imported " + typeName + ": " + elemName; }
RefPackage pkg = extent.refPackage(names.get(0)); // Return the metatype proxy
return pkg.refClass(names.get(1)); }
if (hasAsActivator(activator, mes)) { throw new IllegalArgumentException(
None
if (mes.getPredecessor().contains(activator)) { mes.getPredecessor().remove(activator);
Collection<UmlAssociation> listToRemove = new ArrayList<UmlAssociation>(); for (UmlAssociation association : ret) {
if (aRole.getName() == null || aRole.getName().equals("")) { listToRemove.add(association);
returnList.removeAll(mmh.getAllModelElementsOfKind(ns, ClassifierRole.class));
} }
public void removeBase(Object handle, Object c) { try {
public void writeHeader (Writer ps) { // NOTE: The <XMI.header></XMI.header> is provided for us
*         java.beans.PropertyChangeEvent) */
String header = "    <XMI.documentation>\n"
} 
Globals.setSticky(false); diagram.deselectAllTools();
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
public void addModelEventListener(PropertyChangeListener listener, Object modelElement, String[] propertyNames) {
String mofid = ((InstanceEvent)mdrEvent).getInstance().refMofId(); modelImpl.removeElement(mofid);
public String getText(int offset, int length) throws BadLocationException { return document.getText(offset, length);
*         java.beans.PropertyChangeEvent) */
events.add(new AttributeChangeEvent( ae.getNewElement(),
public void setOrientation(Orientation newOrientation) { for (JPanel t : tabPanelList) {
} 
return null; }
public List getOutEdges(Object element) { List ports = new LinkedList();
events.add(new AttributeChangeEvent( ae.getOldElement(),
public Element getDefaultRootElement() { return document.getDefaultRootElement();
if (!name.endsWith("CreateInstanceEvent")) { LOG.debug("Ignoring MDR event " + mdrEvent);
public Component getListCellRendererComponent( JList list,
if (event instanceof DeleteInstanceEvent) { elements.unregister(null, ((RefBaseObject) event.getSource())
if (comp == null) { comp = createFigText(umlObject, new Rectangle(
Set<PropertyChangeListener> listeners = new HashSet<PropertyChangeListener>();
listeners.addAll(listenedClasses.getMatches(className, event .getPropertyName()));
LOG.debug("Firing event on " + pcl.getClass().getName() + "[" + pcl + "]");
enableSizeChecking(false); setSuppressCalcBounds(true);
if (false/*LOG.isDebugEnabled()*/) { LOG.debug("No listener for "
CompositeState deletedCompositeState = (CompositeState) o;
LOG.debug("No listener for " + modelImpl.getMetaTypes().getName(event)
// Make all the parts match the main fig setFilled(true);
String mofId = ((RefBaseObject) modelElement).refMofId(); try {
return names; }
@Override protected void modelChanged(PropertyChangeEvent mee) {
RefObject ro = null; verifyAttributeNames(ro, attributes);
if (!(metaobject instanceof MofClass)) { metaobject = metaobject.refMetaObject();
if (!(metaobject instanceof MofClass)) { throw new IllegalArgumentException(
"Attempt to instantiate abstract type"); } else if (elementType == metaTypes.getSubsystem()) {
JButton btnApply = new JButton(Translator.localize("button.ok")); btnApply.addActionListener(new ActionListener() {
@Override protected int getFigFontStyle() {
public Object getAddOnly() { return ChangeableKindEnum.CK_ADD_ONLY;
Map<String, List<T>> entry = registry.get(key); if (entry == null) {
public int getLength() { return document.getLength();
if (subkeys == null || subkeys.length < 1) { subkeys =
public void propertyChange(PropertyChangeEvent evt) { if ("taggedValue".equals(evt.getPropertyName())
Object rootModel = modelImpl.getModelManagementFactory().getRootModel(); TagDefinition td = buildTagDefinition(tagName, null, rootModel);
taggedValues.clear(); while (it.hasNext()) {
.getTargets().toArray()))); TargetManager.getInstance().setTargets(null);
TagDefinition td = (TagDefinition) elem; modelImpl.getUmlHelper().deleteCollection(
private void doCopyStereotype(Stereotype source, Stereotype target) { ((CoreFactoryMDRImpl) modelImpl.getCoreFactory())
} 
return true; }
} 
{Usage.class,            ModelElement.class, }, {Permission.class,       ModelElement.class, },
{Abstraction.class, UmlClass.class, Interface.class, null, }, // The next 3 restrictions for Abstraction seem to be Argo specific
public void actionPerformed(ActionEvent ae) { trySave(); //TODO: what to do with the return value?
{Abstraction.class, UmlClass.class, UmlClass.class, null, }, {Abstraction.class, UmlPackage.class, UmlPackage.class, null, },
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
validContainmentMap.put(org.omg.uml.modelmanagement.Model.class, new Class<?>[] {
@Override public void setDestFigNode(FigNode fn) {
@Override protected int getInitialHeight() {
} 
validContainmentMap.put(Operation.class, new Class<?>[] {
validContainmentMap.put(Event.class, new Class<?>[] {
return Model.getUseCasesHelper().getSpecificationPath(subject); }
@Override protected void modelChanged(PropertyChangeEvent mee) {
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
validContainmentMap.put(State.class, new Class<?>[] {
Polygon newPoly = new Polygon(); newPoly.addPoint(px, py);
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
validContainmentMap.put(SubactivityState.class, new Class<?>[] {
if (editOnRedraw) { comp.startTextEditor(null);
Collection<FigEdgeNote> toRemove = new ArrayList<FigEdgeNote>(); Collection c = getFigEdges(); // all connected edges
if (elementType == this.metaTypes.getAttribute()) { element = getCore().buildAttribute2(container, null);
* UML 1.4 spec says "A UseCase cannot contain any * Classifiers," the OCL is actually self.contents->isEmpty
List list = Collections.EMPTY_LIST; 
if (Model.getFacade().isAModelElement(subject)) { if (type.equals(".")) {
List<Class<?>[]> validItems = validConnectionMap.get(connectionType); if (validItems == null) {
if (Model.getFacade().isAStructuralFeature(subject)) { if (type.equals(".")) {
Object currentBase = Model.getFacade().getBase(role); if (currentBase != null) {
modelImpl.getRepository().beginTrans(false); try {
if (Model.getFacade().isADependency(subject)) { if (type.equals(".")) {
if (elem instanceof GeneralizableElement) { GeneralizableElement ge = (GeneralizableElement) elem;
if (elem instanceof Parameter) { getCore().deleteParameter(elem);
if (Model.getFacade().isABehavioralFeature(subject)) { if (type.equals(".")) {
if (elem instanceof Link) { getCommonBehavior().deleteLink(elem);
LOG.error("Encountered deleted object during delete of " + elem); } catch (InvalidElementException e) {
LOG.error("Encountered deleted object during delete of " + elem); } finally {
if (feature.equals("contents")) { // TODO investigate typo in spec!!
if (namespaces == Collections.EMPTY_LIST || namespaces.size() == 0) { return Collections.EMPTY_LIST;
((RefObject) o).refImmediateComposite(); return false;
if (isVisiblyOwned(element, g.getParent(), dupCheck)) { return true;
remove.add(object); }
&& stereo.getBaseClass() .contains("Abstraction")) {
result.add((Classifier) parent); }
@Override public void addNode(Object node) {
None
|| ns instanceof UseCaseInstance || ns instanceof ClassifierInState) {
if (!(modelElement instanceof
public final void focusLost(FocusEvent arg0) { doOnEdit(getEditor().getItem());
if (ends.size() >= 3) { for (AssociationEnd end : ends) {
ArrayList features = new ArrayList(); try {
getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height);
if (isProfilePackage(ns)) { if (!(modelElement instanceof Stereotype
|| modelElement instanceof Stereotype)) { return false;
// stereotype which can only contain the following types if (isProfilePackage(ns)) {
if (list == Collections.EMPTY_LIST) { list = new ArrayList(namespaces.size());
// static variables 
private boolean contained(Object container, Object candidate) { Object current = ((RefObject) candidate).refImmediateComposite();
return false; }
protected void setStandardBounds(int x, int y, int w, int h) { if (getNameFig() == null) {
d.supplier.oclAsType(Package).allImportedElements->select (e | e. elementImport.visibility =
</blockquote> * <p>
Iterator<Namespace> path1 = getPath((Namespace) ns1).iterator(); Iterator<Namespace> path2 = getPath((Namespace) ns2).iterator();
Namespace lastMatch = null; while (path1.hasNext() && path2.hasNext()) {
if (ends.size() >= 3) { for (AssociationEnd end : ends) {
if (ak == AggregationKindEnum.AK_AGGREGATE || ak == AggregationKindEnum.AK_COMPOSITE) {
return true; 
((Comment) handle).setBody(body); }
for (Object element : modelImpl.getModelPackage().getDataType() .refAllOfClass()) {
for (Object element : modelImpl.getModelPackage().getPrimitiveType() .refAllOfClass()) {
public Collection getAllNamespaces(Object ns) { 
if (feature.equals("allFeatures")) { return internalOcl(subject, vt, "self.feature->union("
Collection returnElements = new ArrayList(); // TODO: Perhaps use a HashSet or other collection with faster lookup
Rectangle bounds = parseBBox(); if (bounds == null) {
ArrayList behavioralfeatures = new ArrayList(); Iterator ii = features.iterator();
Collection toAddEIs = new ArrayList(); Iterator i = toAdd.iterator();
return Collections.emptySet(); }
if (ns instanceof UmlPackage) { results.addAll(modelImpl.getFacade().getImportedElements(ns));
if (assoc == null || !(assoc instanceof UmlAssociation) || type == null || !(type instanceof Classifier)) {
} return 1; // greater
updateElementListeners(listeners); } else {
} else if (mult2 == MULT_UNLIMITED) { return -1; // less than
} return mult1 - mult2;
if (handle == null) { // this is wrongly called with a null handle,
modelImpl.getUmlFactory().delete(assoc); }
modelImpl.getUmlHelper().deleteCollection( ((org.omg.uml.UmlPackage) ae.refOutermostPackage())
Attribute attr = (Attribute) elem; modelImpl.getUmlHelper().deleteCollection(
public MetaTypes getMetaTypes() { return theMetaTypes;
modelImpl.getUmlHelper().deleteCollection( ((org.omg.uml.UmlPackage) cls.refOutermostPackage())
public void removeSourceFlow(Object handle, Object flow) { super.removeSourceFlow(handle, flow);
public Object findClassifierByName(Object ofs, String s) { if (!(ofs instanceof ObjectFlowState)) {
// static variables 
deps = org.argouml.model.Model.getFacade() .getSupplierDependencies(elem);
modelImpl.getUmlHelper().deleteCollection( ((org.omg.uml.UmlPackage) oper.refOutermostPackage())
return NO_PROBLEM; }
modelImpl.getUmlHelper().deleteCollection( ((org.omg.uml.UmlPackage) oper.refOutermostPackage())
} 
public String nextElement() { StringBuffer res = new StringBuffer();
extensionPoint.setName("newEP"); extensionPoint.setLocation("loc");
for (Feature f : ((Classifier) source).getFeature()) { copyFeature(f, target);
public boolean hasMoreElements() { return count <= points.size();
*            The stereotype to copy from. * @param target
} 
} 
@Override public Fig hitFig(Rectangle r) {
Collection<Signal> raisedSignals = ((org.omg.uml.UmlPackage) source .refOutermostPackage()).getCommonBehavior()
ModelElement targetME = ((ModelElement) target); ModelElement sourceME = ((ModelElement) source);
for (String language : methodImpl.getLanguages()) { if ("java".equals(language)) {
for (Stereotype s : sourceME.getStereotype()) { targetME.getStereotype().add(s);
ModelElement element = (ModelElement) anelement; Namespace ns = (Namespace) ans;
* @see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig) */
if ("".equals(str)) { rc.add(createMultiplicityRange("1..1"));
if (lower == -1) { lower = 0;
pack = (Namespace) context; } else {
modelImpl.getUmlHelper().deleteCollection( ((org.omg.uml.UmlPackage) useCase.refOutermostPackage())
modelImpl.getUmlHelper().deleteCollection( ((org.omg.uml.UmlPackage) useCase.refOutermostPackage())
registry.register("multi1", "key4", null); registry.register("multi2", "key4", null);
for (Object literal : Model.getFacade().getEnumerationLiterals( newOwner)) {
registry.register("multi3", "key4", null); registry.register("multi4", "key4", null);
@Override public void addNode(Object node) {
if (lFirst != null) { me.consume();
Collection transitions = new ArrayList( Model.getFacade().getTransitions(getSource()));
@Deprecated public boolean predicate(Object obj) {
Object trans = null; if (!transitions.isEmpty()) {
currentY += minNameHeight - 1; // -1 for 1 pixel overlap body.setBounds(xa, currentY, newW, newH + ya - currentY);
protected String getName() { String name = "";
// critic) if this is a binary association or is an association role. 
* one by one: */ Collection transitions = new ArrayList(
Collection<Fig> figs = getProject().findAllPresentationsFor(getSource()); LOG.debug("Transformer found " + figs.size() + " representations (Figs).");
ssFig.removeFromDiagram(); 
@Override public Fig createNewItem(MouseEvent e, int snapX, int snapY) {
} 
//   Stimuli -> Stimulus if (!(modelElement
public void deleteCollection(Collection col) { Iterator it = col.iterator();
Object container = ((RefObject) elem).refImmediateComposite(); if (container == null
if (struc.getType() == null || struc.getOwner() == null) { return true;
* Delete EnumerationLiteral. * @param elem
addGetterSetter("ownedOperation", new FeatureGetterSetter()); addGetterSetter("association", new AssociationGetterSetter());
//list.add("InstanceValue"); 
public Object get(Object modelElement, Class<?> type) { return Model.getFacade().isStatic(modelElement);
public void actionPerformed(ActionEvent event) { ProjectBrowser pb = ProjectBrowser.getInstance();
node.getTimeExpression().apply(this); }
public UndoableAction() { super();
return false; }
for (Profile profile : p.getProfileConfiguration().getProfiles()) { try {
d.supplier.oclAsType(GeneralizableElement). allParents.oclAsType(Namespace).ownedElement->select (e |
public void actionPerformed(ActionEvent event) { ProjectBrowser pb = ProjectBrowser.getInstance();
addGetterSetter("association", new AssociationEndGetterSetter()); } else {
metaClasses = new LinkedList<String>(tmpMetaClasses); Collections.sort(metaClasses);
@Override public void mouseReleased(MouseEvent e) {
Dimension nameMin = getNameFig().getMinimumSize(); int minNameHeight = Math.max(nameMin.height, MIN_HEIGHT);
try { PropPanelFactory elementFactory = XMLPropPanelFactory.getInstance();
return false; }
modelImpl.getUmlHelper().deleteCollection( ((UmlPackage) ((Instance) elem).refOutermostPackage())
ret.add(vars); ret.add(exp);
return Collections.emptySet(); } else if (handle instanceof org.eclipse.uml2.uml.Class) {
Dimension symbol = figPoly.getSize(); aSize.width += symbol.width;
Model.getCoreHelper().setInitialValue(target, null); Model.getCoreHelper().setInitialValue(target, expression);
protected boolean isValidElement(Object element) { return Model.getFacade().isAClassifier(element)
@SuppressWarnings("unchecked") protected void buildModelList() {
public Object getExitPoint() { // UML 2.x only
public void setSelectedItem(Object anItem) { if (!(anItem instanceof String)) {
* Most notabely, do not move the setNamespace method any level up in * the tree.<p>
LOG.debug("buildModelList threw exception for target " + getTarget() + ": "
protected void buildModelList() { if (getTarget() != null) {
return 0; } else {
protected void tearDown() throws Exception { super.tearDown();
public UndoableAction(String name, Icon icon) { super(name, icon);
public ExtensionMechanismsHelper getExtensionMechanismsHelper() { return theExtensionMechanismsHelper;
None
@Override public void paint(Graphics g) {
protected boolean isValidElement(Object m) { return Model.getFacade().isASignal(m);
ArgoEvent evt = new ArgoStatusEvent(ArgoEventTypes.STATUS_TEXT, this, "Test Event");
protected Object getSelectedModelElement() { if (getTarget() != null) {
"label.namespace.navigate.tooltip"), combo);
} 
} else {
} 
@SuppressWarnings("unchecked") protected void buildModelList() {
elements.addAll(Model.getExtensionMechanismsHelper() .getCommonTaggedValueTypes());
elements.addAll(p.getProfileConfiguration().findByMetaType( Model.getMetaTypes().getDataType()));
elements.addAll(Model.getExtensionMechanismsHelper() .getCommonTaggedValueTypes());
LinkedList<String> lst = new LinkedList<String>( Model.getFacade().getBaseClasses(getTarget()));
Model.getUmlFactory().deleteExtent(packages.iterator().next()); }
public void removeUpdate(final DocumentEvent p1) { updateModel();
@Override public boolean canFinish() {
public void actionPerformed(ActionEvent e) { Object source = e.getSource();
others = new ArrayList(Model.getFacade().getConnections(newTarget)); Iterator i = others.iterator();
protected void runTest() throws Throwable { testPropertyTab();
addToDefaultProfiles(profileGoodPractices); addToDefaultProfiles(profileCodeGeneration);
public void setUp() throws Exception { assertNotNull(modelImplementation);
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
protected void buildModelList() { Object target = getTarget();
protected boolean isValidElement(Object element) { return Model.getFacade().isABehavioralFeature(element)
if (Model.getFacade().isAOperation(o)) { newOperation = o;
protected void setTarget(Object theNewTarget) { assert (getTarget() == null);
Model.getPump().addModelEventListener( this,
public void targetRemoved(TargetEvent e) { targetRemovedCalled = true;
public void caseARelationalExpressionTail(ARelationalExpressionTail node) { Object left = val;
public void targetAdded(TargetEvent e) { targetAddedCalled = true;
Object cis = Model.getActivityGraphsFactory()
updateCompartment(Model.getMetaTypes().getAttribute()); }
@Override protected void removeOtherModelEventListeners(Object oldTarget) {
private Stereotype buildStereotype(String text) { Stereotype stereotype = modelImpl.getUmlPackage().getCore().
None
/* This check is needed, otherwise the setbase() *  below gives an exception.*/
public JPanel getTabPanel() { if (table == null) {
d.supplier.oclAsType(Namespace).ownedElement->select (e | e.elementOwnership.visibility =
public void caseAIfExpression(AIfExpression node) { boolean test = false;
list.add(selectedElement); }
getStereotypeFig().setHeight(STEREOHEIGHT + LINE_WIDTH); 
// if "expression" implements one of the combobox, select it // TODO ? Do it in eUML module project ?
if (!Model.getFacade().isAClassifier(newValue)) { newValue = null;
for (Behavior impl : ((Operation) handle).getMethods()) { if (impl instanceof OpaqueBehavior) {
new ProfileLoader().doLoad(); }
private static final String EMPTYSTRING = ""; 
startListeningForModelChanges(); }
private List<Namespace> getPath(Namespace element) { LinkedList<Namespace> path = new LinkedList<Namespace>();
LOG.debug(">>Got an event for a modelchange that we inflicted ourselves..."); }
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
return language; }
trueButton = new JRadioButton(Translator.localize("misc.boolean.true")); falseButton = new JRadioButton(Translator
body = new FigPackageFigText(getOwner(), new Rectangle(0, textH, width, height - textH), getSettings());
// Build the field // ///////////////////////////////////////
if (oldSelected != newSelected) { // The 2 Radios have only one information.
+ "a.allConnections->exists(r | " + "r.type.oclIsKindOf(UseCase) or "
Boolean[] values = new Boolean[1]; values[0] = trueButton.isSelected();
getModel().setValue(values); }
if (ends.size() >= 3) { for (AssociationEnd end : ends) {
oldSelected = falseButton.isSelected(); if (oldSelected == false && newSelected == false) {
public String getName() { return "Default"; } 
rememberExpression = getExpression(); 
Model.getCoreHelper().setInitialValue(target, rememberExpression); 
for (Object element : modelImpl.getModelPackage().getEnumerationType() .refAllOfClass()) {
Model.getCoreHelper().setInitialValue(target,exp); 
//                LOG.debug("Duplicate property name found - " + typeName + ":" //                        + propertyName);
LOG.debug( "getAllPossibleNamespaces returns "
public CommonBehaviorFactory getCommonBehaviorFactory() { return theCommonBehaviorFactory;
protected boolean isValidElement(Object element) { Object target = getTarget();
bContinue = isUniqueLanguage(tabValues, curLanguage .getText());
setElements(Model.getCollaborationsHelper() .getAllPossibleActivators(mes));
public CollaborationsHelper getCollaborationsHelper() { if (theCollaborationsHelper == null) {
validContainmentMap.put(ObjectFlowState.class, new Class<?>[] {
repository.endTrans(); } catch (Throwable e) {
expression = target; }
public Object getInOutParameter() { return ParameterDirectionKindEnum.PDK_INOUT;
public int lastIndexOf(Object o) { return list.lastIndexOf(o);
/* Listening only to "remove" events does not work... * TODO: Check if this works now with new event pump - tfm
public void removeUpdate(final DocumentEvent p1) { updateModel();
AssociationEnd assEnd = (AssociationEnd) handle; Collection<AssociationEnd> assEnds = assEnd.getAssociation().getConnection();
public void clearStereotypes(Object modelElement) { if (modelElement instanceof ModelElement) {
public void notifyObservers() { setChanged();
public Object getPublic() { return VisibilityKindEnum.VK_PUBLIC;
public TaggedValue createTaggedValue() { TaggedValue tv = modelImpl.getUmlPackage().getCore().getTaggedValue().
element = buildNode(elementType); 
// been overridden in a descendent and it is the action from // that overridden method that should be returned in the array.
if (s != null && s.length() > 0) { Object topState = Model.getFacade().getContainer(objectFlowState);
public Iterator<T> iterator() { return list.iterator();
Object target = TargetManager.getInstance().getTarget(); if (target instanceof ArgoDiagram) {
addControl(panel, Translator.localize(prop.getLabel()), control, target);
public Object getPrivate() { return VisibilityKindEnum.VK_PRIVATE;
public Object getInstance() { return ScopeKindEnum.SK_INSTANCE;
public Object getJoin() { return PseudostateKindEnum.PK_JOIN;
public Object getInitial() { return PseudostateKindEnum.PK_INITIAL;
model.setValue(null); }
delButton.setEnabled(false); }
uvsPanel = new UMLValueSpecificationPanel(model, ""); uvsPanel.setVisible(valueExists.isSelected());
file.delete(); tempFile.renameTo(file);
} 
Component c = component.getParent().getParent(); if (c != null) {
* @return all owned elements with a visibility of VK_PUBLIC */
public void addModelEventListener(PropertyChangeListener listener, Object modelElement, String[] propertyNames) {
public void flushModelEvents() { while (true) {
public Collection getStereotypes(Object ns) { return impl.getStereotypes(ns);
public Object getSequential() { return CallConcurrencyKindEnum.CCK_SEQUENTIAL;
*          java.beans.PropertyChangeListener, java.lang.Object, *          java.lang.String[])
public boolean isMovable(Object element) { return impl.isMovable(element);
*          java.lang.String[]) */
public abstract void addClassModelEventListener( PropertyChangeListener listener,
public int getSize() { return objects.size();
@Override public void addSupportedDecision(Decision d) {
// USED BY PGML.tee @Override
// static variables 
public Object getFrozen() { return ChangeableKindEnum.CK_FROZEN;
if (modelUrl != null) { LOG.info("Referenced model --> '" + modelUrl + "'");
public Collection getAllUseCases(Object ns) { return impl.getAllUseCases(ns);
* spec is more restrictive - "[4] A Collaboration may only * contain ClassifierRoles and AssociationRoles, the
public String expand(String desc, ListSet offs) { return desc;
return ((Extend) handle).getExtensionPoint(); }
public void windowClosing(WindowEvent e) { LOG.info("Detected attempt to close application - checking if save needed");
Set<Classifier> bases = new HashSet<Classifier>(); for (AssociationEnd end : aRole.getConnection()) {
if (evt instanceof AttributeChangeEvent && eventName.equals(evt.getPropertyName())) {
// This code has to go within the startElement block after the strings // have been matched.
String name = ((Class) type).getName(); name = name.substring(name.lastIndexOf(".") + 1);
protected List getValidNamespaceClasses() { List returnList = new ArrayList();
private void build() { if (getterSetter != null) {
public void propertyChange(PropertyChangeEvent evt) { ((UMLPlainTextDocument) getDocument()).propertyChange(evt);
tabValues[(currentIndex - 1) * 2] = savTabValues[0]; tabValues[(currentIndex - 1) * 2 + 1] = savTabValues[1];
public void setValueAt(Object ob, int row, int col) { elements[row][col] = ob;
if (pips != null && classname.equals(pips.getClass().getName())) {
setName("UML Properties"); }
Collection<String> listVS = Model.getDataTypesHelper() .getValueSpecifications();
if (model != null) { // Get current InitialValue
Object expression = this.model.getExpression(); 
@Override public void critique(Object dm, Designer dsgr) {
public Object getSource(Object trans) { return impl.getSource(trans);
typeInstanceValueList.setSelectedIndex(0); }
public List<Decision> getSupportedDecisions() { return unspecifiedDecision;
public String expand(String desc, ListSet offs) { return desc;
public boolean supports(Decision d) { return d == Decision.UNSPEC;
public boolean supports(Goal g) { return true;
curBody = new JTextArea(); curBody.setToolTipText(Translator.localize("label.body.tooltip"));
public boolean containsKnowledgeType(String type) { return type.equals("Designer's");
JButton button = new JButton("..."); button.addActionListener(new ActionListener() {
JPanel panel = new JPanel(); panel.setFont(LookAndFeelMgr.getInstance().getStandardFont());
@Override public boolean isActive() {
@Override public boolean isEnabled() {
public Set<Object> getCriticizedDesignMaterials() { Set<Object> ret = new HashSet<Object>();
Object p1type = Model.getFacade().getType(p1); if (p1type == null) {
ret.addAll(Model.getFacade().getSubvertices(top)); }
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
System.arraycopy(tabValues, currentIndex * 2, savTabValues, 0, 2);
public void unsnooze() { /* do nothing */
public void snooze() { /* do nothing */
public void fixIt(ToDoItem item, Object arg) { } 
tabValues[currentIndex * 2] = tabValues[(currentIndex + 1) * 2]; tabValues[currentIndex * 2 + 1] = tabValues[(currentIndex + 1) * 2 + 1];
public boolean shouldBeEnabled(Object target) { ArgoDiagram diagram = DiagramUtils.getActiveDiagram();
*         org.argouml.ui.targetmanager.TargetEvent) */
if (!Model.getFacade().isAOperation(newValue)) { newValue = null;
*         org.argouml.ui.targetmanager.TargetEvent) */
public void generatorRemoved(ArgoGeneratorEvent e) { refresh();
public void targetRemoved(TargetEvent e) { targetRemovedCalled = true;
public ListIterator<T> listIterator(int index) { return list.listIterator(index);
tabValues[(currentIndex + 1) * 2] = savTabValues[0]; tabValues[(currentIndex + 1) * 2 + 1] = savTabValues[1];
target = ((UMLModelElementListModel) model).getTarget(); metaType = ((UMLModelElementListModel) model).getMetaType();
for (Object meta : metaTypes) { if (Model.getUmlFactory().isContainmentValid(
if (addAction != null) { actions.add(addAction);
Runnable doWorkRunnable = new Runnable() { public void run() {
public class FigLink extends FigEdgeModelElement { 
ListSet offs = null; for (Object ae : asc) {
public void targetSet(TargetEvent e) { targetSetCalled = true;
.setInteger( ProfileConfiguration.KEY_DEFAULT_STEREOTYPE_VIEW,
* @param tagName * @return the child element
* @param tagName * @return the child element
while (i.hasNext()) { features.addAll(modelImpl.getFacade().getFeatures(i.next()));
Fig fig = getUnderlyingFig(); int centerHigh = getCenterHigh();
JLabel labelLangage = new JLabel(Translator .localize("label.language.tooltip"));
System.arraycopy(tabValues, 0, newTabValues, 0, currentIndex * 2);
#public)->includes (r.participant) or d.supplier.oclAsType(GeneralizableElement).
System.arraycopy(tabValues, currentIndex * 2 + 2, newTabValues, currentIndex * 2,
ArgoNotationEventListener, NotationRenderer,
tabValues[currentIndex * 2] = tabValues[currentIndex * 2 - 2]; tabValues[currentIndex * 2 + 1] = tabValues[currentIndex * 2 - 1];
if (getDestFigNode() == getSourceFigNode()) { Point centerRight = getCenterRight((FigNode) getSourceFigNode());
curLanguage = new JTextField(); 
final JTree dummyTree = new JTree(); 
JButton btnAdd = new JButton("+"); // + btnAdd.addActionListener(new ActionListener() {
public void parse(Object modelElement, String text) { 
if (d.getPriority() > 0 && d.getPriority() <= getPriority()) { return true;
if (qname.equals("private") && (container instanceof Container)) { return new PrivateHandler(this, (Container) container);
// 1. a noneditable applied profile try {
list.add(getSelectedModelElement()); Collections.sort(list, new PathComparator());
copyMember(file, "todo", encoding, writer); 
None
project.moveToTrash(attribute); return;
* Otherwise a "assert initialized" would suffice. */ if (!initialized) {
TargetManager.getInstance().setTarget(cls2); 
if (i != -1) { Model.getCoreHelper().addFeature(
public void handleSettingsTabCancel() { handleSettingsTabRefresh();
e.printStackTrace(new PrintStream(stream)); }
@Override public boolean equals(Object obj) {
} }
if (wantedMenuItem == null) { ToolbarManagerMenuItemAction action =
*   contents = self.ownedElement -> union(self.namespace, contents) * </pre><p>
// static variables 
public XmiReader getXmiReader() throws UmlException { throw new NotImplementedException();
// static variables 
None
// static variables 
public void clear() { synchronized (mutex) {
// static variables 
element = modelImpl.getCoreFactory().buildTemplateParameter(container,
// static variables 
synchronized (this) { while (!Configuration.getBoolean(
if (critiquingRoot != null //                      && getAutoCritique()
JCheckBoxMenuItem wantedMenuItem = null; for (int i = 0; i < getMenu().getItemCount(); i++) {
protected void paintComponent(Graphics g) { g.setColor(getBackground());
// static variables 
*            The stereotype to copy from. * @param target
&& critiqueLock <= 0) { 
Collection<Dependency> deps = org.argouml.model.Model.getFacade() .getClientDependencies(elem);
} 
LOG.warn("Element " + dm + "caused an InvalidElementException.  "
public String getParsingHelp() { return "parsing.help.fig-statebody";
} 
/** * The UID.
* Used by the copy functions. Do not call this function directly. * TODO: actions? instances? collaborations etc?
*            The stereotype to copy from. * @param target
return getDesignerName(); }
None
// static variables 
if (!(Model.getFacade().isAClassifier(newNode)) || !(Model.getFacade().isAClassifier(oldNode))) {
return null; 
Namespace ns = null; if (nav2 && !modelImpl.getModelManagementHelper().isReadOnly(ns1)) {
if (Model.getFacade().isAState(sv)) { Object sm = Model.getFacade().getStateMachine(sv);
@Deprecated public void notationRemoved(ArgoNotationEvent e) {
if (wizClass != null) { try {
return getHeadline(); }
// static variables 
None
if (fail == null) { fail = obj.getClass().toString();
//////////////////////////////////////////////////////////////// // constants
ExtensionPoint ep = (ExtensionPoint) elem; Collection xtends = ((org.omg.uml.UmlPackage) ep.refOutermostPackage())
None
public void windowOpened(WindowEvent e) { handleOpen();
if (!JavaRuntimeUtility.isJreSupported()) { 
/** * Logger.
@Deprecated public void notationProviderRemoved(ArgoNotationEvent e) {
abstract class CompositeCM implements ControlMech { private List<ControlMech> mechs = new ArrayList<ControlMech>();
((PropertyChangeListener) nt).propertyChange(null); 
class EnabledCM implements ControlMech { 
public void handleStartElement(XMLElement e) throws SAXException { if (DBG) {
class AndCM extends CompositeCM { /*
class NotSnoozedCM implements ControlMech { /*
class DesignGoalsCM implements ControlMech { /*
class OrCM extends CompositeCM { /*
// How much control should critics have over when they are relavant? // Does doing that in code instead of declaratively limit reasoning?
None
AwtExceptionHandler.registerExceptionHandler(); 
@Override public Locale getLocale() {
st.mark("create splash"); SplashScreen splash = null;
st.mark("initialize laf"); LookAndFeelMgr.getInstance().initializeLookAndFeel();
ProjectBrowser pb = initializeSubsystems(st, splash); 
@Override public boolean isSaveEnabled() {
Configuration.load(); 
String directory = Argo.getDirectory(); org.tigris.gef.base.Globals.setLastDirectory(directory);
org.argouml.util.Tools.logVersionInfo(); setSystemProperties();
Translator.init(Configuration.getString(Argo.KEY_LOCALE)); 
System.setProperty("gef.imageLocation", "/org/argouml/Images"); 
PrintManager.getInstance().print(); // nothing else to do (?)
System.exit(0); } else if (args[i].equalsIgnoreCase("-nouml2warning")) {
protected void setupTokens() { addToken(STRING_ARGO, Integer.valueOf(TOKEN_ARGO));
if (project == null) { project = ProjectManager.getManager().makeEmptyProject(true);
Class c; try {
Object o = null; try {
if (base.getNamespace() != null) { include.setNamespace(base.getNamespace());
LOG = Logger.getLogger(Main.class); }
JPanel todoPane = new ToDoPane(); ProjectBrowser pb = ProjectBrowser.makeInstance(splash, true, todoPane);
showTypes.setSelected(Configuration.getBoolean( Notation.KEY_SHOW_TYPES, true));
/** * Class to hold a list of actions to be perform and to perform them
/** * Class to load modules.
LOG.debug("Module " + module + " not found"); }
None
((DetailsPane) ProjectBrowser.getInstance().getDetailsPane()) .addTab(tab, !(tab instanceof TabToDoTarget));
None
Layer lay = editor.getLayerManager().getActiveLayer(); graphNode = createDiagramElement(lay, modelElement, diagram.getDiagramSettings());
for (int i = pos + 1; i < len; i++) { char c = s.charAt(i);
org.tigris.gef.base.Globals.setLastDirectory(dir); 
return Configuration.getString(KEY_STARTUP_DIR, org.tigris.gef.base.Globals
.setInteger( ProfileConfiguration.KEY_DEFAULT_STEREOTYPE_VIEW,
} 
public void paintButtons(Graphics g) { final Mode topMode = Globals.curEditor().getModeManager().top();
break; 
high = getDestFigNode(); low = getSourceFigNode();
.lookupIcon("action.configure-perspectives")); // Set the tooltip string:
public void notifyObservers(Object o) { setChanged();
None
synchronized (pausedMutex) { while (isPaused) {
valid = false; } catch (Exception ex) {
recomputeAllOffenders(); recomputeAllPosters();
// static variables 
public Object evaluate(Map<String, Object> vt, ModelInterpreter mi, String ocl) throws InvalidOclException {
if (itemSet.contains(item)) { return;
while (elems.hasNext()) { if (elems.next().equals(rc)) {
public void refresh() { super.refresh();
// "no longer valid"); // ((ToDoItem)item).resolve("no longer valid");
public int count(Object element) { Integer c = map.get(element);
public Object getBuiltInSymbol(String sym) { return null;
public Object getTarget() { return target;
public void actionPerformed(ActionEvent event) { ProjectBrowser pb = ProjectBrowser.getInstance();
found = true; if (!Model.getFacade().isACallAction(entry)) {
None
listenerList.add(ToDoListListener.class, l); }
public void refresh() { super.refresh();
mi.setHorizontalTextPosition(SwingConstants.RIGHT); mi.setVerticalTextPosition(SwingConstants.CENTER);
None
// SELECTED value is found then this defaults to true in order // to remain compatible with previous versions of this code.
ListSet all = allOffenders; if (all == null) {
/* * @see javax.swing.plaf.metal.MetalTheme#getPrimary1()
private String cachedExpandedHeadline; private String cachedExpandedDescription;
/* * @see javax.swing.plaf.metal.MetalTheme#getSecondary1()
public boolean isCanceled() { return (pbar != null) && pbar.isCanceled();
dsgr.setClarifier(ResourceLoaderWrapper.lookupIconResource("PostItD0")); dsgr.setDesignerName(Configuration.getString(Argo.KEY_USER_FULLNAME));
listenerList.add(ToDoListListener.class, l); }
descriptionTextArea.setWrapStyleWord(true);   //MVW - Issue 2422 descriptionTextArea.setText(Translator.localize("label.enter-todo-item")
return list; }
// static variables 
public int getIconWidth() { return 0; } 
None
public void notifyMessage(final String title, final String introduction, final String message) {
None
Enumeration enumeration = lists.keys(); 
/** * The table model for checklists.
Checklist chlist = (Checklist) lists.get(clazz); 
*         org.argouml.ui.targetmanager.TargetEvent) */
lists.put(cls, chlist); return chlist;
*         org.argouml.ui.targetmanager.TargetEvent) */
protected boolean isValidElement(Object element) { return Model.getFacade().isAClassifier(element)
JPanel setDefStereoV = new JPanel(); setDefStereoV.setLayout(new FlowLayout());
JPanel setDefStereoV = new JPanel(); setDefStereoV.setLayout(new FlowLayout());
JPanel setDefStereoV = new JPanel(); setDefStereoV.setLayout(new FlowLayout());
public void modelChange(UmlChangeEvent evt) { /* Do nothing by design. */
JPanel setDefStereoV = new JPanel(); setDefStereoV.setLayout(new FlowLayout());
public void close() { // Queue to event thread to prevent race during close
protected void addOtherModelEventListeners(Object newTarget) { super.addOtherModelEventListeners(newTarget);
public boolean addAll(int arg0, Collection< ? extends T> arg1) { return list.addAll(arg0, arg1);
snoozeUntil =  new Date(0); snoozeAgain =  new Date(0);
public void progress(final ProgressEvent event) { final int progress = (int) event.getPosition();
return last * 2; }
None
// static variables 
setColumnWidths(); }
finished = true; }
None
Collections.sort(critics, new Comparator<Critic>() { public int compare(Critic o1, Critic o2) {
JPanel tablePanel = new JPanel(new BorderLayout(5, 5)); table = new TableCritics(new TableModelCritics(false), this, this);
List<ToDoItem> candidates = new ArrayList<ToDoItem>(); Goal g = (Goal) parent;
public void notifyNullAction() { // ignored
JPanel detailsPanel = new JPanel(new GridBagLayout()); detailsPanel.setBorder(BorderFactory.createTitledBorder(
if (timeEvent) { if (Model.getFacade().isATimeEvent(evt)) {
/* * @see javax.swing.table.TableModel#getColumnCount()
List list = null; if (Model.getFacade().isAClass(element)) {
actCol.setMinWidth(50); actCol.setMaxWidth(55);
if (getColumnModel().getColumnCount() > 3) { descCol.setMinWidth(descWidth / 2);
if (Model.getFacade().isAAssociation(assoc) && Model.getFacade().isAAssociationRole(ar)) {
tableSP.setPreferredSize(table.getInitialSize()); bsp.add(tablePanel, BorderSplitPane.CENTER);
Translator.localize("label.decision-priority")); gb.setConstraints(priLabel, c);
c.gridy = 1; c.gridx = 6;
//     c.gridx = 0; //     JLabel priLabel = new JLabel("Priority:");
//     c.gridx = 0; //     JLabel priLabel = new JLabel("Priority:");
c.gridy = 2; for (Decision d : decs) {
public void targetAdded(TargetEvent e) { setTarget(e.getNewTarget());
/** * todoList specific.
public T get(int index) { return list.get(index);
public void modelElementRemoved(Object node) { for (ExplorerTreeNode changeNode
// static variables 
// static variables 
private final ImageIcon postIt0     = lookupIconResource("PostIt0"); private final ImageIcon postIt25    = lookupIconResource("PostIt25");
public void run() { resultsLabel.setText(Translator.localize("dialog.find.searching"));
private final ImageIcon postItD0    = lookupIconResource("PostItD0"); private final ImageIcon postItD25   = lookupIconResource("PostItD25");
None
//   protected boolean isNeeded(ToDoPseudoNode node) { //     PredicateDecision pd = (PredicateDecision) node.getPredicate();
None
public void removePerspective(Object perspective) { removeItem(perspective);
addControl(panel, null, control, target); } else {
c.gridy = 0; c.anchor = GridBagConstraints.NORTH;
public void targetAdded(TargetEvent e) { setTarget(e.getNewTarget());
image.setIcon(getWizardIcon()); image.setBorder(null);
public void targetAdded(TargetEvent e) { setTarget(e.getNewTarget());
None
None
None
Designer d = Designer.theDesigner(); boolean b = d.getAutoCritique();
None
} 
None
Designer.theDesigner().getToDoList().setPaused( !Designer.theDesigner().getToDoList().isPaused());
Object expression = getExpression(); Model.getDataTypesHelper().setBody(expression, body);
if (allOffenders.contains(parent)) { List<ToDoItem> result = new ArrayList<ToDoItem>();
None
Designer.firePropertyChange(Designer.MODEL_TODOITEM_ADDED, null, item); }
boolean visible = true; if (toolBarsForClass.size() > 0) {
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
public boolean add(T arg0) { synchronized (mutex) {
description.setTarget(item); Wizard w = null;
/* * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
* @param owner the model element that owns the compartment * @param bounds the initial bounds of the compartment
None
protected void doIt(ActionEvent event) { Object o = getModel().getElementAt(getSelectedIndex());
setRoot(Designer.theDesigner().getToDoList()); Designer.theDesigner().getToDoList().addToDoListListener(this);
/** * Called when the user selects a perspective from the perspective
/* * @see javax.swing.event.TreeSelectionListener#valueChanged(javax.swing.event.TreeSelectionEvent)
return null; }
@Override public void setVisible(boolean b) {
} }
None
} }
addPerspective(userDefinedPerspective); }
((TreeModelListener) listeners[i + 1]).treeNodesChanged(e); }
if (offenders.contains(off)) { anyInOff = true;
ToDoList list = Designer.theDesigner().getToDoList(); try {
DesignIssuesDialog d = new DesignIssuesDialog(); d.setVisible(true);
GoalsDialog d = new GoalsDialog(); d.setVisible(true);
None
removeAllElements(); addAll(elements);
applyProfileConfiguration(project, model); }
public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) {
Model.getCoreHelper().setReadOnly(element, true); } else if ("false".equalsIgnoreCase(value)) {
None
// static variables 
} 
Collection ends = Model.getFacade().getConnections(node); Iterator iter = ends.iterator();
// static variables 
// static variables 
// static variables 
// static variables 
.setInteger( ProfileConfiguration.KEY_DEFAULT_STEREOTYPE_VIEW,
.setInteger( ProfileConfiguration.KEY_DEFAULT_STEREOTYPE_VIEW,
Model.getCoreHelper().setReadOnly(element, false); } else if ("true".equalsIgnoreCase(value)) {
// This is done for compatibility with previous version: // Move the argo.user.properties
if (loaded) { return false;
_lastX = snapX; _lastY = snapY;
y1 = y; y2 = y1;
None
Graphics2D graphics = image.createGraphics(); graphics.scale(1.0 * scale, 1.0 * scale);
Project p = ProjectManager.getManager().getCurrentProject(); Object model = p.getRoot();
graphics.setColor(BACKGROUND_COLOR); Composite c = graphics.getComposite();
editor.print(graphics); 
graphics.dispose(); }
initialized = true; 
systemDefaultLocale = Locale.getDefault(); 
* @param pubId The public identifier of the entity which generated the *              exception, or null.
final Interaction macroCommand; if (newInteraction || undoStack.isEmpty()) {
None
None
private DiagramSettings diaDefault; 
private NotationSettings npSettings; 
private String headerComment = "Your copyright and other header comments";
showTypes.setSelected(Configuration.getBoolean( Notation.KEY_SHOW_TYPES, true));
showTypes.setSelected(Configuration.getBoolean( Notation.KEY_SHOW_TYPES, true));
return false; }
model = (AbstractProjectMember) member; return true;
setTodoList((AbstractProjectMember) member); return true;
Designer.setSaveAction(save); }
public boolean subsumes(Object obj) { return obj instanceof OutgoingDependencyNode;
None
List<Action> createActions = new ArrayList<Action>(); for (Object meta : metaTypes) {
for (Profile p : ProfileFacade.getManager().getDefaultProfiles()) { addProfile(p, m);
int i = 0; for (; i < uniqueName.length(); i++) {
private URI uri; 
private String authorname; private String authoremail;
private String version; 
members.add(pm); }
members.add(pm); LOG.info("Added todo member, there are now " + members.size());
ProjectMember pm = new ProjectMemberModel(m, this); LOG.info("Adding model member to start of member list");
d.setProject(this); diagrams.add(d);
return getDiagram(savedDiagramName); }
@Override public boolean hit(Rectangle r) {
return diagrams.get(0); }
return models.iterator().next(); }
uuidRefs = null; }
} if (Model.getFacade().isAProfile(obj)) {
} 
protected void finalize() { ArgoEventPump.removeListener(this);
public int getColumnCount() { return columnNames.length;
public String getColumnName(int col) { return columnNames[col];
return handle instanceof State && ((State) handle).isSubmachineState(); }
public int getRowCount() { return elements.length;
defaultDiagram = diagrams.get(0); LOG.debug("Candidate default diagram is " + defaultDiagram);
// static variables 
ProjectManager.getManager() .firePropertyChanged("remove", obj, null);
.setInteger( ProfileConfiguration.KEY_DEFAULT_STEREOTYPE_VIEW,
public class UndoUmlHelperDecorator extends AbstractUmlHelperDecorator { 
public boolean retainAll(Collection< ? > arg0) { return list.retainAll(arg0);
} 
* @see GUISettingsTabInterface#getTabKey() */
* Gets the loaded status for some other module. *
* Get a Collection with all the names. *
/** * Enables all selected modules.
catch (Throwable e) { LOG.error("Exception or error while trying to "
// Load modules specified by a System property. // Modules specified by a system property is for
LOG.warn(file + " does not have a manifest"); }
loadedClass = loadedClass
Translator.addClassLoader(classloader); 
ModuleStatus ms = new ModuleStatus(); 
public void propertyChange(PropertyChangeEvent evt) { ((UMLPlainTextDocument) getDocument()).propertyChange(evt);
if (!(moduleInstance instanceof ModuleInterface)) { LOG.error("The class " + classname + " is not a module.");
if (!loadedClass && !file.getName().contains("argouml-i18n-")) { LOG.error("Failed to find any loadable ArgoUML modules in jar "
for (ModuleInterface foundMf : moduleStatus.keySet()) { if (foundMf.getName().equals(mf.getName())) {
private static NotationName notationArgo = makeNotation(
.getAssociation(ends.iterator().next()); assertEquals(2, Model.getFacade().getConnections(assoc1).size());
if (n == null) { n = NotationNameImpl.findNotation(DEFAULT_NOTATION);
if (nameString.length() != 0) { nameString = "/" + nameString;
// static variables 
@Override public void initialize(Object owner) {
private boolean showAssociationNames; 
for (Object uml : Model.getFacade().getStereotypes(modelElement)) { addElementListener(uml);
public boolean isDragConnectable() { return false;
Object type = Model.getFacade().getType(uml); if (type != null) {
for (Object uml : Model.getFacade().getTaggedValuesCollection(modelElement)) { addElementListener(uml);
@Override public Vector<Fig> getEnclosedFigs() {
addElementListener(entryAction, "operation"); Object operation = Model.getFacade().getOperation(entryAction);
public void translate(int dx, int dy) { super.translate(dx, 0);
} 
Collection prms = Model.getFacade().getParameters(event); Iterator i = prms.iterator();
Collection args = Model.getFacade().getActualArguments(action); Iterator i = args.iterator();
for (Object uml : Model.getFacade().getParameters(modelElement)) { addElementListener(uml);
for (Object param : Model.getFacade().getParameters(modelElement)) { if (pce.getSource() == param
addElementListener(modelElement, new String[] {"name", "visibility"});
// static variables 
// that change the text // i.e. when the Transition is replaced:
addElementListener(operation, new String[] {"owner", "name"});
removeElementListener( pce.getOldValue());
NotationUtilityProviders.addListenersForTransition(this, modelElement); }
addElementListener( pce.getNewValue(),
Object doActivity = Model.getFacade().getDoActivity(modelElement); NotationUtilityProviders.addListenersForAction(this, doActivity);
Iterator it = Model.getFacade().getInternalTransitions(modelElement).iterator();
@Override public int hashCode() {
return "Parsing in Java not yet supported"; }
* @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String) */
return sb.toString(); }
} else if ("abstract".equals(token)) { abstrac = true;
if (name != null) { String msg =
if (!isValidJavaClassName(name)) { throw new ParseException(
Collection returnParams = Model.getCoreHelper().getReturnParameters(modelElement);
private static UndoableAction srcMultOne = new ActionMultiplicity("1", "src");
if (text.charAt(text.length() - 1) == ';') { text = text.substring(0, text.length() - 2);
List params = new ArrayList( Model.getFacade().getParameters(modelElement));
/** * Constructor.
start = end + 1; end = NotationUtilityUml.indexOfNextCheckedSemicolon(text, start);
// copy - can't iterate modify live collection while iterating it Collection b = new ArrayList(Model.getFacade().getBases(cls));
.generateStereotype(RECEPTION_KEYWORD, useGuillemets)
Collection b = new ArrayList(Model.getFacade().getBases(cls)); Iterator it = b.iterator();
if (s.length() > 0) { s = s + " ";
StringBuilder baseString = NotationUtilityUml.formatNameList( Model.getFacade().getBases(modelElement));
Object returnType = currentProject.getDefaultReturnType(); Object newOp =
project.moveToTrash(attribute); return;
Model.getCoreHelper().setStatic( newAttribute,
if (text.length() > 0 && "/".indexOf(text.charAt(0)) >= 0) { derived = true;
if (text.length() > 0 && NotationUtilityUml.VISIBILITYCHARS.indexOf(text.charAt(0))
if (Model.getFacade().getType(modelElement) != null) { type = Model.getFacade().getName(
&& showTypes) { sb.append(": ").append(type).append(" ");
return ""; }
} 
StringBuilder baseStr = NotationUtilityUml.formatNameList( Model.getFacade().getClassifiers(modelElement));
currentProject.moveToTrash(operation); return;
currentProject.moveToTrash(operation); return;
start = end + 1; end = NotationUtilityUml.indexOfNextCheckedSemicolon(text, start);
} catch (NoSuchElementException nsee) { parseError("operation.unexpected-end-operation",
if (!Model.getFacade().isAReception(op) || !RECEPTION_KEYWORD.equals(stereotype.toString())) {
StringBuffer genStr = new StringBuffer(30); if ((stereoStr != null) && (stereoStr.length() > 0)) {
public List getOutEdges(Object element) { List ports = new LinkedList();
StringBuffer parameterStr = new StringBuffer(); parameterStr.append("(").append(getParameterList(modelElement))
StringBuffer returnParasSb = getReturnParameters(modelElement, isReception);
return ""; }
else { returnParasSb.delete(
public Object getNamespaceElement() { return element;
if (Model.getFacade().isQuery(modelElement)) { propertySb.append("query,");
propertySb.append("}"); } else {
public void setDefaultScopeToken(String theToken) { this.token = theToken;
String derived = ""; Object tv = Model.getFacade().getTaggedValue(modelElement,
epName = st.nextToken().trim(); 
public boolean removeAll(Collection arg0) { boolean result = false;
MsgPtr ptr; int lpn;
*     predecessors number ":" action * The 3 parts of the string to generate: */
public boolean contains(Object o) { synchronized (mutex) {
int mpn = recCountPredecessors(msg, ptr2) + 1; 
String n = Model.getFacade().getName(umlMessage); if (n != null) {
} 
boolean mustBePre = false; boolean mustBeSeq = false;
Collection c = Model.getFacade().getSuccessors(umlPredecessor); submax = c.size();
StringBuilder guard = null; String paramExpr = null;
public void componentResized(ComponentEvent e) { // ignored
buildAction(umlMessage); 
} 
Collection c = new ArrayList( Model.getFacade().getPredecessors(umlMessage));
// TODO: treat Message 
} if (changeEvent) { // when(...)
Model.getFacade().getSender(umlMessage); Model.getCollaborationsHelper().setSender(umlMessage,
Model.getCollaborationsHelper().setActivator(umlMessage, root); if (swapRoles) {
if (effect == null) { // case 3
if (varname == null) { Object script = Model.getFacade().getScript(
public void valueForPathChanged(TreePath path, Object newValue) { //  Empty implementation - not used.
if (fname == null) { Object script = Model.getFacade().getScript(
if (guard != null) { guard = new StringBuilder("[" + guard.toString().trim() + "]");
Object a = Model.getCommonBehaviorFactory() .createCallAction();
if (!it.hasNext()) { return null;
if (ep == null) { return;
Object newEp = parseExtensionPoint(text); 
// This method has insufficient information to call buildExtensionPoint. // Thus we'll need to create one, and pray that whomever called us knows
ep = null; 
evt = findCallEvent(triggerName, ns); if (evt == null) {
if (text == null) { return null;
epName = st.nextToken().trim(); st.nextToken(); // Read past the colon.
epLocation = st.nextToken().trim(); 
String s = ""; 
String epName = Model.getFacade().getName(modelElement); String epLocation = Model.getFacade().getLocation(modelElement);
if ((epName != null) && (epName.length() > 0)) { s += epName + ": ";
if ((epLocation != null) && (epLocation.length() > 0)) { s += epLocation;
String newClassName = null; String newOperationName = null;
boolean found = false; if ((newClassName != null)
for ( Object op : Model.getFacade().getOperations(clazz)) { if (newOperationName.equals(
Object model = ProjectManager.getManager().getCurrentProject().getRoot();
new Rectangle(0, 0, 0, 0)); 
public NamespaceElement peekNamespaceElement() { return (NamespaceElement) ns.peek();
Model.getCoreHelper().setReadOnly(element, true); }
} else { // case 4
type = p.findType(name, false); if (type == null) { // no type defined yet
type = Model.getCoreFactory().buildClass(name, defaultSpace);
public Iterator iterator() { return ns.iterator();
taggedValue = Model.getExtensionMechanismsFactory().buildTaggedValue(
/* TODO: For UML2: Check if the type of the TV is String. */ Model.getExtensionMechanismsHelper().setDataValues(
Model.getExtensionMechanismsHelper().setDataValues( taggedValue, new String[] {"true"});
ModelElementInfoList internalsInfo = new ModelElementInfoList(
result = Translator.localize("misc.stereo.concatenate", new Object[] {result, name});
StringBuffer s = new StringBuffer(); // TODO: I18N
|| kind == Model.getDirectionKind().getInParameter()) { s.append(/*"in"*/ ""); /* See issue 3421. */
} else if (kind == Model.getDirectionKind().getOutParameter()) { s.append("out");
if (multiplicity != null) { int upper = Model.getFacade().getUpper(multiplicity);
*          Object, Object, Class) */
if (s.startsWith("[")) { s = s.substring(1);
if (c != null) { if (Model.getFacade().isAClassifierInState(c)) {
Model.getCoreHelper().setType(objectFlowState, classifier); delete(c);
StringTokenizer tokenizer = new StringTokenizer(s, ","); while (tokenizer.hasMoreTokens()) {
public Namespace getBaseNamespace() { StringNamespace result = null;
states.removeAll(statesToBeRemoved); 
} else { // no state named s is found, so we have to
String msg = "parsing.error.object-flow-state.state-not-found";
Model.getActivityGraphsHelper().setInStates(c, states); 
None
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
Object cis = Model.getActivityGraphsFactory()
Model.getCoreHelper().setName(modelElement, name); }
if (evt == null) { /* case 3 */
Object target = Model.getFacade().getTarget(transition); 
String msg = "parsing.error.object-flow-state.classifier-not-found";
/* TODO: Is this a good way of handling nested notation? * The following fails the tests:
internalsInfo.add(t, true); }
Object k = Model.getFacade().getKind(target); if (Model.getFacade().
Model.getStateMachinesHelper().setInternalTransitions(st, internalsInfo.finalisedList());
Collection<Object> newModelElementsList = new ArrayList<Object>(); for (InfoItem tInfo : theList) {
theList.clear(); // and hook in the new ones:
return newModelElementsList; }
String language = LANGUAGE; if (ae != null) {
String s = ""; boolean timeEvent = false;
String triggerName = trigger.indexOf("(") > 0
if (tokenizer.hasMoreTokens() || (trigger.indexOf("(") > 0)
Object ns = Model.getStateMachinesHelper()
} 
static Object getFromCollection(Collection collection, int index) { if (collection instanceof List) {
if (evt == null) { // case 1
actions)); Model.getCoreHelper().setName(effect, "anon");
evt = findOrBuildChangeEvent(s, ns); /* Do not set the name. */
evt = findOrBuildSignalEvent(trigger, ns); }
NotationUtilityUml.parseParamList(evt, s, 0); }
Model.getStateMachinesHelper().setEffect(trans, effect); Model.getCommonBehaviorHelper().setScript(effect,
} 
public void menuSelected(MenuEvent me) { Project p = ProjectManager.getManager().getCurrentProject();
Object timeExpr = Model.getFacade().getWhen(evt); if (timeExpr == null) {
timeExpr = Model.getDataTypesFactory().createTimeExpression("", s); Model.getStateMachinesHelper().setWhen(evt, timeExpr);
delete(evt); /* TODO: What if used elsewhere? */ evt = sMFactory.buildTimeEvent(s, ns);
Object changeExpr = Model.getFacade().getChangeExpression(evt);
changeExpr = Model.getDataTypesFactory() .createBooleanExpression("", s);
Object evt = Model.getFacade().getTrigger(trans); /* It is safe to give a null to the next function,
delete(evt); /* TODO: What if used elsewhere? */ evt = sMFactory.buildChangeEvent(s, ns);
String triggerName = trigger.indexOf("(") > 0
} else { delete(evt); /* TODO: What if used elsewhere? */
if (!Model.getFacade().getName(evt).equals(trigger)) { Model.getCoreHelper().setName(evt, trigger);
if (evt == null) { /* case 3 */
result = event; break;
project.moveToTrash(literal); return;
project.moveToTrash(literal); return;
if (Model.getFacade().getName(modelElement) != null) { nameStr = NotationUtilityUml.generateStereotype(modelElement,
Model.getCoreHelper().setType(objectFlowState, c); return objectFlowState;
if (rolestr != null) { Model.getCoreHelper().setName(role, rolestr.trim());
if (rolestr != null) { Model.getCoreHelper().setName(role, rolestr.trim());
String name = Model.getFacade().getName(modelElement); if (name == null) {
if (singleton == null) { singleton = new NotationComboBox();
if (Model.getFacade().isAAssociation(assoc) && Model.getFacade().isAAssociationRole(ar)) {
// changed the loading of the projectfiles to solve hanging // of argouml if a project is corrupted. Issue 913
Object assoc = Model.getFacade().getBase(modelElement); if (assoc != null) {
if (Model.getFacade().isAAssociationClass(dm)) { return NO_PROBLEM;
None
Collection associationEnds = Model.getCoreHelper().getAssociateEndsInh(classifier);
if (Model.getFacade().getName(ae) != null && name.equals(Model.getFacade().getName(ae))) {
if (Model.getFacade().isReturn(mp)) { sReturnType = Model.getFacade().getName(
public void edgeAdded(GraphEvent e) { Object source = e.getSource();
if (sReturnType != null && !sReturnType.equalsIgnoreCase("void")) { sbContext.append (": ").append (sReturnType);
// static variables 
@Override public boolean predicate2(Object dm, Designer dsgr) {
boolean isSet = false, isSequence = false; // cannot be Bag 
Collection attributes = Model.getCoreHelper().getAttributesInh(classifier);
java.util.Collection operations = Model.getFacade().getOperations(classifier);
protected Object getSource() { if (getOwner() != null) {
if (!(Model.getFacade().isPrimaryObject(dm))) { return NO_PROBLEM;
if (!Model.getFacade().isQuery(foundOp)) { throw new OclTypeException("Non-query operations cannot "
None
int index = 0; while (paramIter.hasNext()) {
@Override protected int getNotationProviderType() {
if (!(Model.getFacade().isAClass(dm))) { return NO_PROBLEM;
if (Model.getFacade().isAbstract(dm)) { return NO_PROBLEM;
Iterator iter = Model.getFacade().getAttributes(dm).iterator(); 
if (!(Model.getFacade().isAClass(dm))) { return NO_PROBLEM;
Notification.ADD, "stereotype",
return PROBLEM_FOUND; }
if (!(Model.getFacade().isSingleton(dm))) { return NO_PROBLEM;
None
diagramDefaults.setShowBidirectionalArrows(! Boolean.parseBoolean(hideBidirectionalArrows));
None
project.setSavedDiagramName(e.getText().trim()); }
Designer.enableCritiquing(); }
if (newNode == oldNode) { return false;
project.setVersion(ApplicationVersion.getVersion()); project.setPersistenceVersion(PERSISTENCE_VERSION);
|| s.endsWith(".xmi.zip") || s.endsWith(".xml.zip")) {
@Override protected void updateListeners(Object oldOwner, Object newOwner) {
DiagramSettings defaultSettings = project.getProjectSettings().getDefaultDiagramSettings();
uvsPanel.selectDefaultVS(); } else {
} 
throw new SaveException(e); }
throw new RuntimeException(e); }
@Override protected Object[] getUmlActions() {
// static variables 
@Override public void close() throws IOException {
boolean upgradeRequired = true; 
if (Model.getFacade().getUmlVersion().charAt(0) == '2') { upgradeRequired = false;
ArgoParser parser = new ArgoParser(); String argoEntry = getEntryNames(file, ".argo").iterator().next();
* @since 0.15.3 * @author  mkl
List<String> entries = getEntryNames(file, null); for (String name : entries) {
/* This would be solution (1): * Model.getExtensionMechanismsHelper().setDataValues(
ZipInputStream zis = openZipStreamAt(toURL(file), FileConstants.PROJECT_FILE_EXT);
String rootLine; do {
String version = getVersion(rootLine); writer.println("<uml version=\"" + version + "\">");
reader.readLine(); 
ZipInputStream zis = new ZipInputStream(toURL(file).openStream()); SubInputStream sub = new SubInputStream(zis);
private Orientation orientation; 
while (realRead() != '<') { if (!childOnly) {
for (i = 0; i < tagName.length(); ++i) { int c = realRead();
if (found && !isNameTerminator((char) terminator)) { found = false;
mark(1000); while (realRead() != '<') {
while (Character.isWhitespace((char) character)) { character = realRead();
int quoteSymbol = realRead(); while (Character.isWhitespace((char) quoteSymbol)) {
@Override public void doAction(int oldStep) {
return; }
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
super.gotElement(contents); }
else { LOG.warn("Could not find all attributes for <"
LOG.error("Got badly formed user defined profile entry " + e); }
* @param c the Classifier. If this is not a Classifier, then *          IllegalArgumentException is thrown.
if (owner.equals(f.getOwner()) && figclassname.equals(f.getClass().getName())) {
public boolean hit(int x, int y) { final Object modelElement = fig.getOwner();
diagramSettings = new DiagramSettings(defaultSettings); }
if (container instanceof FigGroupHandler) { FigGroup group = ((FigGroupHandler) container).getFigGroup();
if (st.hasMoreElements()) { st.nextToken();
if (f.getOwner() != modelElement) { // Assign nodes immediately but edges later. See issue 4310.
URL url = new URL(is.getSystemId()); stream = url.openStream();
return (ArgoDiagram) readDiagram(stream, closeStream); }
name = name.substring(0, 12) + "..."; }
for (int i = 0; i < subkeys.length; i++) { List<T> list = entry.get(subkeys[i]);
Fig f = findFig(figId); if (f instanceof FigNode) {
final Object parameters[] = new Object[3]; final Object owner = getOwner(className, href);
final Object parameters[] = new Object[2]; final Object owner = getOwner(className, href);
if (filename == null /* || model == null */) { LOG.error("Got badly formed user defined profile entry " + e);
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
jarfile = new JarFile(file); if (jarfile != null) {
* Construct a new critic instance.  Typically only one instance of * each critic class is created and stored in a static variable, as
ApplicationVersion.getVersion() + "(" + UmlFilePersister.PERSISTENCE_VERSION + ")");
} 
@Override public ToDoItem toDoItem(Object dm, Designer dsgr) {
profile = ProfileFacade.getManager().getProfileForClass( profileIdentifier);
@Override public void critique(Object dm, Designer dsgr) {
try { Hashtable templates = TemplateReader.getInstance().read(
for (ProjectMember projectMember : project.getMembers()) { if (LOG.isInfoEnabled()) {
ProgressMgr progressMgr = new ProgressMgr(); progressMgr.setNumberOfPhases(UML_PHASES_LOAD);
int fileVersion = getPersistenceVersionFromFile(file); 
@Override public JPanel makePanel(int newStep) {
inputSource.setPublicId(originalFile.toURI().toURL() .toExternalForm());
if ("uml:Model".equals(persister.getMainTag()) && e.getCause() instanceof UmlException
None
progressMgr.nextPhase(); ThreadUtils.checkIfInterrupted();
if (fileVersion > PERSISTENCE_VERSION) { throw new VersionException(
@Override public int getNumSteps() {
Object current = Model.getFacade().getOperation(target); if (Model.getFacade().isAOperation(current)) {
private CharBuffer outCB = CharBuffer.allocate(BUFFER_SIZE); 
private final Pattern xmlDeclarationPattern = Pattern .compile("\\s*<\\?xml.*\\?>\\s*(<!DOCTYPE.*>\\s*)?");
CoderResult result = decoder.decode(inBB, outCB, false); if (result.isError()) {
Matcher matcher = xmlDeclarationPattern.matcher(outCB); // Remove anything that matches our pattern
String headerRemainder = matcher.replaceAll(""); int index = headerRemainder.length() - 1;
public void modelElementAdded(Object node) { traverseModified((TreeNode) getRoot(), node);
do { index--;
ByteBuffer bb = decoder.charset().encode(headerRemainder); 
byte[] outBytes = new byte[bb.limit()]; bb.get(outBytes);
String line = reader.readLine(); while (line != null && (line.startsWith("<?xml ")
break; 
dsgr = Designer.theDesigner(); item =
} 
public void addPerspective(Object perspective) { addItem(perspective);
public void startElement(String uri, String localname,
public void endElement(String uri, String localname, String name) throws SAXException {
public void characters(char[] ch, int start, int length) throws SAXException {
public void testRoundTrip() { checkGenerateRoundTrip(aState, "trigger [guard] / effect");
private static final String STRING_ARGO                   = "argo"; private static final String STRING_AUTHORNAME            = "authorname";
private static final String STRING_GENERATION_OUTPUT_DIR = "generationoutputdir";
// static variables 
} 
// static variables 
// static variables 
String jarFile = ""; String fileSep = System.getProperty("file.separator");
None
getGlassPane().setVisible(false); }
// changed the loading of the projectfiles to solve hanging // of argouml if a project is corrupted. Issue 913
getMemberFilePersister(projectMember); persister.save(projectMember, stream);
// static variables 
None
defaultPersister = new OldZargoFilePersister(); quickViewDump = new UmlFilePersister();
None
public void menuCanceled(MenuEvent me) { } 
nRow = (pt.y + raOuter.y <= AUTOSCROLL_MARGIN)
for (j = i + 2; j < prop.size(); j += 2) { String s = prop.get(j);
// static variables 
if (s.equalsIgnoreCase(getExtension())) { return true;
None
|| s.endsWith(".xmi.zip") || s.endsWith(".xml.zip"))); }
try { critics.add(new CrOCL("context DataType inv:"
public void setNodeInstance(Object handle, Object nodeInstance) { if (handle instanceof ComponentInstance
None
final Facade f = Model.getFacade(); Collection topElements = p.getRoots();
String name = Model.getFacade().getName(obj); if (name != null) {
"entry/it\nexit/test2\ndo/b\nint1/act1\nint2/act2", true, true, true, 2, false);
(nRow <= 0 ? 0 : nRow - 1) :
private static List<String> getMetaclassNames(Document doc) { List<String> result = new ArrayList<String>();
try { critics.add(new CrOCL("context AssociationClass inv:"
if (Model.getFacade().isAModelElement(obj) && (Model.getFacade().isAProfile(obj)
Object state = Model.getActivityGraphsHelper()
String dependencyListStr = Model.getFacade().getTaggedValueValue(pkg, "Dependency");
PropPanelFactory factory = new ProfilePropPanelFactory(); PropPanelFactoryManager.addPropPanelFactory(factory);
model = Model.getUmlFactory().getExtentPackages( "pathmap://UML_PROFILES/Standard.profile.uml");
// Association Class // 4.5.3.2 [1]
cl = new Checklist(); 
// it works, but a bug in namespace.contents prevents it from // working when the type of the parameter comes from a profile
/* Testing: does not fire. */ try {
public void caseALogicalExpressionTail(ALogicalExpressionTail node) { Object left = val;
/* Testing: does not fire. */ try {
/* TODO: Partly overlaps CrOppEndVsAttr. */ /* Testing: does not fire. */
/* Tested with fabricated XMI - OK. */ try {
/* Testing: does not fire. */ try {
/* Testing: Does not fire. Conflict with CrNameConflict. */ try {
// //        ModelManagementHelperMDRImpl modelManagementHelper =
/* Testing: does not fire. */ try {
/* Tested with fabricated XMI - OK. */ try {
* "forAll (x, y | ..." does not cover all combinations. */ try {
/* Tested OK, except in some cases, depending on the * sequence of the EPs. Probably the implementation of
/* Tested with fabricated XMI - OK. */ try {
Model.getCommonBehaviorHelper().setOperation(callAction, ops.get(0));
critics.add(new CrOCL("context ActionState inv:" + "self.outgoing->forAll(t | t.trigger->size = 0)",
return null; }
// register the built-in profiles registerProfileInternal(profileGoodPractices);
registerProfileInternal(profileGoodPractices); registerProfileInternal(profileCodeGeneration);
LOG.info("Failed to load user defined profile " + file.getAbsolutePath() + ".", e);
loadDefaultProfilesfromConfiguration(); }
} }
if (profileClass != null && profileClass.startsWith(OLD_PROFILE_PACKAGE)) {
Model.getUmlFactory().delete(model); Model.getUmlFactory().deleteExtent(
assert profileUML.getClass().getName().startsWith(NEW_PROFILE_PACKAGE); 
if (Model.getFacade().isAAssociationEnd(element)) { Object assoc = Model.getFacade().getAssociation(element);
if (op instanceof AEqualRelationalOperator) { val = (left == right);
} outAPostfixExpressionTail(node);
node.getTimeExpression().apply(this); }
@Override public void caseAConstraint(AConstraint node) {
@Override public void caseAClassifierContext(AClassifierContext node) {
if (subject instanceof Collection) { if (type.equals("->")) {
if (parameters == null) { parameters = new ArrayList<Object>();
if ((subject instanceof Collection) && type.toString().trim().equals(".")) {
if (actualPackage != null) { if (equalsDependencies(actualPackage, expectedPackage)) {
None
return null; }
false, false);
remove.add(object); }
if (subject instanceof Set) { if (type.equals("->")) {
// TODO investigate: Abstraction.mapping is not in the Model Subsystem 
if (Model.getFacade().isAAssociation(subject)) { if (type.equals(".")) {
if (feature.equals("allConnections")) { return new HashSet<Object>(Model.getFacade()
if (Model.getFacade().isAAssociationEnd(subject)) { if (type.equals(".")) {
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
if (feature.equals("upperbound")) { return Model.getFacade().getUpper(subject);
if (Model.getFacade().isAAttribute(subject)) { if (type.equals(".")) {
if (Model.getFacade().isABinding(subject)) { if (type.equals(".")) {
if (Model.getFacade().isAClass(subject)) { if (type.equals(".")) {
if (Model.getFacade().isAClassifier(subject)) { if (type.equals(".")) {
if (feature.equals("feature")) { return new ArrayList<Object>(Model.getFacade()
if (Model.getFacade().isAComment(subject)) { if (type.equals(".")) {
showTypes.setSelected(Configuration.getBoolean( Notation.KEY_SHOW_TYPES, true));
if (Model.getFacade().isAComponent(subject)) { if (type.equals(".")) {
if (feature.equals("allResidentElements")) { return internalOcl(subject, vt,
(nRow < getRowCount() - 1 ? nRow + 1 : nRow); 
if (Model.getFacade().isAElementResidence(subject)) { if (type.equals(".")) {
if (Model.getFacade().isAEnumeration(subject)) { if (type.equals(".")) {
if (Model.getFacade().isAEnumerationLiteral(subject)) { if (type.equals(".")) {
if (Model.getFacade().isAFeature(subject)) { if (type.equals(".")) {
None
if (feature.equals("parent")) { return internalOcl(subject, vt,
if (Model.getFacade().isAGeneralizableElement(subject)) { if (type.equals(".")) {
if (Model.getFacade().isAMethod(subject)) { if (type.equals(".")) {
name = ""; }
if (feature.equals("stereotype")) { return Model.getFacade().getStereotypes(subject);
if (feature.equals("supplier")) { return internalOcl(subject, vt,
if (Model.getFacade().isANode(subject)) { if (type.equals(".")) {
if (Model.getFacade().isAOperation(subject)) { if (type.equals(".")) {
if (Model.getFacade().isAMethod(o)) { method = o;
if (Model.getFacade().isAParameter(subject)) { if (type.equals(".")) {
Icon icon = ResourceLoaderWrapper.lookupIcon(name); putValue(Action.SMALL_ICON, icon);
public int getIconHeight() { return 0; } 
@Override public Dimension getMinimumSize() {
if (location != null) { figNode.setLocation(location.x, location.y);
private String toString(Object modelElement, boolean useGuillemets, boolean showVisibility, boolean showMultiplicity, boolean showTypes,
if (Model.getFacade().isATemplateArgument(subject)) { if (type.equals(".")) {
if (Model.getFacade().isATemplateParameter(subject)) { if (type.equals(".")) {
None
if (Model.getFacade().isAUseCase(subject)) { if (type.equals(".")) {
if (Model.getFacade().isAAssociationClass(subject)) { if (type.equals(".")) {
* @param ordering *            an {@link OrderingKind} returned from
if (((curHandle.index == 0) || (curHandle.index == 2)) && index > 0) {
if (Model.getFacade().isAStereotype(subject)) { if (type.equals(".")) {
if (Model.getFacade().isATagDefinition(subject)) { if (type.equals(".")) {
if (Model.getFacade().isATaggedValue(subject)) { if (type.equals(".")) {
public String repair() { return diagram.repair();
addMouseListener(new MouseAdapter() { public void mouseClicked(MouseEvent e) {
boolean sourceIsComponent = (event.getSource() instanceof Component); 
if (aComponent instanceof RootPaneContainer) { aContainer = (RootPaneContainer) aComponent;
getTopLevelAncestor().setCursor( Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
Toolkit.getDefaultToolkit().addAWTEventListener( this, AWTEvent.KEY_EVENT_MASK);
super.setVisible(value); } else {
Toolkit.getDefaultToolkit().removeAWTEventListener(this); 
if (parameterlist.charAt(parameterlist.length() - 1) != ')') { parseError("operation.parameter-list-incomplete",
super.setVisible(value); 
if (getTopLevelAncestor() != null) { getTopLevelAncestor().setCursor(null);
} 
None
* not supposed to have incoming transitions. */ return NO_PROBLEM;
public Object getTransferData(DataFlavor dataFlavor) throws UnsupportedFlavorException,
public boolean isDataFlavorSupported(DataFlavor dataFlavor) { 
None
public void setSuggestion(String s) { origSuggest = s;
None
while ((aComponent.getParent() != null) && !(aComponent instanceof RootPaneContainer)) {
None
@Override public boolean canGoNext() {
settingsTabs = GUI.getInstance().getSettingsTabs(); for (GUISettingsTabInterface stp : settingsTabs) {
if (theWindow == null) { theWindow = SwingUtilities.windowForComponent(activeComponent);
public void treeWillCollapse(TreeExpansionEvent tee) { // unimplemented - we only care about expanding
JFileChooser chooser = new JFileChooser(); chooser.setDialogTitle(Translator.localize(
return NO_PROBLEM; }
if (withToolbar) { toolbar = (new ToolBarFactory(Collections.EMPTY_LIST))
assertEquals(startingProfiles, project.getProfileConfiguration().getProfiles());
final int minimumWidth = 500; tabs.setPreferredSize(new Dimension(Math.max(tabs
name = name.substring(0, 12) + "..."; }
None
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
if (doingShow) { return;
Project p = ProjectManager.getManager().getCurrentProject(); ((GUIProjectSettingsTabInterface) o).setProject(p);
*         org.argouml.ui.targetmanager.TargetEvent) */
public int indexOf(Object o) { return list.indexOf(o);
if (!windowOpen) { getOkButton().requestFocusInWindow();
cl = new Checklist(); 
protected boolean isValidElement(Object element) { return Model.getFacade().getReceiver(getTarget()) == element;
handleCancel(); }
} 
cl = new Checklist(); 
/** * Adds a rule to the perspective that will generate child
int recipnumerator = (p1.x - p2.x) * -1; int recipdenominator = (p1.y - p2.y);
/** * @return the name
/** TODO: factor out *
public static void registerRule(TreeModel rule) { rules.add(rule);
public void treeCollapsed(TreeExpansionEvent event) { // does nothing.
JScrollPane paneScrollPane = new JScrollPane( panes[i]); paneScrollPane.setVerticalScrollBarPolicy(
None
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
model.addElement(Translator .localize("menu.popup.stereotype-view.textual"));
if (adjacentindex == -1) { x = oldBounds.x;
Rectangle figBounds = target.getBounds(); Rectangle styleBounds = parseBBox();
if (target.isFilled()) { Color c = target.getFillColor();
if (target.getLineWidth() > 0) { Color c = target.getLineColor();
if (target == null) { return;
String bboxStr = bboxField.getText().trim(); if (bboxStr.length() == 0) {
// probably the TabText should only show an empty pane in that case setTarget(e.getNewTarget());
None
} 
Dimension contentPaneSize = getContentPane().getPreferredSize(); setSize(contentPaneSize.width, contentPaneSize.height);
private static final MetalTheme		DEFAULT_THEME = new JasonsTheme();
Object tv = Model.getFacade().getTaggedValue(o, "src_visibility"); if (tv != null) {
Project project = ProjectManager.getManager().getCurrentProject(); 
Object ns = Model.getFacade().getNamespace(modelElement); while (ns != null && !Model.getFacade().isAModel(ns)) {
return THEMES[0].getName(); }
} 
UIManager.setLookAndFeel(defaultLafClass); } else {
myInsetPanel.setBorder(new EmptyBorder(30, 40, 40, 40)); /* This gives some more space to the row of tabs,
UIManager.setLookAndFeel(lafClass); }
public void fireTreeCollapsed(TreePath path) { 
public void setModel(TreeModel newModel) { 
imgHeight += 40 + 40; myInsetPanel.add(splashPanel);
} Collection states =
setSize(imgWidth + 10, imgHeight + 120); //pack();
} 
buf.append("* GEF (gef.tigris.org)\n"); buf.append("* Xerces-J 2.6.2\n");
None
private static final int HEAD_POSN = 2; private static final int BODY_POSN = 3;
if (project == null) { // TODO: When the constructor with no Project is removed we can
@Override public boolean canAddNode(Object node) {
//        setFont(LookAndFeelMgr.getInstance().getSmallFont()); 
int h = stereoDim.height - 2 + nameDim.height + PADDING; w = Math.max(w, h + 44); // the width needs to be > the height
setToolTipText("Tree"); 
/** * Override the default JTree implementation to display the appropriate text
if (Model.getFacade().getName(dm) == null || "".equals(Model.getFacade().getName(dm))) {
if (showStereotype) { Collection<Object> stereos =
if (Model.getFacade().isAUMLElement(value)) { try {
final Object top; if (facade.getSubmachine(container) != null) {
/** * Called in reexpand().
labelConstraints.anchor = GridBagConstraints.LINE_START; labelConstraints.gridy = 0;
addElementListener(classifier, "name"); }
fieldConstraints.anchor = GridBagConstraints.LINE_END; fieldConstraints.fill = GridBagConstraints.BOTH;
labelConstraints.gridy = 0; fieldConstraints.gridy = 0;
Iterator iter = Model.getFacade().getConnections(asc).iterator(); 
labelConstraints.gridy = 1; fieldConstraints.gridy = 1;
JLabel lblDescription = new JLabel( Translator.localize("label.project.description"));
labelConstraints.gridy = 6; fieldConstraints.gridy = 6;
} 
} 
* @see Designer * @author Jason Robbins
// static variables 
"label.namespace.navigate.tooltip"), combo);
if (Model.getFacade().isAUMLElement(value)) { 
public void undoIt() { // unsupported.
public void setMaximumProgress(int max) { pbar.setMaximum(max);
firePropChange("bounds", oldBounds, getBounds()); updateEdges();
//    private JCheckBox jchbItalic = null; 
public void nodeRemoved(GraphEvent e) { Object source = e.getSource();
private JLabel jlblFamilies = null; 
None
None
ProjectBrowser pb = ProjectBrowser.getInstance(); Project p = ProjectManager.getManager().getCurrentProject();
None
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
// static variables 
inner_d = inner_d - (getLineWidth() % 2); inCircle.setBounds(
public void graphChanged(GraphEvent e) { Object source = e.getSource();
protected void buildModelList() { removeAllElements();
Thread currentThread = Thread.currentThread(); currentThread.setPriority(currentThread.getPriority() - 1);
public boolean isEmpty() { return list.isEmpty();
None
public boolean isCreateDiagramsSelected() { if (createDiagrams != null) {
protected Object getDestination() { if (getOwner() != null) {
// static variables 
// static variables 
} Iterator iterator = cg.childIterator(node);
/** * The constructor.
s.removeAll(Model.getFacade().getStereotypes(getTarget())); addAll(s);
} 
ProjectBrowser.getInstance().loadProjectWithProgressMonitor( toOpen, true);
} 
hasTabs = true; }
boolean valid = false; if (!(getChangedElement(e) instanceof Collection)) {
ProjectBrowser.getInstance().loadProject(file, showUi, pmw); return null;
public void windowIconified(WindowEvent e) { // ignored - we only care about open/closing
if (!tabSelected) { JPanel tab = tabPanelList.get(0);
|| "detail".equalsIgnoreCase(direction)) { /* The south panel always has tabs - but they are
if (path != null) { System.setProperty("org.argouml.model.modules_search_path",
Component selectedTab = topLevelTabbedPane .getComponentAt(lastNonNullTab);
public boolean isSaveEnabled() { return true;
removeTargetListener((TargetListener) tab); }
if (lastNonNullTab >= 0) { JPanel tab = tabPanelList.get(lastNonNullTab);
if (sel instanceof TabTarget) { ((TabTarget) sel).setTarget(target);
if (Math.abs(difference) < EPSILON) { fig.addPoint(centerLow + (difference / 2 + (difference % 2)),
if (!(Model.getFacade().isAClassifier(dm))) { return NO_PROBLEM;
// iterate through the tabbed panels to determine whether they // should be enabled.
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
public void setNamespace(Object ns) { if (!Model.getFacade().isANamespace(ns)) {
List modifiedList = new ArrayList(); Iterator it = targetsList.iterator();
Iterator ends = Model.getFacade().getAssociationEnds(dm).iterator(); 
/** * Add a TreeModelListener to the list of listeners.
setButtonPanelSize(18); }
/** * Notify all listeners that the tree has drastically changed
private GlassPane glassPane; 
public void setStereotypeVisible(boolean isVisible) { stereotypeVisible = isVisible;
timer = new Timer(25, new TimerListener()); timer.start();
GlassPane aPane = GlassPane.mount(ArgoFrame.getFrame(), true); 
@Override public void propertyChange(PropertyChangeEvent pce) {
setGlassPane(aPane); 
Notification.ADD, "stereotype",
None
public void save(ProjectMember member, OutputStream stream) throws SaveException {
getContentPane().add(assemblePanels(), BorderLayout.CENTER); 
public Insets getAutoscrollInsets() { Rectangle raOuter = getBounds();
setDefaultCloseOperation(ProjectBrowser.DO_NOTHING_ON_CLOSE); addWindowListener(new WindowCloser());
public void autoscroll(Point pt) { // Figure out which row we're on.
ProjectManager.getManager().addPropertyChangeListener(this); 
@SuppressWarnings("deprecation") public XmiWriter getXmiWriter(Object model, Writer writer, String version)
addKeyboardFocusListener(); }
String listOfClasses = System.getProperty("argouml.modules"); if (listOfClasses != null) {
&& (obj != evt.getNewValue())) { obj = evt.getNewValue();
if (splash != null) { splash.getStatusBar().showStatus(Translator.localize(
LOG.info("Request to delete a Fig " + obj.getClass().getName()); } else if (obj instanceof CommentEdge) {
@Override public JMenuBar getJMenuBar() {
@Override protected boolean isElementOfInterest(String name) {
@Override public void setVisible(boolean b) {
final JPanel toolbarBoundary = new JPanel(); toolbarBoundary.setLayout(new DockBorderLayout());
public void setPathVisible(boolean visible) { NotationSettings ns = getNotationSettings();
Iterator it = detailsPanesByCompassPoint.entrySet().iterator(); while (it.hasNext()) {
public void dragEnter(DragSourceDragEvent dragSourceDragEvent) { // empty implementation - not used.
private Dimension getSavedDimensions(ConfigurationKey width, ConfigurationKey height) {
for (DetailsPane detailsPane : detailsPanesByCompassPoint.values())  { AbstractArgoJPanel tab = detailsPane.getTab(tabClass);
protected void setStandardBounds(int x, int y, int w, int h) { if (getNameFig() == null) {
/* * @see java.beans.PropertyChangeListener#propertyChange(
if (evt.getPropertyName() .equals(ProjectManager.CURRENT_PROJECT_PROPERTY_NAME)) {
private static Icon icons[] = {dep,
TargetManager.getInstance().setTarget(p.getInitialTarget()); }
if (uri != null && !saveNewFile) { file = new File(uri);
if (!file.exists()) { // project file doesn't exist. let's pop up a message dialog..
int response = JOptionPane.showConfirmDialog( this,
public void addModelEventListener(PropertyChangeListener listener, Object modelelement, String eventName) {
if (response == JOptionPane.YES_OPTION) { saveNewFile = true;
final String suffix = "Impl"; //$NON-NLS-1$ int endName = name.length();
return; }
@Deprecated public void notationAdded(ArgoNotationEvent e) {
if (saveNewFile) { file = getNewFile();
trySaveWithProgressMonitor(overwrite, file, exitAfterSave); }
String report = project.repair(); if (report.length() > 0) {
if (Model.getUmlFactory().isRemoved(modelElement)) { LOG.warn("Encountered deleted object during delete of "
if (saveAction != null) { // Bob says - not sure how saveAction could be null here but
private void testSimulateErrors() { // Change to true to enable testing
if (false) { Layer lay =
if (figs.size() > 0) { Fig fig = (Fig) figs.get(0);
if (figs.size() > 1) { Fig fig = (Fig) figs.get(1);
if (figs.size() > 2) { Fig fig = (Fig) figs.get(2);
this.addFileSaved(file); // Let's save this project as the last used one
} 
public void dropActionChanged( DragSourceDragEvent dragSourceDragEvent) {
Configuration.setString(Argo.KEY_MOST_RECENT_PROJECT_FILE, file.getCanonicalPath());
.getDiagramMemberFilePersister(); // possibly use the following instead
public void progress(final ProgressEvent event) { final int progress = (int) event.getPosition();
return null; }
this.saveAction = rememberedSaveAction; 
public void updateMainTask(final String name) { SwingUtilities.invokeLater(new Runnable () {
label.setLabelFor(fieldGraphicsResolution); topPanel.add(label);
public boolean setSelection(int sel) { if (isOption(sel)) {
setComponentOrientation(list.getComponentOrientation()); if (isSelected) {
public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel,
ConfigurationKey configurationKey = Configuration .makeKey(ArgoToolbarManager.KEY_NAME, toolbar
public void targetAdded(TargetEvent e) { targetAddedCalled = true;
boolean visibility = getConfiguredToolbarAppearance(newToolbar .getName());
SwingUtilities.invokeLater(new Runnable() { public void run() {
testPersister = persistence.getPersisterFromFileName( "unknown.foo");
toolBarsForClass.add(newToolbar); 
newToolbar.addMouseListener(new MouseAdapter() { @Override
static { UIManager.put("ProgressBar.repaintInterval", Integer.valueOf(150));
public void windowDeiconified(WindowEvent e) { // ignored - we only care about open/closing
public boolean sameNotationAs(NotationName nn) { return this.getConfigurationValue().equals(nn.getConfigurationValue());
public void generatorChanged(ArgoGeneratorEvent e) { refresh();
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
public int getDefaultSelection() { return defaultSelection;
public int getImportLevel() { if (classOnly != null && classOnly.isSelected()) {
pbar.setNote(action); }
public final boolean isSelected() { return value;
None
super.refresh(); Object target = getPanelTarget();
public boolean isDiagramLayoutSelected() { if (layoutDiagrams != null) {
setTargetBBox(); }
@Override public Dimension getPreferredSize() {
//     c.gridx = 0; //     JLabel priLabel = new JLabel("Priority:");
public void stateChanged(ChangeEvent  e) { //TODO: should fire its own event and ProjectBrowser
public boolean isChangedOnlySelected() { if (changedOnly != null) {
private void showStatusOnSwingThread(final String status) { SwingUtilities.invokeLater(new Runnable() {
"label.namespace.navigate.tooltip"), combo);
final String prefix = "UML"; //$NON-NLS-1$ if (name.substring(startName).startsWith(prefix)) {
None
Object f = TargetManager.getInstance().getFigTarget(); if (f instanceof Fig) {
public void treeWillCollapse(TreeExpansionEvent tee) { // unimplemented - we only care about expanding
private static final int WARN_THRESHOLD = 75; private static final int CRITICAL_THRESHOLD = 90;
_x = x; _y = y;
if (project.getRoots().contains(first)) { setTarget(first);
if (Model.getModelManagementHelper().isReadOnly( getContent().getOwner())) {
public void actionPerformed(ActionEvent e) { updateStats();
public void setTarget(Object item) { String message = "";
private long free; private long total;
g.setColor(TOTAL_COLOR); g.fillRect(totalX-2, 0,
//     c.gridy = 3; //     c.gridheight = GridBagConstraints.REMAINDER;
if (Model.getFacade().isAClassifier(node)) { Model.getCoreHelper().addOwnedElement(getHomeModel(), node);
// probably the TabText should only show an empty pane in that case setTarget(e.getNewTarget());
sb.append(generateClassifierRef(Model.getFacade().getType(parameter))); sb.append(' ');
private JComboBox elementName = new JComboBox(); 
return -1; }
private JPanel nameLocTab = new JPanel(); 
labelWidth, label.getPreferredSize().height));
public abstract boolean isCreateDiagramsSelected(); 
//    private JPanel tagValsTab = new JPanel(); 
} 
//    private JPanel constraintsTab = new JPanel(); 
c.gridx = 0;     c.gridy = 3; c.weightx = 0.0;
mainPanel.add(nameLocTab, BorderLayout.NORTH); 
public abstract boolean isDiagramLayoutSelected(); 
type.addItem(PredicateMType.create( Model.getMetaTypes().getUMLClass()));
public void actionPerformed(ActionEvent e) { Object source = e.getSource();
public ListIterator<T> listIterator() { return list.listIterator();
/* mvw: Indeed. The intention of the constructor parameter is to prove * that there is a valid UML object to bind the notation to.
pw.print(message ); pw.print("<hr>System Info:<p>" + SystemInfoDialog.getInfo());
@Override protected void modelChanged(PropertyChangeEvent e) {
textArea.setText(message.replaceAll("\n", "<p>")); textArea.setCaretPosition(0);
"label.namespace.navigate.tooltip"), combo);
public Type navigateQualified(String name, Type[] qualifiers) throws OclTypeException {
"label.namespace.navigate.tooltip"), combo);
String oldOperationName = null; String oldClassName = null;
/** * PredicateMType is a small helper class which converts the
if (newEp == null) { ProjectManager.getManager().getCurrentProject().moveToTrash(ep);
} String typeName = type.getSelectedItem().toString();
extensionPoint.setName("newEP"); extensionPoint.setLocation("loc");
super(Translator.localize("action.new"), ResourceLoaderWrapper.lookupIcon("action.new"));
} }
public class CriticBrowserDialog extends ArgoDialog implements ActionListener,
/** * Copy system info to clipboard.
None
* See issue 4282. Do not use a class * as the namespace for a statemachine: */
/** * Collect system information.
extends JPanel { 
void updateInfo() { info.setText(getInfo());
None
TargetManager.getInstance().cleanHistory(); p.remove();
public String expand(String desc, ListSet offs) { return desc;
&& (fi.getEnclosedFigs() == null || fi.getEnclosedFigs().size() == 0)) {
public Namespace getCommonNamespace(Namespace namespace) { Iterator i = iterator();
} 
@Override public Fig createNewItem(MouseEvent me, int snapX, int snapY) {
if (fi.isResizable() /* But exclude elements that enclose others,
public abstract boolean isChangedOnlySelected(); 
super(Translator.localize("action.find")); name = "action.find";
Rectangle bounds = null; if (location != null) {
static { // First of all, let's set up the duplicate hash. This hash contains
None
None
putDefaultShortcut(ACTION_GENERATE_ONE, null, new ActionGenerateOne()); putDefaultShortcut(ACTION_GENERATE_PROJECT_CODE, null,
LOG.debug("Unknown modifier: " + modifier); return 0;
putDefaultShortcut(ACTION_GO_TO_DIAGRAM, null, new ActionGotoDiagram()); putDefaultShortcut(ACTION_ZOOM_RESET, null, new ZoomAction(0.0));
/** * Print the current active diagram.
public Object[] toArray() { return list.toArray();
putDefaultShortcut(ACTION_ALIGN_TOPS, null, new AlignAction( AlignAction.ALIGN_TOPS));
putDefaultShortcut(ACTION_SELECT_ALL, KeyStroke.getKeyStroke( KeyEvent.VK_A, DEFAULT_MASK),
putDefaultShortcut(ACTION_USE_CASE_DIAGRAM, null, new ActionUseCaseDiagram());
putDefaultShortcut(ACTION_PREFERRED_SIZE, null, new CmdSetPreferredSize());
public void removeSourceFlow(Object handle, Object flow) { super.removeSourceFlow(handle, flow);
putDefaultShortcut(ACTION_SYSTEM_INFORMATION, null, new ActionSystemInfo());
a.putValue("shortcut", KeyStroke.getKeyStroke( KeyEvent.VK_2, Event.ALT_MASK + Event.CTRL_MASK));
None
putDefaultShortcut(ACTION_DISTRIBUTE_H_SPACING, null, new DistributeAction(DistributeAction.H_SPACING));
@Override public void addSupportedGoal(Goal g) {
None
//<!DOCTYPE pgml SYSTEM "pgml.dtd"> reader.readLine();
this.setFocusTraversalKeys( KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
this.addKeyListener(new KeyListener() { private int currentKeyCode = 0;
return true; }
if (attributes != null) { Map attributesFound = new HashMap();
return NO_PROBLEM; }
Configuration.setString(Configuration.makeKey(oldAction .getKey()), KeyEventUtils.formatKeyStroke(newActions[i]
@Override public void removeFromDiagram() {
Configuration.removeKey(Configuration.makeKey(oldAction .getKey()));
} 
if (KeyEventUtils.isActionEvent(ke)) { return KeyEventUtils.getKeyText(keyCode);
private static boolean uml2 = false; 
default: modifText += KeyEventUtils.getKeyText(ke.getKeyCode());
mruList = new LastRecentlyUsedMenuList(file); 
@Override public void outAEmptyFeatureCallParameters(AEmptyFeatureCallParameters node)
generate = add(new JMenu(menuLocalize("Generation"))); setMnemonic(generate, "Generation");
exitAction = new ActionExit(); if (!OsUtil.isMacOSX()) {
initAlignMenu(align); initDistributeMenu(distribute);
customButton.addActionListener(this); defaultButton.addActionListener(this);
Collection operSeen = new ArrayList(); for (Object op : Model.getFacade().getOperations(dm)) {
JMenuItem argoHelp = help.add(new ActionHelp()); setMnemonic(argoHelp, "ArgoUML help");
else { LOG.warn("PGML stored pathitem class name does "
public void windowClosed(WindowEvent e) { // ignored - we only care about open/closing
Collection<Action> c = new ArrayList<Action>(); for (Object mi : edit.getMenuComponents()) {
add(help); }
//// Method 1: //// (collect data and assign later in endElement() method).
c.add(new ActionFind()); c.add(new ZoomSliderButton());
String entryName = f.getName(); if (entryName.length() > 40) {
@Deprecated public void notationProviderAdded(ArgoNotationEvent e) {
JMenuItem item = fileMenu.insert(new ActionReopenProject(filename), addAt);
@Override protected void textEdited(FigText ft) {
File f = new File(filename); //JMenuItem item = _fileMenu.add(new ActionReopenProject(filename));
for (i = 0; i < maxCount; i++) { confKeys[i] =
fileMenu = filemenu; lruCount = 0;
item.setText(entryName); item.setToolTipText(filename);
i = 0; boolean readOK = true;
} }
lruCount = i; }
for (int i = 0; i < lruCount; i++) { fileMenu.remove(menuItems[i]);
public boolean accept(File pathname) { return (pathname.canRead()
menuItems[0] = addEventHandler(filename, menuIndex); 
int i, j; i = 0;
lruCount = j; 
for (int k = 0; k < lruCount; k++) { ActionReopenProject action =
public void addListenersToModel(Object model) { impl.addListenersToModel(model);
None
public abstract void addModelEventListener(PropertyChangeListener listener, Object modelelement,
None
} 
None
table = new JTable(new ShortcutTableModel()); table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
maxCount = Configuration.getInteger(Argo.KEY_NUMBER_LAST_RECENT_USED,
String[] tempNames = new String[maxCount]; for (int i = 0; i < lruCount; i++) {
public abstract void addClassModelEventListener( PropertyChangeListener listener,
enableFields(true); // updating the radiobuttons container's title
private static final int OFFSET_Y = 25; 
selectedContainer.setBorder(BorderFactory.createTitledBorder(Translator .localize("dialog.shortcut.titled-border.selected-partial")
if (target.getCurrentShortcut() == null) { // no shortcuts --> NONE
* 		java.lang.String[]) */
noneButton.setSelected(true); shortcutField.setEnabled(false);
defaultButton.setSelected(true); shortcutField.setEnabled(false);
customButton.setSelected(true); shortcutField.setEnabled(true);
item.setCategory(category); item.setDescription(description);
actions = ShortcutMgr.getShortcuts(); table.setModel(new ShortcutTableModel());
public void clearStereotypes(Object modelElement) { if (modelElement instanceof ModelElement) {
JOptionPane.showMessageDialog(this, Translator.localize(
figId = figId.substring(0, figId.indexOf('.')); FigEdgeModelElement edge = (FigEdgeModelElement) findFig(figId);
if (!noneButton.isSelected()) { ActionWrapper oldAction = getActionAlreadyAssigned(ShortcutMgr
public void startPumpingEvents() { LOG.debug("Start pumping events");
table.setValueAt(oldAction, -1, -1); break;
table.getSelectionModel().removeListSelectionListener(this); table.getSelectionModel().setSelectionInterval(
if (Argo.DOCUMENTATION_TAG.equals(tag)) { break;
setTarget(actions[table.getSelectedRow()]); 
for (Constructor constructor : constructors) { Class[] parameterTypes = constructor.getParameterTypes();
KeyStroke duplicate = ShortcutMgr.getDuplicate(keyStroke); if (duplicate != null) {
for (int i = 0; i < actions.length; i++) { if (actions[i].getCurrentShortcut() != null
public Object getDeepHistory() { return PseudostateKindEnum.PK_DEEP_HISTORY;
shortcutField.setText(formattedKeyStroke); // updating the table data
public Object getConcurrent() { return CallConcurrencyKindEnum.CCK_CONCURRENT;
table.getModel().setValueAt(newKeyStroke, table.getSelectedRow(), 1); // updating the actions
public Object getComposite() { return AggregationKindEnum.AK_COMPOSITE;
this.shortcutField.setBackground(Color.YELLOW); this.warningLabel.setText(MessageFormat.format(Translator
assertTrue("SnoozeOrder started as snoozed", !snooze.getSnoozed()); 
if (ob instanceof ActionWrapper) { ActionWrapper newValueAction = (ActionWrapper) ob;
for (int i = 0; i < actions.length; i++) { if (actions[i].getKey().equals(newValueAction.getKey())) {
public Object getChangeable() { return ChangeableKindEnum.CK_CHANGEABLE;
public Object getChoice() { return PseudostateKindEnum.PK_CHOICE;
public Object getOutParameter() { return ParameterDirectionKindEnum.PDK_OUT;
this.setMaximumRowCount(9); PerspectiveManager.getInstance().addListener(this);
return ((Comment) comment).getBody(); } catch (InvalidObjectException e) {
boolean multiSelect = TargetManager.getInstance().getTargets().size() > 1;
try { if (!multiSelect && selectedItem instanceof Profile
} 
assertTrue("DesignGoalsCM.isRelevant(Critic, Designer) is incorrect", cm.isRelevant(critic, Designer.theDesigner()));
if (Model.getFacade().isAProfile(selectedItem)) { this.add(new ActionDeployProfile(selectedItem));
void toggleValueOfTarget(Object t) { Model.getCoreHelper().setRoot(t, !Model.getFacade().isRoot(t));
if (!multiSelect && mutableModelElementsOnly) { initMenuCreateDiagrams();
Project project = ProjectManager.getManager().getCurrentProject(); if (project != null) {
&& !(projectModels.size() == 1 && projectModels.contains(selectedItem))) {
assertTrue("GoalModel not initialized with one goal", goalModel.getGoalList().size() == 1);
boolean haveAtLeastOneDiagram = false; boolean onlyDiagram = true;
public Object getGuarded() { return CallConcurrencyKindEnum.CCK_GUARDED;
return countNodesAndEdges(d); default:
ListSet all = allOffenders; if (all == null) {
if (Model.getUmlFactory().isContainmentValid(metaType, target)) { // this element can be contained add a menu item
public Object getOrdered() { return OrderingKindEnum.OK_ORDERED;
for (Object metaType : Model.getMetaTypes().getAllMetaTypes()) { // test if this element can be contained by the target
/** * A JMenuItem that will order by display name
getSelectionModel().setSelectionPath(path); }
configPanelNorth = new JPanel(); configPanelSouth = new JPanel();
} 
/** * Helps prepare state before a node is expanded.
evt = new ArgoProfileEvent(ArgoEventTypes.PROFILE_ADDED, this); ArgoEventPump.fireEvent(evt);
} 
setSelection(TargetManager.getInstance().getTargets().toArray()); }
TreePath[] addedOrRemovedPaths = e.getPaths(); TreePath[] selectedPaths = getSelectionPaths();
Boolean selected = (Boolean) a.getValue("SELECTED"); JCheckBoxMenuItem mi =
int rows = getRowCount(); for (int row = 0; row < rows; row++) {
boolean callSetTarget = true; List addedElements = new ArrayList();
public boolean isPathVisible() { return getNotationSettings().isShowPaths();
List removedTargets = new ArrayList(); List addedTargets = new ArrayList();
throw new SaveException(e); }
if (!removedTargets.isEmpty()) { Iterator it = removedTargets.iterator();
None
public void setLineWidth(int width) { // Override superclass to do nothing.
public Object getUnordered() { return OrderingKindEnum.OK_UNORDERED;
public Object getReturnParameter() { return ParameterDirectionKindEnum.PDK_RETURN;
public Object findClassifierByName(Object ofs, String s) { if (!(ofs instanceof ObjectFlowState)) {
ExplorerPerspective selPers = (ExplorerPerspective) perspectiveList.getSelectedValue();
public Object getNone() { return AggregationKindEnum.AK_NONE;
ruleLibraryListModel.clear(); for (PerspectiveRule rule : rulesLib) {
public Object getClassifier() { return ScopeKindEnum.SK_CLASSIFIER;
public abstract int getImportLevel(); 
ruleLibLabel.setText(Translator.localize("label.rules-library") + " (" + ruleLibraryListModel.size() + ")");
public Object getFork() { return PseudostateKindEnum.PK_FORK;
for (ExplorerPerspective perspective : perspectives) { List<PerspectiveRule> rules = perspective.getList();
public abstract boolean isMinimizeFigsSelected(); 
if (!(ruleLibraryListModel.size() > selLibNr)) { selLibNr = ruleLibraryListModel.size() - 1;
public Object getAggregate() { return AggregationKindEnum.AK_AGGREGATE;
model.nodeChanged(this); }
if (pce instanceof UmlChangeEvent) { Runnable doWorkRunnable = new Runnable() {
treeModel.structureChanged(); } else if (pce.getSource() instanceof ProjectManager) {
if ("remove".equals(pce.getPropertyName())) { treeModel.modelElementRemoved(pce.getOldValue());
Collection targets = TargetManager.getInstance().getModelTargets(); if (targets.size() < 1) {
public final class ModeInspectorPanel extends JPanel implements ModeChangeListener { 
if (pce.getNewValue() != null) { treeModel.structureChanged();
if (Model.getFacade().isANamespace(subject)) { if (type.equals(".")) {
ProfileManager profileManager = ProfileFacade.getManager(); StringBuffer path = new StringBuffer();
path.append(Model.getFacade().getName(undeployedProfile)); File f = saveProfile(path.toString());
try { profileManager.registerProfile(new UserDefinedProfile(f,
if ((currentLookAndFeel != null && currentLookAndFeel.equals(METAL_LAF_CLASS_NAME))
while (pst.hasMoreTokens()) { String perspective = pst.nextToken();
String perspectiveName = perspectiveDetails.nextToken(); 
if (perspectiveDetails.hasMoreTokens()) { 
while (perspectiveDetails.hasMoreTokens()) { 
String ruleName = perspectiveDetails.nextToken(); 
try { Class ruleClass = Class.forName(ruleName);
continue; }
int index = paths.getSelectedIndex(); if (index < 0) {
addPerspective(userDefinedPerspective); }
loadDefaultPerspectives(); }
if (getPerspectives().size() == 0) { loadDefaultPerspectives();
protected int getNotationType() { /* The EnumerationLiteral uses a dedicated notation that supports
packagePerspective.addRule(new GoStatemachineToDiagram()); if (Model.getFacade().getUmlVersion().startsWith("1")) {
if (Model.getFacade().getUmlVersion().charAt(0) == '1') { ruleNamesArray = appendArrays(ruleNamesArray, ruleNamesArray14);
DragGestureRecognizer dgr = dragSource
this); 
public void targetAdded(TargetEvent e) { setTarget(e.getNewTarget());
dgr.setSourceActions( dgr.getSourceActions() & ~InputEvent.BUTTON3_MASK);
JLabel lbl = (JLabel) getCellRenderer().getTreeCellRendererComponent(
lbl.setSize((int) raPath.getWidth(), (int) raPath.getHeight()); 
public void dragDropEnd( DragSourceDropEvent dragSourceDropEvent) {
ghostImage = new BufferedImage(
Icon icon = lbl.getIcon(); int nStartOfText =
// Add displacement angle to slope if (swap && theta > Math.PI / 2 && theta < Math.PI * 3 / 2) {
g2.setComposite(AlphaComposite.getInstance( AlphaComposite.DST_OVER, 0.5f));
sourcePath = path; 
public boolean isCellEditable(int row, int col) { return col >= 1 && row < elements.length;
dragGestureEvent.startDrag(null, ghostImage, new Point(5, 5), tf, this);
* @since 0.17.3 * @see SourcePathController
if (!Model.getFacade().isANamespace(dest)) { LOG.debug("No valid Drag: not a namespace.");
*      AbstractTestActionAddDiagram#getValidNamespaceClasses() */
// TODO: Any Namespace can contain other elements.  Why don't we allow // this? - tfm
public void actionPerformed(ActionEvent event) { ProjectBrowser pb = ProjectBrowser.getInstance();
if (Model.getModelManagementHelper().isReadOnly(dest)) { LOG.debug("No valid Drag: "
public Enumeration gen(Object o) { Set res = new HashSet();
Collection transfers = (Collection) tf.getTransferData(
loadLibrary(); // set the newly selected item in the library list
} 
int nRow = getRowForLocation(pt.x, pt.y); 
if (nRow < 0) { return;
public abstract boolean relocate(Object base); 
// Is row at top of screen? nRow =
hoverTimer = new Timer(1000, new ActionListener() {
return; }
} 
public final class ModeInspectorPanel extends JPanel implements ModeChangeListener { 
None
@Override public Object getValue(String key) {
if (ghostImage != null) { /*
if (!DragSource.isDragImageSupported()) { /* Rub out the last ghost image and cue line: */
paintImmediately(ghostRectangle.getBounds()); /* And remember where we are about to draw
/** * Enables all selected modules and disabling all modules not selected.<p>
paintImmediately(cueLine.getBounds()); }
Rectangle raPath = getPathBounds(path); if (raPath != null) {
if ((aContainer.getGlassPane() != null) && (aContainer.getGlassPane() instanceof GlassPane)) {
ghostRectangle = ghostRectangle.createUnion(cueLine); 
// utility is a namespace collection - also not strictly required // to have associations.
if (path.equals(sourcePath)) { dropTargetDragEvent.rejectDrag();
menuItems.add(new OrderedMenuItem( new ActionCreateContainedModelElement(
if (!Model.getFacade().isANamespace(dest)) { if (LOG.isDebugEnabled()) {
hoverTimer.stop(); 
repaint(ghostRectangle.getBounds()); 
Point loc = dropTargetDropEvent.getLocation(); TreePath destinationPath = getPathForLocation(loc.x, loc.y);
None
Collection modelElements = (Collection) tr.getTransferData(
JOptionPane.showMessageDialog(this, Translator.localize(
if ((dropTargetEvent.getDropAction() & DnDConstants.ACTION_COPY_OR_MOVE) == 0) {
private Boolean showBoldNames; 
Point pt = dropTargetEvent.getLocation(); TreePath path = getPathForLocation(pt.x, pt.y);
static { assert Position.Center.toString().equals(BorderSplitPane.CENTER);
Object o = d.getDependentElement(); if (o != null) {
/** * The UID.
@Override protected Object findNamespace() {
if (getRoot() instanceof ExplorerTreeNode) { ((ExplorerTreeNode) getRoot()).remove();
public static final String toJavaIdentifier(String s) { int len = s.length();
for (Collection nodes : modelElementMap.values()) { nodes.clear();
if (rules == null) { return;
@Override public void mouseReleased(MouseEvent me) {
if (updatingChildren.contains(node)) { return;
if (newValue == null || oldValue == null
if (Model.getFacade().isType(dm)) { return NO_PROBLEM;
theMAlConstraints.add(null); 
@Override public void removeNodeFromParent(MutableTreeNode node) {
Enumeration enChld = node.children(); Object lastObj = null;
super.removeNodeFromParent(child); }
for (ExplorerTreeNode child : reordered) { Object obj = child.getUserObject();
super.insertNodeInto(child, node, ip); childUserObjects.add(ip, obj);
for (PerspectiveRule rule : rules) { 
Iterator it = removeSet.iterator(); List weakNodes = null;
it.remove(); // Remove obj3 from weakNodes and newChildren
newChildren.remove(obj3); it3.remove();
add(top, BorderLayout.CENTER); }
while (firstNew != null) { insertNodeInto(new ExplorerTreeNode(firstNew, this),
order = (Comparator) e.getItem(); }
Collections.sort(newChildren, order); deps.addAll(newChildren);
public void refresh(PropertyChangeEvent e) { String propertyName = e.getPropertyName();
return Collections.EMPTY_SET; }
@Override protected void setTargetBBox() {
((TargetListener) sel).targetSet(new TargetEvent(this, TargetEvent.TARGET_SET, new Object[] {},
} 
allDiagrams.setPreferredSize(new Dimension( allDiagrams.getPreferredSize().width,
if (!(t instanceof Fig)) { if (Model.getFacade().isAModelElement(t)) {
@Override public void refresh() {
if (!Model.getFacade().isAAbstraction(incomingIt.next())) { return true;
if (!diagramResults.contains(child)) { diagramResults.add(child);
mainPanel.add(allDiagrams, BorderLayout.CENTER); setContent(mainPanel);
return d.getName(); case 2 : // "N/A" or "x nodes and x edges"
public final class ModeInspectorPanel extends JPanel implements ModeChangeListener { 
/** * Notify all listeners that a node (or a set of siblings) has changed in
st.mark("perform commands"); if (batch) {
@Override public DefaultHandler getHandler(HandlerStack stack, Object container,
.setInteger( ProfileConfiguration.KEY_DEFAULT_STEREOTYPE_VIEW,
if (Model.getFacade().isAProfileApplication(o)) { // don't show a profile application
st.mark("initialize gui"); pb = initializeGUI(splash);
continue; }
continue; } else if (Model.getFacade().isAExtension(o)) {
continue; }
continue; }
for (ModuleInterface module : getInstance().availableModules()) { 
return showInDiagramColumn ? Translator.localize("dialog.find.not-applicable")
if ((d instanceof SequenceDiagram) && (Model.getFacade().getRepresentedClassifier(parent) == null)
* like "tearing off" a tab.<p> *
@Override public void caseAFeatureCall(AFeatureCall node) {
List<Trigger> trs = ((Transition) handle).getTriggers(); if (trs.isEmpty()) {
if (!(lafClass != null && !lafClass.equals(currentLookAndFeel))) { setLookAndFeel(lafClass);
return Collections.EMPTY_SET; }
return Collections.EMPTY_SET; }
public Object getProtected() { return VisibilityKindEnum.VK_PROTECTED;
private JTabbedPane tabs = new JTabbedPane(SwingConstants.BOTTOM); 
if (targets.size() == 0) { setTarget(((WeakReference) history.get(currentTarget)).get());
public Dimension getSize() { return new Dimension(w, h); } } /* end class SpacerPanel */
newTarget = o; } else {
targets.removeAll(c); umlListener.removeAllListeners(c);
JScrollPane pane = createScrollPane(); 
if (Model.getFacade().isUtility(dm)) { return NO_PROBLEM;
/* * Notation settings are different since, we know that, at a minimum,
String confCurrentShortcut = Configuration.getString(Configuration .makeKey(shortcutKey), null);
ntarg = targetsList.iterator(); while (ntarg.hasNext()) {
* The log4j logger to log messages to. */
} else { setStandardBounds(x, y, w, h);
((NotificationEmitter) o).addNotificationListener( this, null, o);
if (inBB.remaining() > 0) { out.write(inBB.array(), inBB.position(), inBB.remaining());
if (targetsList.size() == targets.size()) { boolean first = true;
ns = Model.getFacade().getNamespace(ns); if (namespace != null) {
ProjectManager.getManager().addPropertyChangeListener(this); }
public void outAEnumLiteral(AEnumLiteral node) { val = new OclEnumLiteral(node.getName().toString().trim());
((Diagram) o).addPropertyChangeListener(this); } else if (o instanceof NotificationEmitter) {
None
return " A class that represents ...\n\n" + indent + " @see OtherClasses\n"
None
Collection topLevelStereotypes = getTopLevelStereotypes(topLevelModels); 
for (Object o : toBeRemoved) { Model.getCoreHelper().removeStereotype(umlobject, o);
* Table model for the table with modules. */
Collection<Object> toBeRemoved = new ArrayList<Object>(); for (Object stereo : Model.getFacade().getStereotypes(umlobject)) {
if (!isPathSelected(path)) { /* ... otherwise we select the item below the mousepointer. */
if (d instanceof UMLDiagram) { return ((UMLDiagram) d).getLabelName();
for (String stereotypename : stereotypes) { if (!Model.getExtensionMechanismsHelper().hasStereotype(umlobject,
for (Object ownedElement : ownedElements) { stereo = findStereotypeContained(obj, ownedElement, name);
boolean classifierRoleFound = false; boolean classifierRolesOnly = true;
/* *  Extend, Include, UseCaseInstance & ExtensionPoint not implemented
if (Model.getFacade().isAUMLElement(o)) { return Collections.enumeration(Model.getFacade()
model.updateChildren(new TreePath(node.getPath())); Enumeration e = node.children();
addAllUniqueModelElementsFrom(availableStereotypes, paths, ProjectManager.getManager().getCurrentProject()
JPanel setDefStereoV = new JPanel(); setDefStereoV.setLayout(new FlowLayout());
return Model.getFacade().getUMLClassName(rowObj); case 1 : // the name of this instance of ModelElement
@Override public Point getClosestPoint(Point anotherPt) {
return Model.getFacade().getName(rowObj); case 2 : // the name of the parent diagram instance
return (d == null) ? Translator.localize("dialog.find.not-applicable")
if (Model.getFacade().isAComment(dest)) { Model.getCoreHelper().removeAnnotatedElement(dest, source);
ProjectActions.jumpToDiagramShowing(getOffenders()); select();
* @return TYPE_CLASSIFIERROLE */
return Translator.localize("misc.tooltip.commentlink"); }
public boolean accept(File pathname) { return (pathname.canRead()
// really is one - tfm 20070702 //            "org.argouml.uml.cognitive.critics",
public void treeCollapsed(TreeExpansionEvent event) { // does nothing.
//            if (ae.isOfType(AssociationEvent.EVENT_ASSOCIATION_REMOVE) //                    && "namespace".equals(ae.getEndName())
cl = new Checklist(); 
// TODO: treat Message 
// of the statemachine or activitygraph they belong to. if (diagram instanceof UMLStateDiagram
new DropTarget(this, new ArgoDropTargetListener()); 
if (Model.getFacade().isACallAction(getAction())) { ArgoJMenu opMenu = buildOperationMenu();
cl = new Checklist(); 
if (handle == null) { // this is wrongly called with a null handle,
public void printStackTrace() { super.printStackTrace();
/* Finally set the bounds of the big box and the border fig: */ getBigPort().setBounds(x, y, newW, newH);
while (matchPos != -1) { int endExpr = res.indexOf(OCL_END, matchPos + 1);
g2.setComposite(AlphaComposite.getInstance( AlphaComposite.SRC, 0.5f));
char initalChar = nameStr.charAt(pos); boolean allCapitals = true;
umlReserved.add("framework"); umlReserved.add("friend");
umlReserved.add("metaclass"); umlReserved.add("powertype");
if (Model.getFacade().isADataType(dest)) { LOG.debug("No valid Drag: destination is a DataType.");
umlReserved.add("stereotype"); umlReserved.add("stub");
evalStr = Translator.localize("misc.name.deleted"); }
//              r | self.namespace.allContents->excludes //      (r.participant) implies
None
public boolean isVisibilityVisible() { return getNotationSettings().isShowVisibilities();
String nameStr = Model.getFacade().getName(attr); if (nameStr == null || nameStr.equals("")) {
} 
Collection origParam = new ArrayList(Model.getFacade().getParameters(op));
public void dragEnter( DropTargetDragEvent dropTargetDragEvent) {
if (pos >= length) { return PROBLEM_FOUND;
modelElementMap = new HashMap<Object, Set<ExplorerTreeNode>>(); Project proj = ProjectManager.getManager().getCurrentProject();
public void paintIcon(Component c, Graphics g, int x, int y) { final Object modelElement = fig.getOwner();
public void setVisibilityVisible(boolean isVisible) { getNotationSettings().setShowVisibilities(isVisible);
@Override public void insertNodeInto(MutableTreeNode newChild,
umlReserved.add("deletion"); umlReserved.add("derived");
None
List<ExplorerTreeNode> actualNodes = new ArrayList<ExplorerTreeNode>(); Enumeration childrenEnum = node.children();
if (Model.getFacade().isReadOnly(attr)) { return NO_PROBLEM;
None
if ((Model.getFacade().getName(dm) == null) || ("".equals(Model.getFacade().getName(dm)))) {
if (fc == null || !fc.isVisible()) { fig = null;
if (Model.getFacade().isAGeneralizableElement(dm) && Model.getFacade().isAbstract(dm)) {
protected Remover() { // Listen for the removal of diagrams from project
// FigText for attributes is drawn before drawing things // over it
public void outAStringLiteral(AStringLiteral node) { String text = node.getStringLit().getText();
if (Model.getFacade().isAUseCase(dm)) { Object usecase = dm;
Iterator iter2 = Model.getFacade().getExtends(dm).iterator(); while (iter2.hasNext()) {
// TODO: treat Message 
None
result.add(start + Translator.localize("critics.WizAssocComposite-option1")
return Collections.EMPTY_SET; }
String start = Translator.localize("misc.name.anon"); String end = Translator.localize("misc.name.anon");
return null; }
Iterator iter = Model.getFacade().getConnections( getTriggerAssociation()).iterator();
@Override public void updateListeners(Object oldOwner, Object newOwner) {
Model.getCoreHelper().setAggregation1(ae0, Model.getAggregationKind().getComposite());
Model.getCoreHelper().setAggregation1(ae0, Model.getAggregationKind().getAggregate());
Model.getCoreHelper().setAggregation1(ae0, Model.getAggregationKind().getNone());
Model.getCoreHelper().setAggregation1(ae0, Model.getAggregationKind().getNone());
Model.getCoreHelper().setAggregation1(ae0, Model.getAggregationKind().getNone());
@Override public void addEnclosedFig(Fig figState) {
LOG.error("WizAssocComposite: could not set " + "aggregation.", pve);
Iterator eri = Model.getFacade().getResidentElements(parent).iterator();
if (!super.canFinish()) { return false;
if (getStep() == 0) { return true;
if ((getStep() == 1) && (step1Choice != null) && (step1Choice.getSelectedIndex() != -1)) {
return false; }
if (!(Model.getFacade().isAClassifier(dm))) { return NO_PROBLEM;
public void propertyChange(PropertyChangeEvent evt) { ((UMLPlainTextDocument) getDocument()).propertyChange(evt);
public void dragExit(DropTargetEvent dropTargetEvent) { LOG.debug("dragExit");
action = getInitiatorOfAction(umlAction); if ("".equals(action)) {
* Default constructor.  Builds a critic that checks UML reserved names. */
if (endExpr == -1) { break;
public void layout() { // TODO: Multiple associations between the same pair of elements
// static variables 
Object parameterizedClass2 = Model.getCoreFactory().buildClass( "ParameterizedClass2", model);
None
return res; } else {
if (Model.getFacade().isType(dm)) { return NO_PROBLEM;
return NO_PROBLEM; }
@Override public boolean isStandalone() {
if (!Model.getFacade().isAAssociation(dm)) { return NO_PROBLEM;
public GraphModel makeGraphModel() { return null; } 
None
public class CrEmptyPackage extends CrUML { /**
Object ae = assocEnds.next(); 
} ListSet derived =
public void caseAUnaryUnaryExpression(AUnaryUnaryExpression node) { inAUnaryUnaryExpression(node);
// TODO: Model implementation independent public void deleteCollection(Collection col) {
Collection ownedElements = Model.getFacade().getOwnedElements(targetParentNS);
@Override public float getWeight() {
None
class ChildGenDerivedClasses implements ChildGenerator { public Iterator childIterator(Object o) {
@Override public int getRank() {
Object inner = Model.getCoreFactory().buildClass(classifier); TargetManager.getInstance().setTarget(inner);
} }
public int getTypeOrderNumer() { return first() == null
None
None
None
Iterator params1 = Model.getFacade().getParameters(op1).iterator(); Iterator params2 = Model.getFacade().getParameters(op2).iterator();
None
// required to have variables. if (Model.getFacade().isUtility(dm)) {
public void setName(String n) throws PropertyVetoException; 
if (!(Model.getFacade().isPrimaryObject(dm))) { return NO_PROBLEM;
public boolean containsNode(Object node) { return nodes.contains(node);
assert newEdge != null : "There has been no FigEdge created"; assert (newEdge.getDestFigNode() != null)
JPanel setDefStereoV = new JPanel(); setDefStereoV.setLayout(new FlowLayout());
} 
//                        } //                    } else
if (Model.getFacade().isAModelElement(node)) { cmnt.addAll(Model.getFacade().getComments(node));
return NO_PROBLEM; }
private ArgoDiagram createInternal(final DiagramType type, final Object namespace, final Object machine,
public Collection loadModel(ProfileReference reference) throws ProfileException {
throw new IllegalStateException( "Unknown factory type registered");
None
Object connection = buildConnection(
Collection cmnt = new ArrayList(); if (Model.getFacade().isAComment(node)) {
return false; }
return NO_PROBLEM; }
/** * Textual rendering for stereotype
String name1 = Model.getFacade().getName(op1); if (name1 == null) {
} 
public static int getInteger(ConfigurationKey key, int defaultValue) { return config.getInteger(key, defaultValue);
} 
return report.toString(); }
private String fontName; private Integer fontSize;
if (VALID_CONNECTIONS[i].length < 4) { Class<?>[] reversedModeElementPair = new Class[2];
private Font fontPlain; private Font fontItalic;
if ((fontName != null && !"".equals(fontName) && fontSize != null) || parent == null) {
// utility is a namespace collection - also not strictly required // to have associations.
addVetoableChangeListener(this); }
public void stopPumpingEvents() { LOG.debug("Stop pumping events");
return presentationFor(Model.getFacade().getOwner(obj)); }
private static CompoundCritic crCompoundConstructorNeeded; 
public void execute() { Editor ce = Globals.curEditor();
if (f.getLayer() == null) { report.append("-- Fixed: layer was null\n");
if (!Model.getFacade().isStatic(attr) && !Model.getFacade().isReadOnly(attr)) {
createDiagrams.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) {
if (haveInterfaceEnd && otherEndNavigable) { return PROBLEM_FOUND;
None
return NO_PROBLEM; }
if (!f.isVisible()) { if (figDescription == null) {
private JComponent getChooser() { String directory = Globals.getLastDirectory();
if (!getLayer().equals(f.getLayer())) { if (figDescription == null) {
if (Model.getFacade().isAOperation(obj) || Model.getFacade().isAReception(obj)
ArgoEventPump.addListener(ArgoEventTypes.ANY_NOTATION_EVENT, this); ArgoEventPump.addListener(
if (f.getLayer() == null) { report.append("-- Fixed: layer was null\n");
if (f.getLayer() == null) { report.append("-- Fixed: layer was null\n");
if (f.getLayer() == null) { report.append("-- Fixed: layer was null\n");
public List<AbstractArgoJPanel> getDetailsTabs() { List<AbstractArgoJPanel> result =
if (ns == null) { return;
if (fig instanceof ArgoFig) { ((ArgoFig) fig).renderingChanged();
private ArgoDiagram diagram; 
private static final Point STARTING_POINT = new Point(100, 10); 
private Object finalState = null; 
for (Iterator it = diagram.getNodes().iterator(); it.hasNext();) { Object node = it.next();
int lastIndex = placeNodes(new ArrayList(), first, 0); 
Point location = new Point(STARTING_POINT); location.y += OFFSET_Y * (lastIndex + 2);
target = null; Iterator iter = p.getRoots().iterator();
if (Model.getFacade().getNamespace(modelElement) == ns) { return;
return figClone; }
super.removeFromDiagramImpl(); return;
w = Math.max(MIN_WIDTH, w); h = Math.max(MIN_HEIGHT, h);
if (leftEdge && topEdge) { h.index = Handle.NORTHWEST;
figPool.removeFromDiagram(); return;
} // TODO: All super constructors should take a GraphModel
for (Object o : getLayer().getContents()) { if (o instanceof FigPool) {
else { h.index = -1;
Model.getPump().addModelEventListener(this, theActivityGraph, new String[] {"remove", "namespace"});
JPanel setDefStereoV = new JPanel(); setDefStereoV.setLayout(new FlowLayout());
} // TODO: All super constructors should take a GraphModel
setNamespace(newNamespace); ((UMLMutableGraphSupport) getGraphModel())
@Override public Dimension getMinimumSize() {
//      if (Model.getFacade().isAOperation(base) //      || Model.getFacade().isANamespace(base))
//      if (Model.getFacade().isAOperation(base) //      || Model.getFacade().isANamespace(base))
Object type = Model.getFacade().getType(newOwner); if (Model.getFacade().isAClassifier(type)) {
HashMap map = new HashMap(); 
List xList = new ArrayList(map.keySet()); Collections.sort(xList);
/** * Construct a new FigObjectFlowState.
if (layer == null) { return;
* We only need to listen to its "type", and "remove". */ l.add(new Object[] {newOwner, new String[] {"type", "remove"}});
int blank = (h - PADDING - classDim.height - stateDim.height) / 2; getNameFig().setBounds(x + PADDING,
Object machine = Model.getFacade().getSubmachine(newOwner); if (machine != null) {
return getNotationSettings(); }
return getOwner(); }
addFig(s1); addFig(s2);
super.modelChanged(mee); if (mee instanceof AssociationChangeEvent
listeners.add(new Object[] {newOwner, null}); 
PropPanelFactory diagramFactory = new ActivityDiagramPropPanelFactory(); PropPanelFactoryManager.addPropPanelFactory(diagramFactory);
Rectangle bounds = new Rectangle(X0 + PADDING, Y0, STATE_WIDTH - PADDING * 2, HEIGHT);
Rectangle r = getBounds(); setBounds(r);
return figClone; }
end0 = Model.getFacade().getGeneral(gen); end1 = Model.getFacade().getSpecific(gen);
return new Dimension(w, h); }
// or should we leave them since they contain so much state that the // user would have to recreate??
@Override public void addEdge(Object edge) {
getStereotypeFig().setLineWidth(0); getStereotypeFig().setVisible(true);
if ("ownedElement".equals(pce.getPropertyName())) { List oldOwned = (List) pce.getOldValue();
None
if (getNameFig() == null) { return;
return new FigRect(X0, Y0, DEFAULT_WIDTH, DEFAULT_HEIGHT, DEBUG_COLOR, DEBUG_COLOR);
cover = new FigRect(X0, Y0, DEFAULT_WIDTH, DEFAULT_HEIGHT, LINE_COLOR, FILL_COLOR);
getStereotypeFig().setBounds(x, y + extraEach, newW, getStereotypeFig().getHeight());
Rectangle oldBounds = getBounds(); Dimension minSize   = getMinimumSize();
getBigPort().setBounds(x, y, newW, newH); cover.setBounds(x, y, newW, newH);
int extraEach = (newH - nameMin.height - stereoMin.height) / 2; if (!(stereoMin.height == 0 && stereoMin.width == 0)) {
} 
getActionMessage(), };
/** * A Fig for the group of Messages shown above the Association Role.
Iterator it = figs.iterator(); if (!figs.isEmpty()) {
Iterator it = figs.iterator(); int size = figs.size();
PropPanelFactory diagramFactory = new CollaborationDiagramPropPanelFactory();
assertEquals(new DependentString("A"), "A"); // but, lookout, it doesn't work both ways
PropPanelFactory diagramFactory = new DeploymentDiagramPropPanelFactory();
JPanel setDefStereoV = new JPanel(); setDefStereoV.setLayout(new FlowLayout());
h = Math.max(3 * DEPTH, h); return new Dimension(w, h);
_x = x; _y = y; _w = w; _h = h; 
return figClone; }
None
None
if (Model.getFacade().isAStateVertex(node)) { final Object stateMachine = getMachine();
Object me = Model.getFacade().getModelElement(eo); if (oldOwned.contains(eo)) {
Object target = Model.getFacade().getTarget(transition); 
if (uml != null) { return false;
if (!(Model.getFacade().isAClass(newNode) || Model.getFacade().isAClass(oldNode)
if (figs.isEmpty()) { return false;
@Override public Vector<Fig> getEnclosedFigs() {
return true; }
None
if (getLayer() != null && getOwner() != null) { initPorts(lay, getOwner());
if (!(event instanceof RemoveAssociationEvent) ||  !"subvertex".equals(event.getPropertyName())) {
the bottom region has a minimum height*/ if (getOwner() != null) {
if (ms) { return popUpActions;
renderingChanged(); }
if ((mee.getSource().equals(getOwner()))) { if (mee.getPropertyName().equals("referenceState")) {
None
if (container != null && mee.getSource().equals(container)
} 
// static variables 
// This indicates a change in association, not name - tfm if (mee.getPropertyName().equals("submachine")) {
if (mee.getPropertyName().equals("submachine")) { final Object oldRef;
if (container != null && facade.isASubmachineState(container)
ref = stateMHelper.getPath(mee.getSource()); } else {
} 
if (container != null && facade.isASubmachineState(container)) {
stateMHelper.setReferenceState(getOwner(), ref); updateReferenceText();
if (container != null && facade.isASubmachineState(container)) {
if (container != null && facade.isASubmachineState(container)
persistanceManager.addTranslation( "org.argouml.uml.diagram.sequence.ui.UMLSequenceDiagram",
persistanceManager.addTranslation( "org.argouml.uml.diagram.sequence2.ui.UMLSequenceDiagram",
while (i < nodes.size() && !figClassifierRoleFound) { fig = (Fig) nodes.get(i);
} 
//assert  w == h; 
/* Ignore w and h from here on. */ 
if (mee.getPropertyName().equals("top")) { updateListeners(getOwner(), null);
int out_d = DISC + 2 * getLineWidth(); 
divider2 = new FigLine(getInitialX(),
if (!SwingUtilities.isEventDispatchThread()) { SwingUtilities.invokeLater(new Runnable() {
public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node, Map styleAttributes) {
if (Model.getFacade().isAOperation(feat)) { for (Object param : Model.getFacade().getParameters(feat)) {
} 
region = Model.getUmlFactory().buildNode( Model.getMetaTypes().getRegion(), encloser.getOwner());
Rectangle r = getBounds(); setBounds(r.x, r.y, r.width, r.height);
} }
if (w > f.getBounds().width) { Rectangle fR = f.getBounds();
// TODO: This comparison is very suspect, it should use equals // method. The code within the block is in fact never executed.
if (actualPackage != null) { if (equalsDependencies(actualPackage, expectedPackage)) {
public void mouseDragged(MouseEvent me) { 
Model.getFacade().getOwner(context)); }
Model.getPump().addModelEventListener(this, theStateMachine, new String[] {"remove", "namespace"});
&& getNamespace() != newNamespace) { /* The namespace of the statemachine is changed! */
setNamespace(newNamespace); ((UMLMutableGraphSupport) getGraphModel())
PropPanelFactory diagramFactory = new StateDiagramPropPanelFactory(); PropPanelFactoryManager.addPropPanelFactory(diagramFactory);
if (oldOwned.contains(elementImport)) { LOG.debug("model removed " + modelElement);
if (Model.getFacade().isAModelElement(port)) { Iterator it =
if (Model.getFacade().isAGeneralizableElement(port)) { Iterator it = Model.getFacade().getSpecializations(port).iterator();
if (Model.getFacade().isAClassifier(port) || Model.getFacade().isAPackage(port)) {
if (Model.getFacade().isNavigable(nextAssocEnd)) { edges.add(nextAssocEnd);
if (Model.getFacade().isAClassifier(port) || Model.getFacade().isAPackage(port)) {
Object edgeAssoc = edge; 
Model.getCoreHelper().setType(theEnd, newNode); }
theOtherEnd = iter.next(); theEnd = iter.next();
theEnd = iter.next(); theOtherEnd = iter.next();
} 
fig.addPoint(centerRight.x + SELF_SIZE, centerRight.y + yoffset); // move left
fig.addPoint(centerRight.x + SELF_SIZE, centerRight.y); // move down
fig.addPoint(centerRight.x, centerRight.y + yoffset); 
Fig fs = getSourceFigNode(); Fig fd = getDestFigNode();
int difference = centerHigh - centerLow; 
return result; }
|| (hasPackage && split.isPackage() == hasPackage) || split.isStandalone())
int xPosNew = Math.max(xPos + bumpX,
if (!(handle instanceof Element)) { throw new IllegalArgumentException(
None
if (handle == null) { // this is wrongly called with a null handle,
private FigTextGroup middleGroup; 
None
addFig(getStereotypeFig()); /* Compartments from top to bottom: */
createCompartments(); 
FigCompartment ops = getCompartment(Model.getMetaTypes().getOperation()); setCompartmentVisible(ops, false);
super("", m, new ClassDiagramGraphModel()); String name = getNewDiagramName();
int xInit = 0; yPos = getVGap() / 2;
for (ClassdiagramNode node : nodeTree) { //            if (node.isPackage()) {
action = Model.getFacade().getAction(getOwner()); updateArrow();
figNode = new FigStereotypeDeclaration(modelElement, bounds, settings);
Rectangle bounds = new Rectangle(DEFAULT_COMPARTMENT_BOUNDS); // 2nd compartment, so adjust Y appropriately
bounds.y = DEFAULT_COMPARTMENT_BOUNDS.y + ROWHEIGHT + 1; return bounds;
popUpActions.add( popUpActions.size() - getPopupAddOffset(),
if (newOwner != null) { // TODO: Because we get called on each and every change event, when
if (Model.getFacade().getStereotypes(modelElement).isEmpty()) { if (getStereotypeFig().isVisible()) {
for (Object feat : Model.getFacade().getFeatures(newOwner)) { listeners.add(new Object[] {feat, null});
popUpActions.add( popUpActions.size() - getPopupAddOffset(),
ArgoJMenu addMenu = buildAddMenu(); popUpActions.add(
getNameFig().setLineWidth(w); body.setLineWidth(w);
super.updateStereotypeText(); if (!isStereotypeVisible()) {
} else { /* we got at least one stereotype */
if (!EventQueue.isDispatchThread() && Runtime.getRuntime().availableProcessors() == 1) {
/* This populates the stereotypes area: */ super.updateStereotypeText();
getNameFig().setTopMargin(0); getStereotypeFig().setVisible(false);
if (isStereotypeVisible()) { Dimension st = getStereotypeFig().getMinimumSize();
aSize.width += indentX + 1; 
aSize.height += 28 + 2 * getLineWidth(); 
return aSize; }
Rectangle oldBounds = getBounds(); 
Dimension minimumSize = getMinimumSize(); int newW = Math.max(w, minimumSize.width);
int currentY = ya; 
body.setBounds(xa, currentY, newW, newH + ya - currentY); 
getBigPort().setBounds(xa, ya, newW, newH); 
Rectangle previousBounds = figPoly.getBounds(); Rectangle name = getNameFig().getBounds();
calcBounds(); updateEdges();
Editor ce = Globals.curEditor(); List<Fig> figs = ce.getSelectionManager().getFigs();
if (lFirst == null) { lFirst = lDiagram;
/* If we get here then we didn't get the * default diagram.
// TODO: Aren't stereotypes handled elsewhere? for (Object stereotype
me.consume(); super.mouseClicked(me);
} /* if doubleclicks */ super.mouseClicked(me);
super.mouseClicked(me); }
classDiagram.setName(diagramName); ExplorerEventAdaptor.getInstance().structureChanged();
/** * The bigport needs to overrule the getClosestPoint,
None
if (Globals.curEditor().getGraphModel() instanceof DeploymentDiagramGraphModel) {
if (index == LOWER_LEFT) { return false;
None
if (Globals.curEditor().getGraphModel() instanceof DeploymentDiagramGraphModel) {
Color fill = super.getFillColor(); 
updateElementListeners(lst); 
getNameFig().setTopMargin( getStereotypeFig().getMinimumSize().height);
setBounds(getBounds()); enableSizeChecking(true);
if (encloser != null && oldEncloser != encloser
// Update the listeners to match the desired set using the minimal // update facility
PropPanelFactory diagramFactory = new ClassDiagramPropPanelFactory(); PropPanelFactoryManager.addPropPanelFactory(diagramFactory);
private FigText bodyTextFig; 
Dimension aSize = bodyTextFig.getMinimumSize(); 
textEdited((FigText) src); calcBounds();
bodyTextFig.setBounds(px + 2, py + 2 + stereotypeHeight, w - 4 - dogear, h - 4 - stereotypeHeight);
Rectangle bbox = getBounds(); Dimension minSize = getMinimumSize();
} 
getBigPort().setBounds(px, py, w, h); 
outlineFig.setLineColor(col); urCorner.setLineColor(col);
outlineFig.setFilled(f); urCorner.setFilled(f);
getSettings()); } else {
*         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer, *         java.lang.Object, java.util.Map)
outlineFig.setLineWidth(w); urCorner.setLineWidth(w);
// static variables 
// static variables 
if (getStereotypeFig().isVisible()) { Dimension stereoMin = getStereotypeFig().getMinimumSize();
return new Dimension(aSize.width + 4 + dogear, aSize.height + 4);
urCorner.setBounds(px + w - 1 - dogear, py, dogear, dogear); 
// static variables 
for (Iterator i = c.iterator(); i.hasNext(); ) { FigEdgeNote fen = (FigEdgeNote) i.next();
if (!newlyCreated) { rect.y -= stereoMin.height;
newlyCreated = false; }
None
} 
/* but its position may have been changed: */ Rectangle b = comp.getBounds();
@Override public void setSourceFigNode(FigNode fn) {
super(); settings = theSettings;
} 
//        return null; return Model.getCoreFactory().createComment();
if (menuItem == null) { menuItem =
public class FigStereotypeDeclaration extends FigCompartmentBox { 
ArgoJMenu addMenu = buildAddMenu(); popUpActions.add(
ArgoJMenu show = buildShowPopUp(); if (show.getMenuComponentCount() > 0) {
for (Object td : Model.getFacade().getTagDefinitions(newOwner)) { listeners.add(new Object[] {td,
} updateElementListeners(listeners);
public boolean isEnabled() { Editor ce = Globals.curEditor();
if (drawingArea.x < 0 || drawingArea.y < 0 || drawingArea.width <= 0 || drawingArea.height <= 0) {
if (gm instanceof DeploymentDiagramGraphModel) { return null;
private Image diagramImage; 
Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard(); clipboard.setContents(new ImageSelection(diagramGifImage), this);
Image diagramGifImage = ce.createImage(drawingArea.width * scale,
} 
g.setColor(new Color(SaveGIFAction.TRANSPARENT_BG_COLOR)); g.fillRect(0, 0, drawingArea.width * scale, drawingArea.height * scale);
dim = new Dimension(minWidth, minHeight); }
if (present > 1) { if (visible > 0) {
if ((cType & COMPARTMENT_ATTRIBUTE) != 0) { final FigCompartmentBox fcb = (FigCompartmentBox) f;
super.setFilled(false); //        bigPort.setFilled(f);
ypos + 1 /*?LINE_WIDTH?*/ + acounter * ROWHEIGHT,
@Override public boolean getFilled() {
for (Fig f : figs) { removeFig(f);
Rectangle b = comp.getBounds(); b.y = ypos + 1 /*?LINE_WIDTH?*/ + acounter * ROWHEIGHT;
addFig(keywordFig); } else {
comp.initNotationProviders(); addFig(comp); // add it again (but now in the right sequence)
// Now put the text in // We must handle the case where the text is null
String ftText = comp.getNotationProvider().toString(umlObject, comp.getNotationSettings());
private CompartmentFigText findCompartmentFig( List<CompartmentFigText> figs,
// Fill property cannot be changed. }
// Fill property cannot be changed. }
private static UndoableAction srcAgg = new ActionAggregation(
None
} 
target.removePropertyChangeListener(this); if (isVisible()) {
String t = MessageFormat.format(Translator .localize("optionpane.conflict-shortcut"),
nameField.setText(target.getText()); }
@Override public String classNameAndBounds() {
if (node instanceof FigEdgePort) { delegate = node.getGroup();
return PseudostateKindEnum.PK_INITIAL.equals(kind); } catch (InvalidObjectException e) {
actions[table.getSelectedRow()].setCurrentShortcut(newKeyStroke); table.repaint();
Fig f = TargetManager.getInstance().getFigTarget(); 
firstRegionFig.setLineColor(ArgoFig.INVISIBLE_LINE_COLOR); 
if (!regionFigs.isEmpty()) { for (int i = 0; i < regionFigs.size(); i++) {
rFig.width - 2 * FigConcurrentRegion.INSET_HORZ, 126);
/* Make the composite state 1 region higher: */ figCompositeState.setCompositeStateHeight(
figCompositeState.setCompositeStateHeight( rFig.height + newRegionFig.getInitialHeight());
for (Object fig : getFigEdges()) { if (fig instanceof FigEdgeAssociationClass) {
FigEdgeAssociationClass dashedEdge = (FigEdgeAssociationClass) fig;
if (!oldName.equals(newName)) { d.setName(newName);
this.setText(notationProvider.toString(getOwner(), getNotationSettings()));
} 
} 
me.consume(); dragFig = fig;
} 
--stereotypeCount; }
highlightTag  = field.getHighlighter().addHighlight(0, field.getText().length(),
setLineWidth(0); setFilled(false);
for (Fig f : removeCollection) { if (f instanceof FigStereotype || f instanceof FigKeyword) {
for (Fig f : allFigs) { if (f instanceof FigStereotype) {
if (keyword != null) { FigKeyword keywordFig = findFigKeyword();
removeCollection.remove(keywordFig); }
addFig(keywordFig); } else {
removeCollection.remove(stereotypeTextFig); }
updateHiddenStereotypes(); 
return Model.getFacade().getExtensionPoints(usecase); }
for (Fig fig : (Collection<Fig>) getFigs()) { if (fig.isVisible() && fig != bigPort) {
refreshTransaction = true; FigAssociationClass panelTarget =
Rectangle oldAssociationBounds = target.getBounds(); if (((FigAssociationClass) target).getAssociationClass() != null) {
Rectangle oldAssociationBounds = target.getBounds(); if (((FigAssociationClass) target).getAssociationClass() != null) {
keywordFig = new FigKeyword(keyword,
return null; } else {
Dimension dim = null; Object modelElement = getOwner();
None
// static variables 
// static variables 
if (singleton == null) { singleton = new ActionAddExtensionPoint();
TargetManager.getInstance().addTargetListener(new TargetListener() { 
Object ep = Model.getUseCasesFactory()
None
associationClassLink = (FigEdgeAssociationClass) edge; FigNode figNode = edge.getSourceFigNode();
final MutableGraphModel gm = (MutableGraphModel) editor.getGraphModel();
final Collection<Object> associationEnds = Model.getFacade().getConnections(association);
for (FigEdge edge : existingEdges) { if (edge.getDestFigNode() == originalEdgePort) {
public void dragEnter(DropTargetDragEvent dtde) { try {
public void dragEnter(DropTargetDragEvent dtde) { try {
public void dragEnter(DropTargetDragEvent dtde) { try {
private static UndoableAction srcMultOne = new ActionMultiplicity("1", "src");
None
dtde.acceptDrag(dtde.getDropAction()); return;
/* * TODO: Is this needed/correct?
None
None
None
for (Fig fig : (List<Fig>) getFigs()) { if (fig instanceof ArgoFig) {
if (((PathContainer) f).isPathVisible()) { actions.add(HIDE_PATH);
Iterator< ? > i = Globals.curEditor().getSelectionManager().selections().iterator();
private static UndoableAction showEdges = new ActionEdgesDisplay(true, Translator.localize("menu.popup.add.all-relations"));
ownedElements.addAll(((Namespace) elem).getOwnedElement()); for (ModelElement element : ownedElements) {
WIDTH, ROWHEIGHT + 2 /* 2*LINE_WIDTH?  or extra padding? */ ); 
private List<FigCompartment> compartments = new ArrayList<FigCompartment>();
getStereotypeFig().setHeight(STEREOHEIGHT + LINE_WIDTH); 
getNameFig().setFillColor(null); }
Dimension aSize = getNameFig().getMinimumSize(); 
aSize = ArgoFigUtil.addChildWidth(aSize, getStereotypeFig()); 
for (FigCompartment c : compartments) { aSize = ArgoFigUtil.addChildDimensions(aSize, c);
Rectangle oldBounds = getBounds(); 
Dimension nameMin = getNameFig().getMinimumSize(); int minNameHeight = Math.max(nameMin.height, NAME_FIG_HEIGHT);
* Construct a new critic instance.  Typically only one instance of * each critic class is created and stored in a static variable, as
for (FigCompartment c : compartments) { if (c.isVisible()) {
newH += neededHeight - requestedHeight; }
getBigPort().setBounds(x, y, newW, newH); 
damage(); for (Object f : compartment.getFigs()) {
Dimension aSize = getMinimumSize(); setBounds(rect.x, rect.y, (int) aSize.getWidth(), (int) aSize
public void stuffPoint(Point res) { int figLength = _pathFigure.getPerimeterLength();
public void setClosestPoint(Point newPoint) { }
for (Object f : compartment.getFigs()) { ((Fig) f).setVisible(true);
@Override public void setFillColor(Color color) {
Memento memento = new Memento() { public void redo() {
double len = Math.sqrt(recipnumerator * recipnumerator
/** * the fig to be placed.
if (distance >= length) { distance = length - 1;
if (useCollisionCheck) { int increment = 2; // increase offset by 2px at a time
// TODO: The size of text figs, which is what we care about most, // isn't computed correctly by GEF. If we got ambitious, we could
FigEdge fp = (FigEdge) _pathFigure; Point[] points = fp.getPoints();
int scaledOffset = vectorOffset + increment; 
if (false /* count >= limit */) { LOG.debug("Retry limit exceeded.  Trying other side");
LOG.debug("Retry limit exceeded.  Trying other side"); result.setLocation(anchor);
return result; }
int pathLength = _pathFigure.getPerimeterLength(); int pathDistance = getPathDistance();
int d2 = Math.min(pathLength - 1, d1 + slopeSegLen); // Can't get the slope of a point.  Just return an arbitrary point.
if (d1 == d2) { return 0;
if (opposite == 0) { return 0;
if (opposite < 0) { theta = Math.PI * 3 / 2;
theta = Math.atan((double) opposite / (double) adjacent); // Quadrant II & III
if (adjacent < 0) { theta += Math.PI;
if (theta < 0) { theta += Math.PI * 2;
final boolean aboveAndRight = false; 
if (swap && theta > Math.PI / 2 && theta < Math.PI * 3 / 2) { theta = theta - angle;
if (theta > Math.PI * 2) { theta -= Math.PI * 2;
int dx = (int) (theOffset * Math.cos(theta)); int dy = (int) (theOffset * Math.sin(theta));
Color c = Globals.getPrefs().handleColorFor(itemFig); c = new Color(c.getRed(), c.getGreen(), c.getBlue(), 100);
LOG.warn("Could not find rectangle intersection, using inner point."); return pIn;
protected void updateLayout(UmlChangeEvent event) { assert event != null;
if (oldBounds != getBounds()) { setBounds(getBounds());
public String getClassAndModelID() { String s = super.getClassAndModelID();
if (Model.getFacade().isANamespace(owner)) { setNamespace(owner);
None
} 
if (p1 == null || p2 == null) { return false;
Globals.setStatusBar(new StatusBarAdapter()); 
TabDiagram newPanel = new TabDiagram(); if (target != null) {
public void modeChange(ModeChangeEvent mce) { LOG.debug("TabDiagram got mode change event");
} else { // add to selection
List currentSelection = TargetManager.getInstance().getTargets();
&& !Globals.getSticky() && Globals.mode() instanceof ModeSelect) {
addedTargets.add(owner); }
Object container = Model.getFacade().getModelElementContainer(targets[i]); FigCompartmentBox theContainer =
// probably the TabText should only show an empty pane in that case setTarget(e.getNewTarget());
if ("remove".equals(arg0.getPropertyName())) { LOG.debug("Got remove event for diagram = " + arg0.getSource()
translateMouseEvent(me); Globals.curEditor(this);
super.setTopMargin(1); super.setBotMargin(1);
if (owner != null) { super.setOwner(owner);
Object firstTarget = null; Iterator i = targets.iterator();
Collection targets = TargetManager.getInstance().getModelTargets(); 
Fig noteFig = diagram.presentationFor(comment); 
ArgoDiagram diagram = DiagramUtils.getActiveDiagram(); Object comment =
if (!Model.getFacade().getAnnotatedElements(comment) .contains(obj)) {
TargetManager.getInstance().setTarget(noteFig.getOwner()); }
mgm.addNode(comment); // remember the fig for later
i = Model.getFacade().getAnnotatedElements(comment).iterator(); while (i.hasNext()) {
FigEdgeModelElement sourceEdge = (FigEdgeModelElement) underMouse; sourceEdge.makeEdgePort();
} CollaborationUse collabUse =
done(); me.consume();
this.addMessage(target); }
TargetManager.getInstance().setTarget(message); }
None
if (getNameFig() != null) { middleGroup.addFig(getNameFig());
return; }
Point firstPoint = this.getFirstPoint(); Point lastPoint = this.getLastPoint();
if (rSquared > 100) { rSquared = 10000;
setArrow(EAST); } else if (sx > rx && Math.abs(sy - ry) <= Math.abs(sx - rx)) { // west
@Override public void propertyChange(PropertyChangeEvent pce) {
/** * A Fig representing the multiplicity of some model element.
/*, new String[] {"name", "visibility", "stereotype"}*/ );
for (int i = 0; i < subkeys.length; i++) { List<T> list = entry.get(subkeys[i]);
private static final int NONE = 0; private static final int AGGREGATE = 1;
private static final int NAV = 3; 
role.textEdited(); calcBounds();
role.textEditStarted(); } else {
super.propertyChange(pce); }
None
destMult.renderingChanged(); destGroup.renderingChanged();
} 
boolean first = true; Iterator i = TargetManager.getInstance().getTargets().iterator();
} }
None
addElementListener(element); }
return org.eclipse.uml2.uml.InstanceSpecification.class; // TODO: what about ObjectNode?
super.setFillColor(FILL_COLOR); super.setLineColor(LINE_COLOR);
bigPort = createBigPortFig(); nameFig = new FigNameWithAbstractAndBold(element,
@Override public Object clone() {
return clone; }
return figClone; }
protected void removeAllElementListeners() { removeElementListeners(listeners);
@Override public Fig getEnclosingFig() {
ArgoJMenu stereotypesView = new ArgoJMenu("menu.popup.stereotype-view");
umlDiagram.setModelElementNamespace(getOwner(), null); } else {
Model.getCoreHelper().setName(c1, "C1"); Model.getCoreHelper().setName(c2, "C2");
final Collection<Object> common = new ArrayList<Object>(er1); common.retainAll(er2);
Model.getCoreFactory().buildElementResidence( owner, component);
namespace = newEncloser.getOwner(); if (Model.getFacade().isANamespace(namespace)) {
Model.getUmlFactory().delete(elementResidence); }
} else { // There were 2 ElementResidences .. strange case.
return; }
if (pve.getPropertyName().equals("supplierDependency") && Model.getFacade().isADependency(pve.getOldValue())) {
if (bbox.x != getX() || bbox.y != getY()
final Rectangle bbox = getBounds(); final Dimension minSize = getMinimumSize();
return; }
setArrow(WEST); } else if (sy < ry) { // south
setArrow(SOUTH); } else {
ArgoEventPump.fireEvent(new ArgoHelpEvent( ArgoEventTypes.HELP_CHANGED, this, ""));
} // either layer or owner was null
Fig f2 = ((FigGroup) f).hitFig(r); if (f2 instanceof MouseListener) {
} 
} 
notationProviderName.cleanListener(); }
if (getStereotypeFig() != null) { getStereotypeFig().removeFromDiagram();
return State.class; }
int practicalView = getStereotypeView(); Object modelElement = getOwner();
getNameFig().setLineWidth(0); if (getStereotypeFig() != null) {
DiagramInterface diagram = new DiagramInterface(Globals.curEditor());
gm.addEdge(edge); if (Model.getFacade().isAAssociationClass(edge)) {
if (edge == null) { return;
@Override public void computeRouteImpl() {
super.setFilled(false); setTabAction(FigText.END_EDITING);
* Construct text fig *
maxW = Math.max(maxW, MIN_TEXT_WIDTH); 
int overallH = maxH + getTopMargin() + getBotMargin() + 2 * getLineWidth();
sourceFig = ((FigEdge) getContent()).getSourceFigNode();
pointIndex = -1; final int npoints = getContent().getNumPoints();
if (me.isConsumed() || !armed || pointIndex == -1) { armed = false;
int x = me.getX(), y = me.getY(); // the fig that was under the mouse when it was released
FigNodeModelElement newFig = null; //make a nice little target area:
Editor editor = Globals.curEditor(); LayerManager lm = editor.getLayerManager();
while (figs.hasMoreElements()) { Fig candidateFig = (Fig) figs.nextElement();
if (newFig == null) { armed = false;
if (mgm.canChangeConnectedNode(newFig.getOwner(), oldFig.getOwner(),
pointIndex = -1; }
//        north.add(tabs, BorderLayout.CENTER); 
public List<AbstractArgoJPanel> getDetailsTabs() { List<AbstractArgoJPanel> result =
if (true) { return;
//    	List callers = mn.getCallers(); //    	if (callers != null) {
// 4.5.3.8 [5] /* TODO: Partly overlaps CrOppEndVsAttr. */
MouseEvent me = new MouseEvent(
Point p = new Point(
me = new MouseEvent(
for (int i = 0; i < 99; i++) { if (!defaultProjectFile.exists()) {
public boolean isPathVisible() { if (getAssociationClass() != null) {
mX = Math.max(mX, 0); mY = Math.max(mY, 0);
((Clarifiable) getContent()).paintClarifiers(g); }
button = hand.index; 
/** * Color for a solid fill.  It's probably always going to be the same as
/** * Color for a line which is supposed to blend into the fill.  It's the same
/** * The color used for things which shouldn't normally be visible, so we can
"edgeClass", metaType,
if (false) { Fig f;
fe.addPathItem(f, new PathItemPlacement(fe, f, pct, delta, angle, 0));
return "enumeration literals"; }
private static final long serialVersionUID = -6659510145586121263L; 
discriminator.setFilled(false); discriminator.setLineWidth(0);
super.modelChanged(e); // Update the discriminator if it changed
if (fig instanceof FigClassifierRole) { MessageNodeBuilder.addNodeTree(rootNode,
public void elementRemoved(RemoveAssociationEvent evt) { Object element = evt.getOldValue();
int ix = id.lastIndexOf('/'); if (ix != -1) {
