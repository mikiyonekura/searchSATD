private int _iCurrent = -1;
return true;
//?? IN FUTURE: change this to use a new instance of renederer
if (++_iCurrent < _data.size())
public class SQLFilterAction extends SquirrelAction implements IObjectTreeAction
attribs = new SimpleAttributeSet();
public synchronized void addResultTabListener(IResultTabListener lis)
private DefaultColumnRenderer _renderer = DefaultColumnRenderer.getInstance();
File f2 = new File(url.getFile());
* Close all the SQL result tabs.
private boolean isOsxPluginLoaded()
import java.io.File;
case Types.CHAR:
}
Types.LONGVARCHAR,
Object datalinkValue = rs.getObject(index);
public ObjectTreePanel getObjectTreePanel()
public synchronized void removeResultTabListener(IResultTabListener lis)
* Sesssion is ending.
public interface INodeExpander
case Types.CHAR:
if (propertiesAlreadyLoaded == false) {
if (status.isPluginArtifact())
return true;
wholeDatum = null;
final Dimension desktopSize = _desktop.getSize();
// check for max size reached (only works when DB provides non-zero scale info
AliasPropertiesController.showAliasProperties(_app, (SQLAlias)_selectedAlias);
DialogWidget.centerWithinDesktop(this);
registerColumnType(Types.OTHER, 4000, "varchar2(4000)");
private MessagePanel _msgPnl;
public java.awt.Component getComponent()
}
public interface IPersistable extends IDirty, IValidatable
final StringBuffer buf = new StringBuffer();
if (currentCellEditor != null) {
TableColumnInfo[] columnInfos = md.getColumnInfo(getTableInfo());
private UpdateXmlSerializer _serializer = new UpdateXmlSerializerImpl();
String valuesPart = " VALUES ( " + i + ", '" + data.get(i) + "' )";
RowDataInputFrame rdif = new RowDataInputFrame((JFrame) comp, _colDefs, initialValues, this);
if (choice == JOptionPane.NO_OPTION) {
void setQueryTree(QueryTree value) {
public String getType()
return false;
}
result = result && dialect.supportsCreateTable();
tm.addRow(new Object[]{owner, object_name, object_type});
final String sequenceIncrement = "1";
String filename =
if (type != Types.NULL && type != Types.DATALINK && type != Types.OTHER && type != Types.JAVA_OBJECT
class AlterTablePanelBuilder
Dimension d = getSize();
return _dlg.txtCommand.getText().replaceAll("%file", _dlg.txtFile.getText().replaceAll("\\\\","\\\\\\\\"));
public abstract void loadPlugins();
//private static final DB2400Dialect db2400Dialect = new DB2400Dialect();
corner.getColumnModel().getColumn(0).setMinWidth(200);
sp.setPreferredSize(dm);
//?? IN FUTURE: change this to use a new instance of renederer
/**
result = result && dialect.supportsUpdate();
size = 16777215;
Arrays.sort(_indexes, comparator);
addMouseListener(new MouseAdapter()
if (cascadeConstraints)
}
_numberFormat.setMaximumFractionDigits(5);
_session.getApplication().getThreadPool().addTask(new delaySelectionRunnable());
"File did not save to the default temporary-file location.",
if ("".equals(defaultValue)) {
err = new BufferedReader(
if (precision <= scale) {
JButton moveToNotUsedButton = new JButton("=>");
case Types.BIT:
if (++_iCurrent < _data.size())
long time = (((java.util.Date) cellObj).getTime());
// check for max size reached (only works when DB provides non-zero scale info
private int _iCurrent = -1;
break;
resizeSplitOnStartup();
private PathUtils _pathUtils = new PathUtilsImpl();
* "CREATE PROCEDURE" with "ALTER PROCEDURE", then put that in the SQL pane
StringBuilder result = new StringBuilder();
bytes[byteIndex++] = Byte.valueOf(
final IDatabaseObjectInfo[] dbObjs = _treeAPI.getSelectedDatabaseObjects();
assertEquals(FIRST_STMT_SEP, qt1.getSQLStatementSeparator());
if (tableName.startsWith("RDB$")) {
if (tableName.startsWith("AXION")
((RestorableJTextField)_textComponent).addMouseListener(new MouseAdapter()
registerColumnType(Types.TINYINT, "smallint");
HibernateDialect dialect = DialectFactory.getDialect("Oracle");
// Default Operation
String warning = warn.toString();
* @author <A HREF="mailto:mjhammel@users.sourceforge.net">Maury Hammel</A>
if (pseudoColumn.length() == 0)
//sql.append(DialectUtils.shapeQualifiableIdentifier(newTableName, qualifier, prefs, this));
_ta.setText(trimmedSource);
}
case Types.BIT:
IPluginDatabaseObjectPanelWrapper createPanel();
* Get the full name info for the table that is being referred to in the
CreateScriptPreferences prefs = new CreateScriptPreferences();
if (popup != null)
public class DataSetViewerPropertyPanel extends BaseDataSetViewerDestination
String sql =
public ISQLEntryPanel getSQLEntryPanel()
if (scale < 0) {
*      getArtifactStatus(net.sourceforge.squirrel_sql.client.update.xmlbeans.ReleaseXmlBean)
Dimension d = getSize();
synchronized (conn)
return rs.getObject(index);
if (tableName.startsWith("IIE")
_numberFormat.setMaximumFractionDigits(5);
* From MySQL 5.0 manual:
import java.io.File;
// Add an item to the Windows menu for this window and
if (_tabs.size() == 1 && _tabPnl.getTabCount() == 0) {
PopupFactory.setSharedInstance(new PopupFactory());
for (int i=0; i<colDefs.length; i++) {
private final static String[][] FONT_KEYS = {
registerColumnType(Types.REAL, "numeric($p,$s)");
String columnName = null;
notnull.append(shapedColumnName);
final StringBuffer buf = new StringBuffer();
// i18n[DBUtil.error.firebirdcommit=Firebird requires commit
switch (destColType)
if (dbDriverName.equals(IDriverNames.FREE_TDS) && schemaPattern == null)
public interface GlobalPreferencesActionListener {
IPropertyNames.NEW_SESSION_VIEW, oldValue, _newSessionView);
DialogWidget.centerWithinDesktop(this);
if (tableName.startsWith("sys")) {
* @author <A HREF="mailto:colbell@users.sourceforge.net">Colin Bell</A>
s_log.debug("Loading driver that wasn't registered: " +
session.getApplication().getPluginManager().sessionEnding(session);
boolean bitValue = rs.getBoolean(index);
* Factory to handle creation of maintenance sheets for SQL Alias objects.
getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
// then remove it and this class.
String FREE_TDS = "InternetCDS Type 4 JDBC driver for MS SQLServer";
this.removeAll();
result.append("SEQNAME = '");
_resources = new SquirrelResources(SquirrelResources.BUNDLE_BASE_NAME);
final String[] parts = StringUtilities.split(sql, ' ');
throw new UnsupportedOperationException("Common dialect doesn't register column types");
propInfoBuf = new PropertyInfo[0];
* @author <A HREF="mailto:colbell@users.sourceforge.net">Colin Bell</A>
ArrayList itemsInSql = new ArrayList();
// Sequence tabs
if (arrayType.getName().equals("java.lang.String")) {
boolean result = false;
public void setPassword(String password)
return new int[0];
if (oldDefault == null)
indicateNewStartupTask(splash, s_stringMgr.getString("Application.splash.loadingjdbc"));
* Show a message describing the passed exception. This will apply
private final SessionListener _sessionListener = new SessionListener();
public class DataTypeInfo extends DatabaseObjectInfo
((SortableTableModel)((MyJTable)getComponent()).getModel()).deleteRows(rows);
String testValue = rs.getString(index);
String fkName = fkInfo.getForeignKeyName();
}
if (pseudoColumn.length() > 0)
public void objectTreeInternalFrameOpened(ObjectTreeInternalFrame objectTreeInternalFrame, ISession sess)
* @throws	PluginException
_session.showErrorMessage("JDBC-ODBC Bridge doesn't provide necessary meta data. Script will be incomplete");
ActionListener stateChangedListener = new ActionListener() {
}
result.put(info.getSimpleName().toUpperCase(), (ITableInfo)info);
ValidatorResult rc = val.validate(qt.nextQuery());
return;
return buf.toString();
return false;
new AlterTableCommand(_session, _plugin, (ITableInfo)tables[0]).execute();
if (log.isDebugEnabled())
// What follows comes from the SQuirreL firebird dialect extension.
"and triggers.name = ? ";
prefs.setQuoteColumnNames(false);
}
private void updateDataModel(JComboBox source) {
if (_prefs.isCopyPrimaryKeys() && !DialectFactory.isAxion(sourceSession.getMetaData()))
// format that is acceptable.
int firstSelectedColIdx = _table.getSelectedColumn();
StringTemplate childIndexST = null;
copyConstraints(sourceObjs);
* TODO: This dialect is not yet complete.  Need to provide implementations wherever "Not yet implemented"
final StringBuilder sequenceName = new StringBuilder();
* Copyright (C) 2001-2006 Colin Bell
valuesMap.put(ST_TABLE_NAME_KEY, tableName);
* Called when app shutdown.
int[] colWidths = null;
valuesMap.put(ST_INDEX_NAME_KEY, indexName);
_util.moveFiles(_util.getCoreDownloadsDir(), TRANSLATION_JAR_PREFIX_PATTERN, true,
if (f.getName().toLowerCase().endsWith("xls")) {
throw new UnsupportedOperationException("Not yet implemented");
String constraintClause = "CASCADE";
* TODO: This dialect is not yet complete.  Need to provide implementations wherever "Not yet implemented"
public interface GlobalPreferencesActionListener {
* Determines from the user's preference whether or not to install the
pm = new ProgressMonitor(parent,
result = getValue(dateValue);
// add mouse listener for Popup
private String getMappingExceptionMessage(Exception e) {
private static boolean propertiesAlreadyLoaded = false;
}
/**
Driver jdbcDr = sqlDrMan.getJDBCDriver(drId);
String HINT = s_stringMgr.getString("ColorPropertiesController.hint");
Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();
l_call.addParameter("a_callingProgram", XMLType.XSD_STRING, ParameterMode.IN);
sessionInfoProv.setDestSelectedDatabaseObject(schema);
IIdentifier drId = iSqlDr.getIdentifier();
CellComponentFactory.registerDataTypeFactory(new DerbyClobDataTypeComponentFactory(),
if (value.equals("<null>")) {
s_log.error(s_stringMgr.getString("DataSetUpdateableTableModelImpl.error.retrievingdefaultvalues"), ex);
// Expanders - trigger and index expanders are added inside the table
if (_isNullable) {
throw new IOException(new String(messageBuffer));
DerbyClobDataTypeComponent.this._textComponent.updateText("<null>");
s_log.info(s_stringMgr.getString("exportconfig.fileWillBeCreated", USER_PREFS_FILE_NAME));
mnu = api.addToSQLEntryAreaMenu(actions.get(FormatSQLAction.class));
String msg = s_stringMgr.getString("exportconfig.fileExistsReplace", file.getAbsolutePath());
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
boolean result = false;
loadPrefs();
if (con.getSQLMetaData().getDriverName().toLowerCase().startsWith("axion"))
String replacementText =
// into the first (and only) variable position in the prepared stmt
return;
if(col == RowNumberTableColumn.ROW_NUMBER_MODEL_INDEX)
String HINT = s_stringMgr.getString("oracle.displaySessionStatistics");
showWarning(_message);
while (dir.getCanonicalPath().length() < 256) {
case '9':
}
assertTrue("Test 1: File Rename Failed", f.renameTo(rfile));
ArrayList<String> tagList = new ArrayList<String>();
for (int i=rows.length - 1; i>=0; i--) {
return s_stringMgr.getString("exportconfig.databaseDrivers");
static String ERR_BLANK_NAME = s_stringMgr.getString("favs.nameMustNotBeBlank");
private String getFileName(File file)
DatabaseObjectInfo dboInfo = new DatabaseObjectInfo(null, null, "USERS",
LoggerController.createLogger(SquirrelPreferences.class);
if(-1 < nextLine.indexOf(stringManagerBegin))
Properties ret = getProperties();
sqlDrMan.registerSQLDriver(iSqlDr);
return s_stringMgr.getString("DataSetUpdateableTableModelImpl.error.unknownerrorupdate");
0, // columnSize
* @see java.lang.Object#toString()
public void testAddClassLoaderListener()
while (rs.next()) {
Pattern patternBehindTable;
}
return;
long millis = System.currentTimeMillis();
FileInputStream fis = new FileInputStream(f);
if (nextRes == null) {
c.insets = new Insets(5, 5, 0, 0);
c.insets = new Insets(5, 5, 0, 0);
if (_prefs.getSelectFetchSize() > 0)
//      }
// we do not expect a lot of files in this directory,
if (lastProcId != -1)
String errmsg =
if (_colDefs == null)
Arrays.sort(rows);
rdr = new ResultSetReader(rs, dialectType);
ResultSet catalogResultSet2 = buildVarcharResultSetAsRows(null, new String[] { TEST_CATALOG, "aCatalog2" });
_app.getMessageHandler().showMessage(s_stringMgr.getString("i18n.wroteFixedFile", outFileName));
if (columnIndices != null) {
ColumnDisplayDefinition[] colDefs = createColumnDefinitions(md,
* In my version, the full class name is "com.ibm.db2.jcc.c.SqlException"
private static final String JCC_EXCEPTION_PREFIX = "com.ibm.db2.jcc";
private static final String JCC_EXCEPTION_CLASS = "SqlException";
setupLookAndFeel(args);
l_call.setReturnType(l_qn);
f1.setLastModified(orgTime + 10000000);
assertNotNull(classUnderTest.getClassName());
}
assertEquality(LENGTH_20, 40, 1, LENGTH_20.length());
s_stringMgr.getString("oracle.noSql"));
/**
l_call.registerTypeMapping(SessionData.class, l_qn,
}
_treeAPI.addDetailTab(DatabaseObjectType.TRIGGER,
/**
if (_stopExecution)
/**
/**
model.setValueAt("", selectedRow, fixedValueColumnIdx);
_treeAPI.addDetailTab(DatabaseObjectType.PROCEDURE,
KeyStroke ctrlDStroke = KeyStroke.getKeyStroke(KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK);
ps.println("\n#\n#Missing/changed properties generated by I18n Plugin on " +
private IRestorableTextComponent _textComponent;
ResultSet schemaResultSet1 = buildVarcharResultSetAsRows("schemaResultSet1", new String[] { TEST_SCHEMA });
l_call.addParameter("a_callingProgram", XMLType.XSD_STRING, ParameterMode.IN);
String outputStatus =
String[] currentSchemas = classUnderTest.getSchemas();
l_call.addParameter("a_sessionKey", XMLType.XSD_INT, ParameterMode.IN);
String HINT = s_stringMgr.getString("firebird.seqDetails");
l_call.setTargetEndpointAddress(_webServiceSession.getTargetURL());
JOptionPane.showMessageDialog(_app.getMainFrame(), msg);
final StringBuffer cmd = new StringBuffer(512);
_updateableModel = updateableObject;
//i18n[explainplanexecuter.createPlanTableMsg=The Oracle Plan
if (startedColumn || lastLetter == userSettings.Delimiter) {
headersHolder.Length = columnsCount;
private final static ILogger log = LoggerController.createLogger(FirebirdManagerDataAccess.class);
startedColumn = true;
checkedPlanTable = true;
if (isSelected)
String[] clone = new String[columnsCount];
lastLetter = currentLetter;
protected final class MyJTable extends JTable
while (dir.getCanonicalPath().length() < 256 - longDirName.length()) {
CellEditor editor = table.getCellEditor(row, col);
String stringManager = "s_stringMgr.getString(\"" + key + "\")";
return false;	// cell is not editable
private boolean startedColumn = false;
* Render a value into text for this DataType.
if (rows[i] < _data.size()) {
DerbyClobDescriptor cdesc = (DerbyClobDescriptor) originalValue;
}
if (fileName.endsWith(".tmp")) {
s_stringMgr.getString("xmlReformatter.xmlWarning2"), JOptionPane.WARNING_MESSAGE);
private IDataSetUpdateableModel _updateableModel = null;
result = new File(transferData);
String[] keywords = _session.getSchemaInfo().getKeywords();
String msg =
return 0;
_session.showMessage(s_stringMgr.getString("codecompletion.useSyntaxPlugin"));
g2.setClip(pageLeft, (int)tableHeightOnFullPage*rowIndex, pageWidth, (int)clipHeight);
}
private boolean jaybird2Driver = false;
File oldFile = new File(dirPath + File.separator + fileNames[i]);
Dataholder res = null;
final JCheckBox allObjectsCheckbox = new JCheckBox(s_stringMgr.getString("mssql.allObjects"));
StringBuffer messageBuffer = new StringBuffer();
/**
// JASON: Mow that multiple object trees exist storing the edit
if (instance == null)
StringBuffer tmp = new StringBuffer();
headerHeight = tableHeader.getHeight() +_table.getRowMargin() * scale;
String tableNamePat1 = parser.getToken(parser.size() - 2);
add(_closeButton);
return;
_creator.setCellEditors(this);
}
StringBuffer msg =
int base = 16;	// default to hex
FilenameFilter tstFilter = new FilenameFilter() {
for (int i = listeners.length - 2; i >= 0; i -= 2)
return pieces;
return ((IDataSetUpdateableTableModel)_updateableModel).
else instance = newInstance;
List<ITableInfo> parents = new ArrayList<ITableInfo>();
if (CellComponentFactory.canDoFileIO(colDef)) {
// sort the indexes into ascending order (because that is the
private boolean isTreeNodeAGroup()
String[] dbDefaultValues =
setUI(new BasicButtonUI());
case FirebirdManagerGrantFrame.TREENODE_TYPE_USER:
_autoCommit = sessionProperties.getAutoCommit();
ListModel notUseColsModel = notUseColsList.getModel();
if (DialectFactory.isInformix(md)) {
if (getModel().isPressed())
if (rows.length == 0)
return (JTextField)_textComponent;
}
addMouseListener(s_buttonMouseListener);
JPanel displayPanel = new JPanel();
// if the original object is not null, then it contains a Clob object
cdesc = new DerbyClobDescriptor(value);
cdesc = (DerbyClobDescriptor) originalValue;
None
continue;
return "aTestString";
// Logger for this class
} catch (IllegalArgumentException e) {
Component parent = SwingUtilities.windowForComponent(comp);
}
cdesc = new DerbyClobDescriptor(value);
// tempfiles.
currentCatalogs = classUnderTest.getCatalogs();
DerbyClobDescriptor cdesc;
UDTInfo d =
a.setName(coreArtifactName);
SortedSet<Object> notUseColsSet = new TreeSet<Object>();
@Test
private class KeyTextHandler extends BaseKeyTextHandler {
* Returns true if data type may be edited in the popup, false if not.
makeCommonUpdateUtilAssertions();
EasyMockHelper mockHelper = new EasyMockHelper();
assertFalse("Expected two calls to getPropertyDescriptors() to produce two distinct objects, but " +
Byte[] bytes = BinaryDisplayConverter.convertToBytes(_ta.getText(),
if (e.getKeyChar() == '\b' && getEditorComponent() != null &&
updateControls.add(updateButton);
} catch (IllegalArgumentException e) {
private ArtifactStatus mockCoreArtifactStatus =
private static final String FW_JAR_FILENAME = "fw.jar";
l_call.addParameter("a_callingProgram", XMLType.XSD_STRING, ParameterMode.IN);
String LBL_BTN_NEW = stringManager.getString("global.lbl.btn.new");
expect(mockUpdateUtil.getFile(mockDownloadsCoreDirFile, SQUIRREL_SQL_JAR_FILENAME)).andReturn(
setupFileCopyOperationInfo(mockDownloadsSquirrelSqlJarFile, mockSquirreLHomeDirFile,
// first look to see if they are identical objects, e.g. both null
/* Data */
// Logger for this class
charsets = new JComboBox();
public void setUserActionInfo(JDialog parent, int row, int col,
message = ((IDataSetUpdateableTableModel)getUpdateableModelReference()).
// Logger for this class
SortedSet<Object> useColsSet = new TreeSet<Object>();
DerbyClobDataTypeComponent.this._textComponent.updateText("");
if (mbuf.length() == 0) {
StringBuffer mbuf = new StringBuffer();
final String columns = DialectFactory.isMySQL(this) ? "%" : null;
if (text.equals("<null>")) {
_app.getMessageHandler().showMessage(s_stringMgr.getString("i18n.ParsingFinish"));
ListModel useColsModel = useColsList.getModel();
int currSize = _iTableInfos.size();
outWriter.write(text);
ListModel notUseColsModel = notUseColsList.getModel();
tabTranlators.addTab(s_stringMgr.getString("I18n.info"), new JScrollPane(new MultipleLineLabel(infoText)));
StringBuffer messageBuffer = new StringBuffer();
private static void setupSpringContext()
handleNotNullableField(text, c, e, _textComponent);
FileWrapper toFile = mockHelper.createMock("toFile", FileWrapper.class);
if (value.equals("<null>")) {
* Issue: After importing the data, we could tell the user that
mockDownloadsDirectory = mockHelper.createMock("mockDownloadsDirectory",FileWrapper.class);
if ((c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE)) {
DefaultCellEditor editor =
underTest.setPluginManager(mockPluginManager);
if (radixList == null ||
base = 16;	// default to hex
//			return new FirebirdManagerGrantPreferenceBean();
FileWrapper fromFile = mockHelper.createMock("fromFile", FileWrapper.class);
private boolean isRectangleOccupied(Point leftUp, Point rightDown, TableFrameController toExclude)
JFrame f = _session.getApplication().getMainFrame();
return (int)(_format.getWidth() * pixelByCm * _sldValue + 0.5);
URL url = new URL("http", host, fileToGet);
super(s_stringMgr.getString("popupEditableIoPanel.reformatXml"));
throw new IOException("Text does not represent data of type "
Point backTransformedPoint = new Point((int)(_lastPopupClickPoint.x/zoom+0.5), (int)(_lastPopupClickPoint.y/zoom+0.5));
g.fillOval((int)(fp.getZoomedPoint().x + 0.5) - rad, (int)(fp.getZoomedPoint().y+0.5) - rad, 2 * rad, 2 * rad);
}
oldCV.setData(constraintData[i]);
return _ta.getText();
* On input from the DB, read the data from the ResultSet into the
None
DerbyClobDataTypeComponent.this._textComponent.restoreText();
DerbyClobDescriptor cdesc = (DerbyClobDescriptor) value;
StringBuffer messageBuffer = new StringBuffer();
* Can always do File I/O with Derby clobs.
}
Point pt = new Point(10, 200);
// i18n[baseDataSetViewerDestination.error=Error]
ArrayList<Integer> buf = new ArrayList<Integer>();
FileWrapper f1 = new FileWrapperImpl("a");
add(new JLabel(s_stringMgr.getString("I18n.SourceDir")), gbc);
mockDownloadsPluginDirectory = mockHelper.createMock("mockDownloadsPluginDirectory", FileWrapper.class);
String msg = s_stringMgr.getString("i18n.noNativeToAsciiOutDir");
/**
prefs.setQuoteColumnNames(false);
try {
if (oldValue != null && newValue != null) {
mockDownloadsCoreDirectory = mockHelper.createMock("mockDownloadsCoreDirectory", FileWrapper.class);
/**
if (tableTypes.contains("SYSTEM INDEX")) {
// call the function in the app code that checks for unexpected
}
}
radFormatXLS = new JRadioButton(s_stringMgr.getString("TableExportCsvDlg.formatXLS"));
ToolTipManager.sharedInstance().setDismissDelay(10000);
_updateableModel.forceEditMode(false);
ef.addExtension(s_stringMgr.getString("mmsql.sqlScripts"),"sql");
if (DialectFactory.isPostgreSQL(this))
String noColumnSupportMsg =
int option = JOptionPane.showConfirmDialog(
}
}
_prefSize = new Dimension();
isInMultiLineComment = script.startsWith(MULTI_LINE_COMMENT_BEGIN, i);
String SHOW_PROCEDURE_SOURCE = s_stringMgr.getString("PostgresPlugin.showProcedureSource");
String msg = s_stringMgr.getString("TableExportCsvController.replaceFile");
_globalPopup.removeAll();
if ( ! DataTypeShort.this._isSigned && c == '-') {
String msg = s_stringMgr.getString("TableExportCsvController.noFile");
if (sep.equals("|")) {
((MyTableModel)_actualModel).addRow(values);
String msg =
ITableInfo ti = tableInfos[5];
prefs.setQuoteConstraintNames(false);
JOptionPane.showMessageDialog(app.getMainFrame(), msg);
return fileText;
ResultSet mockResultSet = null;
if (XML_TYPE_CLASS == null)
// The DataObject returns a string to put into the
int option = JOptionPane.showConfirmDialog(this,
destSession.getObjectTreeAPIOfActiveSessionWindow();
String message =
mockUpdateUtil =
useColsPanel.add(new JLabel(s_stringMgr.getString("editWhereColsPanel.useColumns")), BorderLayout.NORTH);
String msg = s_stringMgr.getString("BookmarksAccessor.bookmarksPluginNeeded");
state = ISI_OCTAL;
StringBuilder result = new StringBuilder();
return true;
super(s_stringMgr.getString("TablePopupMenu.export"));
if (commandResult != 0) {
refColumns.setLength(refColumns.length() - 2); // deletes the last ", "
return s_stringMgr.getString("ProcedureColumnsTab.hint");
FileInputStream inStream;
CompletionCandidates completionCandidates = _model.getCompletionCandidates(_cc.getTextTillCarret());
public void actionPerformed(ActionEvent e)
expect(mockSQLConnection.getSQLMetaData()).andStubReturn(mockSQLMetaData);
JOptionPane.showMessageDialog(_plugin.getApplication().getMainFrame(), s_stringMgr.getString("HibernateController.noProviderMsg"));
mockThreadPool.addTask(isA(Runnable.class));
String msg = s_stringMgr.getString("i18n.noFilesOpened");
ArrayList<AliasInfo> buf = _currentAliasInfos;
StringBuilder result = new StringBuilder();
System.out.println(l_valSql.callSQL99Validator(l_url, l_session, l_key, "select * from tab1", "text"));
CompletionParser cp = new CompletionParser(token);
new CloseAllSQLResultWindowsCommand(activeSession.getSQLPanelAPIOfActiveSessionWindow()).execute();
expectLastCall().atLeastOnce();
if (onUpdateAction != null) {
if (onDeleteAction != null && onDeleteAction.equalsIgnoreCase("set default")) {
expect(mockConnection.isClosed()).andStubReturn(false);
final StringBuilder result = new StringBuilder();
public MappedObjectPanel(JComponent detailComp)
String SESSION_TIMEZONE_TT = s_stringMgr.getString("OraclePluginPreferencesPanel.sessionTimezoneTT");
expect(mockSQLDriver.getDriverClassName()).andStubReturn(TEST_DRIVER_CLASS_NAME);
if (currentCellEditor != null) {
private final ColorUIResource primary1  = new ColorUIResource( 44,  73, 135);
public interface IPropertyNames
private JMenuItem _mnuOpenInEditor = new JMenuItem(s_stringMgr.getString("I18n.openIOnEditor"));
_properties.put(s_stringMgr.getString("MappingRoot.user"), md.getUserName());
registerColumnType(2011, 1073741823, "clob($l)");
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
sessionUnderTest.setQueryTokenizer(customTokenizer);
importData(file);
registerColumnType(-15, 4192, "char($l)");
SessionProperties result = EasyMock.createMock(SessionProperties.class);
registerColumnType(Types.BLOB, 1073741823, "blob($l)");
}
commandResult = cmdProcess.waitFor();
tm.addColumn(s_stringMgr.getString("oracle.rows"));
ListModel useColsModel = useColsList.getModel();
final int featureId = DialectUtils.VIEW_DEFINITION_TYPE;
JOptionPane.showMessageDialog(_app.getMainFrame(), msg);
final StringTemplate st = new StringTemplate(ST_DROP_INDEX_STYLE_ONE);
expect(mockObjFilterMatcher.getSqlLikeMatchString()).andReturn(TEST_LIKE_MATCH_STRING);
private JTable _table;
if (notUseColsList.getModel().getSize() == 0) {
createGUI();
int fudgeFactor = 100;
// Replace "-8" with Types.ROWID when Java6 is the minimum supported version
SortableTableModel sortedModel =
rdif.pack();
String TABLE_CONTENTS = s_stringMgr.getString("generalSessionPropertiesPanel.tableContents");
tm.addColumn(s_stringMgr.getString("oracle.bufferGets"));
else {
IQueryTokenizerPreferenceBean prefsBean =
return s_stringMgr.getString("AllBluesBoldMetalTheme.name");
None
if (exportData(outStream, canonicalFilePathName) == true) {
expect(mockApplication.getResources()).andStubReturn(mockSquirrelResources);
if (exportData(outStream, canonicalFilePathName) == false) {
}
IDatabaseObjectInfo selectedObjects[] =	_tree.getSelectedDatabaseObjects();
s_log.error(s_stringMgr.getString("Application.error.loadsqlhistory"), ex);
JOptionPane.showMessageDialog(this,
SELECT 2, 'donuts'
return false;
// If the user has selected a non-cannonical Binary format, we need
if (exportData(outStream, canonicalFilePathName) == true) {
occurrencesReplaced++;
if ( ! TEMP_FILE_FLAG.equals(fileNameField.getText())
// Do not try to be fancy and insert the data where the user is looking,
String msg = s_stringMgr.getString("ErrorStream.multipleerrors",
String SHOW_PROCEDURE_SOURCE = s_stringMgr.getString("InformixPlugin.showProcedureSource");
s_log.error(s_stringMgr.getString("Application.error.savesqlhistory"), ex);
* Returns the number of columns.
final String alterClause = DialectUtils.ALTER_COLUMN_CLAUSE;
_resources = new Resources(this);
_treeAPI.addExpander(DatabaseObjectType.SCHEMA,
trimmedToken =
* @see net.sourceforge.squirrel_sql.client.session.event.ISessionListener#allSessionsClosed()
l_call.registerTypeMapping(ValidatorResult.class, l_qn,
super(stringMgr.getString("PleaseWaitDialog.queryExecuting"), true, app);
new ConvertToStringBufferCommand(FrameWorkAcessor.getSQLPanelAPI(_session, _plugin)).execute();
return;
new InQuotesCommand(FrameWorkAcessor.getSQLPanelAPI(_session, _plugin)).execute();
}
ITableInfo[] tableInfosForUncachedTypes = getTableInfosForUncachedTypes(catalog, schema, filterMatcher, types);
String ST_ACCESS_METHOD_KEY = "accessMethod";
registerColumnType(Types.VARCHAR, 4000, "varchar($l)");
// "AS $selectStatement$ $withCheckOption$";
}
return new String[] { DialectUtils.getAddPrimaryKeySQL(ti, pkName, columns, false, qualifier, prefs,
ret[1] = ket;
ISession session = null;
JLabel left = new JLabel(row[0].toString());
private boolean _isNullable;
/**
"right:pref, 8dlu, left:min(100dlu;pref):grow",
"pref, 6dlu, pref, 6dlu, pref, 6dlu, pref, 6dlu, pref, 6dlu, "
StringTemplate st = new StringTemplate(ST_DROP_INDEX_STYLE_THREE);
_curCompletionPanelSize = getCurCompletionPanelSize(candidates);
indicateNewStartupTask(splash, s_stringMgr.getString("Application.splash.showmainwindow"));
childIndexST = new StringTemplate(ST_CREATE_INDEX_STYLE_TWO);
public String getTableColumnName() { return _tableColumnName;}
final StringTemplate st = new StringTemplate(ST_CREATE_VIEW_STYLE_TWO);
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
return in;
super.setSize(_curCompletionPanelSize.width, _curCompletionPanelSize.height);
new ColumnDisplayDefinition(DISPLAY_WIDTH, s_stringMgr.getString("HibernateAttribuiteDataSet.attrName")),
schemaLoadInfos[i].schemaName = schemaName;
// Currently, OpenEdge only supports the PUB schema for sequences.
String chooserTitle =
_userExtraLAFFolder = new File(_userSettingsFolder, ILAFConstants.USER_EXTRA_LAFS_FOLDER);
((RestorableJTextField)_textComponent).addKeyListener(new KeyTextHandler());
_app.getSquirrelPreferences().addPropertyChangeListener(new PropertyChangeListener()
return;
// "ADD CONSTRAINT $constraintName$ UNIQUE ($columnName; separator=\",\"$)";
l_call.addParameter("a_sqlStatement", XMLType.XSD_STRING, ParameterMode.IN);
// Create the Look and Feel register.
gbc.gridx++;
StringTemplate st = new StringTemplate(ST_ALTER_COLUMN_NULL_STYLE_ONE);
for (Iterator<ILookAndFeelController> it =
final File stdLafJarDir = _plugin.getLookAndFeelFolder();
PluginResources rsrc = _plugin.getResources();
_lafRegister = lafRegister;
++gbc.gridx;
s_stringMgr.getString("popupeditableIoPanel.exportedToFile", canonicalFilePathName),
dataTypePanels = CellComponentFactory.getControlPanels();
String message =
// :new.id := seq_name@nextval;
String onDeleteNoAction = null;
String LAF_LOC = s_stringMgr.getString("laf.jars");
return true;
try {
IQueryTokenizer initialTokenizer = sessionUnderTest.getQueryTokenizer();
// ADD CONSTRAINT constraintName UNIQUE (column1, column2);
cache_value, is_cyled);
File themePackDir = new File(plugin.getPluginAppSettingsFolder(), "oyoaha-theme-packs");
public void testSessionCleanup() {
sql.append(DialectUtils.shapeIdentifier(newTableName, prefs, this));
String SYNC_COMPONENT_BACKGROUND_COLOR_CHK_LABEL =
LookAndFeelInfo[] info = UIManager.getInstalledLookAndFeels();
final StringBuilder sql = new StringBuilder();
return 2000;
expect(mockFontInfo.createFont()).andStubReturn(mockFont);
while (keys.hasNext()) {
columnListLabel = getBorderedLabel(i18n.COLUMN_NAME_LABEL, border);
String WHERE_CLAUSE =
return false;
l_call.addParameter("a_password", XMLType.XSD_STRING, ParameterMode.IN);
s_stringMgr.getString("popupeditableIoPanel.cannotOpenFile", args),
* Render a value into text for this DataType.
prefs.setQuoteColumnNames(false);
prefs.setQuoteColumnNames(false);
int option = JOptionPane.showConfirmDialog(this,
btnPrintCacheFileLocation = new JButton(s_stringMgr.getString("SchemaPropertiesPanel.printCacheFileLocation"));
((RestorableJTextField)_textComponent).addMouseListener(new MouseAdapter()
Boolean matchFullNotSupported = null;
int index = text.indexOf(c);
* Internal class for handling key events during editing of both JTextField
public JTextArea getJTextArea(Object value) {
s_stringMgr.getString("editWhereColsPanel.cannotRemoveAllCols"));
* Returns true if data type may be edited in the popup, false if not.
DataTypeBoolean.this._textComponent.updateText("true");
// We also include the URL used to connect to the DB so that
_panels.add(new GeneralSessionPropertiesPanel());
DataTypeBoolean.this._textComponent.updateText("false");
if (lookup.containsKey(parameter.prompt)) {
if ("TtYy1".indexOf(c) > -1)
CellImportExportInfoSaver.remove(_colDef.getFullTableColumnName());
String tableName = column.getTableName();
super();
Set<Integer> s = new HashSet<Integer>();
if (file.exists()) {
return new String[] {
String sequenceName = column.getTableName() + "_" + column.getColumnName() + "_seq";
// "AS $selectStatement$ $withCheckOption$";
/** Logger for this class. */
setLimit(200000);
_resultSetOutput.show(rsds, null);
putValue(javax.swing.Action.NAME,indexName);
}
offset++;
Object root = treeTableTree.getModel().getRoot();
String seqName = column.getColumnName() + "_AUTOINC_SEQ";
for (int i = selectedRows.length - 1; i >= 0 ; i--) {
"This database dialect doesn't support adding comments to columns");
StringBuilder updateSQL = new StringBuilder();
if ((from.getDataType() == Types.VARCHAR && to.getDataType() == Types.CLOB)
_generateDependentCheckbox = new JCheckBox(s_stringMgr.getString("mssql.generateDependend"),false);
String dropSQL = getColumnDropSQL(from.getTableName(), from.getColumnName(), qualifier, prefs);
String SHOW_INDEX_SOURCE = s_stringMgr.getString("PostgresPlugin.showIndexSource");
currentSchemas = classUnderTest.getSchemas();
TIMESTEN,
final String msg = s_stringMgr.getString("DialectUtils.error.getprimarykey", ti.getSimpleName());
continue;
if (unique && ! accessMethod.equalsIgnoreCase("bitmap") )
_treeAPI.addDetailTab(DatabaseObjectType.VIEW, new ViewSourceTab(i18n.SHOW_VIEW_SOURCE, stmtSep));
if (c == KeyEvent.VK_TAB || c == KeyEvent.VK_ENTER) {
DataTypeBoolean.this._textComponent.updateText("<null>");
super();
//throw new UnsupportedOperationException("Oracle doesn't support using sequences for column defaults");
_scriptFTIndexesCheckbox = new JCheckBox(s_stringMgr.getString("mssql.scriptFullText"));
return tmp.toString();
String fileText;
JPanel tablePanel = new JPanel();
DatabaseObjectInfoTableModel fromModel = (DatabaseObjectInfoTableModel) _availableTable.getModel();
public DataTypeInfo getDataTypeAt(int idx)
handleNotNullableField(text, c, e, _textComponent);
check.setConstraintName(constraintName);
ForeignKeyConstraint fk = new ForeignKeyConstraint();
* On input from the DB, read the data from the ResultSet into the
* Can always do File I/O with Derby clobs.
label = s_stringMgr.getString("ResultTab.elapsedTimeLabel");
result.add(dialect.getDropSequenceSQL(sequenceName, false, qualifier, prefs));
fk.setReferencedTable(tableAndColumns[0]);
if (thisFilegroup.equals("PRIMARY")) buf.append("PRIMARY");
final StringBuilder sql = new StringBuilder();
String key = s_stringMgr.getString("MainFrame.saveSize");
final StringBuilder sql = new StringBuilder();
msg = s_stringMgr.getString("DialectUtils.columnDropUnsupported", dialect.getDisplayName());
// String owner = rs.getString(1);
l_call.addParameter("a_sessionId", XMLType.XSD_INT, ParameterMode.IN);
key = s_stringMgr.getString("MainFrame.restoreSize");
if (!rs.next()) return null;
final StringTemplate st = new StringTemplate(ST_DROP_SEQUENCE_STYLE_ONE);
file = new File(fileNameField.getText());
final StringTemplate st = new StringTemplate(ST_CREATE_SEQUENCE_STYLE_TWO);
// "CREATE SEQUENCE $sequenceName$ $startWith$ $increment$ $minimum$ $maximum$ $cache$ $cycle$";
if (fileNameField.getText() == null ||
session.getMetaData());
if (getEditorComponent() != null) {
f1.setLastModified(orgTime - 10000000);
try {
_errMsg = s_stringMgr.getString("DriverPropertiesController.loadingDriverFailed", app.getDataCache().getDriver(driverIdentifier).getName());
_treeAPI.addExpander(DatabaseObjectType.SESSION, new SessionExpander());
_treeAPI.addDetailTab(DatabaseObjectType.CATALOG, new OpenTablesTab());
if (fileNameField.getText().equals(TEMP_FILE_FLAG)) {
setModel(new DefaultComboBoxModel());
for (int i=0; i< inData.length; i++) {
}
private IHandler _handler;
msg = s_stringMgr.getString("CancelStatementThread.cancelFailed", t);
LoggerController.createLogger(SquirrelPreferences.class);
ret.addAll(ciClasses);
super.setValueAt(newValueObject, row, col);
if ( (fileNameField.getText() != null &&
canonicalFilePathName = file.getCanonicalPath();
msg = s_stringMgr.getString("CancelStatementThread.cancelSucceeded");
loadProperties();
useJavaDefaultFormat = useJavaDefaultFormatChk.isSelected();
public void updateText(String newText) {
handleNotNullableField(text, c, e, _textComponent);
s_stringMgr.getString("dataTypeUnknown.readContentsOnLoad"));
list.addMouseListener(new MouseAdapter()
((RestorableJTextField)getEditorComponent()).updateText(""+e.getKeyChar());
dboInfo = new DatabaseObjectInfo(null, null, "SESSIONS",
)
final StringTemplate st = new StringTemplate(ST_ALTER_COLUMN_NAME_STYLE_ONE);
chkShowQualified = new JCheckBox(s_stringMgr.getString("MappedObjectPanel.QualifiedNames"));
private DefaultColumnRenderer _renderer = DefaultColumnRenderer.getInstance();
* On input from the DB, read the data from the ResultSet into the
if (((RestorableJTextField)getEditorComponent()).getText().equals("<null>"+e.getKeyChar())) {
/** the backup directory (e.g. /opt/squirrel/update/backup) */
/**
public static class DateFormatTypeCombo extends JComboBox
return (String)_renderer.renderObject(
_errMsg = s_stringMgr.getString("DriverPropertiesController.gettingDriverPropetiesFailed");
rowData[1][i] = getColumnDescription(colDefs[i]);
return s_stringMgr.getString("DataTypePreferencesPanel.propsPanel.hint");
Point pt = evt.getPoint();
try {
case Types.JAVA_OBJECT:
String HINT = s_stringMgr.getString("editWhereColsPanel.limitColsInCellHint");
}
if (dataTypeComponent == null) {
String tableNamePattern,
String [] initialClassNameList = {
Byte[] useValue;
tm.addColumn(s_stringMgr.getString("oracle.diskReadsPerRow"));
return dataTypeObject.validateAndConvert(inputValue, originalValue, messageBuffer);
private class KeyTextHandler extends BaseKeyTextHandler {
* Pool of <TT>ResultTabInfo</TT> objects available for use.
return false;
setBackground(Color.cyan);
// "CREATE SEQUENCE $sequenceName$ " +
return s_stringMgr.getString("DataTypePreferencesPanel.propsPanel.title");
_sqlExecPanel.removeSQLExecutionListener(lis);
bytes[byteIndex++] = Byte.valueOf((byte)s.charAt(0));
registerColumnType(Types.CHAR, "char($l)");
temp[subTableSplitSize+1] = temp[subTableSplitSize] + length;
/** Listeners for this object. */
None
CellImportExportInfoSaver.getInstance().save(
gbc.gridy++;
Object[] listeners = _listenerList.getListenerList();
dataArray = new String[_tables.size()];
if (fileNameField.getText() == null)
// if this panel is called before any instances of the class have been
"sign", "acos", "asin", "atan", "cos", "cosh", "exp", "ln", "sin",
dboInfo = new DatabaseObjectInfo(null, null, "INSTANCES",
String DROP_PRIMARY_KEY_TITLE =
cellPopupMenu = new TablePopupMenu(getUpdateableModel(), this, table);
setStatusText(s_stringMgr.getString("ConnectionInternalFrame.cancelling"));
addWidgetListener(new WidgetAdapter()
}
assertNull("listFiles Should Return Null.", dir.listFiles());
final JTabbedPane tabPane = UIFactory.getInstance().createTabbedPane();
if (_limitReadOnSpecificColumns == false)
public ValidatorResult callSQL99Validator (URL a_url, int a_sessionId, int a_sessionKey, String a_sqlStatement, String a_resultType) throws RemoteException, ServiceException {
if (_isNullable) {
public String getData(){return _data;}
public void restoreText();
return c.getData().equals(_data);
if (showAscii && s.charAt(1) == ' ') {
if (DerbyClobDataTypeComponent.this._isNullable) {
rs.close();
registerColumnType(2009, 1073741823, "clob($l)");
_caller = caller;
default:
// but NOT the same one used in the Text and in-cell operations.
_stickyTab = null;
int indexOfStickyTab = getIndexOfTab(_stickyTab);
handleNotNullableField(text, c, e, _textComponent);
if (Character.isWhitespace(actChar))
String fileText;
DerbyClobDataTypeComponent.this._textComponent.updateText("<null>");
return BinaryDisplayConverter.convertToString(bBytes,
}
private final JMenu _pluginsMenu;
Byte[] bBytes = new Byte[count];
private NumberFormat _numberFormat;
ret.add(new JLabel(s_stringMgr.getString("HibernatePanel.toObtainSessionFact")), gbc);
String s = data.substring(stringIndex, stringIndex+convConst.width);
registerColumnType(-16, 1073741823, "long varchar($l)");
return CellComponentFactory.needToReRead(_colDefs[col], originalValue);
setLayout(new GridBagLayout());
File file;
_iTableInfos.remove(ti);
panel.add(updateControls, BorderLayout.SOUTH);
externalCommandCombo.setEditable(true);
if (value < 0)
if (s.length() > convConst.width)
boolean[] check = new boolean[flist.length];
"substring", "locate", "trim", "length", "bit_length", "coalesce",
HashMap<String, String> h = dataTypes.get(dataTypeName);
while (keys.hasNext()) {
h.put(propertyName, propertyValue);
static class ConversionConstants {
gbc.gridx = 0;
for (int i=0; i < data.length; i++) {
return false;
if (showAscii) {
dateFormatTypeDrop.setEnabled( ! useJavaDefaultFormatChk.isSelected());
final StringTemplate fkST = new StringTemplate(ST_ADD_FOREIGN_KEY_CONSTRAINT_STYLE_ONE);
}
JPanel buttonPanel = new JPanel();
// ADD [CONSTRAINT <constraintname>] FOREIGN KEY (<column list>)
// "DROP INDEX $indexName$";
TablePopupMenu cellPopupMenu = null;
JOptionPane.showMessageDialog(this,
file = new File(fileNameField.getText());
"second", "minute", "hour", "day",
}
if ( isEditable == false)
if (s.length() < convConst.width)
CellImportExportInfo info =
final String templateStr = ST_ADD_UNIQUE_CONSTRAINT_STYLE_TWO;
whereClauseUsage = USE_JDBC_ESCAPE_FORMAT;	// default to SQL standard
// but NOT the same one used in the Text and in-cell operations.
sbValues.append(")").append(getStatementSeparator()).append("\n");
&& null != _action.getValue(Resources.ACCELERATOR_STRING)
// "ALTER TABLE $tableName$ ALTER COLUMN $columnName$ IDENTITY";
String columnName;
String tableName = DialectUtils.shapeQualifiableIdentifier(ti.getSimpleName(), qualifier, prefs, this);
private class KeyTextHandler extends BaseKeyTextHandler {
// "ALTER SEQUENCE $sequenceName$ " +
Clob clob = rs.getClob(index);
if (pageIndex==0)
addColumn(s_stringMgr.getString("i18n.missingTarnslation"));
setBounds(ws.getBounds().createRectangle());
* Internal class for handling key events during editing of both JTextField
break;
RowDataJTable table;
//
displayControlsPanel.add(showAscii);
/**
* Returns true if data type may be edited in the popup, false if not.
* This Data Type can be edited in a table cell. This function is not called
* Render a value into text for this DataType.
return "";
eiPanel.add(new JLabel(s_stringMgr.getString("popupeditableIoPanel.withCommand")), gbc);
private int _scale;
(c == KeyEvent.VK_BACK_SPACE) ||
// The processing is different when nulls are allowed and when they are
int base = 16;	// default to hex
base = 16;	// default to hex
// if either of the values is null and the other is not, then the data has
if (rows.length == 0) {
JOptionPane.showMessageDialog(null,
}
// variables used in printing
super.setValueAt(newValueString, row, col);
super.processKeyEvent(e);
if (updateableObject != null && ! creator.isTableEditable())
final String ourEventQueueClassName = EventDispatchThreadHangMonitor.class.getName();
private JComboBox radixList = null;
return s_stringMgr.getString("HibernatePrefsTab.hint");
isCurrency = md.isCurrency(idx);
file.delete();
String commandString = extCmdComboItemStr;
if (!Character.isWhitespace(actChar))
gbc.gridy++;
api.expandNode(tableNode);
Map<Integer, Map<String,String>> replacements = new HashMap<Integer, Map<String,String>>(20);
JPanel editingControls = createPopupEditingControls();
private final JScrollPane scrollPane;
private static final long NO_CURRENT_EVENT = 0;
"both", "empty", "leading", "member", "object", "of", "trailing",
LoggerController.createLogger(SquirrelPreferences.class);
String MODIFY_TITLE =
String[] ss = { "dir\u3400", "abc", "abc@123", "!@#$%^&",
return _currentChannelBean.equals(_installedChannelBean);
makeToolWindow(true);
MappedClassInfo getMappedClassInfoFor(String token, boolean matchNameExact, boolean stateless);
_dataSetUpdateableTableModel.setEditModeForced(false);
private boolean _isSigned;
private JTextField fileNameField;
if (md.storesUpperCaseIdentifiers())
if (Character.toLowerCase(u1) == Character.toLowerCase(u2))
String TITLE = s_stringMgr.getString("mysql.variables");
// PostgreSQL stores all names in lower case.
private static final String PERF_KEY_LAST_SELECTED_TAB = "Squirrel.hibernateplugin.lastSelectedTab";
}
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
HashMap<String, String> useColsMap =
LoggerController.createLogger(SquirrelPreferences.class);
boolean[] check = new boolean[flist.length];
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
return supposedTokenID;
setRowHeight(1, 80);
case FirebirdManagerGrantFrame.TREENODE_TYPE_USER_GROUP:
return s_stringMgr.getString("exportconfig.applicationSettings");
return s_stringMgr.getString("exportconfig.databaseAliases");
s_log.error(s_stringMgr.getString("exportconfig.errorReslovingFileName"), ex);
public String getAuthor()
private final int TABLE_COL_RECORDS = 4;
String dataQuery =
// (making it a new directory name.)
// statements, which is invalid for Oracle. Since "/" is the way
s_log.debug(s_stringMgr.getString("Application.info.setjdbcdebuglog"));
public ITableInfo getTableInfo()
// descriptor. If the contents of the CLOB have been limited during
public Vector<String> getDataTypes()
* Can always do File I/O with Derby clobs.
private IntegerField _showClobSizeField = new IntegerField(5);
s_log.error("updateTableComponent: unexpected exception - "+
byte[] bytes = new byte[bBytes.length];
return new BlobDescriptor(blob, null, false, false, 0);
contentPane.setLayout(new BorderLayout());
if (s_log.isDebugEnabled())
for (int i=0; i<notUseColsModel.getSize(); i++) {
_columnList = columnList;
if (next.startsWith("DELIMITER")) {
assertEquals("Incorrect Number Of Files Returned.", 3, flist.length);
++curPos;
if (DataTypeShort.this._scale > 0 &&
private Object originalValue;
private static ThreadSafeDateFormat dateFormat =
_treeAPI.addDetailTab(DatabaseObjectType.SEQUENCE, new DatabaseObjectInfoTab());
int[] selectedIndices = _list.getSelectedIndices();
}
final IPluginManager pmgr = _app.getPluginManager();
radLoadAllSchemas= new JRadioButton(s_stringMgr.getString("OracleAliasPrefsPanel.All"));
if (cdesc.getWholeClobRead())
for (int i = 0; i < columnInfos.length; i++) {
private boolean wholeClobRead(ClobDescriptor cdesc) {
s_log.error(t);
return s_stringMgr.getString("PrimaryKeyTab.hint");
JLabel analyzeLabel = new JLabel(VacuumDatabaseDialog.i18n.ANALYZE_LABEL);
private static final String UNEXPECTED_SYMBOL_STR =
return session.getObjectTreeAPIOfActiveSessionWindow();
IObjectTreeAPI objectTreeApi = session
addResultsTab(tab, null);
cdesc = new DerbyClobDescriptor(value);
// Both of these throw an exception claiming that it got a clob
addExpander(objTree, DatabaseObjectType.SCHEMA, new SchemaExpander());
GUIUtils.processOnSwingEventThread(new Runnable()
String canonicalFilePathName = fileNameField.getText();
try
((RestorableJTextArea)_textComponent).setText((String)_renderer.renderObject(value));
CellComponentFactory.registerDataTypeFactory(
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
mergeInColumn = customDialog.getNewColumnName();
_convertToSQL.putValue(AbstractAction.NAME,  s_stringMgr.getString("hibernate.hqlToSqlLong"));
* @see java.lang.Object#toString()
String HINT = s_stringMgr.getString("oracle.displayOptions");
String QUESTION_TITLE_DELETE_ROLE = stringManager.getString("rolemanager.question.title.delete.role");
// check box for whether to use Java Default or a Locale-dependent format
private final int FB_SHEET_TYPE_CREATE = 1;
_app.getMessageHandler().showWarningMessage(s_stringMgr.getString("AliasWindowFactory.schemaPropsCopiedWarning"));
SQLDatabaseMetaData dmd = _session.getSQLConnection().getSQLMetaData();
private JCheckBox _showClobChk = new JCheckBox(s_stringMgr.getString("dataTypeBigDecimal.readContentsOnFirstLoad"));
private JCheckBox _makeNewlinesVisibleInCellChk =
super(session, s_stringMgr.getString("oracle.infoTitle", session.getTitle()));
_driversList = list;
super(session, s_stringMgr.getString("oracle.sgaTitle", session.getTitle()));
toFront();
_refreshTimer = null;
final SpinnerNumberModel model = new SpinnerNumberModel(autoRefeshPeriod, 1, 60, 5);
hasResized = true;
private static final String SESSION_INFO_SQL = "SELECT sess.Sid, " +
SwingUtilities.invokeLater(new Runnable()
String HINT = s_stringMgr.getString("oracle.displaySessionDetails");
joinFragments(procPattern, false);
if (s_log.isInfoEnabled())
* Current session.
pstmt.setObject(position, null);
breakApartNewLines();
public final static String CR = System.getProperty("line.separator", "\n");
* "where XMLSERIALIZE(CONTENT " + _colDef.getLabel() +") like '<value>'"
private final static ILogger log = LoggerController.createLogger(FirebirdManagerDataAccess.class);
// xmlType = XMLType.createXML(o);
pstmt.setObject(position, xmlTypeObj);
// This seems to work for both Oracle 9i and 10g
int idx = arg0 - 1;
_treeAPI.addDetailTab(DatabaseObjectType.TRIGGER_TYPE_DBO, new DatabaseObjectInfoTab());
}
_treeAPI.addDetailTab(DatabaseObjectType.INDEX, new DatabaseObjectInfoTab());
private JCheckBox objectTreeBackgroundColorChk = new JCheckBox("");
ITableIndexExtractor indexExtractor = new PostgresTableIndexExtractorImpl();
TableWithChildNodesExpander tableExpander = new TableWithChildNodesExpander();
_treeAPI.addDetailTab(DatabaseObjectType.PROCEDURE, new ProcedureSourceTab(i18n.SHOW_PROCEDURE_SOURCE));
_treeAPI.addDetailTab(DatabaseObjectType.SESSION, new LockTab());
JMenu tableMenu = _resources.createMenu(IMenuResourceKeys.POSTGRES);
"executeSQL: An ISQLExecutionListener veto'd execution of "+
JLabel catalogLabel = getBorderedLabel(VacuumDatabaseDialog.i18n.CATALOG_LABEL + " ", _emptyBorder);
mergeInColumn = customDialog.getMergeInExistingColumn();
+ "    db.oid = pgl.database "
return "";
JLabel fullLabel = new JLabel(VacuumDatabaseDialog.i18n.FULL_LABEL);
// Logger for this class
// if the original object is not null, then it contains a Clob object
if (sourceType == VIEW_TYPE || sourceType == TRIGGER_TYPE)
_viewNodeMenu = _resources.createMenu(IMenuResourceKeys.REFACTORING);
_viewNodeMenu = _resources.createMenu(IMenuResourceKeys.REFACTORING);
_sequenceNodeMenu = _resources.createMenu(IMenuResourceKeys.REFACTORING);
_sequenceNodeMenu = _resources.createMenu(IMenuResourceKeys.REFACTORING);
String nameSQL = getColumnNameAlterSQL(from, to, dialect, qualifier, prefs);
_indexObjectMenu = _resources.createMenu(IMenuResourceKeys.REFACTORING);
String last_value = rs.getString(1); // last_value
_tableNodeMenu = _resources.createMenu(IMenuResourceKeys.REFACTORING);
if (mergedTableColumnInfos != null)
continue;
//ArrayList<String> result = new ArrayList<String>();
return true;
columnNamesSelectStmt.delete(columnNamesSelectStmt.length() - 2, columnNamesSelectStmt.length());
StringBuilder dataQueryBuilder = new StringBuilder();
whereColumns = new ArrayList<String>();
StringBuilder whereColumn = new StringBuilder();
if (customDialog.isNewColumn())
result = result && dialect.supportsAddColumn();
if (_dropIndexInfo.length == 1)
executer.run();
customDialog = new ColumnListDialog(columns, ColumnListDialog.DROP_PRIMARY_KEY_MODE);
final String sep = _session.getQueryTokenizer().getSQLStatementSeparator();
_session.showErrorMessage(i18n.SINGLE_COLUMN_MESSAGE);
customDialog.setPrimaryKeyName("PK_" + columns[0].getTableName().toUpperCase());
String constraintName = _customDialog.getForeignKeyName();
if (customDialog.isCascadeSelected())
customDialog = new ColumnListDialog(columns, ColumnListDialog.DROP_PRIMARY_KEY_MODE);
if (columns.length == 1)
ArrayList<String> insertColumns = new ArrayList<String>();
ArrayList<TableColumnInfo> columns = new ArrayList<TableColumnInfo>();
result = result && dialect.supportsInsertInto();
result = result && dialect.supportsUpdate();
result = result && dialect.supportsDropColumn();
localColumns.add(column.getColumnName());
return tables;
GUIUtils.processOnSwingEventThread(new Runnable()
c.gridy = 0; // Row 0
columnMap.put(column.getColumnName(), column);
private JTextField tableTF;
final List<String> sqls =
gbc.insets = new Insets(5, 5, 0, 5);
final List<ITableInfo> result = SQLUtilities.getDeletionOrder(tables, md, getOrderedTablesCallBack);
if (fkInfo.length == 1)
setAllButtonEnabled(true);
JLabel modeLabel = getBorderedLabel(i18n.SOURCE_MODE_LABEL + " ", emptyBorder);
_dropCascade = new JCheckBox(i18n.BEHAVIOUR_DROP_CASCADE_LABEL);
_fkIndexBox.setPreferredSize(mediumField);
_onUpdateRadioButton.add(upNoActionButton);
add(scrollTablePane, new GridBagConstraints(0, 0, 2, 3, 1, 1, GridBagConstraints.WEST, GridBagConstraints.BOTH, new Insets(0, 0, 5, 0), 0, 0));
JRadioButton deNoActionButton = new JRadioButton(i18n.ACTION_NO_ACTION_OPTION);
add(onUpdatePanel, new GridBagConstraints(0, 0, 1, 0, 0, 0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 10, 0, 0), 0, 0));
onUpdatePanel.add(upNoActionButton);
_propertiesTab = new MergeColumnDialog.PropertiesTab();
private PropertiesTab _propertiesTab;
JLabel incrementLabel = getBorderedLabel(i18n.INCREMENT_LABEL + " ", emptyBorder);
private static final String PREFERENCES_FILE_NAME_GLOBAL = "prefsGlobal.xml";
private static final long UNREASONABLE_DISPATCH_DURATION_MS = 500;
if (_dialogMode == MODIFY_MODE) {
_app.getThreadPool().addTask(new Runnable()
JLabel minimumLabel = getBorderedLabel(i18n.MINIMUM_LABEL + " ", emptyBorder);
// i18n[popupeditableIoPanel.numberBase=Number Base:]
JLabel foreignKeyLabel = getBorderedLabel(i18n.SOURCE_FOREIGNKEY_LABEL + " ", emptyBorder);
JLabel tableLabel = getBorderedLabel(RenameTableDialog.i18n.TABLE_LABEL + " ", emptyBorder);
case ISA_GT:
tableNameLabel = getBorderedLabel(i18n.TABLE_NAME_LABEL, border);
}
None
int xweight_label = 0;
if (!JDBCTypeMapper.isLongType(getFirstColumnType(ti)))
JLabel tableLabel = getBorderedLabel(i18n.TABLE_LABEL + " ", _emptyBorder);
JLabel cascadeConstraintsLabel = new JLabel(i18n.CASCADE_LABEL + " ");
add(scrollTablePane, new GridBagConstraints(0, 0, 2, 3, 1, 1, GridBagConstraints.WEST, GridBagConstraints.BOTH, new Insets(0, 0, 5, 0), 0, 0));
String catalog = null;
activate(_executeButton, true);
setAllButtonEnabled(true);
String[] tables = _tables.keySet().toArray(new String[]{});
}
columnListLabel = getBorderedLabel(i18n.COLUMN_NAME_LABEL, border);
_app.getMessageHandler().showErrorMessage(s_stringMgr.getString("sqlbookmark.noDeleteSelection"));
super(s_stringMgr.getString("sessionscript.startupScripts"), true, true, true, true, app);
_pluginAppFolder = getPluginAppSettingsFolder();
throw new InternalError(ex.getMessage());
super();
String[] tableColumns = { "id", "name", "street", "number" };
// Logger for this class
JLabel catalogLabel = getBorderedLabel(VacuumDatabaseDialog.i18n.CATALOG_LABEL + " ", _emptyBorder);
JLabel tableLabel = getBorderedLabel(i18n.TABLE_LABEL + " ", _emptyBorder);
// Logger for this class
super(stringMgr.getString("sqlparam.inputParameterValues"), true, application);
if(session.getActiveSessionWindow() instanceof ObjectTreeInternalFrame)
None
Types.BLOB,
if (DialectFactory.isPostgreSQL(_session.getMetaData())) {
l_call.addParameter("a_resultType", XMLType.XSD_STRING, ParameterMode.IN);
l_call.addParameter("a_userName", XMLType.XSD_STRING, ParameterMode.IN);
l_call.addParameter("a_callingProgram", XMLType.XSD_STRING, ParameterMode.IN);
l_call.addParameter("a_callingProgram", XMLType.XSD_STRING, ParameterMode.IN);
l_call.addParameter("a_interactive", XMLType.XSD_INT, ParameterMode.IN);
IObjectTreeAPI otApi = session.getSessionInternalFrame().getObjectTreeAPI();
otApi.addDetailTab(DatabaseObjectType.TRIGGER, new DatabaseObjectInfoTab());
"and name = ? ";
(_tabs.get(getTabbedPane().getSelectedIndex())).select();
public Object clone() throws CloneNotSupportedException
final Object xmlTypeObj = createXmlMethod.invoke(null, o);
None
private boolean _textLimitLineVisible = false;
None
_textPane.addFocusListener(new FocusListener()
app.getSQLEntryPanelFactory().createSQLEntryPanel(
KeyStroke.getKeyStroke(KeyEvent.VK_F7, InputEvent.CTRL_MASK | InputEvent.SHIFT_MASK),
ResultSet schemaResultSet2 = buildVarcharResultSetAsRows("schemaResultSet2", new String[] { TEST_SCHEMA, "aSchema2" });
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
Settings.removeInitializer(SQLSettingsInitializer.NAME);
private static final int ISI_WHITESPACE = 2; // inside white space
return s_stringMgr.getString("RowCountTab.title");
JPanel buttonPanel = createButtonPanel(buttons, sidebuttons);
return docElem.getElementIndex(pos);
String TOOLTIP_ROLENAME = stringManager.getString("rolemanager.tooltip.rolename");
public static final int EQ_ID = DOUBLE_LITERAL_ID + 1; // =
colorer = new Colorer();
initDocument();
boolean tryAgain = false;
return s_stringMgr.getString("StringFunctionsTab.hint");
try
String[] colNames = new String[colDefs.length];
String GLOBAL_RECORDS = stringManager.getString("global.records");
chkSquirrelMarksInPopup = new JCheckBox(s_stringMgr.getString("sqlbookmark.squirrelMarksInPopup"));
JTextComponent _theComponent = (JTextComponent) DerbyClobDataTypeComponent.this._textComponent;
}
ScriptEnvironment env = new ScriptEnvironment(FrameWorkAcessor.getSQLPanelAPI(m_session, m_plugin), ownerFrame);
_panels.add(new GeneralSessionPropertiesPanel());
None
if (DialectFactory.isFrontBase(session.getMetaData())
int port = 80;
if (DialectFactory.isDB2(session.getMetaData())) {
String caLabel = s_stringMgr.getString("SQLResultExecuterPanel.closeAll");
if (dialect.supportsAlterColumnNull()) {
String WARNING_TITLE = stringManager.getString("changevalues.info.warning.title");
* This should exclude the "CREATE VIEW <viewname> AS" prefix and just return the query.
String command = ((String)externalCommandCombo.getEditor().getItem());
private void failDialect(HibernateDialect dialect, String refactoringType) {
// ------------------------------------------------------------------------
_sqlPanel.setVisible(true);
"MockResultSetMetaData.getColumnClassName: stub not yet implemented");
expect(mockResultSetMetaData.getColumnType(7)).andReturn(Types.TINYINT);
// check box for whether to use Java Default or a Locale-dependent format
int buttonIndex;
e.consume();
// if this panel is called before any instances of the class have been
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
final Folder folder = new Folder(null, s_stringMgr.getString("favs.newFolder")); // ?? i18n
return s_stringMgr.getString("RowCountTab.hint");
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
int selectedIndex = _list.getSelectedIndex();
* @see java.lang.Object#toString()
if (node.getDatabaseObjectType() != DatabaseObjectType.TABLE
JPanel updateControls = new JPanel();
useJavaDefaultFormatChk.setSelected(useJavaDefaultFormat);
for (ListDataListener listener : _listeners.toArray(new ListDataListener[0]))
* @see java.lang.Object#toString()
taif.pack();
JOptionPane.showMessageDialog(frame, s_stringMgr.getString("sqlbookmark.noAdd"));
None
_list.getModel().addListDataListener(new ListDataListener()
s_log.error(s_stringMgr.getString("Application.error.closeFileViewers"), t);
}
final ActionCollection actions = session.getApplication().getActionCollection();
}
PluginInfo[] plugins = _app.getPluginManager().getPluginInformation();
String TOOLTIP_ROLENAME = stringManager.getString("rolemanager.tooltip.rolename");
String INFO_FINISHED = stringManager.getString("badnullvalues.info.finished");
BookmarkManager bookmarks = _plugin.getBookmarkManager();
return supposedTokenID;
_addDetailTab(DatabaseObjectType.UDT, new DatabaseObjectInfoTab());
_pnlPrefs = new SQLReplacementPreferencesPanel(_plugin);
@Test
assertNotSame(initialTokenizer, retrievedTokenizer);
assertEquals(true, tree.matchKeyPrefix(map, node, "table(0)"));
assertEquals(true, tree.matchKeyPrefix(map, node, "table"));
CascadeInternalFramePositioner pos =
ArtifactXmlBean mockArtifactXmlBean = EasyMock.createMock(ArtifactXmlBean.class);
expect(mockUpdateUtil.deleteFile(mockInstalledSquirrelSqlJarFile)).andReturn(true);
assertFalse(classUnderTest.needToReRead(null));
private Connection mockConnection = mockHelper.createMock(Connection.class);
genericSQLCount = 6;
expect(rsmd.getColumnTypeName(1)).andStubReturn("varchar");
FileWrapper f1 = new FileWrapperImpl(dir, "tempfile.tst");
assertEquals("\"", identifierQuoteString);
private void setupInstallEventsAndListener(int times)
FileWrapper path = new FileWrapperImpl("/dir/file");
FileWrapper f = new FileWrapperImpl(System.getProperty("java.io.tmpdir"), platformId
assertFalse("File Already Exists, createNewFile Should Return False.",
FileWrapper currentFile;
f1 = new FileWrapperImpl(File.createTempFile("hyts_tf", null, null));
testVMArgs = System.getProperty("hy.test.vmargs");
if (canonicalf2.exists()) {
int dirNumber = 1;
_plugin.rebuildMenu();
boolean onUnix = File.separatorChar == '/';
dir = new FileWrapperImpl(base, String.valueOf(dirNumber));
assertEquals("Incorrect Directory Returned.", 0, ((FileWrapperImpl)directories[0])
f1.setLastModified(orgTime - 100000);
boolean result = f1.setLastModified(4354837199000L);
f2 = new FileWrapperImpl(System.getProperty("user.dir"), "deltestdir");
public void test_list_withUnicodeFileName() throws Exception {
f1.setReadOnly();
FileWrapper[] flist = dir.listFiles(tstFilter);
// assertTrue("File f1 Is Set To ReadOnly." , f1.canWrite());
testClobColType(sourceName, destName);
ResultSet rs = getColLengthResult();
assertEquals("bean1", bean1.getClientName());
DTProperties.put(timestampClassName, "", null); // Simulate missing property.
String value = rs.getString(index);
s_log.error(s_stringMgr.getString("Application.error.loadcellselections"), ex);
ISessionWidget[] framesOfSession = _sessionWindows.getFramesOfSession(session.getIdentifier());
framesOfSession[i].closeFrame(false);
//		JButton okBtn = new JButton("OK");
PluginInfo[] pi = app.getPluginManager().getPluginInformation();
public static <T> T createClassMock(Class<T> toMock) {
registerColumnType(Types.BINARY, 8000, "byte($l)");
private void updatePreferenceState()
refireSessionSheetOpened(evt);
_tabHandles.remove(tabHandle);
if (getModel().getSize() > 0)
final JPanel contentPane = new JPanel();
_mainTabPane.getObjectTreePanel().refreshTree();
public void uninitialize(IApplication app)
PluginInfo pi = new PluginInfo();
tokenizer = new QueryTokenizer(_props.getSQLStatementSeparator(),
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
return _session.getProperties().getTableContentsOutputClassName();
if (whereClause.length() == 0)
* Retrieve the descriptive title of this session.
String whereClause = getWhereClause(values, colDefs, -1, null);
String ST_ADD_UNIQUE_CONSTRAINT_STYLE_ONE =
if (rowCountErrorMessage.length() > 0) {
for (int i = 0; i < rowData.length; i++) {
buf.append(" ( ");
if (sql == null) {
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
String sql =
return DialectUtils.bindTemplateAttributes(this, st, valuesMap, qualifier, prefs);
List<ObjectTreeNode> addedChildren = new ArrayList<ObjectTreeNode>();
SortableTableModel tableModel = (SortableTableModel)((JTable)getComponent()).getModel();
@SuppressWarnings("unchecked")
rsds.setContentsTabResultSet(rs,
builder.addLabel(stringMgr.getString("sqlparam.valueFor", parameter), cc.xy(1, y));
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
return new ProcedureInfo[]
_schemaInfoCache.clearTables(null, doi.getSchemaName(), null, null);
if (!releaseVersionWillChange)
// "ADD CONSTRAINT $constraintName$ UNIQUE ($columnName; separator=\",\"$)";
fireTableDataChanged();
final boolean oldLoadSchemasCatalogs = props.getLoadSchemasCatalogs();
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
_columnCount = _dataSetDefinition.getColumnDefinitions().length;
return false;
JTextComponent _theComponent = (JTextComponent) DerbyClobDataTypeComponent.this._textComponent;
if (_dataTypeObject != null &&
_limitReadColumnNameMap.clear();	// empty the map of old values
textField.setBackground(Color.yellow);
final StringBuffer notnull = new StringBuffer();
RestorableJTextArea textArea = new RestorableJTextArea();
final StringBuilder sql = new StringBuilder();
// ADD CONSTRAINT constraintName UNIQUE (column1, column2);
// "ALTER TABLE $childTableName$ " +
DialectUtils.getMultiColNotNullSQL(colInfos, this, alterClause, true, result, qualifier, prefs);
registerColumnType(Types.VARBINARY, "long byte");
st.setAttribute(ST_DEST_TABLE_NAME_KEY, destTableName);
// MySQL disallows quoted column identifiers.
* @see net.sourceforge.squirrel_sql.fw.dialects.CommonHibernateDialect#getAddColumnSQL(net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo,
if (nbrTableTypes == 1 && dbProductName.equals("InstantDB"))
None
int aboveCursorHeight = cursorBounds.y;
msg = s_stringMgr.getString("SQLResultExecuterPanel.rowsInserted",
KeyStroke ctrlSubstractStroke = KeyStroke.getKeyStroke(KeyEvent.VK_SUBTRACT, java.awt.event.InputEvent.CTRL_MASK);
String CHANGES_RECORDED_MSG = s_stringMgr.getString("UpdateControllerImpl.changesRecordedMsg");
saveDataTypePreferences();
boolean fromResultSet = !_templateScriptOnly && !headerOnly;
_pnlPrefs = new SQLReplacementPreferencesPanel(_plugin);
chkDontShowAgain = new JCheckBox(s_stringMgr.getString("SessionStartupTimeHintDlg.dontShowAgain"));
ioPanel = new PopupEditableIOPanel(colDef, cellContents, true);
g2.drawRect(pageLeft, (int)pageTop, pageWidth, (int)(clipHeight+ headerHeight));
g2.setFont(new Font(g2.getFont().getName(), g2.getFont().getStyle(), 8));
if (settings.isRemoteUpdateSite())
_installedChannelBean = _util.getLocalReleaseInfo(releaseFilename);
totalNumPages++;
// ========================================================================
case ISI_BLOCK_COMMENT:
resources = new SQLReplaceResources(RESOURCE_PATH, this);
DataSetViewerEditableTablePanel _caller;
/** If <TT>true</TT> column headings should be shown. */
dlg.setTitle(s_stringMgr.getString("DumpApplicationAction.titleSuccess"));
}
String status =
_scriptQueryTime += executionLength;
}
String tsLabel =
* Ctor.
pane.setLayout(new BorderLayout());
g2.scale(1/scale, 1/scale);
ArrayList<CompletionInfo> ciClasses = new ArrayList<CompletionInfo>();
* @see net.sourceforge.squirrel_sql.client.session.event.ISessionListener#allSessionsClosed()
private void updatePreferenceState()
LoggerController.createLogger(SquirrelPreferences.class);
private boolean hasChanged = false;
return CellComponentFactory.isEditableInCell(_colDefs[col], getValueAt(row,col));
return new RowDataDescriptionRenderer();
l_call.addParameter("a_callingProgram", XMLType.XSD_STRING, ParameterMode.IN);
if (result) {
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
None
StringBuffer buffer = new StringBuffer(sql);
if (xml.indexOf("<") == -1 || xml.equals("<null>")) {
replacementEditor.addKeyListener(new java.awt.event.KeyAdapter() {
private static class ColumnDataPopupPanel extends JPanel {
ReplacementManager repMan = plugin.getReplacementManager();
s_log.error(s_stringMgr.getString("DeleteAliasAction.error.selectingwindow"), ex);
rows = (int)Math.sqrt(internalFrameCount);
setVisible(false);
case ISI_STRING:
return;
FileWrapper[] directories = baseDir.listFiles(dirFilter);
final String data = "THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG";
public void mouseReleased(MouseEvent evt)
for (int i=0; i< colDefs.length; i++) {
if (mdds != null && _metaDataOutput != null)
}
table = new RowDataJTable(colDefs, initialValues);
StringBuffer messageBuffer = new StringBuffer();
JPanel rowHeaderPanel = new JPanel();
return _windowManager.getMainFrame();
None
if (to.isDirectory())
setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
if (md.storesMixedCaseIdentifiers())
_util.saveChangeList(artifactStatusList);
int data = rs.getInt(idx);
MouseAdapter m = new MouseAdapter()
String[] radixListData = { "Hex", "Decimal", "Octal", "Binary" };
btnShowProps = new JButton(s_stringMgr.getString("SessionStartupTimeHintDlg.showAliasProps"));
transient private final ColumnDisplayDefinition _colDef;
class OldFileNameFilter implements FilenameFilter {
// Logger for this class
class TextAreaInternalFrame extends JDialog
private long startedLastEventDispatchAt = NO_CURRENT_EVENT;
// first make sure that user's last input has been included
FileWrapper[] flist = baseDir.listFiles(fileFilter);
pack();
None
sbValues.setLength(sbValues.length() - 1);
final StringTemplate st = new StringTemplate(ST_RENAME_OBJECT_STYLE_ONE);
_timer.stop();
LoggerController.createLogger(DriverWindowFactory.class);
short searchable = rs.getShort(idx);
registerColumnType(-9, 4192, "varchar($l)");
/**
)
else
ret = computeBounds(popup, view.getWidth(), view.getHeight(),
setDataVector(rowData, colNames);
if (!DialectFactory.isFrontBase(dmd)) {
popup.putClientProperty(Placement.class, placement);
popup.setVisible(false);
bounds = SwingUtilities.convertRectangle(_popupParent, bounds,
Rectangle bounds = computeBounds(popup, _popupParent,
FileFilter dirFilter = new FileFilter() {
ret.addAll(piecesIn);
add(exportImportPanel(isEditable), BorderLayout.SOUTH);
}
String SEARCHABLE_TYPE_PRED_BASIC = s_stringMgr.getString("DatabaseMetaData.searchableTypePredBasic");
l_call.addParameter("a_password", XMLType.XSD_STRING, ParameterMode.IN);
StringBuilder msg = new StringBuilder(s_stringMgr.getString("editextras.reformatFailed"));
fileChecksumMap.put(absPath, result);
task.run();
_beepHelper.beep(_theComponent);
private ColumnDisplayDefinition[] createColumnDefinitions(
// sort the list
//For testing on the live server
case ISI_CHAR:
private FirebirdManagerGrantTreeNode rootNode;
fileNameField.setText(info.getFileName());
String msg =
URL l_url = new URL("http://sqlvalidator.mimer.com/v1/services");
s_log.error(s_stringMgr.getString("ConnectToAliasCommand.error.closeconnection"), ex);
setupAppFileExpectations();
Arrays.sort(fileNames);
enableDoubleBuffering(componentToBePrinted);
msg = s_stringMgr.getString("SQLResultExecuterPanel.rowsDeleted",
return (ValidatorResult)l_call.invoke(parms);
try
useJavaDefaultFormat =true;	// set to use the Java default
synchronized (INSTANCE) {
if (fileNameField.getText() == null ||
int dirNumber = 1;
private String _newSessionView;
int firstColon = value.indexOf(":");
public JTextArea getJTextArea(Object value) {
s_log.error(s_stringMgr.getString("Application.error.loadcellselections"), ex);
Arrays.sort(tableArr, new TableInfoSimpleNameComparator());
List<String> sqls = dialect.getCreateTableSQL(tables, md, prefs, false);
if (extension != null && extension.length() > 0) {
StringTemplate st = new StringTemplate(ST_ALTER_SEQUENCE_STYLE_TWO);
s_log.error(s_stringMgr.getString("DeleteDriverAction.error.selectingwindow"), ex);
titles.add(s_stringMgr.getString("DumpApplicationCommand.title.status"));
* Generate a JPanel containing controls that allow the user
ValidateSQL99Client l_valSql = new ValidateSQL99Client ();
final Object[] args = {_sqlDriver.getName()};
_sqlEntryFactoryProxy = new SQLEntryPanelFactoryProxy(this, originalFactory);
SybaseASEExceptionFormatter formatter = new SybaseASEExceptionFormatter();
private UpdateUtil updateUtil = null;
private static final long UNREASONABLE_DISPATCH_DURATION_MS = 500;
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
public static final SQLTokenContext context = new SQLTokenContext();
public PreLaunchHelperImpl() throws IOException
/* Spring-injected */
}
if (_whereClauseArea.getText().length() > 0)
}
public static final BaseTokenID INCOMPLETE_STRING_LITERAL
switch (state)
List<String> dropTableSQL =
String jarFileToRemove = artifactName.replace(".zip", ".jar");
if (_uiFactory.getPreferences().getSelectOnRightMouseClick())
setBackground(Color.LIGHT_GRAY);
private int _precision;
private class KeyTextHandler extends BaseKeyTextHandler {
result.add(status);
if (s_log.isInfoEnabled())
/** If <TT>true</TT> the current line should be highlighted. */
externalCommandCombo.setPreferredSize(fileNameField.getPreferredSize());
return s_stringMgr.getString("SQLTab.title");
/** Check button for dialog */
return null;	// tell caller we cannot use this in Where clause
if (!status.isInstalled())
FirebirdManagerGrantTreeRenderer treeRenderer = new FirebirdManagerGrantTreeRenderer();
Object pluginObject = _session.getPluginObject(_plugin, IConstants.ISessionKeys.SQL_ENTRY_CONTROL);
final IApplication app = getApplication();
if (_scale >= 0 && obj.scale() > _scale)
int objPrecision = value.length();
_myPanel = new MyPanel(prefs, rsrc);
}
FileWrapper pluginBackupFile = _util.getFile(pluginBackupDir, artifactName);
List<String> listGrantTarget = new ArrayList<String>();
String testableStartTag = startTag.substring(1, startTag.length() -1).trim().toUpperCase();
jcheckboxExecute.setEnabled(radioButtonProcedures.isSelected());
defaultValues[expectedColDefIndex] = defValue;
}
final String msg = s_stringMgr.getString("DumpApplicationCommand.error.dumpingdrivers");
/** the downlaods root directory (e.g. /opt/squirrel/update/downloads) */
if (!setFirebirdPrivileges(sSQLRevoke, sSQLGrant))
try
if (value != null && value instanceof Boolean)
public SQLKit(SyntaxFactory syntaxFactory)
return new Syntax();
/** the top-level SQuirreL installation direction where launch scripts are (e.g. /opt/squirrel) */
case FirebirdManagerGrantFrame.TREENODE_TYPE_ROOT:
private FirebirdManagerUsersPreferenceBean sessionPreferencesBean = null;
private JLabel lblBckDBHost = new JLabel();
String title =
while (_history.remove(obj))
{
DialogSupport.setDialogFactory(new SquirrelNBDialogFactory(_plugin));
SettingsUtil.updateListSetting(settingsMap, SettingsNames.COLORING_NAME_LIST,
if (kitClass == BaseKit.class)
@SuppressWarnings("unchecked")
SettingsUtil.setColoring(settingsMap, ExtSettingsNames.HIGHLIGHT_CARET_ROW_COLORING,
session.getApplication().getThreadPool().addTask(new Runnable() {
addDetailTab(DatabaseObjectType.SESSION, new MetaDataTab());
_separatorStyle.setBold(false);
KeyStroke.getKeyStroke(KeyEvent.VK_F7, InputEvent.CTRL_MASK | InputEvent.SHIFT_MASK),
private ColumnDisplayDefinition _colDef;
settingsMap.put(JavaSettingsNames.JAVA_FORMAT_SPACE_BEFORE_PARENTHESIS,
short nullable = rs.getShort(idx);
KeyStroke ctrlJStroke = KeyStroke.getKeyStroke(KeyEvent.VK_J, java.awt.event.InputEvent.CTRL_MASK);
final String msg = s_stringMgr.getString("DumpApplicationCommand.error.sessiondump");
public static final BaseImageTokenID EQ
final ISession[] sessions = _app.getSessionManager().getConnectedSessions();
String ERROR_USERNAME_MISSING = stringManager.getString("backuprestoremanager.error.username.missing");
dlg.getRootPane().registerKeyboardAction(this,
try
return super.getText().replaceAll("\r\n", "\n");
_session = null;
// columnDefinition objects by using various functions in ResultSetMetaData
final String msg = s_stringMgr.getString("DumpApplicationCommand.error.combiningtempfiles");
if (colDefs[expectedColDefIndex].getLabel().equals(colName)) {
private String selectDirectory(String oldDir) {
// check box for whether to use Java Default or a Locale-dependent format
sessionPreferencesBean = (FirebirdManagerUsersPreferenceBean)PreferencesManager.loadPreferences(PreferencesManager.PREFERENCES_BEAN_USERS);
addDetailTab(type, new DatabaseObjectInfoTab());
jtextfieldServer.setText(prop.getProperty("server", globalPreferencesBean.getServer()));
globalPreferencesBean = PreferencesManager.getGlobalPreferences();
_session.getApplication().getSessionManager().removeSessionListener(_sessionListener);
* @see java.lang.Object#toString()
None
return s_stringMgr.getString("StringFunctionsTab.title");
} while (hasMoreData && startedColumn);
private void setupFromPreferences()
btnCreateBackupFilename.setText("");
TableColumnInfo newInfo = DialectUtils.getRenamedColumn(to, to.getColumnName() + "_2");
FileWrapper file1 = new FileWrapperImpl("", "");
String mixedFname = "SoMe FiLeNaMe";
public static final BaseTokenID WHITESPACE
int status = 0;
String CREATEDB_MSG_WARNING = stringManager.getString("createdatabase.message.warning");
String f1ParentName = "01";
g.setColor( getForeground() );
if ((c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))
// flag for whether we have already loaded the properties or not
}
sidebuttons ? count : 1, sidebuttons ? 1 : count, 5, 5);
/*
_timer.stop();
public static final int BOOLEAN_ID = OR_OR_ID + 1;
JOptionPane.showMessageDialog(_dlg, s_stringMgr.getString("graph.invalidWidth"));
private DateFormatTypeCombo dateFormatTypeDrop = new DateFormatTypeCombo();
FileWrapperImpl file;
None
return ! needToReRead(originalValue);
g.setColor( getBackground() );
if (defaultIndex >= 0)
if (digits != currentDigits && digits > 1)
dlg.addWindowListener(this);
}
data = data.substring(0, _limitReadLength);
public static final int ABSTRACT_ID = VOID_ID + 1;
private final String[]  cNames = {
public static final int KEYWORDS_ID = 1;
if ( ! needToReRead(value))
if (cancelIndex >= 0)
public static final BaseImageTokenID ABSTRACT
public static final int VOID_ID = SHORT_ID + 1;
* @see ISQLEntryPanel#getSelectedText()
if (as.isCoreArtifact()) {
public static final int INCOMPLETE_STRING_LITERAL_ID = WHILE_ID + 1;
if (CellComponentFactory.areEqual( _colDefs[col], oldValue, newValue))
public static final int VOID_ID = SHORT_ID + 1;
public static final int WHITESPACE_ID = ERRORS_ID + 1;
pnl.add(new JLabel(s_stringMgr.getString("SQLPreferencesPanel.largeScriptStmtCount")), gbc);
private Map<String,FBUser> mapUsers = null;
}
/**
public static final int ELLIPSIS_ID = ANNOTATION_ID + 1;
private final ConnectionInternalFrame _connSheet;
_limitReadChk.setSelected(_limitRead);
// if there is no updateable model, then we cannot update anything
if (getUpdateableModelReference() == null)
s_stringMgr.getString("dataTypeString.typeChar")));
if ( ((IDataSetUpdateableTableModel)getUpdateableModel()).getRowidCol() == col)
{ // printing set
public void run() {
destSession.getObjectTreeAPIOfActiveSessionWindow();
c.reformat(SELECT_DUAL);
end = columnNameText.indexOf('\n', start+1);
if (newValue == oldValue)
* @see java.lang.Object#toString()
setSeparatorConstraints(gbc, 8);
return javaAbbrevMap;
public boolean getScrollableTracksViewportWidth()
private int mode = FirebirdManagerHelper.DISPLAY_MODE;
switch (tokenIDOrCategory.getNumericID())
* @see java.lang.Object#toString()
private FirebirdManagerPreferenceBean firebirdPreferencesBean;
JDialog dlg = new JDialog(_plugin.getApplication().getMainFrame(), title, modal);
if (f1.equals(f2)) {
public int getCaretLineNumber()
public static final BaseImageTokenID BOOLEAN
default:
//Hashtable autoCorrects = plugin.getAutoCorrectProviderImpl().getAutoCorrects();
static JTable _table = null;
BlobDescriptor bdesc = (BlobDescriptor)value;
/**
m_dlg.setVisible(true);
private FontMetrics fontMetrics;
contentPane.add(labelPanel, BorderLayout.NORTH);
static HashMap<ColumnDisplayDefinition, IDataTypeComponent> _colDataTypeObjects =
private final static int HEIGHT = Integer.MAX_VALUE - 1000000;
String msg =
* Internal class for handling key events during editing of both JTextField
}
addToPopup(actions.get(RefreshSchemaInfoAction.class));
vecTableUsers = new Vector<Vector<Object>>();
private Vector<Vector<Object>> vecTableRoles = null;
columnModel.getColumn(2).setPreferredWidth(100);
synchronized (doclock)
private IscSvcHandle iscSvcHandle = null;
private FBUserManager fbUserManager = new FBUserManager();
synchronized (lock)
documentReader.seek(colorStartPos);
adjustIntervalsToAdjustment(re);
StyleConstants.setBold(attribs, true);
s_log.error(s_stringMgr.getString("WindowManager.errorselectingwindow"), ex);
LoggerController.createLogger(ObjectTreeTabbedPane.class);
if (isSelected)
return interval;
}
t = getNextToken();
final FontInfo fi = _session.getProperties().getFontInfo();
destSession.getObjectTreeAPIOfActiveSessionWindow();
documentReader = new DocumentReader(document);
tryAgain = true;
begin,
/** Titles for each style in the styles list. */
private static final StringManager s_stringMgr =
{
String tableNamePattern,
while (i.hasNext()) {
setText(s_styleTitles[idx]);
// i18n[popupeditableIoPanel.fileDoesNotExist=File {0} does not exist,\nor is not a readable, normal file.\nPlease enter a valid file name or use Browse to select a file.]
KeyStroke ctrlShiftFStroke = KeyStroke.getKeyStroke(KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK | java.awt.event.InputEvent.SHIFT_MASK);
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
if (bdesc.getWholeBlobRead())
return;
private static File userSettingsFolder;
final JLabel pluginLoc = new JLabel(s_stringMgr.getString("PluginSummaryDialog.pluginloc",
final IPluginManager pmgr = _app.getPluginManager();
String internalName =
private JLabel lblServer = new JLabel();
_pluginPnl.setValueAt("false", row, 3);
return "aTestString";
private int _threadCount;
for (int i = 0; i < threads; i++) {
for (int i = 0; i < threads; i++) {
int start = 0;
System.err.println(e.getMessage());
private static FirebirdManagerPreferenceBean firebirdManagerPrefs = null;
dropSequence(session, testSequenceName);
private static IPlugin firebirdManagerPlugin = null;
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
}
* (that is, it's query part minus the "CREATE VIEW AS" prefix), we can drop the view.
utilUnderTest.downloadHttpUpdateFile(host, port, file, "/tmp", -1, -1, proxySettings);
String columnName = rs.getString(4); // COLUMN NAME
private static String secondUniqueColumnName = "secondUniqueColumn";
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
private ISession mockGenericDialectSession = mockHelper.createMock(ISession.class);
Dimension graphPixelSize = _printable.initPrintNoScaleSinglePage();
runSQL(session, "create table " + fixIdentifierCase(session, fkParentTableName) + " ( "
new FormatXmlBean(s_stringMgr.getString("graph.dina5"), 14.8, 21.0, true, false)
FileWrapper dir = new FileWrapperImpl(System.getProperty("user.dir"));
runSQL(session, "create table " + fixIdentifierCase(session, testCreateIndexTable)
* @see java.lang.Object#toString()
pageSizeClause = " with page_size=4096";
f.getContentPane().setLayout(new BorderLayout());
columns = new TableColumnInfo[] { dropConstraintColumn };
System.err.println(e.getMessage());
private JLabel lblDatabaseFolder = new JLabel();
// to getting all of the data in the clob).
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
final String pluginDirName = Utilities.removeFileNameSuffix(fullFilePath);
/*
new RemoveQuotesCommand(FrameWorkAcessor.getSQLPanelAPI(_session, _plugin)).execute();
if (accessMethod.equalsIgnoreCase("gin") || accessMethod.equalsIgnoreCase("gist")) {
String dataQuery = getDataQuery(schema, sourceTableName, sourceColumnName);
_ok = true;
System.err.println(e.getMessage());
breakApartNewLines();
final JMenuItem menuItem = (JMenuItem)widget.getClientProperty(MENU);
dropTable(session, tableInfo);
chPrimary.setSelected(fd.IsPrimary());
ITableInfo tableInfo = getTableInfo(session, testTableName);
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
ToolTipManager.sharedInstance().registerComponent(getList());
}
String createSql = "create table " + testTableName
double sLen = 10 / Math.sqrt((a.x - c.x) * (a.x - c.x) + (a.y - c.y) * (a.y - c.y)) * zoom;
ToolTipManager.sharedInstance().unregisterComponent(getList());
task.run();
if (node.getChildCount() == 0)
public static final Unit UNIT_INCH = new Unit(s_stringMgr.getString("graph.inch"), 2.54);
gbc = new GridBagConstraints(0,8,2,1,1,1,GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH, new Insets(5,5,5,5), 0,0);
IWidget[] frames = WidgetUtils.getOpenNonToolWindows(getMainFrame().getDesktopContainer().getAllWidgets());
public void addSubFolder(Folder subFolder) throws IllegalArgumentException {
runSQL(session, new String[] { sql }, extractor);
columns = new String[] { uniqueIndexTestColumnName };
}
}
}
TableColumnInfo tempColumn =
String HINT = s_stringMgr.getString("OrderByClausePanel.hint");
columns = new String[] { indexTestColumnName };
private String _schema;
if (DialectFactory.isAxion(session.getMetaData())) {
private static final DaffodilDialectExt daffodilDialect = new DaffodilDialectExt();
JTextField homePathField = new JTextField(s_stringMgr.getString("GeneralPreferencesPanel.squirrelHomePath", homeDir));
String dropIndexSQL = dialect.getDropIndexSQL(tableName, indexName2, true, qualifier, prefs);
if (columnIndex > -1 && columnIndex < headersHolder.Length) {
public void addEditSQLListener(ActionListener listener) {}
char currentLetter = dataBuffer.Buffer[dataBuffer.Position];
FontMetrics fm = g.getFontMetrics();
/** A database user. */
btnCreateNewGraph = new JButton(s_stringMgr.getString("graph.btnCreateNewGraph"));
TableColumnInfo c2 = t2ColMap.get(columnName);
_viewer = viewer;
String createViewSql =
public void setCompareMenuEnabled(boolean enabled)
if (dialect.supportsSubSecondTimestamps()) {
boolean sameType = true;
if (_readClobs)
}
private final static ILogger log = LoggerController.createLogger(FirebirdManagerDataAccess.class);
String msg =
try {
* @param session
String releaseFilename = _util.getLocalReleaseFile().getAbsolutePath();
String ASC = "ASC";   //No I18N
SNAPSHOT
return false;
StringTemplate st = new StringTemplate(ST_ALTER_SEQUENCE_STYLE_ONE);
if (count++ > selectSQL.length()) {
if (evt.getType() == DownloadEventType.DOWNLOAD_COMPLETED)
_mnuOrderByName = new JCheckBoxMenuItem(s_stringMgr.getString("graph.orderyName"));
public Object getTransferData(DataFlavor flavor)
public static final int COLUMN_COMMENT_ALTER_TYPE = 0;
// "RENAME VIEW $oldObjectName$ TO $newObjectName$";
btnSave = new JButton(s_stringMgr.getString("graph.save"));
None
// String ST_CREATE_INDEX_STYLE_TWO =
// "ALTER TABLE $tableName$ " +
STABLE,
{
private int deleteAction = NO_ACTION;
String DOWNLOADING_UPDATES_MSG = s_stringMgr.getString("DownloadStatusEventHandler.downloadingUpdatesMsg");
URL url = _iou.constructHttpUrl(host, port, fileToGet);
if (DataTypeDate.getReadDateAsTimestamp()) {
String INFO_SEARCHING_FINISHED = stringManager.getString("changevalues.info.searching.finished");
for (String sql : sqls) {
showUpdateSummaryDialog(artifactStatusItems, installedVersion, currentVersion);
if (dataTypeObject != null) {
s_log.error(dirName + " directory (" + result.getAbsolutePath()
return;
IDataTypeComponent dataTypeObject = getDataTypeObject(null, colDef);
String fileText;
if (isPromptForDialect) {
runSQL(session, "insert into "+tableName+" values ({ts '2008-02-21 21:26:23.966'})");
pullDownUpdateFiles(artifactStatusList, new DownloadStatusEventHandler(this),
None
_currentChannelBean = currentChannelXmlBean;
registerColumnType(Types.VARCHAR, 3924, "varchar($l)");
String channelName = getDesiredChannel(settings);
return new String[] { dialect.getCreateTableSQL(tableName, columns, primaryKeys, prefs, qualifier) };
if (waitingForOk)
listener.setWaitingForOk(true);
private final String FILE_REPLACE_FLAG = "%f";
/**
Object[] initialValues = new Object[dbDefaultValues.length];
return false;
chkEnable = new JCheckBox(s_stringMgr.getString("syntax.enableAutoCorr"));
deleteOldFiles(dirPath, logBaseName);
private Frame createMainFrame() {
if (evt == null)
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
_ta.setWrapStyleWord(true);
String releaseFilename = _util.getLocalReleaseFile().getAbsolutePath();
if (create)
GUIUtils.processOnSwingEventThread(new Runnable()
for (int i = 0; i < _schemaDetails.length; i++)
_app.getActionCollection().setCurrentSession(null);
return;
_mnuRefreshAllTables = new JMenuItem(s_stringMgr.getString("graph.refreshAllTables"));
log.error(s_stringMgr.getString("DualProgressBarDialog.error.getdialog"), e);
String OBJECT_TAB_PLACEMENT = s_stringMgr.getString("generalSessionPropertiesPanel.objectTabs");
private JLabel lblResBackupFile = new JLabel();
return s_stringMgr.getString("DBCopyGlobalPreferencesTab.title");
if (settings.isRemoteUpdateSite())
_toString = s_stringMgr.getString("codecompletion.prefs.table.spWithParams");
radUseDefaultFormating = new JRadioButton(s_stringMgr.getString("TableExportCsvDlg.useDefaultFormating"));
addButton.setText(s_stringMgr.getString("mssql.add"));
String HINT = s_stringMgr.getString("oracle.diplayScriptDetails");
String LOADING_DATATYPES_MSG =
tm.addColumn(s_stringMgr.getString("oracle.diskReadsPerExec"));
String msg = s_stringMgr.getString("dataTypeBigDecimal.scaleEceeded", args);
return s_stringMgr.getString("TableTypesTab.hint");
_settings.setLastUpdateCheckTimeMillis("" + currentTimeMillis());
Utilities.sleep(120 * 1000L);
String channelName = getDesiredChannel(_settings, installedChannelBean);
} catch (SQLException ignore) {
final JCheckBox allDefaultsCheckbox = new JCheckBox(s_stringMgr.getString("mssql.allDefaults"));
String userSpecifiedOverride = System.getProperty("swing.defaultlaf");
colDef.setIsAutoIncrement(true);
return s_stringMgr.getString("IndexesTab.hint");
_mnuSaveGraph = new JMenuItem(s_stringMgr.getString("graph.saveGraph"));
String HINT = s_stringMgr.getString("mysql.hintGrants");
_scriptDatabaseCheckbox = new JCheckBox(s_stringMgr.getString("mssql.scriptDatabase"));
public boolean isDelete() {
String elapsedTime =
String HINT = s_stringMgr.getString("SequenceDetailsTab.hint");
String msg =
s_log.error(s_stringMgr.getString("exportconfig.errorWritingPrefs", USER_PREFS_FILE_NAME), ex);
String HINT = s_stringMgr.getString("firebird.triggerDetails");
truncateCheckBox = new JCheckBox(stringMgr.getString("PreferencesPanel.truncateTable"));
JOptionPane.showMessageDialog(m_ownerFrame, s_stringMgr.getString("userscript.selScriptToDel"));
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
private static boolean useJavaDefaultFormat = true;
* @see java.lang.Object#toString()
_chkAlwaysExecuteSql = new JCheckBox(s_stringMgr.getString("HibernateSQLPanel.Execute"));
String LOADING_PREFIX =
private static final String _nameColumnName =
s_stringMgr.getString("popupeditableIoPanel.errorGettingPath"),
JLabel lblName = new JLabel(s_stringMgr.getString("graph.name"));
{
if (_tableTypes.length > 0)
boolean hasDateComponent = (value.toString().indexOf("-") != -1);
{
bdesc = new BlobDescriptor(null, byteData, true, true, 0);
* @see java.lang.Object#toString()
String cbToolTipText =
final JCheckBox allUdfsCheckbox = new JCheckBox(s_stringMgr.getString("mssql.allUDFs"));
optSPWithoutParams = new JRadioButton(s_stringMgr.getString("codeCompletion.spWithoutParams"));
_generateCreateCheckbox = new JCheckBox(s_stringMgr.getString("mssql.genereateCreate"),true);
* @see java.lang.Object#toString()
String stringVersionMsg = s_stringMgr.getString("dateTypeTimestamp.stringVersion");
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
builder.addSeparator(stringMgr.getString("ExcelSettingsPanel.xlsSettings"), cc.xywh(1, y, 3, 1));
String STATUS_BAR_BACKGROUND_COLOR_BUTTON_LABEL =
}
_pluginLabel.setText(s_stringMgr.getString("SplashScreen.info.loadingfile") + filename);
setTitle(s_stringMgr.getString("TableExportCSVDlg.exportTitleNew"));
pm.setNote(getMessage("CopyProgressMonitor.analyzingTableMessage")+e.getTableName());
String EXCEPTION_MSG = s_stringMgr.getString("UpdateControllerImpl.exceptionMsg");
* @see java.lang.Object#toString()
JOptionPane.showMessageDialog(null, stringMgr.getString("CSVFileImporter.invalidDateFormat"));
String TITLE = s_stringMgr.getString("mysql.tabStatus");
String readClobsSizeString = DTProperties.get(thisClassName, "readClobsSize");
* @see java.lang.Object#toString()
return s_stringMgr.getString("DatabaseObjectInfoTab.hint");
return DialectUtils.getColumnDropSQL(tableName, columnName, qualifier, prefs, this);
s_stringMgr.getString("popupeditableIoPanel.cannotCreateTempFile", ex.getMessage()),
// i18n[dateTypeTimestamp.allowInexact=allow inexact format on input]
* @see java.lang.Object#toString()
private JCheckBox readdDateAsTimestampChk =
setLayout(new GridBagLayout());
readdDateAsTimestampChk.setSelected(readDateAsTimestamp);
TableColumnInfo newColumn =
DTProperties.put(thisClassName,
_mnuScriptDDL = new JMenuItem(s_stringMgr.getString("graph.scriptdd"));
f = FileWrapperImpl.createTempFile("test", "tmp");
* @see java.lang.Object#toString()
Types.BLOB,
false,
Types.CLOB,
DialectUtils.getMultiColNotNullSQL(colInfos, this, alterClause, false, result, qualifier, prefs);
// i18n[dataTypeBigDecimal.readContentsOnFirstLoad=Read contents when table is first loaded;]
registerColumnType(Types.DOUBLE, "float($p)");
_util.copyFile(_util.getInstalledSquirrelMainJarLocation(), _util.getCoreDownloadsDir());
if (thePlugin == null) {
// we could tell user here that export was canceled,
StringBuilder result = new StringBuilder();
boolean installed = as.isInstalled();
default:
final int numberToKeep = 3;
return s_stringMgr.getString("DataTypesTab.title");
private Thread eventDispatchThread = null;
if (childIndexST != null)
return null;
_session.showErrorMessage(s_stringMgr.getString("sqlval.noSql"));
String readClobsString = DTProperties.get(thisClassName, "readClobs");
private final JTextArea _ta;
String errorMsg =
setEnabled(false);
final StringBuilder sql = new StringBuilder();
btnOK = new JButton(s_stringMgr.getString("graph.btnOk"));
StringBuilder sql = new StringBuilder();
saveSQLHistory();
saveEditWhereColsInfo();
saveCellImportExportInfo();
setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("dataTypeOther.sqlOtherType")));
disableDoubleBuffering(componentToBePrinted);
STARTS_WITH (s_stringMgr.getString("SQLHistoryDlg.filterCboStartsWith")),
msgHandler.showMessage(msg);
String JDBCODBC_MESSAGE =
ret.addAll(insertPieces);
btnNew = new JButton(s_stringMgr.getString("graph.new"));
s_stringMgr.getString("popupeditableIoPanel.errorReadingFile", args),
String TABLE_NAME_LABEL =
* @see java.lang.Object#toString()
String UPDATE_DOWNLOAD_FAILED_TITLE =
String SHOW_VIEW_SOURCE = s_stringMgr.getString("DB2Plugin.showViewSource");
String LAF_WARNING =	s_stringMgr.getString("laf.warning");
String TABLE_NAME_LABEL =
_ANSIRadio = new JRadioButton(s_stringMgr.getString("mssql.windows"));
s_stringMgr.getString("popupeditableIoPanel.exportError6"),JOptionPane.ERROR_MESSAGE);
String msg = s_stringMgr.getString("graph.scriptPlugNeeded");
tm.addColumn(s_stringMgr.getString("oracle.parseCalla"));
String TYPE_MESSAGE = s_stringMgr.getString("DerbyDialect.typeMessage");
String msg = s_stringMgr.getString("exportconfig.xmlErrorWritingTo", file.getAbsolutePath());
s_stringMgr.getString("popupeditableIoPanel.exportError2"),
constToTablesNotInScript = new JCheckBox(s_stringMgr.getString("sqlscript.configYourMultiTableScriptConstr"));
super(session.getApplication().getMainFrame(), s_stringMgr.getString("sqlval.logon"), true);
String msg =
indicateNewStartupTask(splash, s_stringMgr.getString("Application.splash.loaddatatypeprops"));
JButton cancelButton = new JButton(s_stringMgr.getString("mssql.cancel"));
chkShowEdges = new JCheckBox(s_stringMgr.getString("graph.showZoomPaper"));
String ALL_TRANSLATIONS_LABEL = s_stringMgr.getString("UpdateSummaryTable.allTranslationsLabel");
boolean wholeBlobRead = false;
_mnuShowDDL = new JMenuItem(s_stringMgr.getString("graph.showddl"));
int opt = JOptionPane.showConfirmDialog(_session.getApplication().getMainFrame(), s_stringMgr.getString("HQLTabController.noConfigSelected"));
public FileEditorDropTargetListener(ISession session) {
s_stringMgr.getString("popupeditableIoPanel.selectImportDataFile"),
_session.showErrorMessage(s_stringMgr.getString("CreateTableOfCurrentSQLCommand.noQuery"));
ENDS_WITH (s_stringMgr.getString("SQLHistoryDlg.filterCboEndsWith")),
String ALL_PLUGINS_LABEL = s_stringMgr.getString("UpdateSummaryTable.allPluginsLabel");
chkDropTable = new JCheckBox(s_stringMgr.getString("sqlscript.dropIfExists"));
public static final Unit UNIT_CM = new Unit(s_stringMgr.getString("graph.cm"), 1);
return true;
ret.translate(viewBounds.x, viewBounds.y);
final JCheckBox autoRefresh = new JCheckBox(s_stringMgr.getString("oracle.auotRefresh2"), false);
s_log.debug(s_stringMgr.getString("AboutBoxDialog.creditspanelcreatetime")
s_stringMgr.getString("syntax.cols"),
return s_stringMgr.getString("SQLTab.hint");
String CHANGES_RECORDED_TITLE = s_stringMgr.getString("DownloadStatusEventHandler.changesRecordedTitle");
JOptionPane.showMessageDialog(session.getApplication().getMainFrame(), stringMgr.getString("ImportDataIntoTableExecutor.ioException"), stringMgr.getString("ImportDataIntoTableExecutor.error"), JOptionPane.ERROR_MESSAGE);
* @see java.lang.Object#toString()
String CONNECTION_FAILURE_DIALOG_MSG =
String dbName = JOptionPane.showInputDialog(s_stringMgr.getString("mysql.enterDbName"));
btnPrint.setToolTipText(s_stringMgr.getString("graph.printGraph"));
String cabtLabel =
s_log.error(s_stringMgr.getString("BaseListInternalFrame.error.execdoubleclick"), ex);
s_stringMgr.getString("xmlReformatter.xmlWarning5"),
s_stringMgr.getString("popupeditableIoPanel.importError2"),JOptionPane.ERROR_MESSAGE);
pnl.add(new JLabel(s_stringMgr.getString("sqlval.dbmsVersion"), JLabel.RIGHT), gbc);
String msg =
private JCheckBox statusBarBackgroundColorChk = new JCheckBox("");
s_log.debug(s_stringMgr.getString("AboutBoxDialog.aboutpanelcreatetime")
useTab = new JRadioButton(stringMgr.getString("CSVSettingsPanel.useTab"));
int res = JOptionPane.showConfirmDialog(_session.getApplication().getMainFrame(), s_stringMgr.getString("graph.delGraph"));
builder.add(new JLabel(stringMgr.getString("CSVSettingsPanel.inputFileEncoding")), cc.xywh(1, y, 3, 1));
String cbToolTipText =
try {
String title =
String TOOLBAR_BACKGROUND_COLOR_CHOOSER_DIALOG_TITLE =
String msg = s_stringMgr.getString("TableExportCsvController.noCommand");
_session.showMessage(s_stringMgr.getString("sqlscript.successCreate", sTable));
new FormatXmlBean(s_stringMgr.getString("graph.dina4"), 21.0, 29.7, false, false),
s_stringMgr.getString("popupeditableIoPanel.importWarning"), JOptionPane.YES_NO_OPTION);
_mnuRemoveGraph= new JMenuItem(s_stringMgr.getString("graph.removeGraph"));
String ADD_COLUMN_TITLE =
String SHOW_BUTTON_LABEL =
String HINT = s_stringMgr.getString("TriggerDetailsTab.hint");
m_lblStatus = new JLabel(s_stringMgr.getString("userscript.executing"));
String msg = s_stringMgr.getString("DBUtil.error.firebirdcommit");
JOptionPane.showMessageDialog(m_ownerFrame, s_stringMgr.getString("userscript.selClasspathToDel"));
private JCheckBox showAscii = null;
String minimumClause = "";
return s_stringMgr.getString("codeCompletion.PrefsTabTitle");
String LINE_COMMENT_LABEL = s_stringMgr.getString("PreferencesPanel.lineCommentLabel");
getContentPane().add(new JLabel(s_stringMgr.getString("graph.selGraphToAdd")), gbc);
return stringMgr.getString("DataImportGlobalPreferencesTab.hint");
JLabel lblWidth = new JLabel(s_stringMgr.getString("graph.width"));
_app.getMessageHandler().showMessage(s_stringMgr.getString("SchemaPropertiesController.cacheFilePath", params));
_btnGarbage.setToolTipText(s_stringMgr.getString("MemoryPanel.runGC"));
_mnuDbOrder = new JCheckBoxMenuItem(s_stringMgr.getString("graph.dbOrder"));
String bottomLabelText =
String missingClobDataMsg =
fileOptionsPanel.setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("mssql.fileOptions")));
JOptionPane.showMessageDialog(_dlg, s_stringMgr.getString("graph.invalidHeight"));
String errorMsg =
final StringBuilder sql = new StringBuilder();
String newbase = new String(dir + File.separator);
String TABLE_NAME_LABEL =
pnlEdit.add(new JLabel(s_stringMgr.getString("editextras.day")), gbc);
String AUTO_CHECK_FREQUENCY = s_stringMgr.getString("UpdatePreferencesPanel.autoCheckFrequency");
indicateNewStartupTask(splash, s_stringMgr.getString("Application.splash.loadcellselections"));
String columnName = null;
JButton okButton = new JButton(s_stringMgr.getString("mssql.ok"));
String LOADING_CATALOGS_MSG =
s_log.debug(s_stringMgr.getString("Application.info.jdbcwriter"));
String msg =
s_log.error(s_stringMgr.getString("CopyDriverAction.error.selectingwindow"), ex);
private RightLabel _typeDropLabel = new RightLabel(s_stringMgr.getString("dataTypeBigDecimal.read2"));
String HINT = s_stringMgr.getString("ViewSourceTab.display");
_session.showMessage(s_stringMgr.getString("codecompletion.function.mustEndWith"));
String CELL_ERROR_MSG = s_stringMgr.getString("PostgreSqlXmlTypeDataTypeComponent.cellErrorMsg");
String newName = JOptionPane.showInputDialog(_session.getApplication().getMainFrame(), s_stringMgr.getString("graph.newName"));
String msg =
s_stringMgr.getString("dataSetViewerTablePanel.conversionError"),
s_log.error(s_stringMgr.getString("HtmlViewerPanel.error.displayurl"), ex);
continue;
_session.showMessage(s_stringMgr.getString("codecompletion.function.needsTwoArgs"));
_toString = s_stringMgr.getString("LogPanel.logInfoLabel", params);
linesToPrint.add(lineToPrint);
_queryInfoPanel.load(rsds, rowCount, exInfo);
_util.extractZipFile(fileToCopy, installDir);
String INSTALL_OPTIONS_LABEL = s_stringMgr.getString("UpdateSummaryTable.installOptionsLabel");
String DEFAULT_VALUE_LABEL =
return s_stringMgr.getString("SupportedRefactoringsTab.hint");
Container pane = getContentPane();
String EDIT_BUTTON_LABEL =
* @see java.lang.Object#toString()
super(owner, s_stringMgr.getString("userscript.codeTemplate"), false);
// data was not fully read in before, so try to do that now
String READ_DERBY_CLOBS_FULLY_TT =
String SHOW_PROCEDURE_SOURCE = s_stringMgr.getString("MysqlPlugin.showProcedureSource");
String AVAILABLE_VERSION_PREFIX =
String msg = s_stringMgr.getString("i18n.notGeneratedInWorkDir", f.getPath());
if(JOptionPane.YES_OPTION ==
_chkAlwaysFormatSql = new JCheckBox(s_stringMgr.getString("HibernateSQLPanel.alwaysFormat"));
bdesc.setBlobRead(true);
return s_stringMgr.getString("ValidatorGlobalPreferencesTab.hint");
String SESSION_TIMEZONE_LABEL =
String SHOWSQL_BUTTON_LABEL =
_properties.put(s_stringMgr.getString("MappingRoot.driverName"), md.getDriverName());
String SQL_RESULTS = s_stringMgr.getString("generalSessionPropertiesPanel.sqlResults");
private class KeyTextHandler extends BaseKeyTextHandler {
String msg =
private static final String TITLE = s_stringMgr.getString("mysql.droppingDBs");
String HINT = s_stringMgr.getString("LockDetailsTab.hint");
s_log.error(s_stringMgr.getString("exportconfig.errorResolvingFile"), ex);
String HINT = s_stringMgr.getString("IndexDetailsTab.hint");
@Test
s_stringMgr.getString("SQLHistoryItemWrapper.lastUsed"),
_util.copyDir(_util.getSquirrelLibraryDir(), TRANSLATION_JAR_PREFIX_PATTERN, true,
s_log.error(s_stringMgr.getString("exportconfig.errorCreatingFile", USER_PREFS_FILE_NAME), ex);
String TRIGGER_HINT=s_stringMgr.getString("SybaseASEPlugin.triggerHint");
findAliases();
ret.add(new JLabel(s_stringMgr.getString("HibernatePanel.toObtainSessionFactPersUnit")), gbc);
result.append(column.getColumnName());
final String msg = s_stringMgr.getString("DialectUtils.error.getprimarykey", ti.getSimpleName());
return s_stringMgr.getString("TimeDateFunctionsTab.title");
String cbLabelStr =
chooser.setDialogTitle(s_stringMgr.getString("TableExportCsvController.fileChooserTitel"));
return s_stringMgr.getString("MemoryPanel.sessionInfo.toString3", params);
}
return s_stringMgr.getString("SupportedRefactoringsTab.title");
String HINT = s_stringMgr.getString("oracle.displayDetails");
* Returns true if data type may be edited in the popup, false if not.
whereColumnName = whereColumns[idx]; // myid
btnApplyNow = new JButton(s_stringMgr.getString("OracleAliasPrefsPanel.ApplyNow"));
String borderTitle = s_stringMgr.getString("RefactoringPreferencesPanel.borderTitle");
String msg = s_stringMgr.getString("TableExportCsvCommand.failedToExecuteCommand", params);
* @see java.lang.Object#toString()
String renameSQL = this.getColumnNameAlterSQL(newInfo, to, qualifier, prefs);
ProgressBarDialog.getDialog(session.getApplication().getMainFrame(), stringMgr.getString("ImportDataIntoTableExecutor.importingDataInto", table.getSimpleName()), false, null);
lblSeparator = new JLabel(s_stringMgr.getString("TableExportCsvDlg.columnSeparator"));
btnSaveImages.setToolTipText(s_stringMgr.getString("graph.saveGraphImagesToFile"));
lbFieldProp.setText(s_stringMgr.getString("mysql.fieldProps"));
private JCheckBox objectTreeBackgroundColorChk = new JCheckBox("");
String msg = s_stringMgr.getString("SQLResultExecuterPanel.canceleRequested");
_util.copyDir(_util.getSquirrelLibraryDir(), TRANSLATION_JAR_PREFIX_PATTERN, false,
_mnuShowQualifiedTableNames = new JCheckBoxMenuItem(s_stringMgr.getString("graph.showQualifiedTableNames"));
useChar = new JRadioButton(stringMgr.getString("CSVSettingsPanel.useChar"));
String PLAIN = s_stringMgr.getString("syntax.prefUsePlain");
s_log.error(s_stringMgr.getString("Application.error.loadcolsinfo"), ex);
// internal CLOB pointer
s_stringMgr.getString("userscript.scriptClass"),
JOptionPane.showMessageDialog(null, message, s_stringMgr.getString("baseDataSetViewerDestination.error"),
_mnuRefreshTable = new JMenuItem(s_stringMgr.getString("graph.refreshTable"));
String HINT = s_stringMgr.getString("oracle.displaySnstanceDetails");
String errMsg =
pnl.add(new JLabel(s_stringMgr.getString("sqlval.user"), JLabel.RIGHT), gbc);
ef.addExtension(s_stringMgr.getString("mmsql.textFiles"),"txt");
DerbyClobDescriptor cdesc;
FIXED_VALUE,
String msg = s_stringMgr.getString("i18n.executingCommand", commands.get(i));
int option = JOptionPane.showConfirmDialog(m_ownerFrame,  s_stringMgr.getString("userscript.confirmRemove", selScript.getName()));
s_log.error(s_stringMgr.getString("Application.error.savecolsinfo"), ex);
final String msg = s_stringMgr.getString("editextras.errorProcessingFormat", ex);
s_log.error(s_stringMgr.getString("ModifyDriverAction.error.selectingwindow"), ex);
s_log.error(s_stringMgr.getString("HelpViewerWindow.error.displaydocument"), ex);
if (Class.forName("net.sourceforge.squirrel_sql.fw.datasetviewer.IDataSetUpdateableModel").isAssignableFrom(this.getClass()))
s_stringMgr.getString("mysql.copyTable"));
try
s_stringMgr.getString("popupeditableIoPanel.fileError"),JOptionPane.ERROR_MESSAGE);
// CREATE SEQUENCE testAutoIncrementTable_myid_seq
for (final TableColumnInfo column : columns)
msg = s_stringMgr.getString("CancelStatementThread.cancelSucceededLate");
String msg =
String header = s_stringMgr.getString("DumpApplicationCommand.header",
JOptionPane.showMessageDialog(_plugin.getApplication().getMainFrame(), s_stringMgr.getString("HibernateController.NoConfigToRemove"));
colHeaders.add(s_stringMgr.getString("syntax.errAbrev"));
JOptionPane.showMessageDialog(_app.getMainFrame(), msg);
REG_EX (s_stringMgr.getString("SQLHistoryDlg.filterCboRegEx"));
s_stringMgr.getString("popupeditableIoPanel.exportError5"),JOptionPane.ERROR_MESSAGE);
s_stringMgr.getString("dateTypeTimestamp.defaultFormat") + "(" + ts + ")");
@Test (expected = IllegalArgumentException.class )
final StringBuilder tmp = new StringBuilder("\\" + dialect.openQuote());
String topLabelText =
String msg = s_stringMgr.getString("DBUtil.error.maptype", new String[]
StringTemplate st = new StringTemplate(ST_ADD_AUTO_INCREMENT_STYLE_TWO);
"MockResultSetMetaData.getColumnClassName: stub not yet implemented");
* @see java.lang.Object#toString()
}
_treeAPI.addDetailTab(DatabaseObjectType.VIEW,
return s_stringMgr.getString("MemoryPanel.sessionInfo.toString2", params);
con = new SQLConnection(getMockConnection(), null, sqlDriver);
IDatabaseObjectInfo dbinfo = new DatabaseObjectInfo(null, schemaName,
s_log.error(s_stringMgr.getString("CreateDriverAction.error.selectingwindow"), ex);
String GLOBAL_ERROR_FORMAT_INTEGER = stringManager.getString("global.error.format.integer");
super(mainFrame, s_stringMgr.getString("FactoryProviderDialog.title"), true);
String msg = s_stringMgr.getString("i18n.executingCommandFailed", e.getMessage());
tm.addColumn(s_stringMgr.getString("oracle.sorts"));
JOptionPane.showMessageDialog(_parent, s_stringMgr.getString("graph.noSel"));
_statusBar.setText(s_stringMgr.getString("HelpViewerWindow.pageloaded"));
_app.getMessageHandler().showMessage(s_stringMgr.getString("SchemaPropertiesController.cacheFilePathNotExists", params));
chkWithHeaders = new JCheckBox(s_stringMgr.getString("TableExportCsvDlg.withHeaders"));
whoScroll.setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("mssql.currentActivity")));
chooser.setDialogTitle(s_stringMgr.getString("TableExportCsvController.commandChooserTitel"));
s_stringMgr.getString("popupeditableIoPanel.exportError"),JOptionPane.ERROR_MESSAGE);
// "ADD CONSTRAINT $constraintName$ UNIQUE ($columnName; separator=\",\"$)";
String msg =
s_stringMgr.getString("xmlRefomatter.xmlWarning"), JOptionPane.WARNING_MESSAGE);
String LOADING_KEYWORDS_MSG =
expect(mockSession.getApplication()).andStubReturn(mockApplication);
ResultSet mockTableTypeResultSet = buildVarcharResultSetAsRows("mockTableTypeResultSet", new String[] {
OraclePreferenceBean bean2 = bean1.clone();
btnRemoveRows = new JButton(s_stringMgr.getString("syntax.removeRows"));
String fileNames[] = dir.list(fileFilter);
_toString = s_stringMgr.getString("codecompletion.prefs.table.spWithoutParams");
mockSquiirelLibDir = mockHelper.createMock("mockSquiirelLibDir", FileWrapper.class);
String msg = s_stringMgr.getString("dataSetViewerEditableTablePanel.deleteRosQuestion", rows.length);
f1.setLastModified(315550800000L);
JButton externalCommandButton = new JButton(s_stringMgr.getString("popupeditableIoPanel.execute34"));
int base = 16;	// default to hex
String TITLE = s_stringMgr.getString("UpdateSummaryDialog.title");
btnOpenConfigs.setToolTipText(s_stringMgr.getString("hibernate.HibernateTabPanel.openConfigs"));
private final String coreArtifactName = "aCoreArtifactName";
return stringMgr.getString("DataImportGlobalPreferencesTab.title");
ef.addExtension(s_stringMgr.getString("graphToFile.ImageFileSpec"),"jpg");
* Generate a JPanel containing controls that allow the user
if (!message.equals("Not yet implemented"))
s_stringMgr.getString("syntax.resWords"),
String msg =
s_stringMgr.getString("syntax.selColor"), new Color(origRGB));
JButton okBtn = new JButton(s_stringMgr.getString("sqlval.logonOk"));
String msg = s_stringMgr.getString("popupeditableIoPanel.fileDoesNotExist", fileNameField.getText());
return s_stringMgr.getString("MetaDataTab.hint");
linesToPrint.add(nextLine);
getContentPane().add(new JLabel(s_stringMgr.getString("sqlscript.enterNameOfTable")));
return s_stringMgr.getString("HibernateController.classpathEntryDesc");
String NETBEANS = s_stringMgr.getString("syntax.prefUseNetbeans");
String strQuoteSb = s_stringMgr.getString("HQLEntryPanelManager.quoteHQLsb");
s_stringMgr.getString("userscript.showInStandardMenues")
JOptionPane.showMessageDialog(_app.getMainFrame(), msg);
return true;
_properties.put(s_stringMgr.getString("MappingRoot.url"), md.getURL());
String TITLE = s_stringMgr.getString("UpdateManagerDialog.title");
s_stringMgr.getString("syntax.dataTypes"),
String msg =
while (i.hasNext()) {
super(owner, s_stringMgr.getString("cellDataPopup.valueofColumn", columnName), false);
String ENTRY_NO_CONDITION = stringManager.getString("changevalues.entry.no.condition");
builder.add(new JLabel(stringMgr.getString("CSVSettingsPanel.dateFormat")), cc.xywh(1, y, 3, 1));
return DialectUtils.getDropIndexSQL(indexName, cascade, qualifier, prefs, this);
super(owner, s_stringMgr.getString("sqlbookmark.editBookmark"), true);
tm.addColumn(s_stringMgr.getString("oracle.bufferPerExec"));
eventDispatchThread = Thread.currentThread();
lbCopyToNewTable.setText(s_stringMgr.getString("mysql.copyToNewTable"));
try {
final JCheckBox allViewsCheckbox = new JCheckBox(s_stringMgr.getString("mssql.allViews"));
String SHOW_TRIGGER_SOURCE = s_stringMgr.getString("DB2Plugin.showTriggerSource");
return s_stringMgr.getString("SQLScriptPreferencesTab.title");
String MODIFY_BUTTON_LABEL =
String LOCAL_PATH = s_stringMgr.getString("UpdatePreferencesPanel.localPathLabel");
while (dirExists) {
String SHOW_ERROR_OFFSET_LABEL =
None
mockResultSet = createMock(ResultSet.class);
eiPanel.add(new JLabel(s_stringMgr.getString("popupeditableIoPanel.useFile")), gbc);
index = 1;
_mnuShowConstraintNames = new JCheckBoxMenuItem(s_stringMgr.getString("graph.showConstr"));
final String msg =
tm.addColumn(s_stringMgr.getString("oracle.diskReads"));
public int compare(final Integer i1, final Integer i2)
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
if (classpath != null) {
* @see java.lang.Object#toString()
return s_stringMgr.getString("ObjectTreeTab.hint");
* @see java.lang.Object#toString()
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
* @see java.lang.Object#toString()
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
* @see java.lang.Object#toString()
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
public boolean canDoFileIO()
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
return s_stringMgr.getString("MemoryPanel.sessionInfo.toString1", params);
radConfiguration = new JRadioButton(s_stringMgr.getString("HibernatePanel.toObtainSessionFactConfiguration"));
_mnuAddChildTables = new JMenuItem(s_stringMgr.getString("graph.addChildTables"));
s_stringMgr.getString(
* @see java.lang.Object#toString()
String cbToolTipText =
expect(mockResultSetMetaData.getColumnType(1)).andReturn(Types.BIGINT);
super(parentFrame, s_stringMgr.getString("sqlscript.dlgCreatTableOfSql"), true);
String LOADING_TABLES_MSG =
msg = s_stringMgr.getString("DialectUtils.columnDefaultUnsupported", dialect.getDisplayName());
msg = s_stringMgr.getString("userscript.classNotFoundIn", params);
s_log.debug(s_stringMgr.getString("ThreadCheckingRepaintManager.workinwrongthread"), ex);
String STMT_SEP_LABEL = s_stringMgr.getString("PreferencesPanel.statementSeparatorLabel");
return stringMgr.getString("ImportFileDialog.tableColumn");
pnl.setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("sqlval.dbms")));
String msg =
s_stringMgr.getString("syntax.findNetbeansOnly");
s_log.error(s_stringMgr.getString("HtmlViewerPanel.error.processhyperlink"), ex);
String HINT = s_stringMgr.getString("oracle.displayTriggerColumns");
s_stringMgr.getString("xmlReformatter.seeOtherErrs", message),
TitledBorder brd = BorderFactory.createTitledBorder(s_stringMgr.getString("HibernatePanel.newFactoryClasspathBorder"));
JOptionPane.showMessageDialog(_plugin.getApplication().getMainFrame(), s_stringMgr.getString("HibernateController.noProviderMsg"));
s_stringMgr.getString("popupeditableIoPanel.executeError2"),JOptionPane.ERROR_MESSAGE);
String TITLE = s_stringMgr.getString("DropTableDialog.title");
_mnuAddParentTables = new JMenuItem(s_stringMgr.getString("graph.addParentTables"));
return s_stringMgr.getString("sqlval.descriptivename");
radSpecifySchemas= new JRadioButton(s_stringMgr.getString("SchemaPropertiesPanel.specifySchemas"));
String msg = s_stringMgr.getString("graph.graphSaved", params);
String SHOW_PROCEDURE_SOURCE = s_stringMgr.getString("DerbyPlugin.showProcedureSource");
String NAME_COLUMN = s_stringMgr.getString("resultSetMentaDataSet.propName");
String HINT = s_stringMgr.getString("mysql.shoeVariables");
s_log.error(s_stringMgr.getString("MappingRoot.connectionErr"), e);
String AT_STARTUP_LABEL = s_stringMgr.getString("UpdatePreferencesPanel.atStartupLabel");
JOptionPane.showMessageDialog(m_ownerFrame, s_stringMgr.getString("userscript.selScriptToExec"));
btnClassPathAdd = new JButton(s_stringMgr.getString("HibernatePanel.classPathAdd"));
perfScroll.setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("mssql.performace")));
String NAME_COLUMN = s_stringMgr.getString("hashtabledataset.key");
_scriptConstraintsCheckbox = new JCheckBox(s_stringMgr.getString("mssql.scriptPrimary"));
String TAB_TITLE = s_stringMgr.getString("laf.lf");
slider.setToolTipText(s_stringMgr.getString("mssql.delay", Integer.valueOf(slider.getValue())));
builder.addLabel(stringMgr.getString("PleaseWaitDialog.pleaseWait"), cc.xy(1, y));
return s_stringMgr.getString("NumericFunctionsTab.hint");
applicableScriptsText = s_stringMgr.getString("userscript.applicableTo", m_targets.getAll()[0].getTargetInfo());
s_stringMgr.getString("syntax.whiteSpace"),
s_stringMgr.getString("popupeditableIoPanel.exportError3"),JOptionPane.ERROR_MESSAGE);
String TEXT_LIMIT_LINE_VISIBLE = s_stringMgr.getString("syntax.textLimitLineVisible");
try {
radLoadAccessibleSchemasExceptSYS = new JRadioButton(s_stringMgr.getString("OracleAliasPrefsPanel.AccessibleButSys"));
String msg = s_stringMgr.getString("i18n.noNativeToAsciiOutDirNoDir");
new ColumnDisplayDefinition(DISPLAY_WIDTH, s_stringMgr.getString("HibernateAttribuiteDataSet.dbTableName")),
super(mainFrame, s_stringMgr.getString("sqlscript.configMultiTableScript"), true);
return s_stringMgr.getString("CatalogsTab.hint");
String NO_SOURCE_AVAILABLE =
private JCheckBox _loadSchemasCatalogsChk = new JCheckBox(s_stringMgr.getString("sessionPropertiesPanel.loadSchemasCatalogs"));
JCheckBox chkUseDriverProperties = new JCheckBox(s_stringMgr.getString("DriverPropertiesPanel.useDriverProperties"));
String RELEASE_FILE_DOWNLOAD_FAILED_MSG =
_session.showMessage(s_stringMgr.getString("sqlval.disconnected"));
super(s_stringMgr.getString("oracle.displaySnapshotDetails"));
s_stringMgr.getString("editWhereColsSheet.unableToEdit", ex));
radLoadAccessibleSchemasAndSYS = new JRadioButton(s_stringMgr.getString("OracleAliasPrefsPanel.AccessibleAndSys"));
String SHOWSQL_BUTTON_LABEL =
String msg =
String hint = s_stringMgr.getString("OraclePlugin.hint");
s_log.debug(s_stringMgr.getString("AboutBoxDialog.info.endmemtimer"));
String msg = s_stringMgr.getString("DBUtil.error.nocolumns", new String[]
* @see java.lang.Object#toString()
String msg = s_stringMgr.getString("i18n.noNativeToAsciiCommand");
_app.showErrorDialog(s_stringMgr.getString("exportconfig.errorSavingAlials"), ex);
JButton browseButton = new JButton(s_stringMgr.getString("popupeditableIoPanel.browse"));
return s_stringMgr.getString("OraclePrefsPanelController.hint");
chkScriptOnly = new JCheckBox(s_stringMgr.getString("sqlscript.scriptOnly"));
JLabel lblHeader = new JLabel(s_stringMgr.getString("OracleAliasPrefsPanel.header"));
_mnuAddTableForForeignKey.setText(s_stringMgr.getString("graph.addTableRefBy",ci.getName()));
final String msg = s_stringMgr.getString("DumpApplicationCommand.error.dumpingstatus");
JOptionPane.showMessageDialog(_dlg, s_stringMgr.getString("sqlbookmark.enterSql"));
JLabel lblConfig = new JLabel(s_stringMgr.getString("HibernatePanel.FactoryProvider"));
add(new MultipleLineLabel(s_stringMgr.getString("codeCompletion.prefsExplain")), gbc);
new JLabel(s_stringMgr.getString("editWhereColsSheet.limitSizeOfWhereClause")), gbc);
String AUTO_BORDER_LABEL = s_stringMgr.getString("UpdatePreferencesPanel.autoBorderLabel");
String INSTALLED_VERSION_PREFIX =
s_stringMgr.getString("popupeditableIoPanel.cannotAccessFile", fileNameField.getText()),
// i18n[DataSetUpdateableTableModelImpl.error.preparingdelete=While preparing for delete, saw exception:\n{0}]
s_log.error(s_stringMgr.getString("Application.error.savecolsinfo"), ex);
super(s_stringMgr.getString("dataSetViewerTablePanel.makeEditable"));
msg = s_stringMgr.getString("exportconfig.fileExistsButReadOnly", file.getAbsolutePath());
return s_stringMgr.getString("ColumnsTab.hint");
String tranferOptionsBorderLabel =
return s_stringMgr.getString("DataTypesTab.hint");
_mnuRenameGraph= new JMenuItem(s_stringMgr.getString("graph.renameGraph"));
String SHOW_VIEW_SOURCE = s_stringMgr.getString("PostgresPlugin.showViewSource");
String msg =
String msg =
String limitMsg =
pnl.setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("GeneralPreferencesPanel.paths")));
_lafPnl.setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("laf.broderLaf")));
return s_stringMgr.getString("mssql.monitorAsOf", _refreshDate);
super(parent, s_stringMgr.getString("syntax.configAutoCorr"));
return s_stringMgr.getString("ColumnPriviligesTab.title");
String TAB_HINT = s_stringMgr.getString("syntax.prefSyntaxHint");
s_stringMgr.getString("syntax.switchingNotSupported");
final FileExtensionFilter filter = new FileExtensionFilter(s_stringMgr.getString("laf.otmFiles"), new String[] {".otm"});
BACKUP_FAILED_MESSAGE = s_stringMgr.getString("PreLaunchHelperImpl.backupFailedMessage");
_mnuPksAndConstraintsOnTop = new JCheckBoxMenuItem(s_stringMgr.getString("graph.orderPksConstr"));
_chkOnTop = new JCheckBox(s_stringMgr.getString("resultFrame.stayOnTop"));
String SEARCHABLE_TYPE_SEARCHABLE = s_stringMgr.getString("DatabaseMetaData.searchableTypeSearchable");
_toString = s_stringMgr.getString("codecompletion.prefs.table.udfWithParams");
lbDefault.setText(s_stringMgr.getString("mysql.defaultValue"));
return s_stringMgr.getString("SystemFunctionsTab.title");
_scriptUsersAndRolesCheckbox = new JCheckBox(s_stringMgr.getString("mssql.scriptUsers"));
public static final SchemaTableUpdateWhatItem ALL = new SchemaTableUpdateWhatItem(s_stringMgr.getString("SchemaTableUpdateWhatItem.allObjects"));
String PROGRESS_DIALOG_TITLE = s_stringMgr.getString("DeleteTablesCommand.progressDialogTitle");
radComplete = new JRadioButton(s_stringMgr.getString("TableExportCsvDlg.exportCompleteTable"));
s_log.error(s_stringMgr.getString("ViewLogsSheet.error.clearlogcontents"), ex);
s_stringMgr.getString("popupeditableIoPanel.notWriteable"),
_app.getMessageHandler().showWarningMessage(s_stringMgr.getString("SchemaPropertiesController.cacheDeleteFailed", schemaCacheFile.getPath()));
IApplication mockApplication = mockHelper.createMock(IApplication.class);
JOptionPane.showMessageDialog(m_owner, s_stringMgr.getString("userscript.enterScriptClass"));
String cbToolTipText =
lblLineSeparator = new JLabel(s_stringMgr.getString("TableExportCsvDlg.lineSeparatorLabel"));
_mnuViewTableInObjectTree = new JMenuItem(s_stringMgr.getString("graph.viewTableInObjectTree"));
String stats =
setTitle(s_stringMgr.getString("graph.selGraph"));
_includeHeadersCheckbox = new JCheckBox(s_stringMgr.getString("mssql.includeHeaders"),false);
return s_stringMgr.getString("DBCopyGlobalPreferencesTab.hint");
generatePanel.setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("mssql.filesToGenerate")));
String cbLabelStr =
pnl.add(new JLabel(s_stringMgr.getString("sqlval.dbmsName"), JLabel.RIGHT), gbc);
s_stringMgr.getString("popupeditableIoPanel.fileOverwrite", canonicalFilePathName),
boolean supportsStoredProcs = false;
s_stringMgr.getString("popupeditableIoPanel.fileOpenError", args),
String C_LANGUAGE_PROC_MSG =
ParserLogger.log(s_stringMgr.getString("ErrorStream.oneerror"));
_mnuRemoveFoldingPoint = new JMenuItem(s_stringMgr.getString("graph.removeFoldingPoint"));
String TITLE = s_stringMgr.getString("editWhereColsSheet.editWhereColumns");
return s_stringMgr.getString("ConnectionStatusTab.hint");
new JCheckBox(s_stringMgr.getString("dataTypeString.limitReadOnly"));
eiPanel.add(new JLabel(s_stringMgr.getString("popupeditableIoPanel.replaceFile", FILE_REPLACE_FLAG)), gbc);
s_stringMgr.getString("dataTypeDate.useDefaultFormat", new java.sql.Date(new java.util.Date().getTime()).toString()));
_session.getApplication().showErrorDialog(s_stringMgr.getString("mysql.selectSingleTable"));
JDialog dialog = new JDialog(frame, s_stringMgr.getString("sqlbookmark.qureyParams"), true);
throw new PropertyVetoException(s_stringMgr.getString("AliasesListInternalFrame.error.ctrlF4key"), evt);
tm.addColumn(s_stringMgr.getString("oracle.sortsPerExec"));
String HINT = s_stringMgr.getString("firebird.domainDetails");
String EXEC_SQL_MSG =
String msg = s_stringMgr.getString("TableExportCsvController.invalidSeparator");
public static final String ROW_NUMBER_HEADER = s_stringMgr.getString("RowNumberTableColumn.rowNumber");
chkSeparatorTab = new JCheckBox(s_stringMgr.getString("TableExportCsvDlg.sepeartorTab"));
String msg = s_stringMgr.getString("DefaultDatabaseExpander.error.retrieveschemaprivs");
displayControlsPanel.add(new JLabel(s_stringMgr.getString("popupeditableIoPanel.showAscii")));
// i18n[dateTypeTimestamp.orLocaleDependend= or locale-dependent format:]
label = s_stringMgr.getString("ResultTab.rowCountLabel");
return s_stringMgr.getString("KeywordsTab.hint");
s_stringMgr.getString("dataTypeOther.readContentsWhenLoaded"));
String APPLY_LABEL = s_stringMgr.getString("UpdateSummaryDialog.applyLabel");
JButton applyButton = new JButton(s_stringMgr.getString("popupeditableIoPanel.applyFile"));
new JCheckBox(s_stringMgr.getString("dataTypeTime.useDefaultFormat", new Time(new java.util.Date().getTime()).toString()));
String CHANGES_RECORDED_TITLE = s_stringMgr.getString("UpdateControllerImpl.changesRecordedTitle");
radUserDefProvider = new JRadioButton(s_stringMgr.getString("HibernatePanel.toObtainSessionFactFactoryProvider"));
builder.add(new JLabel(stringMgr.getString("ExcelSettingsPanel.sheetName")), cc.xy(1, y));
_extendedPropsCheckbox = new JCheckBox(s_stringMgr.getString("mssql.extProps"),false);
String msg =
s_stringMgr.getString("popupeditableIoPanel.noExportFile"),
return s_stringMgr.getString("DriversList.tooltiptext");
_toString = s_stringMgr.getString("SchemaTableCboItem.schemaID.dontLoad");
_btnLastLog.setToolTipText(s_stringMgr.getString("LogPanel.viewLastLog"));
msg = s_stringMgr.getString("userscript.classNotFound", m_dlg.txtScriptClass.getText());
_oneFileRadio = new JRadioButton(s_stringMgr.getString("mssql.oneFile"),true);
String hint = s_stringMgr.getString("SQLPanel.copylastbutton.hint");
String SCHEMA_PREFIX = s_stringMgr.getString("sessionPropertiesPanel.schemaPrefix");
String msg = s_stringMgr.getString("TableExportCsvCommand.failedToWriteFile", params);
JLabel lblUnit = new JLabel(s_stringMgr.getString("graph.unit"));
new JLabel(s_stringMgr.getString("editWhereColsSheet.shouldIncludePKs")), gbc);
_session.showMessage(s_stringMgr.getString("sqlval.connected"));
String borderTitle = s_stringMgr.getString("SQLScriptPreferencesPanel.borderTitle");
optUDFWithoutParams = new JRadioButton(s_stringMgr.getString("codeCompletion.UDFWithoutParams"));
super(owner, s_stringMgr.getString("editextras.escapeDate"));
String EDIT_BUTTON_LABEL =
radFormatCSV = new JRadioButton(s_stringMgr.getString("TableExportCsvDlg.formatCSV"));
JButton cancelButton = new JButton(s_stringMgr.getString("cellDataPopup.cancel"));
String cbLabelStr =
String hint = s_stringMgr.getString("SQLPanel.openSqlHistory.hint");
JOptionPane.showMessageDialog(_dlg, s_stringMgr.getString("sqlbookmark.enterName"));
String UPDATE_CHECK_FAILED_TITLE = s_stringMgr.getString("UpdateControllerImpl.updateCheckFailedTitle");
JOptionPane.showMessageDialog(_dlg, s_stringMgr.getString("graph.invalidNumberFormat"));
String TITLE = s_stringMgr.getString("oracle.sessionStatistics");
return s_stringMgr.getString("SystemFunctionsTab.hint");
s_stringMgr.getString("xmlRefomatter.noXml"),
msg = s_stringMgr.getString("SQLResultExecuterPanel.rowsSelected",
registerColumnType(-8, "integer");
String msg = s_stringMgr.getString("HelpViewerWindow.error.congen");
INSTALL_UPDATES_MESSAGE = s_stringMgr.getString("PreLaunchHelperImpl.installUpdatesMessage");
s_log.debug(s_stringMgr.getString("Application.info.setjdbcdebuglogsuccess"));
_nodeUserMarks = new DefaultMutableTreeNode(s_stringMgr.getString("sqlbookmark.nodeUserMarks"));
_mnuScriptTable = new JMenuItem(s_stringMgr.getString("graph.scriptTable"));
tm.addColumn(s_stringMgr.getString("oracle.firstLoadTime"));
final String msg = s_stringMgr.getString("editextras.convertStringBufErr", ex);
String msg =
_session.showMessage(s_stringMgr.getString("graph.graphRemoved", params));
s_log.error(s_stringMgr.getString("Application.error.showhelpwindow"), ex);
m_lblStatus.setText(s_stringMgr.getString("userscript.scriptCompleted"));
String TITLE = s_stringMgr.getString("mysql.grants");
return s_stringMgr.getString("mssql.activity");
chkHideScrollBars = new JCheckBox(s_stringMgr.getString("graph.hideScrollBars"));
return s_stringMgr.getString("graph.rightClickTable");
String VALUE_COLUMN = s_stringMgr.getString("resultSetMentaDataSet.val");
None
_btnViewLogs.setToolTipText(s_stringMgr.getString("LogPanel.openLogs"));
tm.addColumn(s_stringMgr.getString("oracle.rowsPerExec"));
_nodeSquirrelMarks = new DefaultMutableTreeNode(s_stringMgr.getString("sqlbookmark.nodeSquirrelMarks"));
_scriptPermissionsCheckbox = new JCheckBox(s_stringMgr.getString("mssql.scriptPermission"));
return s_stringMgr.getString("TimeDateFunctionsTab.hint");
throw new PropertyVetoException(s_stringMgr.getString("DriversListInternalFrame.error.ctrlF4key"), evt);
_OEMRadio = new JRadioButton(s_stringMgr.getString("mssql.msdos"));
String PREFS_HINT = s_stringMgr.getString("DerbyPlugin.prefsHint");
fc.setDialogTitle(s_stringMgr.getString("graphToFile.fileChooserTitle"));
title = s_stringMgr.getString("LogPanel.titleError");
String msg = s_stringMgr.getString("exportconfig.ioErrorWritingTo", file.getAbsolutePath());
String cbLabelStr =
final String msg = s_stringMgr.getString("DumpApplicationCommand.error.dumpingsystemprops");
String msg = s_stringMgr.getString("DBUtil.info.bindclobmem", Integer.valueOf(clobValue.length()));
String HIDE_RECYCLE_BIN_CB_TT =
String PRIMARY_KEY_TITLE =
String HIDE_RECYCLE_BIN_CB_LABEL =
_mnuAddTableForForeignKey.setText(s_stringMgr.getString("graph.addTableRefByNoHit"));
tm.addColumn(s_stringMgr.getString("oracle.parseSchema"));
s_log.error(s_stringMgr.getString("Application.error.setlaf"), ex);
builder.addLabel(stringMgr.getString("sqlparam.quoteValues"), cc.xy(1, y));
String STATUS_LABEL_SUCCESS_MSG = s_stringMgr.getString("UpdatePreferencesPanel.statusLableSuccessMsg");
JOptionPane.showMessageDialog(_dlg, s_stringMgr.getString("sqlbookmark.enterDescription"));
radUseGlobalPrefsFormating = new JRadioButton(s_stringMgr.getString("TableExportCsvDlg.useGlobalPrefsFormatingExcel"));
String ENABLE_AUTO_UPDATE = s_stringMgr.getString("UpdatePreferencesPanel.enableAutoUpdate");
String READ_DERBY_CLOBS_FULLY_LABEL =
lbTableName.setText(s_stringMgr.getString("mysql.tableNamelbl"));
schemaInfoCacheUnderTest.clearTables(testCatalog, testSchema, ti.getSimpleName(),
radLoadAllAndCacheNone = new JRadioButton(s_stringMgr.getString("SchemaPropertiesPanel.loadAllAndCacheNone"));
String TITLE = s_stringMgr.getString("favs.savedQueries");
removeButton.setText(s_stringMgr.getString("mssql.remove"));
_treeAPI.addDetailTab(DatabaseObjectType.VIEW,
String CELL_ERROR_MSG = s_stringMgr.getString("OracleXmlTypeDataTypeComponent.cellErrorMsg");
s_stringMgr.getString("syntax.selColor2"), new Color(origRGB));
gbc = new GridBagConstraints(1, 1, 1, 1, 0, 0, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new Insets(0, 0, 5, 5), 0, 0);
s_stringMgr.getString("popupeditableIoPanel.noFile"),JOptionPane.ERROR_MESSAGE);
a.put("Application-Version", argMap.get(VERSION_KEY));
optUDFWithParams = new JRadioButton(s_stringMgr.getString("codeCompletion.UDFWithParams"));
String PRIMARY_KEY_NAME_LABEL =
_plugin.getApplication().getMessageHandler().showMessage(s_stringMgr.getString("FactoryProviderController.fileCreated", javaFile));
new FormatXmlBean(s_stringMgr.getString("graph.dina3"), 29.7, 42.0, false, false),
return s_stringMgr.getString("TableTypesTab.title");
URL[] urls = new URL[lafUrls.size()];
private static String DEFAULT_MESSAGE = s_stringMgr.getString("xmlRefomatter.unexpectedProblem");
Class<?> lafClass = null;
String msg = s_stringMgr.getString("DBUtil.error.tablenotfound", new String[]
String CHANGES_RECORDED_MSG = s_stringMgr.getString("UpdateControllerImpl.changesRecordedMsg");
String SITE_TYPE_LABEL = s_stringMgr.getString("UpdatePreferencesPanel.siteTypeLabel");
new FontButton(s_stringMgr.getString("laf.menus"), _menuFontLbl, _prefs.getMenuFontInfo());
_UnicodeRadio = new JRadioButton(s_stringMgr.getString("mssql.unicode"),true);
JOptionPane.showMessageDialog(_dlg, s_stringMgr.getString("graph.invalidName"));
btnAddRow = new JButton(s_stringMgr.getString("syntax.addRow"));
// CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name
String HINT = s_stringMgr.getString("mysql.hintTabStatus");
String NOT_AVAILABLE_MSG =
JLabel lblHeight = new JLabel(s_stringMgr.getString("graph.height"));
String title =
s_stringMgr.getString(
tab.addTab(s_stringMgr.getString("userscript.dlgTabecp"), createClasspathPanel());
String msg =
String TITLE = s_stringMgr.getString("mysql.processes");
// The -1 says to ignore the last arg and use the contents of the values array
String msg = s_stringMgr.getString("xmlRefomatter.malformedXml", args);
String HINT = s_stringMgr.getString("oracle.displaysSequenceDetails");
colHeaders.add(s_stringMgr.getString("syntax.corExt"));
JButton refreshButton = new JButton(s_stringMgr.getString("mssql.refreshNow"));
errorDialog.setTitle(s_stringMgr.getString("MemoryPanel.statusDialogTitle"));
int expectedColDefIndex = 0;
final JCheckBox allProceduresCheckbox = new JCheckBox(s_stringMgr.getString("mssql.allSps"));
super(mainFrame, s_stringMgr.getString("SQLHistoryDlg.title", sqlPanelParentFrameName), false);
importData(file);
private JComboBox externalCommandCombo;
prefs.setUpdateRefAction(true);
return sp;
if (_session.getSQLConnection().getSQLMetaData().supportsCatalogs())
if (_session.getApplication().getSquirrelPreferences().getSelectOnRightMouseClick()) {
int ret = JOptionPane.showConfirmDialog(_app.getMainFrame(), s_stringMgr.getString("sqlbookmark.deleteConfirm"));
final boolean shareSQLHistory = _shareSQLHistoryChk.isSelected();
return s_stringMgr.getString("ContentsTab.hint");
catch (Throwable th)
final DatabaseObjectType dboType = node.getDatabaseObjectType();
if (_mode == DROP_COLUMN_MODE
_comp = new DataSetScrollingPanel(getDestinationClassName(), modelReference);
final String catalogName = parentDbinfo.getSimpleName();
String TITLE = s_stringMgr.getString("mysql.openTables");
setFocusable(false);
if (dataType == Types.CLOB || dataType == Types.BLOB) { return Integer.MAX_VALUE; // 2GB (2^32)
default:
pseudoColumn = "";
final ISession session = getSession();
None
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
}
super(s_stringMgr.getString("HelpViewerWindow.title"));
if(null == value || 0 == value.trim().length())
SortedSet<Object> initialUseColsSet = new TreeSet<Object>( );
for (int i=0; i<useColsModel.getSize(); i++) {
// conditions in the current DB
_schemaInfoCache.clearTables(doi.getCatalogName(), null, null, null);
HashMap<String, String> h = new HashMap<String, String>(colList.size());
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
* Will re-read all table data into the cache.
Insets defaultInsets = gbc.insets;
char u1 = toUpperCase(c1);
String hint = s_stringMgr.getString("SybaseASEPlugin.hint");
// "CREATE VIEW $viewName$ " +
String AND = "AND";                 // No I18N
JLabel lblSchemaTableTitle = new JLabel(s_stringMgr.getString("SchemaPropertiesPanel.schemaTableTitle"));
notUseColsPanel.add(new JLabel(s_stringMgr.getString("editWhereColsPanel.notUseColumns")), BorderLayout.NORTH);
_tabResult_code.addTab(s_stringMgr.getString("HibernateSQLPanel.result"), resultExecuterPanel);
s_log.debug(s_stringMgr.getString("Application.info.jdbcwritersuccess"));
pnl.setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("sqlval.loOnAs")));
lenient = true;	// set to allow less stringent input
localeFormat =DateFormat.SHORT;	// set to use the Java default
String PROMPT_TO_DOWNLOAD_AVAILABLE_UPDATES_MSG =
JOptionPane.showMessageDialog(this,
ParserLogger.log(s_stringMgr.getString("ErrorStream.noerrors"));
_titleLbl.setText(title + ": " + _objectInfo.getSimpleName());
reInitListLater();
final String templateStr =
builder.addGridded(_closeBtn);
startIndex = 1;
String THEMEPACK_LOC = s_stringMgr.getString("laf.themePacLoc");
if (operator.equals(WhereClauseSubPanelI18n.IN)
Dimension tableDim = table.getPreferredSize();
private final String TEMP_FILE_FLAG = "<temp file>";
s = s_stringMgr.getString("ErrorStream.error.semantic",
JOptionPane.showMessageDialog(this,
// We have done everything we can prior to this point
// "CREATE $unique$ $storageOption$ INDEX $indexName$ " +
String TAB_TITLE = s_stringMgr.getString("laf.tabTitle");
map.remove(tableColumnName);
chkExecCommand = new JCheckBox(s_stringMgr.getString("TableExportCsvDlg.executeCommand"));
for (Iterator<LookAndFeelInfo> it = _lafsByName.values().iterator(); it.hasNext();)
return s_stringMgr.getString("ValidatorGlobalPreferencesTab.title");
String ORDER_BY_CLAUSE =
final List<URL> lafUrls = new ArrayList<URL>();
* On input from the DB, read the data from the ResultSet into the
// figure out which column the user clicked on
pnl.setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("laf.tabFonts")));
DerbyClobDescriptor cdesc;
SwingUtilities.invokeLater(new Runnable()
// "CREATE VIEW $viewName$ " +
title = s_stringMgr.getString("userscript.execOn", m_targets.getAll()[0].getTargetInfo());
s_stringMgr.getString("popupeditableIoPanel.overwriteWarning"), JOptionPane.YES_NO_OPTION);
_message = s_stringMgr.getString("xmlReformatter.malformedXmlAt", xml.substring(pos, pos + lengthToPrint));
CellImportExportInfoSaver.getInstance().save(
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
private JCheckBox useJavaDefaultFormatChk = new JCheckBox(
s_stringMgr.getString("popupeditableIoPanel.fileOpenErrorHeader"),JOptionPane.ERROR_MESSAGE);
return wholeClobRead((ClobDescriptor)originalValue);
final StringBuilder sql = new StringBuilder();
private IDataTypeComponent _dataTypeObject;
whereClauseUsageGroup.add(doNotUseButton);
add(new JLabel(s_stringMgr.getString("dateTypeTimestamp.generateWhereClause")), gbc);
return wholeClobRead((ClobDescriptor)originalValue);
// checkbox for Java default/non-default format
new FontButton(s_stringMgr.getString("laf.other"), _otherFontLbl, _prefs.getOtherFontInfo());
transient private ButtonModel radioButtonModels[] = {
String ORDER_DIRECTION =
titles.add(s_stringMgr.getString("DumpApplicationCommand.title.systemprops"));
lenientChk.setSelected(lenient);
private static final String NOT_EXPECTED_STR =
private JRadioButton doNotUseButton =
String TEST_LABEL = s_stringMgr.getString("UpdatePreferencesPanel.testLabel");
new FontButton(s_stringMgr.getString("laf.statusBars"), _statusBarFontLbl, _prefs.getStatusBarFontInfo());
gbc.gridx = 0;
default: s = s_stringMgr.getString("ErrorStream.error.syntax",
None
s_log.debug(s_stringMgr.getString("AboutBoxDialog.info.startmemtime"));
return s_stringMgr.getString("ColumnPriviligesTab.hint");
dataTypeComponent = getGenericDataType(table, colDef);
_separateFilesRadio = new JRadioButton(s_stringMgr.getString("mssql.oneFilePerObject"));
* Retrieve the schema information object for this session.
if (limitDataRead == true && _limitRead == true
while (true)
setTitle(s_stringMgr.getString("graphToFile.title"));
{
// "CREATE SEQUENCE $sequenceName$ $startWith$ " +
s_stringMgr.getString("popupeditableIoPanel.exportError100"),JOptionPane.ERROR_MESSAGE);
ret.tooltip = s_stringMgr.getString("MemoryPanel.gcStatusToolTip", new Integer(ret.numSessAwaitingGC));
_tabObjectsHql.add(s_stringMgr.getString("HQLTabPanel.mappedObjects"), mappedObjectComp);
optConstAndIndAtEnd = new JRadioButton(s_stringMgr.getString("sqlscript.configYourMultiTableScriptIxAtEnd"));
None
displayControlsPanel.add(new JLabel(s_stringMgr.getString("popupeditableIoPanel.numberBase")));
rdStructureData.setText(s_stringMgr.getString("mysql.structureAndData"));
String msg =
String MAIN_TAB_PLACEMENT = s_stringMgr.getString("generalSessionPropertiesPanel.mainTabs");
// "ALTER TABLE $childTableName$ " +
final StringBuilder sql = new StringBuilder();
StringTemplate st = new StringTemplate(ST_CREATE_SEQUENCE_STYLE_ONE);
table = getStatement().getTable();
StringTemplate st = new StringTemplate(ST_CREATE_INDEX_STYLE_TWO);
if (column.isNullable().equals("NO"))
public SequenceDetailsTab()
if (!containsTable(selectedTableInfos, pkTableName))
useJavaDefaultFormat =true;	// set to use the Java default
return s_stringMgr.getString("HQLTabController.hint");
// "ALTER TABLE $childTableName$ " +
pnl.add(new JLabel(s_stringMgr.getString("sqlval.technologyVersion"), JLabel.RIGHT), gbc);
addButton.setMnemonic("A".charAt(0));
StringTemplate st = new StringTemplate(ST_CREATE_SEQUENCE_STYLE_TWO);
_mnuScriptAllTables = new JMenuItem(s_stringMgr.getString("graph.scriptAllTables"));
Label lbl = new Label(s_stringMgr.getString("sqlscript.configYourMultiTableScript"));
if (dataType == Types.FLOAT)
String TAB_HINT = s_stringMgr.getString("laf.settings");
pnl.setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("syntax.styles")));
private boolean isOther(int position)
_convertToSQL.putValue(AbstractAction.SHORT_DESCRIPTION,  s_stringMgr.getString("hibernate.hqlToSqlShort"));
// "ADD CONSTRAINT $constraintName$ UNIQUE ($columnName; separator=\",\"$)";
super(s_stringMgr.getString("popupEditableIoPanel.wrapLines"));
return s_stringMgr.getString("RowIDTab.hint");
try
getContentPane().add(new JLabel(s_stringMgr.getString("AliasPropertiesInternalFrame.title", title)), gbc);
JOptionPane.showMessageDialog(m_owner, s_stringMgr.getString("userscript.enterScriptName"));
GUIUtils.processOnSwingEventThread(new Runnable()
registerColumnType(Types.BIT, "bool");
new ColumnDisplayDefinition(DISPLAY_WIDTH, s_stringMgr.getString("HibernateAttribuiteDataSet.attrClassName")),
getContentPane().add(new JLabel(s_stringMgr.getString("TableExportCsvDlg.exportCsvFile")), gbc);
if (cdesc != null && cdesc.getData() != null
String CANCEL_SQL_MSG =
if (placement == AbovePreferred && updatedPlacement == null)
_app.showErrorDialog(s_stringMgr.getString("exportconfig.errorSavingAliases"), ex);
String SHOW_TRIGGER_SOURCE = s_stringMgr.getString("MysqlPlugin.showTriggerSource");
chAllFields.setText(s_stringMgr.getString("mysql.withAllFields"));
suggestColumnsIgnoreCase = new JCheckBox(stringMgr.getString("ImportFileDialog.suggestColumnsIgnoreCase"));
String msg =
return 0;
StringTemplate st = null;
add(new JLabel(s_stringMgr.getString("codeCompletion.prefixConfig")), gbc);
final String templateStr = ST_CREATE_SEQUENCE_STYLE_TWO;
// "$increment$ $startWith$ $minimum$ $maximum$ $cache$ $cycle$";
return genericDialect;
_mnuAddFoldingPoint = new JMenuItem(s_stringMgr.getString("graph.addFoldingPoint"));
_session.showMessage(s_stringMgr.getString("codecompletion.unknowntable", table));
catch (Throwable th)
Collections.sort(columnData, new DataSorter());
return false;
String incrementNotSupported = null;
* Panel to display the stack trace in.
if (!_stopExecution) {
catch (Throwable th)
s_stringMgr.getString("dataSetViewerEditableTablePanel.noRowsDeleted", message),
if (!props[i].getValue().equals(_session.getSQLConnection().getCatalog())) {
if (super.getItemAt(0) instanceof NoCatalogPlaceHolder) {
StringBuilder result = new StringBuilder();
final StringTemplate st = new StringTemplate(ST_DROP_VIEW_STYLE_ONE);
String SEARCHABLE_TYPE_PRED_CHAR = s_stringMgr.getString("DatabaseMetaData.searchableTypePredChar");
s_log.info("setInformixCatalog: unable to drop procedure mode_decode: " + e.getMessage(), e);
super(s_stringMgr.getString("oracle.showTriggerSource"));
if (isMSSQLorSYBASE && !hasGuest) {
final StringBuilder result = new StringBuilder();
_mnuAddAllRelatedTables = new JMenuItem(s_stringMgr.getString("graph.addRelTables"));
buf.append("/* WILL NOT EXECUTE USER-DEFINED FUNCTION ");
msgHandler.showMessage(s_stringMgr.getString("SchemaInfoCacheSerializer.endStore", params));
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("dateTypeTimestamp.typeTimestamp")));
public String fileName;
RESTORE_FROM_BACKUP_TITLE = s_stringMgr.getString("PreLaunchHelperImpl.restoreFromBackupTitle");
String msg = s_stringMgr.getString("exportconfig.fileSavedTo", params);
JButton updateButton = new JButton(s_stringMgr.getString("cellDataPopUp.updateData"));
None
rs = stmt.getResultSet();
String cbLabelStr =
_app.getActionCollection().setCurrentSession(null);
// Logger for this class
if (_data == null)
LookAndFeel curLaf = UIManager.getLookAndFeel();
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
s_log.error(
String MODIFY_COLUMN_TITLE =
throw new DataSetException(ex);
if (defValue != null &&  defValue.length() > 0) {
colJdbcType = DBUtil.replaceOtherDataType(colInfo, sourceSession);
SQLUtilities.closeResultSet(rs);
return s_stringMgr.getString("RefactoringPreferencesTab.hint");
textToUnquote = "\n" + textToUnquote + "\n";
int size = getColumnLength(sourceSession, colInfo, sourceTableName);
tm.addColumn(s_stringMgr.getString("oracle.sortsPerExec"));
if (_refreshTimer.isRunning())
None
c.insets = new Insets(10,25,0,0);
if (DerbyClobDataTypeComponent.this._isNullable) {
DBUtil.getTableCount(sourceSession,
objectsLabel.setText(s_stringMgr.getString("mssql.toScript"));
StringBuffer tableList = new StringBuffer(512);
if (!conn.getCatalog().equals(ti.getCatalogName()))
return;
diff.setCol1Exists(false);
final FolderNode root = new FolderNode(s_stringMgr.getString("HelpViewerWindow.help"));
s_stringMgr.getString("popupeditableIoPanel.exportError8"),JOptionPane.ERROR_MESSAGE);
final JCheckBox allUddtCheckbox = new JCheckBox(s_stringMgr.getString("mssql.allUserDef"));
return false;
_app.getMessageHandler().showErrorMessage(s_stringMgr.getString("sqlbookmark.noRunSelection"));
None
if (parameters.size() > 0) {
cellWidth+=2;
_refreshTimer.setDelay(slider.getValue() * 1000);
_refreshTimer = new Timer(_frequency.getValue(),new ActionListener() {
String msg =
String rowCountErrorMessage = "";
objectsLabel.setText("Objects to be scripted:");
buf.append("\n\n");
ret.addAll(ciAttrs);
_mnuClose = new JMenuItem(s_stringMgr.getString("graph.close"));
s_stringMgr.getString("popupeditableIoPanel.exportError7"),JOptionPane.ERROR_MESSAGE);
return true;
CallableStatement c = _session.getSQLConnection().getConnection().prepareCall("{call dbms_output.get_line(?, ?)}");
JOptionPane.showMessageDialog(m_ownerFrame, s_stringMgr.getString("userscript.selScriptToEdit"));
_app.getActionCollection().setCurrentSession(newSession);
try
String msg = s_stringMgr.getString("DBUtil.info.executequery", sql);
setAllButtonEnabled(false);
frame.toFront();
KeyStroke escapeStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
private MainFrame _mainFrame;
String OSTER = s_stringMgr.getString("syntax.prefUseOster");
LoggerController.createLogger(NewSessionPropertiesSheet.class);
Object value = values[i];
* Returns the number of children of <code>node</code>.
if (sourceColumn.isNullAllowed() == 0)
}
public static final int ANNOTATION_ID = INVALID_COMMENT_END_ID + 1;
StoreError(n, line, col, s_stringMgr.getString("parserthread.undefinedTable"));
if (statementCount == processedStatementCount) {
ITableInfo[] tables = _session.getSchemaInfo().getITableInfos(catalog,null,new ObjFilterMatcher(),new String[] { "TABLE" });
JOptionPane.showMessageDialog(null,
//IProcedureInfo[] procs = metaData.getProcedures(catalog,null,null);
_generateDropCheckbox = new JCheckBox(s_stringMgr.getString("mssql.generateDrop"),true);
ITableInfo[] views = _session.getSchemaInfo().getITableInfos(catalog,null,new ObjFilterMatcher(),new String[] { "VIEW" });
try { runSQL(session, sql); } catch (Exception e) {}
String sequenceName = column.getColumnName() + "_AUTOINC_SEQ";
found = true;
if (DialectFactory.isMySQL5(session.getMetaData())
IQueryTokenizer qt1 = sessionUnderTest.getQueryTokenizer();
// ON table (col [, col …]);
StringTemplate st = new StringTemplate("SET GENERATOR $generatorName$ TO $value$");
session.getSchemaInfo().getStoredProceduresInfos(catalogName, schemaName, new ObjFilterMatcher(session.getProperties()));
String UPDATE_SITE_BORDER_LABEL = s_stringMgr.getString("UpdatePreferencesPanel.updateSiteBorderLabel");
String SHOW_PROCEDURE_SOURCE = s_stringMgr.getString("DB2Plugin.showProcedureSource");
public final void testGetITableInfosForReadOnly() {
IUDTInfo[] udts = metaData.getUDTs(catalog,null,null,null);
templateLabel.setText(s_stringMgr.getString("mssql.scriptTemplate"));
private String defaultCatalog = "";
/** Internationalized strings for this class. */
None
if (colNames.get(colDefs[i].getLabel()) == null)
if (dir.exists()) {
_mainFrame.setEnabledDriversMenu(true);
if (widget instanceof ISessionWidget)
CellComponentFactory.setPreparedStatementValue(
useCustomQTCheckBox = new JCheckBox(i18n.USE_CUSTOM_QT_LABEL);
setFieldConstraints(gbc, 7);
setSeparatorConstraints(gbc, 0);
setLabelConstraints(gbc, 2);
setSeparatorConstraints(gbc, 8);
setLabelConstraints(gbc, 3);
setLabelConstraints(gbc, 4);
setLabelConstraints(gbc, 9);
setLabelConstraints(gbc, 5);
setLabelConstraints(gbc, 6);
} else if (pref.deleteTableData(sourceTI.getSimpleName())) {
JOptionPane.showMessageDialog(_app.getMainFrame(), msg);
/**     * Constructs an instance of <code>DefaultFormBuilder</code> for the given
private JMenuItem _mnuExecuteNativeToAscii = new JMenuItem(s_stringMgr.getString("I18n.ExecuteNativeToAscii"));
enable(executeButton);
if (_mode == ADD_PRIMARY_KEY_MODE
}
cbxIncludeTimestamp = new JCheckBox(s_stringMgr.getString("I18n.includeTimestamp"));
return new SchemaLoadInfo[0];
// return the whole contents of this column in the DB
if (useColsModel.getSize() == 0) {
String msg = s_stringMgr.getString("I18n.failedToOpenZip", file.getAbsolutePath());
String msg =
if (withMessages)
if (CellEditorUsingRenderer.this._dataTypeObject != null)
ret.add(new JLabel(s_stringMgr.getString("I18n.WorkingDir")), gbc);
new I18nProps(toAppendTo, _sourceUrls).removeProps(propsToAppend);
private static boolean lenient = true;
private static int localeFormat = DEFAULT_LOCALE_FORMAT;
String[] endparts = spanEndSplitPattern.split(startparts[1]);
ret.add(new JLabel(s_stringMgr.getString("I18n.bundles")), gbc);
}
cache_value, is_cyled);
SQLUtilities.closeResultSet(rs);
ret.add(new JLabel(s_stringMgr.getString("I18n.NativeToAsciiOutDir")), gbc);
if(JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(app.getMainFrame(), msg))
JButton btnLoad = new JButton(s_stringMgr.getString("I18n.loadBundles"));
JOptionPane.showMessageDialog(app.getMainFrame(), msg);
gbc = new GridBagConstraints(0,1,1,1,0,0, GridBagConstraints.NORTHWEST, GridBagConstraints.HORIZONTAL, new Insets(5,5,0,5),0,0);
ret.add(new JLabel(s_stringMgr.getString("I18n.locales")), gbc);
JOptionPane.showMessageDialog(_app.getMainFrame(), msg);
}
try
{
return null;	// nothing for user to worry about
if (useJavaDefaultFormat == true || value == null)
try
_errMsg = s_stringMgr.getString("DriverPropertiesController.noDriverSelected");
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
value = value + ":0:0";
beginPos = 0;
java.util.Date javaDate = dateFormat.parse(value);
// Renderer for tree.
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
if (value.indexOf(":", firstColon + 1) == -1) {
value = value + ":0";
s_log.error("Received an unexpected DuplicateObjectException", ex);
_tabPnl.requestFocusInWindow();
void sqlInternalFrameOpened(SQLInternalFrame sqlInternalFrame, ISession sess);
private JComponent component;
}
SQLDatabaseMetaData md = _conn.getSQLMetaData();
None
if (session == _activeSession)
//		this(1, "");
String[] utilSql =
if (rs.next() == true) {
int bindVarIdx = 1;
return new SchemaLoadInfo[]{new SchemaLoadInfo(addStringArrays(tableTypes, viewTypes))};
SwingUtilities.invokeLater(new Runnable()
private SimpleAttributeSet _saSetError;
final ISession[] sessions = getConnectedSessions();
if (ti == null)
Collections.sort(columnData, new DataSorter());
for (int i = 0; i < rowData.length; i++) {
private class ObjectTreeMouseListener extends MouseAdapter {
Utilities.sleep(500);
int startIndex = 0;
if (rs.next() == false) {
s_stringMgr.getString("DriverInternalFrame.error.illegalvalue", maintType)); }
return wholeDatum;
((LAFPreferencesPanel)getPanelComponent()).loadData();
wholeDatum = CellComponentFactory.readResultSet(colDefs[col], rs, 1, false);
}
// [schema_name.]sequence_name
gbc.gridx = 0;
final String msg =
}
if (oldAppPreferenceFile.exists()) {
final StringBuilder createViewSql = new StringBuilder();
final Dimension maxSize = new Dimension(0, 0);
synchronized (this)
for (int i = 0; i < lineChars.length; i++) {
_alias.setUserName(_user);
// it is OK to place ß here.
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
case 1:
if(supportsMultipleResultSets && _stmt.getMoreResults())
Object obj = action.getValue(key);
private JCheckBox _confirmSessionCloseChk = new JCheckBox(s_stringMgr.getString("GeneralPreferencesPanel.confirmSessionClose"));
/** Window containing list of JDBC driver definitions. */
expect(mockPreferences.getUseScrollableTabbedPanes()).andStubReturn(false);
//			getSession().getObjectTreeAPI(_app.getDummyAppPlugin()).refreshTree();
++gbc.gridy;
Container contentPane = getContentPane();
// been limited and therefore cannnot be used in the WHERE clause.
expect(mockSQLMetaData.getTypesDataSet()).andStubReturn(mockDataSet);
GUIUtils.processOnSwingEventThread(new Runnable()
new FontButton(s_stringMgr.getString("laf.staticText"), _staticFontLbl, _prefs.getStaticFontInfo());
add(actions.get(GlobalPreferencesAction.class));
_menuItems[IOptionTypes.COPY] = add(_copy);
_parserTimer.setRepeats(false);
_sqlExecPanel.addSQLExecutionListener(lis);
private final List<ISQLResultExecuter> _executors =
setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("dataTypeTime.typeTime")));
s_log.debug(th);
final TreePath path = evt.getPath();
_resultSetOutput = BaseDataSetViewerDestination.getInstance(
_addDetailTab(DatabaseObjectType.PROCEDURE, new DatabaseObjectInfoTab());
if (total > 200 && current > 100 && current % 10 != 0) {
_stickyTab = null;
_addDetailTab(DatabaseObjectType.CATALOG, new DatabaseObjectInfoTab());
final INodeExpander expander = new DatabaseExpander(session);
_viewer.deleteRows(selectedRows);
// never see a BLOB. If we do, the contents are not
JPanel securityPanel = new JPanel();
}
parentRect = getScreenBoundsFor(windowBounds);
_onlySevenCheckbox = new JCheckBox(s_stringMgr.getString("mssql.only70compatible"),false);
/** Name of class to use for table contsnts output. */
_scriptLoginsCheckbox = new JCheckBox(s_stringMgr.getString("mssql.scriptLogins"));
CaseInsensitiveString imutableString = new CaseInsensitiveString(simpleTableName.toString());
_tables = new HashMap<String, HashMap<String, String>>();
_schemaInfoCache.clearTables(doi.getCatalogName(), doi.getSchemaName(), null, null);
private transient ISession _session = null;
_origUIDefaults = (UIDefaults)UIManager.getDefaults().clone();
SwingUtilities.invokeLater(new Runnable()
HashMap<String, Object> uniqueAllowedSchemas = null;
continue;
String msg =
gbc.gridx = 0;
return DialectUtils.getDropConstraintSQL(tableName, constraintName, qualifier, prefs, this);
Class[] classes = cl.getDriverClasses(s_log);
{
KeyStroke ctrlShiftSubstractStroke = KeyStroke.getKeyStroke(KeyEvent.VK_SUBTRACT, java.awt.event.InputEvent.CTRL_MASK | java.awt.event.InputEvent.SHIFT_MASK);
* Internal class for handling key events during editing
_scriptIndexesCheckbox = new JCheckBox(s_stringMgr.getString("mssql.scriptIndexses"));
{
private int _scale;
* and fill in the value.
* Returns true if data type may be edited in the popup,
* Render a value into text for this DataType.
String retStr = null;
* @see net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.BaseDataTypeComponent#validateAndConvert(java.lang.String, java.lang.Object, java.lang.StringBuffer)
cache_value, is_cyled);
setLayout(new GridBagLayout());
s_log.error(s_stringMgr.getString("DriverWindowFactory.error.copyingdriver"), ex);
public void keyTyped(KeyEvent e)
String dbg =
_showClobChk.setSelected(_readClobs);
if (computeWidths) {
* Generate a JPanel containing controls that allow the user
* Can always do File I/O with Derby clobs.
++gbc.gridy;
fileFormatPanel.setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("mssql.fileFormat")));
_buttonRaised.setText(value.toString());
final int idx = _sessionWindows.addFrame(sessionIdentifier, sheet);
_buttonRaised.setMargin(new Insets(0, 0, 0, 0));
if (column == _currentlySortedColumnIdx
if (_pressedColumnIdx == column && _pressed)
if (!themeBaseClass.isAssignableFrom(theme.getClass()))
private static BitSet ignore = new BitSet(128);
private Buffer buf;        // data, random accessible
* Specify the column definitions to use.
_popupMenu = new TextPopupMenu();
super(stringMgr.getString("ImportFileDialog.fileImport"), true, session.getApplication());
_addDetailTab(DatabaseObjectType.SCHEMA, new DatabaseObjectInfoTab());
{
if (_precision > 0 && objPrecision > _precision)
if (value.indexOf("+") > -1 || value.indexOf("-") > -1)
protected Object executeGetter(Object bean, Method getter, Object[] parms)
_beepHelper.beep(_theComponent);
_lafRegister.updateStatusBarFont();
* On input from the DB, read the data from the ResultSet into the
tableHeight = _table.getHeight() * scale;
UIFactory.getInstance().addListener(new UIFactoryListener());
return sp;
double floatValue = rs.getDouble(index);
InputStream is = rs.getBinaryStream(index);
_gbc.weightx = 0.0;
_gbc.anchor = GridBagConstraints.WEST;
public String getToolTipText(MouseEvent e)
// represent a valid data value
case IColumnIndexes.IDX_VALUE:
DriverPropertyInfo dpi = sdp.getDriverPropertyInfo();
_inWidgetSetVisible = false;
_saSetHistoryBySaSet.put(_saSetWarning, saSetWarningHistory);
expect(mockSession.getApplication()).andStubReturn(mockApplication);
public static final String[] SQL_KEYWORDS = new String[] { "testKeyword1", "testKeyword2" };
final LookAndFeel laf = (LookAndFeel)lafClass.newInstance();
expect(mockSchemaInfo.getSchemas()).andStubReturn(SCHEMAS);
for (int j = i + 1; j < _dataFiles.size(); j++) {
/** Creates a new instance of ForeignKeyConstraint */
_dataFiles.add(j,file);
_dataFiles.add(file);
for (int i = 0; i < _dataFiles.size(); i++) {
props = getEasyMockSessionProperties();
return s_stringMgr.getString("RowIDTab.title");
if (_mode != DROP_PRIMARY_KEY_MODE) {
}
def.setConstraintName(constraintName);
if (dbObjs.length > 1) {
GUIUtils.centerWithinParent(viewer);
_userName.setText(getAlias().getUserName());
evt.getSession().setMessageHandler(_app.getMessageHandler());
s_log.error(s_stringMgr.getString("SplashScreen.error.updatingprogressbar"), ex);
{
_logDirCmb.addActionListener(new ChangeLogListener());
ArrayList<String> insertColumns = new ArrayList<String>();
_errMsg =
void addFile(File file);
int cellWidth = renderer.getTableCellRendererComponent(this,
constraintKeys = constraintKeys.substring(11); // chop off "REFERENCES "
StringTokenizer st = new StringTokenizer(transferData);
// i18n[oracle.auotRefresh2=Enable auto refresh]
String msg = s_stringMgr.getString("dataTypeBigDecimal.precisionEceeded", args);
String SHOW_UDF_SOURCE = s_stringMgr.getString("DB2Plugin.showUdfSource");
indicateNewStartupTask(splash, s_stringMgr.getString("Application.splash.loadsqlhistory"));
return s_stringMgr.getString("DataSetUpdateableTableModelImpl.error.unknownerror");
s_stringMgr.getString("dataTypeUnknown.unknownTypes")));
MultipleLineLabel lblHint = new MultipleLineLabel(s_stringMgr.getString("SchemaPropertiesPanel.hint"));
Point pt = new Point( evt.getX(), evt.getY() );
new JCheckBox(s_stringMgr.getString("dataTypeBigDecimal.newlinesAsbackslashN"));
private JCheckBox lenientChk = new JCheckBox(s_stringMgr.getString("dateTypeTimestamp.allowInexact"));
String HINT = s_stringMgr.getString("UdfDetailsTab.hint");
return
String META_DATA = s_stringMgr.getString("generalSessionPropertiesPanel.metaData");
String jdbcEscapeMsg = s_stringMgr.getString("dateTypeTimestamp.jdbcEscape");
_backgroundColorBtn.setToolTipText(s_stringMgr.getString("syntax.background"));
return s_stringMgr.getString("DataSetUpdateableTableModelImpl.error.staleupdaterow");
String msg = s_stringMgr.getString("EditExtrasAccessor.editextrasPluginNeeded");
btnClassPathRemove = new JButton(s_stringMgr.getString("HibernatePanel.classPathRemove"));
String SHOW_TOOLBAR = s_stringMgr.getString("generalSessionPropertiesPanel.showToolbar");
String msg =
MultipleLineLabel lbl = new MultipleLineLabel(s_stringMgr.getString("FactoryProviderDialog.desc"));
String cbLabelStr =
String cbToolTipText =
String VARCHAR_MESSAGE = s_stringMgr.getString("DerbyDialect.varcharMessage");
String msg = s_stringMgr.getString("ResultTab.cannotedit");
JButton importButton = new JButton(s_stringMgr.getString("popupeditableIoPanel.import44"));
return s_stringMgr.getString("codeCompletion.PrefsTabTitleHint");
// i18n[dateTypeTimestamp.orLocaleDependend= or locale-dependent format:]
String LAF_CRITICAL_WARNING = s_stringMgr.getString("laf.lafCriticalWarning");
btnFormat = new JButton(s_stringMgr.getString("graph.format"));
_boldChk.setToolTipText(s_stringMgr.getString("syntax.bold"));
super(owner, s_stringMgr.getString("userscript.scriptProps"), false);
String msg = s_stringMgr.getString("DBUtil.error.bindclobfailure");
String label = s_stringMgr.getString("DumpSessionAction.warning");
throw new SQLException(s_stringMgr.getString("DataSetUpdateableTableModelImpl.error.multimatchingrows"));
String SEARCHABLE_TYPE_PRED_NONE = s_stringMgr.getString("DatabaseMetaData.searchableTypePredNone");
s_log.error(s_stringMgr.getString("SplashScreen.error.updatingprogressbar"), ex);
title = s_stringMgr.getString("userscript.execOnTargets");
String UPDATE_DOWNLOAD_FAILED_MSG =
seperatorChar.setToolTipText(stringMgr.getString("CSVSettingsPanel.seperatorCharToolTip"));
session.showMessage(s_stringMgr.getString("sqlscript.scriptWritten"));
m_dlg = new JDialog(m_ownerFrame, s_stringMgr.getString("userscript.execOutput"), false);
s_stringMgr.getString("syntax.osterWarning"));
return s_stringMgr.getString("DataSetUpdateableTableModelImpl.info.norowsupdated");
chkShowInStandard = new JCheckBox(s_stringMgr.getString("userscript.showInStandardMenues1"));
String cbLabelStr =
String SQL_EXECUTION_TAB_PLACEMENT = s_stringMgr.getString("generalSessionPropertiesPanel.sqlExecTabs");
s_log.error(s_stringMgr.getString("AboutBoxDialog.error.systemprops"), ex);
String msg = s_stringMgr.getString("DefaultDatabaseExpander.error.retrieveuserroles");
String REMOVE_ML_COMMENT_LABEL = s_stringMgr.getString("PreferencesPanel.removeMultiLineCommentLabel");
super(owner, s_stringMgr.getString("SessionStartupTimeHintDlg.title"),true);
// i18n[dataTypeBigDecimal.read2=Read]
String PROC_SEP_LABEL_TT = s_stringMgr.getString("PreferencesPanel.procedureSeparatorToolTip");
e.printStackTrace(env.createPrintStream(s_stringMgr.getString("userscript.scriptAdminErr")));
msg = s_stringMgr.getString("DialectUtils.dropPrimaryKeyUnsupported", dialect.getDisplayName());
String PROGRESS_DIALOG_TITLE =
String UPDATE_CHECK_TITLE = s_stringMgr.getString("UpdateControllerImpl.updateCheckTitle");
return s_stringMgr.getString("DataSetUpdateableTableModelImpl.info.updateidenticalrows",
String strUnquote = s_stringMgr.getString("HQLEntryPanelManager.unquoteHQL");
s_stringMgr.getString("syntax.replaceNetbeansOnly");
optConstAndIndAfterTable = new JRadioButton(s_stringMgr.getString("sqlscript.configYourMultiTableScriptIxAfterEach"));
_toString = s_stringMgr.getString("SchemaTableCboItem.schemaID.loadButDontCache");
m_lblStatus.setText(s_stringMgr.getString("userscript.scriptCompletedErr"));
msg = s_stringMgr.getString("DialectUtils.addPrimaryKeyUnsupported", dialect.getDisplayName());
String text = s_stringMgr.getString("syntax.osterExplain");
_app.showErrorDialog(s_stringMgr.getString("exportconfig.errorSavingDrivers"), ex);
JMenuItem mnuAppendSelectionToEditor = new JMenuItem("Append selected statements to SQL editor");
String LOADING_PROCS_MSG =
s_stringMgr.getString("popupeditableIoPanel.cannotFindFile", canonicalFilePathName),
btnWriteExampleFactorProvider = new JButton(s_stringMgr.getString("FactoryProviderDialog.example"));
private static final String TOO_MANY_COMPLETION_INFOS = s_stringMgr.getString("codecompletion.listTruncated");
_tabResult_code.addTab(s_stringMgr.getString("HibernateSQLPanel.code"), textComp);
String LINE_COMMENT_LABEL_TT = s_stringMgr.getString("PreferencesPanel.lineCommentToolTip");
message.append(
String msg =
String EDIT_BUTTON_LABEL =
JOptionPane.showMessageDialog(_plugin.getApplication().getMainFrame(), s_stringMgr.getString("HibernateController.noPersistenceUnitName"));
s_stringMgr.getString("popupeditableIoPanel.createFileError", canonicalFilePathName),
String SHOW_VIEW_SOURCE = s_stringMgr.getString("DerbyPlugin.showViewSource");
radJPA = new JRadioButton(s_stringMgr.getString("HibernatePanel.toObtainSessionFactJPA"));
String hint = s_stringMgr.getString("MysqlPlugin.hint");
INSTALL_FAILED_MESSAGE = s_stringMgr.getString("PreLaunchHelperImpl.installFailedMessage");
s_stringMgr.getString("dataTypeJavaObject.readContentsWhenLoaded"));
String SQL_RESULTS_TAB_PLACEMENT= s_stringMgr.getString("generalSessionPropertiesPanel.sqlResultTabs");
_stayOnTop = new JCheckBox(s_stringMgr.getString("oracle.dboutputStayOnTop"), false);
String OBJECT_TREE_BACKGROUND_COLOR_BUTTON_LABEL =
s_log.error(s_stringMgr.getString("InstallDefaultDriversAction.error.selectingwindow"), ex);
String SINGLE_COLUMN_MESSAGE = s_stringMgr.getString("RemoveColumnAction.singleColumnMessage");
s_stringMgr.getString("popupeditableIoPanel.exportError4"),JOptionPane.ERROR_MESSAGE);
final String msg = s_stringMgr.getString("editextras.errorRemoveQuotes", ex);
String DROP_ERROR_MESSAGE =
return s_stringMgr.getString("SQLScriptPreferencesTab.hint");
s_log.error(msg, cnfe);
String INSTRUCTIONS = s_stringMgr.getString("ColorPropertiesPanel.instructions");
msg = s_stringMgr.getString("DialectUtils.columnNullUnsupported", dialect.getDisplayName());
String msg = s_stringMgr.getString("sqlscript.storeSqlInTableFailed", sTable);
INSTALL_UPDATES_TITLE = s_stringMgr.getString("PreLaunchHelperImpl.installUpdatesTitle");
indicateNewStartupTask(splash, s_stringMgr.getString("Application.splash.loadeditselections"));
String msg =
return s_stringMgr.getString("DataSetUpdateableTableModelImpl.confirmupdateallrows");
RESTORE_FROM_BACKUP_MESSAGE = s_stringMgr.getString("PreLaunchHelperImpl.restoreFromBackupMessage");
s_stringMgr.getString("cellDataPopUp.conversionError"),
s_stringMgr.getString("popupeditableIoPanel.notANormalFile"),
_fontColorBtn.setToolTipText(s_stringMgr.getString("syntax.font"));
static String MSG_CONFIRM = s_stringMgr.getString("favs.deletelFolder");
_session.showMessage(s_stringMgr.getString("ToolsPopupController.toolspopupmsg"));
JOptionPane.showMessageDialog(session.getApplication().getMainFrame(), stringMgr.getString("ImportDataIntoTableExecutor.success", rows));
String SHOWSQL_BUTTON_LABEL =
optionsLabel.setText(s_stringMgr.getString("mssql.scriptingOptionsDlg"));
// i18n[dateTypeTimestamp.allowInexact=allow inexact format on input]
btnUpdateSchemas = new JButton(s_stringMgr.getString("SchemaPropertiesPanel.refreshSchemas"));
final String msg = s_stringMgr.getString(
String INTERNAL_ERROR_MESSAGE =
radSelection = new JRadioButton(s_stringMgr.getString("TableExportCsvDlg.exportSelection"));
String STMT_SEP_LABEL_TT = s_stringMgr.getString("PreferencesPanel.statementSeparatorToolTip");
ret.add(new JLabel(s_stringMgr.getString("HibernatePanel.configName")), gbc);
String LAF_WARNING = s_stringMgr.getString("laf.lafWarning");
int option = JOptionPane.showConfirmDialog(null, message, s_stringMgr.getString("baseDataSetViewerDestination.warning"),
String TITLE = s_stringMgr.getString("mysql.logs");
private JCheckBox _removeMultiLineComment = new JCheckBox(s_stringMgr.getString("SessionSQLPropertiesPanel.removeMultiLineComment"));
new JRadioButton(s_stringMgr.getString("dateTypeTimestamp.timestampInWhere"));
String msg = s_stringMgr.getString("MemoryPanel.gcStatus", (Object[])params);
String CASCADE_LABEL =
MultipleLineLabel lbl = new MultipleLineLabel(s_stringMgr.getString("CodeCompletionPreferencesPanel.maxLastSelectedCompletionNames"));
String SOFTWARE_VERSION_CURRENT_MSG =
s_stringMgr.getString("popupeditableIoPanel.errWhileExecutin", args),
String HINT = s_stringMgr.getString("oracle.displayColumns");
JOptionPane.showMessageDialog(_app.getMainFrame(), s_stringMgr.getString("sqlbookmark.noSQLPanel"));
s_stringMgr.getString("dataSetViewerEditableTablePanel.selectionNeeded"));
String HINT = s_stringMgr.getString("generalSessionPropertiesPanel.generalSettings");
String SHOW_ERROR_OFFSET_TT = s_stringMgr.getString("OraclePluginPreferencesPanel.showErrorOffsetTT");
btnApplyConfigChanges = new JButton(s_stringMgr.getString("HibernatePanel.applyConfigChanges"));
String msg = s_stringMgr.getString("CancelStatementThread.cancelTimedOut");
ret.setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("HibernatePanel.ConfiguirationDef")));
return s_stringMgr.getString("DataSetUpdateableTableModelImpl.info.identicalrows",
String COLUMN_LENGTH_MESSAGE = s_stringMgr.getString("DerbyDialect.columnLengthMessage");
String MSG = s_stringMgr.getString("ReconnectAction.confirmReconnect");
private RightLabel dateFormatTypeDropLabel = new RightLabel(s_stringMgr.getString("dateTypeTimestamp.orLocaleDependend"));
String msg = s_stringMgr.getString("FactoryProviderController.fileCreateFailed", new Object[]{javaFile, e});
_session.showErrorMessage(s_stringMgr.getString("CreateTableOfCurrentSQLCommand.noQuery"));
tm.addColumn(s_stringMgr.getString("oracle.buffer.getsPerRow"));
String TAB_HINT = s_stringMgr.getString("laf.tabHint");
msgHandler.showMessage(s_stringMgr.getString("SchemaInfoCacheSerializer.beginStore", params));
String HINT = s_stringMgr.getString("oracle.displayTriggerDetails");
private String _title = s_stringMgr.getString("graph.newGraph");
s_stringMgr.getString("dataTypeBlob.readOnFirstLoad"));
String HINT = s_stringMgr.getString("mysql.displayProcesses");
String desc = s_stringMgr.getString("OraclePrefsPanel.Description");
String USE_CUSTOM_QT_TOOLTIP =
btnSaveToFile = new JButton(s_stringMgr.getString("graphToFile.saveFilesTo"));
s_stringMgr.getString("popupeditableIoPanel.commandReturnNot0", Integer.valueOf(commandResult)),
setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("dataTypeJavaObject.sqlJavaObjectType")));
String msg = s_stringMgr.getString("DBUtil.info.bindbloblength", Integer.valueOf(length));
getContentPane().add(new MultipleLineLabel(s_stringMgr.getString("SessionStartupTimeHintDlg.text")), gbc);
ret.add(new JLabel(s_stringMgr.getString("SchemaPropertiesPanel.schemaTableUpdateLable2")), gbc);
_plugin.getApplication().getMessageHandler().showMessage(s_stringMgr.getString("syntax.hasBeenAutocorr", params));
msg = s_stringMgr.getString("DialectUtils.columnCommentUnsupported", dialect.getDisplayName());
JTextField userPathField = new JTextField(s_stringMgr.getString("GeneralPreferencesPanel.squirrelUserPath", userDir));
String msg = s_stringMgr.getString("MyURLClassLoader.noAssignCheck", args);
JOptionPane.showMessageDialog(session.getApplication().getMainFrame(), stringMgr.getString("ImportTableDataCommand.sqlErrorOccured"), stringMgr.getString("ImportTableDataCommand.error"), JOptionPane.ERROR_MESSAGE);
s_stringMgr.getString("popupeditableIoPanel.executeError"),JOptionPane.ERROR_MESSAGE);
JOptionPane.showMessageDialog(session.getApplication().getMainFrame(), stringMgr.getString("ImportDataIntoTableExecutor.sqlException"), stringMgr.getString("ImportDataIntoTableExecutor.error"), JOptionPane.ERROR_MESSAGE);
String msg = s_stringMgr.getString("dataSetViewerTablePanel.textCantBeConverted", messageBuffer);
msg = s_stringMgr.getString("CancelStatementThread.closeFailed", t);
msg = s_stringMgr.getString("DialectUtils.columnTypeUnsupported", dialect.getDisplayName());
super(parent, s_stringMgr.getString("rowDataInputFrame.propName"), false);
String noColTypeChange =
return s_stringMgr.getString("DataSetUpdateableTableModelImpl.error.unknownupdateerror");
String colTypeMappingBorderLabel =
String strQuote = s_stringMgr.getString("HQLEntryPanelManager.quoteHQL");
String DROP_TITLE =
String DATA_TYPE1 = s_stringMgr.getString("generalSessionPropertiesPanel.dataTYpe1");
setTitle(s_stringMgr.getString("mssql.generateSqlScript"));
String stats =
String msg = s_stringMgr.getString("rowInputDataFrame.conversionToInternErr", messageBuffer);
btnGenerateTemplate = new JButton(s_stringMgr.getString("userscript.dlgTabScriptsGenTempl"));
return s_stringMgr.getString(
JButton btnTimestamp = new JButton(s_stringMgr.getString("editextras.timeStamp"));
btnConnected.setToolTipText(s_stringMgr.getString("hibernate.HQLTabPanel.connect"));
throw new SQLException(s_stringMgr.getString("DataSetUpdateableTableModelImpl.error.nomatchingrow"));
s_stringMgr.getString("popupeditableIoPanel.cannotExec"),
String noColumnSupportMsg =
String HINT = s_stringMgr.getString("mysql.showLogs");
return s_stringMgr.getString("NumericFunctionsTab.title");
msg = s_stringMgr.getString("DialectUtils.columnNameUnsupported", dialect.getDisplayName());
s_log.debug(s_stringMgr.getString("AboutBoxDialog.systempanelcreatetime")
String PROMPT_TO_DOWNLOAD_AVAILABLE_UPDATES_TITLE =
super(s_stringMgr.getString("popupEditableIoPanel.wrapWord"));
String SHOW_VIEW_SOURCE =
String DROP_ERROR_TITLE =
s_stringMgr.getString("popupeditableIoPanel.fileChooserError"),JOptionPane.ERROR_MESSAGE);
applicableScriptsText = s_stringMgr.getString("userscript.applicableToTarget");
String timestampWarning = s_stringMgr.getString("OraclePlugin.timestampWarning");
_properties.put(s_stringMgr.getString("MappingRoot.driverVersion"), md.getDriverVersion());
// i18n[baseDataSetViewerDestination.warning=Warning]
JLabel lblScriptClass = new JLabel(s_stringMgr.getString("userscript.scriptClass1"));
activeSessions[i].showMessage(s_stringMgr.getString("syntax.findExplain"));
String msg =
new ColumnDisplayDefinition(DISPLAY_WIDTH, s_stringMgr.getString("HibernateAttribuiteDataSet.tableCols"))
String STATUS_LABEL_FAILURE_MSG = s_stringMgr.getString("UpdatePreferencesPanel.statusLableFailureMsg");
String msg = s_stringMgr.getString("cellDataPopUp.cannnotBGeConverted", messageBuffer);
String msg = s_stringMgr.getString("DBUtil.error.missingtable", new String[]
builder.addSeparator(stringMgr.getString("CSVSettingsPanel.csvSettings"), cc.xywh(1, y, 5, 1));
String TEXT_LIMIT_LINE_WIDTH = s_stringMgr.getString("syntax.textLimitLineWidth");
credits.setPreferredSize(new Dimension(200, 200));
ret.add(new MultipleLineLabel(s_stringMgr.getString("I18n.NativeToAscii")), gbc);
btnAppendI18nInCode = new JButton(s_stringMgr.getString("I18n.appendI18nStringsProps"));
private JMenuItem _mnuGenerateTemplateComments = new JMenuItem(s_stringMgr.getString("I18n.generateTemplateComments"));
_label.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 5));
return;
IDataSetUpdateableModel modelReference = null;	// default is no reference
if (count > 1) {
setBorder(BorderFactory.createEmptyBorder(2, 0, 0, 0));
if (_stopExecution) {
* Retrieve the descriptive title of this session.
break;
super();
static final int KW_ACTION = 90;
/* Now, create an array large enough to hold the original and the new */
initalUseColsArray = _columnList.toArray();
public void setValueAt(Object newValueString, int row, int col)
boolean isNullable = true;
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
if (s == null) {
if (obj1 != null)
return false;
s_stringMgr.getString("rowInputDataFrame.conversionErr"),
// if this panel is called before any instances of the class have been
/**
_dataTypeObject = dataTypeObject;
if (firstBlankText) {
List<ITableInfo> unattached = new ArrayList<ITableInfo>();
// if this panel is called before any instances of the class have been
public void setText(String originalValue) {
* getJTextArea(), so we do not need a "renderObjectInPopup" function
// "ALTER TABLE $childTableName$ " +
String minimumClause = "";
final ArrayList<String> result = new ArrayList<String>();
String result = "";
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
dropTable(session, fixIdentifierCase(session, "test"));
defaultClause,
StyleConstants.setForeground(_saSetError, Color.red);
StyleConstants.setForeground(saSetErrorHistory, new Color(255,102,102));
String NO_JAR_FILES =
colJdbcType = DBUtil.replaceDistinctDataType(colInfo, sourceSession);
_treeAPI.addDetailTab(DatabaseObjectType.INDEX, new IndexSourceTab(i18n.SHOW_INDEX_SOURCE, stmtSep));
return 10;
runSQL(session, "create table " + fixIdentifierCase(session, "test")
if (DialectFactory.isOracle(sourceSession.getMetaData())
private void updateDataModel(JComboBox source) {
s_log.info(e.getMessage());
if (((String)originalValue).length() < _limitReadLength)
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
/**
if (protectType.equals("Grant")) buf.append("GRANT ");
if (_jdbcDebugType != _prefs.getJdbcDebugType())
Byte[] useValue = new Byte[_data.length];
// both have actual data, so compare the strings
if (_clobRead == true)
if (_clobRead == false)
DriverManager.setLogStream(null);
public void updateText(String text);
row[i] =
None
createEmptyRequiredUserFiles();
public String getData(){return _data;}
None
return s_stringMgr.getString("PrimaryKeyTab.title");
HashMap<String, String> h = dataTypes.get(dataTypeName);
// flag for whether we have already loaded the properties or not
if (!_allDataIsString)
* file rather than a directory. All other "list" methods return
_closed = true;
testLongVarcharColType(sourceName, destName);
super();
_activeActiveSessionWindow = sif;
schemaInfoCacheUnderTest.writeToTableCache(ti);
}
final Container content = getContentPane();
setToolBar(_uiFactory.getToolBar());
Byte[] byteClassData;
final IBaseList list = _uiFactory.getList();
content.add(list.getComponent(), BorderLayout.CENTER);
return constraints;
_app.getMessageHandler().showErrorMessage(s_stringMgr.getString("sqlbookmark.noEditSelection"));
return s_stringMgr.getString("VersionColumnsTab.hint");
_lafRegister = new LAFRegister(app, this);
boolean driverIs21Compliant = true;
if (getUpdateableModelReference() != null)
None
/** Object to manage plugins. */
JOptionPane.showMessageDialog(this,
String CLASS_PATH_LABEL =
GlobalPreferencesSheet.showSheet(_app, UpdatePreferencesPanel.class);
None
final int len = (str == null) ? 0 : str.length();
None
switch (columnType)
String CLASS_NAME_LABEL =
* Render a value into text for this DataType.
if (_limitRead == false)
if (originalValue == null)
if (originalValue != null && ((String)originalValue).indexOf('\n') > -1)
return "";
for (int r = 0; r < tblResult.getRowCount(); r++)
case Types.BINARY:
None
default:
LoggerController.createLogger(SquirrelPreferences.class);
ISession currSession = null;
_okBtn.addActionListener(new ActionListener()
private int _columnSize;
* Returns true if data type may be edited in the popup,
None
if (DialectFactory.isProgress(md)) {
if (_limitReadColumnNameMap.containsKey(_colDef.getLabel()))
if (((String)originalValue).length() > _limitReadLength)
* and fill in the value.
_limitReadOnSpecificColumnsChk.setSelected(_limitReadOnSpecificColumns);
if (_colDef.getSqlType() == Types.LONGVARCHAR &&
registerColumnType(Types.BIGINT, "bigint");
/**
btCreateTable.setText(s_stringMgr.getString("mysql.createTableBtn"));
/** Schema. */
/** Index. */
/** Standard datatype. */
public static final DatabaseObjectType VIEW = createNewDatabaseObjectTypeI18n("DatabaseObjectType.view");
return "";
* @see java.lang.Object#toString()
indicateNewStartupTask(splash, s_stringMgr.getString("Application.splash.uifactoryinit"));
/** Trigger. */
/** User defined function. */
case Types.JAVA_OBJECT:
KeyStroke ctrlShiftXStroke = KeyStroke.getKeyStroke(KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK | java.awt.event.InputEvent.SHIFT_MASK);
None
boolean hasTimeComponent = (value.toString().indexOf(":") != -1);
private class KeyTextHandler extends BaseKeyTextHandler {
List<ITableInfo> children = new ArrayList<ITableInfo>();
return 1;
rs.close();
ti.setImportedKeys(result);
try
gbc.gridx = 0;
None
return -1;
List<ITableInfo> parents = new ArrayList<ITableInfo>();
}
if (_limitReadOnSpecificColumns == false ||
if (defaultVal != null && !"".equals(defaultVal))
private final String TI_ERROR_MESSAGE = s_stringMgr.getString("DataSetUpdateableTableModelImpl.error.tablenotfound");
return "";
updateMemoryStatus();
None
conn.setCatalog(catalogName);
final String fkTemplateStr = ST_ADD_FOREIGN_KEY_CONSTRAINT_STYLE_ONE;
final String templateStr = ST_ADD_UNIQUE_CONSTRAINT_STYLE_ONE;
String onUpdateNotSupported = null;
}
Object[] args =
outWriter.write(text);
registerColumnType(Types.BIGINT, "numeric($p,0)");
final StringBuilder reorgSql = new StringBuilder();
"select start_with as last_value, MAXIMUM_VALUE, MINIMUM_VALUE, 0 as CACHE_VALUE, INCREMENT, "
if (_columnSize > 0 && fileText.length() > _columnSize)
None
if(isInLineComment && script.startsWith("\n", i - "\n".length()))
StringManagerFactory.getStringManager(Version.class);
if (startedColumn || columnsCount > 0
else if (dbProductName.equals("PostgreSQL"))
if (DialectFactory.isPointbase(this)) {
None
/**
new JCheckBox(s_stringMgr.getString("dataTypeString.limitSize"));
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
fullTableName = null;
new JCheckBox(s_stringMgr.getString("dataTypeString.allowLongVarchar"));
editModeForced = false;
c.fill = GridBagConstraints.BOTH;
_app.getSessionManager().addSessionListener(new SessionListener());
/**
buf.append(" ");
lastLetter = currentLetter;
new JCheckBox(s_stringMgr.getString("dataTypeString.newlines"));
_logDirCmb.addActionListener(new ChangeLogListener());
private JCheckBox _limitReadChk =
if (defs != null && defs.size() == 1)
if (null == url && imagePathName.startsWith("/"))
List<PrimaryKeyConstraint> pks = constraints.getPrimaryKeyConstraints();
private JCheckBox _useLongInWhereChk =
kit.addAWTEventListener(this, AWTEvent.MOUSE_EVENT_MASK|AWTEvent.MOUSE_MOTION_EVENT_MASK);
workbook.write();
if (_iFree == 0)
/**
_treePanel.saveSelectedPaths();
/**
* @see net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.IDataTypeComponent#canDoFileIO()
/**
/**
/* (non-Javadoc)
public int Count;
hasReadNextLine = true;
public void setString(String value)
dbNameDialectMap.put(daffodilDialect.getDisplayName(), daffodilDialect);
_updateableModel.forceEditMode(false);
System.out.println("ApplicationArguments.initialize() called twice");
return true;
String sql = "@c:\\tools\\sql\\file.sql";
_treeAPI.addDetailTab(DatabaseObjectType.SESSION, new DatabaseStatusTab());
if (value == null || value.toString() == null )
tablePanel.setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("mssql.scriptingOptions")));
double sAng = 0.5;
String SHOW_VIEW_SOURCE = s_stringMgr.getString("MysqlPlugin.showViewSource");
result.append(columns[0]);
if (objectType == MSSQL_STOREDPROCEDURE || objectType == MSSQL_UDF) useThisName =
userStmt = c.prepareCall("{ call sp_helprolemember ? }");
KeyStroke ctrlShiftCStroke = KeyStroke.getKeyStroke(KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK | java.awt.event.InputEvent.SHIFT_MASK);
}
String sourceColumnName = sourceInfo.getColumnName().trim();
if (columnIndex == ColumnMappingConstants.INDEX_IMPORTFILE_COLUMN ||
coll.add(new CopyTableAction(app, _resources, this));
final ActionCollection coll = getApplication().getActionCollection();
MysqlViewSourceTab viewSourceTab = new MysqlViewSourceTab(i18n.SHOW_VIEW_SOURCE, stmtSep);
String COLUMN_NAME_LABEL=
_treePanel.restoreSavedSelectedPaths();
dropIndexSQL = dialect.getDropIndexSQL(tableName, indexName1, true, qualifier, prefs);
tableName = tableName.trim();
_treeAPI.addDetailTab(DatabaseObjectType.USER, new UserGrantsTab());
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
_treeAPI.addToPopup(coll.get(CreateDatabaseAction.class));
//		this(idx, "");
None
c.reformat(CREATE_STUDENT);
_treeAPI.addDetailTab(DatabaseObjectType.TABLE, new ShowColumnsTab());
TableWithChildNodesExpander trigExp = new TableWithChildNodesExpander();
// Logger for this class
_resources.addToMenu(coll.get(AnalyzeTableAction.class), mysqlMenu);
setLayout(new GridBagLayout());
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
Iterator<String> names = _limitReadColumnNameMap.keySet().iterator();
continue;
_limitReadLengthTextField.setInt(_limitReadLength);
_makeNewlinesVisibleInCellChk.setSelected(_makeNewlinesVisibleInCell);
i+=MULTI_LINE_COMMENT_BEGIN.length()+1;
_useLongInWhereChk.setSelected(_useLongInWhere);
public boolean hasOwnUndoableManager()
String simpleName = oi.getSimpleName();
for (String arg : args) {
// (making it a new directory name.)
private ArrayList<String> _descriptions;
setText(((TableColumnInfo)value).getColumnName());
assertTrue("Absolute returned false", (f.isAbsolute() && !f1
String dots = "..";
// Logger for this class
boolean onWindows = (File.separatorChar == '\\');
String dropStmt = _dialect.getColumnDropSQL(sourceTableName, sourceColumnName + "_temp", _qualifier, _sqlPrefs);
default:
if (pseudoColumn.length() == 0)
{
default:
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
String useThisName = MssqlIntrospector.getFixedVersionedObjectName(oi.getSimpleName());
_rawArgs = args;
private ITaskThreadPoolCallback _callback;
String[] browsers = {
return "VARCHAR(200)";
task = _callback.nextTask();
_treeAPI.addDetailTab(DatabaseObjectType.TRIGGER, new DatabaseObjectInfoTab());
_resources.addToMenu(coll.get(CreateMysqlTableScriptAction.class), mysqlMenu);
Runtime r = Runtime.getRuntime();
} // end of inner class
buttonOk.setText(s_stringMgr.getString("mysql.copyOk"));
/**
if(schemaCacheFile.exists() && false == schemaCacheFile.delete())
if (tableTypes.contains("INDEX")) {
if (isDB2 && !hasSysFun) {
final Set<String> tableTypes = new TreeSet<String>();
if (tableTypes.contains("INDEX")) {
* @param   wrapee  The exception that this one is wrapped around.
for (int i = 0; i < data.size(); i++)
dir = new FileWrapperImpl(base, String.valueOf(dirNumber));
int dirNumber = 1;
break;
Object[] stringData = new Object[data.length];
for (int i = 0; i < 2; i++) {
sessionUnderTest.setQueryTokenizer(customTokenizer2);
CodeCompletionTableAliasInfo a = (CodeCompletionTableAliasInfo) info;
private DataSetViewerTablePanel _viewer = null;
ti = new TableInfo(catalog, schema, tableName, "TABLE", "", md);
if (_updateableModel != null && allowEditing==false) {
cdesc.setClobRead(true);
}
public String toString()
return docElem.getElementIndex(pos);
FileWrapper f1 = null;
}
private int _lastY;
return SQLTokenContext.WHITESPACE;
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
FileWrapper f3 = new FileWrapperImpl(File.createTempFile("ab", ".tst"));
if (Character.isJavaIdentifierStart(actChar))
settingsMap.put(JavaSettingsNames.JAVA_FORMAT_SPACE_BEFORE_PARENTHESIS,
File f3 = new File(url.toURI());
// Try to create a file in a directory that does not exist
TableColumnInfo db2pkCol = null;
for (int j = 0; j < infos.length; j++)
* Application is shutting down so save data.
return new CodeCompletionInfo[0];
completionInfos.add(new CodeCompletionTypeInfo(dataTypes[i]));
public static final String CASCADE_CLAUSE = "CASCADE";
public void setLayer(Integer layer)
public void testGetColumnCount() {
FileWrapper f = new FileWrapperImpl(new URI("file:///pa%20th/another\u20ac/pa%25th"));
StringTemplate st = new StringTemplate(ST_DROP_CONSTRAINT_STYLE_ONE);
@Test (expected = IllegalArgumentException.class )
&& type != -8 // ROWID
expect(mockResultSetMetaData.getColumnType(index++)).andReturn(Types.BIT);
_lastSelectedCompletionNames.remove(name);
String[] uris = new String[] { "mailto:user@domain.com", // not
FileWrapper s = null;
ArrayList<String> execArgs = null;
fileName = f1.getName();
_limitReadColumnNameMap.clear();
private Connection mockGenericDialectConnection = mockHelper.createMock(Connection.class);
// remove old name list from map
CompletionCandidates completionCandidates = _model.getCompletionCandidates(_cc.getTextTillCarret());
name = name.trim().toUpperCase();
String columnNameText = _limitReadColumnNameTextArea.getText();
ObjectStreamClass objectStreamClass = ObjectStreamClass
expect(session.getMetaData()).andReturn(md).anyTimes();
String sep = File.separator;
if (!_sessionClosing)
FileWrapper f = new FileWrapperImpl(System.getProperty("java.io.tmpdir"), platformId
final JMenu menu = getMainFrame().getWindowsMenu();
String TABLE_NAME_LABEL =
String constraintName = _customDialog.getForeignKeyName();
JOptionPane.showMessageDialog(this,
add(new DeleteSelectedTablesAction(_app));
s_stringMgr.getString("mysql.createTableComm"));
columnsCount = 0;
String catalog = _session.getSQLConnection().getCatalog();
new Join(session),
_mainFrame.setEnabledDriversMenu(true);
infos = _session.getSchemaInfo().getITableInfos(null, null, new ObjFilterMatcher(tables.get(0)), new String[]{"TABLE"});
private ITableInfo oldTableName;
private void chAllFieldsActionPerformed(@SuppressWarnings("unused")
TableColumnInfo doubleColumnPKOne = null;
private static final String MSG = s_stringMgr.getString("mysql.sureDropping");
dropView(session, fixIdentifierCase(session, testViewName));
boolean onWindows = File.separatorChar == '\\';
private void rdStructureDataActionPerformed(@SuppressWarnings("unused")
listModel.addElement(fd);
listFields.setSelectionMode(
int port = 80;
final StringBuilder sql = new StringBuilder();
None
btnDeleteRows = new JButton(s_stringMgr.getString("codeCompletion.prefixConfig.deleteSelRows"));
_toString = s_stringMgr.getString("codecompletion.prefs.table.udfWithoutParams");
public void mouseDragged(MouseEvent e)
add(new JLabel(s_stringMgr.getString("codeCompletion.globalFunctCompltion")),gbc);
String catalog = null;
columnNameLabel = getBorderedLabel(i18n.COLUMN_NAME_LABEL, border);
dialectLabel = getBorderedLabel(i18n.DIALECT_LABEL, border);
btnNewRow = new JButton(s_stringMgr.getString("codeCompletion.prefixConfig.newRow"));
private DataBuffer dataBuffer = new DataBuffer();
private UserSettings userSettings = new UserSettings();
static HashMap<String,IDataTypeComponentFactory> _pluginDataTypeFactories =
serializer = new UpdateXmlSerializerImpl();
static private ILogger s_log = LoggerController.createLogger(CellComponentFactory.class);
_frequency.setMajorTickSpacing(2);
expect(mockResultSetMetaData.getColumnType(5)).andReturn(Types.INTEGER);
FileWrapper tempDir = new FileWrapperImpl(System.getProperty("java.io.tmpdir"));
formatterUnderTest.setCustomExceptionFormatter(formatter2);
ret.add(new JLabel(s_stringMgr.getString("graph.zoom")), BorderLayout.WEST);
String noColNameChange =
lengthLabel = getBorderedLabel(i18n.LENGTH_LABEL, border);
typeLabel = getBorderedLabel(i18n.TYPE_LABEL, border);
StringBuilder expectedMessage =
scaleLabel = new JLabel(i18n.SCALE_LABEL);
precisionSpinner = new JSpinner();
if (dataBuffer.Position == dataBuffer.Count) {
defaultLabel = new JLabel(i18n.DEFAULT_VALUE_LABEL);
if (hasMoreData) {
nullableLabel = new JLabel(i18n.NULLABLE_LABEL);
commentLabel = new JLabel(i18n.COMMENT_LABEL);
/**
for (int i = 0; i < headersHolder.Length; i++) {
else if (DialectFactory.getDialectType(this) == DialectType.INFORMIX) {
if (superTabResult != null && superTabResult.next())
lastLetter = currentLetter;
} else if (currentLetter == escapeChar) {
startedColumn = true;
return headersHolder.Headers[columnIndex];
dirName = System.getProperty("user.dir");
// check to see if the column index is within the bounds
btAdd.setText(s_stringMgr.getString("mysql.createAdd"));
System.out.println("\nreadOpaqueAsCharacterStream: ");
lastLetter = currentLetter;
headersHolder.IndexByName.put(columnValue, Integer.valueOf(i));
startedColumn = true;
if (dataBuffer.Count == -1) {
rawRecord = new String(rawBuffer.Buffer, 0, rawBuffer.Position);
s_stringMgr.getString("mysql.msgTableCreated", tfTableName.getText()));
if (startedColumn) {
int newLength = values.length * 2;
private static final String PREFERENCES_FILE_NAME_GLOBAL = "prefsGlobal.xml";
String columnList = createColumnList();
if (_dataTypeObject != null)
protected String SQLCommandRoot = "CREATE TABLE ";
if(null == value)
* Render value of object as a string for text output.
return false;
protected void allRowsAdded()
public int getRowCount()
if (_caller.insertRow(rowData) == null) {
/**
* @see java.lang.Object#toString()
private Vector<SQLSelectStatementListener> listeners =
* @see java.lang.Object#toString()
FileOutputStream outStream;
public static final int MAX_BUFFER_SIZE = 1024;
public static final char VERTICAL_TAB = '\u000B';
}
public boolean CaseSensitive;
lastLetterWasQualifier = false;
s_log.error(s_stringMgr.getString("Application.error.loadcellselections"), ex);
final JDialog dialog = new JDialog(session.getApplication().getMainFrame(), stringMgr.getString("ImportTableDataCommand.settingsDialogTitle"), true);
protected Object[] getRow(int row)
for (int i = 0; i < threads; i++) {
protected void addRow(Object[] row)
private void listFieldsValueChanged(
_mainFrame.setEnabledDriversMenu(true);
JOptionPane.showMessageDialog(session.getApplication().getMainFrame(), stringMgr.getString("ImportDataIntoTableExecutor.wrongFormat", new Object[] { rows, i-1 }));
final Process proc = Runtime.getRuntime().exec(
if (JOptionPane.showConfirmDialog(session.getApplication().getMainFrame(),
stmt.setLong(index, importer.getLong(mappedColumn));
private void btAddActionPerformed(java.awt.event.ActionEvent evt)
* Return true if the data type for the column may be edited
private void btRemoveActionPerformed(java.awt.event.ActionEvent evt)
private void tfFieldNameFocusGained(java.awt.event.FocusEvent evt)
JOptionPane.showMessageDialog(session.getApplication().getMainFrame(), stringMgr.getString("ImportTableDataCommand.ioErrorOccured"), stringMgr.getString("ImportTableDataCommand.error"), JOptionPane.ERROR_MESSAGE);
if (inputValue.equals("<null>"))
result.append(to.getColumnName());
int count = 0;
}
if (table.isEditing()) {
suggestColumns = new JCheckBox(stringMgr.getString("ImportFileDialog.suggestColumns"));
private static ILogger s_log;
ObjectType objType = new ObjectType(IObjectTypes.PACKAGE, "PACKAGE",
* @see java.lang.Object#toString()
newSelectedHandle.fireSelected(e);
setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("dataTypeBlob.blobType")));
if (_lafClassLoader != null)
String borderLabel = s_stringMgr.getString("PreferencesPanel.borderLabel", _databaseName);
headersIncluded = new JCheckBox(stringMgr.getString("ImportFileDialog.headersIncluded"));
private void initLabels() {
builder.add(new JLabel(stringMgr.getString("ImportFileDialog.dataPreview")), cc.xy(1, y));
prefs.setQuoteColumnNames(false);
if (model.getValueAt(selectedRow, fixedValueColumnIdx) == null ||
public void mousePressed(MouseEvent e)
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
public void mouseMoved(MouseEvent e)
* @see java.lang.Object#toString()
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
private boolean wholeClobRead(ClobDescriptor cdesc) {
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
return false;
return null;
return dataTypeObject.canDoFileIO();
if (dataTypeObject == null)
public void mouseReleased(MouseEvent e)
public Component getTableCellRendererComponent(
* @see java.lang.Object#toString()
final StringBuilder sql = new StringBuilder();
public Class<?> getColumnClass(int col)
public String getColumnName(int col)
String CATALOG_PREFIX = s_stringMgr.getString("sessionPropertiesPanel.catalogPrefix");
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
if ( idx > 1)
if (null != progressCallBack)
popupBounds.x = Math.min(cursorBounds.x, viewWidth - popupBounds.width);
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
ArrayList<String> classNameList =
s_stringMgr.getString("popupeditableIoPanel.exportSuccess"),JOptionPane.INFORMATION_MESSAGE);
* @see java.lang.Object#toString()
// "CREATE VIEW $viewName$ " +
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
if (radixList != null &&
* Get the Control Panels (JPanels containing controls) that let the
if (nameMap != null)
String TITLE = s_stringMgr.getString("ColorPropertiesController.title");
for (int i=0; i< classNameList.size(); i++) {
return stringMgr.getString("ImportFileDialog.fixedValue");
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
tabResult = md.getTables(catalog, schemaPattern, tableNamePattern, types);
* Identify the type of data in the cell and get an instance
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
if (table != _table) {
_colDataTypeObjects.clear();
dataTypeComponent = getCustomDataType(table, colDef);
* @see java.lang.Object#toString()
PreparedStatement pstmt = conn.prepareStatement(SQL);
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
OraclePreferenceBean bean1 = new OraclePreferenceBean();
return stringMgr.getString("ImportFileDialog.importFileColumn");
String topLabelText = stringMgr.getString("ProgressBarDialog.insertingRecordsLabel");
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
dataTypeComponent = new DataTypeString(table, colDef);
* @see java.lang.Object#toString()
dataTypeComponent = new DataTypeInteger(table, colDef);
_colDataTypeObjects.put(colDef, dataTypeComponent);
case -8:
return true;
if (objectTreeTabIsSelected()) {
dataTypeComponent = new DataTypeBinary(table, colDef);
* @see java.lang.Object#toString()
CellImportExportInfoSaver.setInstance(saverInstance);
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
// The -1 says to ignore the last arg and use the contents of the values array
state = INIT;
_label = label.length() > 0 ? label : " ";
AUTO_INCREMENT;
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
String THEMEPACK_LOC = s_stringMgr.getString("laf.skinThemePackDir");
super(session, s_stringMgr.getString("oracle.dbOutputTitle", session.getTitle()));
None
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
dataTypeComponent = new DataTypeUnknown(table, colDef);
@SuppressWarnings("unchecked")
String OBJECT_TREE = s_stringMgr.getString("sessionPropertiesPanel.objectTree");
public ChannelXmlBean downloadCurrentRelease(final String host, final int port, final String path,
String THEME_PACK = s_stringMgr.getString("laf.skinThemPack");
title = s_stringMgr.getString("LogPanel.titleInfo");
/**
control = EasyMock.createControl();
return s_stringMgr.getString("TablePriviligesTab.hint");
_table.setValueAt(newValue, _row, _col);
private static boolean readDateAsTimestamp = false;
UDTInfo a =
None
new ConnectToStartupAliasesCommand(this).execute();
* Map of windows(s) that are currently open for a session, keyed by
beginPos = ret;
None
title = s_stringMgr.getString("LogPanel.titleWarn");
* @see java.lang.Object#toString()
if (placement == Largest)
* @see java.lang.Object#toString()
}
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
executable = System.getProperty("java.home");
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
public int getColumnCount() {
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
final FileExtensionFilter filter = new FileExtensionFilter(s_stringMgr.getString("laf.jarZip"), new String[] { ".jar", ".zip" });
}
* @see java.lang.Object#toString()
final String templateStr = ST_ADD_AUTO_INCREMENT_STYLE_ONE;
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
continue;
control = org.easymock.classextension.EasyMock.createControl();
d = new FileWrapperImpl(dirName);
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
_app.getMessageHandler().showWarningMessage(s_stringMgr.getString("SchemaPropertiesController.cacheToDelNotExists", aliasName));
return s_stringMgr.getString("SchemaPropertiesController.hint");
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
CellComponentFactory.registerDataTypeFactory(new DB2XmlTypeDataTypeComponentFactory(),
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
Method getSqlCode = sqlca.getClass().getMethod(METHOD_GET_SQL_CODE,
}
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
String BACKGROUND_COLOR_LABEL = s_stringMgr.getString("ColorPropertiesPanel.backgroundColorLabel");
private JCheckBox toolbarBackgroundColorChk = new JCheckBox("");
* @see java.lang.Object#toString()
private JCheckBox objectTreeBackgroundColorChk = new JCheckBox("");
private JCheckBox statusBarBackgroundColorChk = new JCheckBox("");
String expected = identifierQuoteString + testCatalog + identifierQuoteString + sep +
if (value != null && value.toString().equals("<null>"))
ISQLDatabaseMetaData md = _session.getMetaData();
if (whereClause.length() == 0)
final ISession session = _session;
Method getMessage = sqlca.getClass().getMethod(METHOD_GET_MESSAGE,
propsUnderTest.getTranslateableProperties();
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
Method getSqlca = t.getClass().getMethod(METHOD_GET_SQLCA,
String TOOLBAR_BACKGROUND_COLOR_BUTTON_LABEL =
gbc.gridwidth = GridBagConstraints.REMAINDER;
* @see java.lang.Object#toString()
toolbarBackgroundColorChk.setSelected(_props.isOverrideToolbarBackgroundColor());
private JCheckBox objectTreeBackgroundColorChk = new JCheckBox("");
* @see java.lang.Object#toString()
++gbc.gridx;
* @see java.lang.Object#toString()
++gbc.gridx;
* @see java.lang.Object#toString()
++gbc.gridx;
radLoadAndCacheAll= new JRadioButton(s_stringMgr.getString("SchemaPropertiesPanel.loadAndCacheAll"));
private ISQLDatabaseMetaData mockMetaData = mockHelper.createMock(ISQLDatabaseMetaData.class);
* @see java.lang.Object#toString()
try {
final Statement stmt = conn.createStatement();
Method getSqlState = sqlca.getClass().getMethod(
return _colDef.getLabel() + "={t '" + value.toString() + "'}";
HashMap<String, String> colsTable = EditWhereCols.get(unambiguousTableName);
private static final String METHOD_GET_SQLCA = "getSqlca";
return _colDef.getLabel() + "={ts '" + value.toString() + "'}";
private final static int MARGIN = 5;
* @see java.lang.Object#toString()
if(null != resultTabToReplace && _stickyTab != resultTabToReplace)
chkCacheSchemaIndepndentMetaData = new JCheckBox(s_stringMgr.getString("SchemaPropertiesPanel.CacheSchemaIndependentMetaData"));
return "trunc(" + _colDef.getLabel() + ")={d '" + value.toString() + "'}";
* @see java.lang.Object#toString()
btnDeleteCache = new JButton(s_stringMgr.getString("SchemaPropertiesPanel.deleteCache"));
initStyles();
* @see java.lang.Object#toString()
super.appendSeparator = false;
final Map<String, URL> lafs = loadInstallProperties();
/** Look and Feel register. */
expect(mockSQLConnection.prepareStatement(isA(String.class))).andReturn(mockPreparedStatementForAccessible);
setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("dataTypeDate.typeDate")));
try
return new ClobDescriptor(clob, null, false, false, 0);
String clobData = null;
if (_readClobs)
propertyString += "," + name.trim().toUpperCase();
String USE_CUSTOM_QT_LABEL = s_stringMgr.getString("PreferencesPanel.useCustomQTLabel");
break;
boolean wholeClobRead = false;
setLayout(new GridBagLayout());
public void addCaretListener(CaretListener lis)
_limitReadColumnNameMap.put(name.trim().toUpperCase(), null);
byte[] blobData = null;
String LOOK_AND_FEEL = s_stringMgr.getString("laf.lookAndFeel");
/** Look and Feel Plugin. */
public void restoreText() {
private String _originalValue = null;
String msg =
* Convert the given object into its printable String value for use in Text
return null;
pack();
* @see java.lang.Object#toString()
tm.addColumn(s_stringMgr.getString("oracle.owner"));
deleteAllTableData = true;
* @see java.lang.Object#toString()
UDTInfo c =
_dbOutputPanel.setAutoRefresh(false);
title = s_stringMgr.getString("LogPanel.titleUnknown");
if (getShowHeadings())
String HINT = s_stringMgr.getString("UpdatePreferencesTab.hint");
f1.setLastModified(orgTime + 100000);
try
expect(mockSQLConnection.getConnection()).andStubReturn(mockConnection);
row[i] = DataTypeBlob.staticReadResultSet(_rs, idx);
* @see java.lang.Object#toString()
_lafFolder = new File(pluginAppFolder, "lafs");
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
add(createDataTypesPanel(), gbc);
@Test
if (_editWhereColsPanel.ok())
try {
JLabel cacheLabel = getBorderedLabel(i18n.CACHE_LABEL + " ", emptyBorder);
* @see java.lang.Object#toString()
JLabel cycledLabel = getBorderedLabel(i18n.CYCLED_LABEL + " ", emptyBorder);
public static final String USER_EXTRA_LAFS_FOLDER = "extralafs";
assertEquals("\"", identifierQuoteString);
String EDITABLE_TABLE = s_stringMgr.getString("generalSessionPropertiesPanel.editableTable");
editor.getComponent().addMouseListener(
String DATA_TYPE2 = s_stringMgr.getString("generalSessionPropertiesPanel.dataTYpe2");
final String[] defaultValues = new String[colDefs.length];
if (ti == null)
// data was not fully read in before, so try to do that now
columnDifference = new ColumnDifference();
// check to see if new data is same as old data, in which case we
displayURL(url);
mockPluginManager = mockHelper.createMock("mockPluginManager",IPluginManager.class);
expect(mockSqlDatabaseMetaData.getDatabaseProductName()).andStubReturn("FooBar Database");
FileFilter fileFilter = new FileFilter() {
if(RowNumberTableColumn.ROW_NUMBER_MODEL_INDEX == col)
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
ResultSetColumnReader readerUnderTest = null;
throw new UserCancelledOperationException();
String THEME_PACK = s_stringMgr.getString("laf.themePack");
// i18n[cellDataPopUp.cannnotBGeConverted=The given text cannot be converted into the internal object.\n
}
s_log.error(s_stringMgr.getString("ViewLogsSheet.error.setcaret"), ex);
if(table != null) {
boolean result = false;
// The DataObject returns a string to put into the
s_stringMgr.getString("popupeditableIoPanel.errorWritingFile", args),
private int _iFree;
setBorder(BorderFactory.createTitledBorder(s_stringMgr.getString("dataTypeClob.typeClob")));
_toString = s_stringMgr.getString("SchemaTableCboItem.schemaID.loadAndCache");
registerColumnType(Types.BOOLEAN, "tinyint");
registerColumnType(Types.VARBINARY, "bit varying(2147000000)");
_showClobSizeField = new IntegerField(5);
if (listener != null)
ColumnDifference columnDifference = null;
}
UDTInfo a =
expect(mockResultSetMetaData.getColumnType(8)).andReturn(Types.TINYINT);
expectedColDefIndex++;
StringBuilder buf = new StringBuilder("INSERT INTO ");
for (int i=0; i<colDefs.length; i++) {
String tableName = "foo\"\"bar";
buf.setCharAt(buf.length()-1, ')');
String confirmMsg =
if(false == appFiles.getDatabaseAliasesFile_before_version_2_3().exists())
int count = 1;
UDTInfo a2 =
setLayout(new GridBagLayout());
table = getStatement().getTableForAlias(qualifier);
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
public void addRow(Object[] row)
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
if(table == null) table = getStatement().getTable(null, null, qualifier);
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
expect(rs.next()).andReturn(true);
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
public void testMyURLClassLoaderString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
_btnSessionGCStatus.setBorder(null);
* @see java.lang.Object#toString()
private ISession mockGenericDialectSession = mockHelper.createMock(ISession.class);
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
if(pidBuf.intValue() != pid)
* @see java.lang.Object#toString()
// flag for whether we have already loaded the properties or not
public XMLException(String msg)
try {
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
final boolean specifyColumnType = false;
s_log.error(s_stringMgr.getString("WindowManager.error.bringtofront"), ex);
* @see java.lang.Object#toString()
}
{
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
private static interface i18n {
* @see java.lang.Object#toString()
final JCheckBox allTablesCheckbox = new JCheckBox(s_stringMgr.getString("mssql.allTables"));
* @see java.lang.Object#toString()
* Remove a listener from this session
boolean maxRowsHasBeenSet = correctlySupportsMaxRows;
* @see java.lang.Object#toString()
if (!correctlySupportsMaxRows
if (colInfo.getDecimalDigits() == 0) {
* @see java.lang.Object#toString()
}
optSPWithParams = new JRadioButton(s_stringMgr.getString("codeCompletion.spWithParams"));
* @see java.lang.Object#toString()
_app.getThreadPool().addTask(new Runnable()
if (dataType == Types.LONGVARBINARY) { return Integer.MAX_VALUE; }
public static final int DO_NOT_USE = 0;
ioPanel = new PopupEditableIOPanel(colDef, cellContents, false);
public TableCellEditor getCellEditor(int row, int col)
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
handleAllWarnings(_session.getSQLConnection(), _stmt);
pep = new ParserEventsProcessorDummy();
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
final JCheckBox allRulesCheckbox = new JCheckBox(s_stringMgr.getString("mssql.allRules"));
tm.addColumn(s_stringMgr.getString("oracle.objectName"));
updateCount = _stmt.getUpdateCount();
ListModel useColsModel = useColsList.getModel();
childIndexST = new StringTemplate(ST_CREATE_INDEX_STYLE_TWO);
KeyStroke ctrlF3Stroke = KeyStroke.getKeyStroke(KeyEvent.VK_F3, java.awt.event.InputEvent.CTRL_MASK);
tm.addColumn(s_stringMgr.getString("oracle.objectType"));
private static int whereClauseUsage = USE_JDBC_ESCAPE_FORMAT;
if (length <= 0) {
DBUtil.deleteDataInExistingTable(destSession,
String LIMIT_ROWS_CONTENTS = s_stringMgr.getString("sessionPropertiesPanel.limitRowsContents");
DBUtil.setLastStatement(selectSQL);
if (value != null && value instanceof Boolean)
currentAutoCommitValue = true;
super();
super(session, s_stringMgr.getString("oracle.invalidTitle", session.getTitle()));
* @see java.lang.Object#toString()
mockMetaData =
if (isMysql && foundLOBType)
String SHOW_ROW_COUNT = s_stringMgr.getString("sessionPropertiesPanel.showRowCount");
/**
colJdbcType = DBUtil.replaceOtherDataType(colInfo, sourceSession);
* @see java.lang.Object#toString()
if (columnsCount == values.length) {
// / How much usable data has been read into the stream,
public static final String ALTER_COLUMN_CLAUSE = "ALTER COLUMN";
final StringTemplate st = new StringTemplate(ST_RENAME_VIEW_STYLE_ONE);
public static final String RENAME_COLUMN_CLAUSE = "RENAME COLUMN";
public static final String DEFAULT_CLAUSE = "DEFAULT";
final StringTemplate st = new StringTemplate(ST_RENAME_TABLE_STYLE_ONE);
JOptionPane.showMessageDialog(_app.getMainFrame(), msg);
/**
private void setIntOrUnsignedInt(PreparedStatement stmt, int index, TableColumnInfo column)
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
}
api.addToPopup(DatabaseObjectType.SCHEMA, coll.get(PasteTableAction.class));
setPasteMenuEnabled(false);
if (s_log.isDebugEnabled())
api.addToPopup(DatabaseObjectType.TABLE, coll.get(CopyTableAction.class));
gbc = new GridBagConstraints(0, 1, 1, 1, 0, 0, GridBagConstraints.EAST, GridBagConstraints.NONE, labelInsets, padx, pady);
FilenameFilter tmpFilter = new FilenameFilter() {
final FolderNode changeLogRoot = new FolderNode(s_stringMgr.getString("HelpViewerWindow.changelogs"));
for (int i = 0; i < tables.length; ++i)
String msg =
public static final String CREATE_CLAUSE = "CREATE";
file = appFiles.getLicenceFile();
public static final String TYPE_CLAUSE = "TYPE";
public static final String CACHE_CLAUSE = "CACHE";
String key = url.toString();
public static final String DROP_CLAUSE = "DROP";
DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
return getDropIndexSQL(null, indexName, cascade, qualifier, prefs, dialect);
file = appFiles.getQuickStartGuideFile();
File file = appFiles.getWelcomeFile();
addTreeExpansionListener(new NodeExpansionListener());
if (DatabaseObjectType.TABLE_TYPE_DBO.equals(dbObjs[0].getDatabaseObjectType())) {
String[] parts = tableNameFromSQL.split("\\.");
String TITLE = s_stringMgr.getString("sessionPropertiesSheet.sessionProperties");
float avgTimePerItem = 0;
* @see java.lang.Object#toString()
// Register so that we can display different tooltips depending
// which entry in list mouse is over.
* @see java.lang.Object#toString()
expect(mockFileWrapperFactory.create(mockUpdateDirectory, DOWNLOADS_DIR_NAME));
IObjectTreeAPI api =
public void stateChanged(ChangeEvent evt)
mockPreparedStatement.setString(EasyMock.anyInt(), isA(String.class));
private static final class CreditsPanel extends JScrollPane
private void initComponents(ExportConfigPreferences prefs)
None
// been limited and therefore cannnot be used in the WHERE clause.
private javax.swing.JComboBox cbTableType;
* @see java.lang.Object#toString()
None
None
final StringBuffer sql = new StringBuffer();
final String tableName = column.getTableName();
((MyTableModel)_actualModel).fireTableChanged(new TableModelEvent(_actualModel));
return dataTypeComponent;
registerColumnType(Types.BINARY, "bit varying(2147000000)");
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
tables = _session.getSchemaInfo().getITableInfos(null, catalog, simpleName);
ret.add(new JLabel(s_stringMgr.getString("I18n.EditorCommand")), gbc);
result.append(newTableName);
s_log.error(s_stringMgr.getString("DumpApplicationCommand.error.deletetempfile"));
String msg = s_stringMgr.getString("codecompletion.beingLoaded");
tabHandle.fireClosing(e);
String EDIT_BUTTON_LABEL =
String errMsg = s_stringMgr.getString(
private static final String INFO = s_stringMgr.getString("sqlval.info");
pstmt.setString(1, doi.getSchemaName());
log.error(stringMgr.getString("ProgressBarDialog.error.getdialog"), e);
return true;
final StringBuilder sql = new StringBuilder();
long itemsLeft = (totalItems - currentItem) + 1;
None
KeyStroke ctrlTStroke = KeyStroke.getKeyStroke(KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK);
ResultSet rs = getColLengthResult();
private SyntaxStyle _columnStyle = new SyntaxStyle();
final String msg = s_stringMgr.getString("editextras.errorQuoteSql", ex);
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
_sess.getApplication().getMessageHandler().showMessage(s_stringMgr.getString("SQLPanelController.hqlToSqlSuccess", list.size(), duration));
file = appFiles.getChangeLogFile();
ResultSet rs = getColLengthResult();
public static final String WITH_CHECK_OPTION_CLAUSE = "WITH CHECK OPTION";
if (Character.isDigit(actChar))
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
if (offsetFunctionAvailable) {
ITableInfo ti = createNiceMock(ITableInfo.class);
String expQualifiedName = catalog + "." + schema + "." + table;
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
helpRoot.generateContentsFile();
PluginInfo[] pi = _app.getPluginManager().getPluginInformation();
try
if (!GUIUtils.isToolWindow(child))
try
file = appFiles.getFAQFile();
final String fn = pi[i].getChangeLogFileName();
final URL docUrl = _docURLs.get(i);
* @see java.lang.Object#toString()
settingsMap.put(ExtSettingsNames.HIGHLIGHT_CARET_ROW,
addExpander(DatabaseObjectType.CATALOG, expander);
}
api.addToPopup(DatabaseObjectType.CATALOG, coll.get(PasteTableAction.class));
for(int i=0; i < statSep.length(); ++i)
/** Spring-injected factory for creating install events */
// assertTrue("File f1 Is Set To ReadOnly." , f1.canWrite());
fos = new FileOutputStream(f2.getAbsolutePath());
// assertTrue("File f1 Is Set To ReadOnly." , f1.canWrite());
dir = new FileWrapperImpl(""); // current directory
for (int i=0; i< inData.length; i++) {
super.appendSeparator = true;
if (fetchSize > 128)
String msg = s_stringMgr.getString("DBUtil.info.executeupdate", SQL);
InputStream is = rs.getAsciiStream(index);
switch(column)
String table = _knownTables.get(_caseInsensitiveStringBuffer);
byte[] buf = new byte[_prefs.getFileCacheBufferSize()];
* @see java.lang.Object#toString()
try
try
}
} finally
final String msg = s_stringMgr.getString("DumpApplicationCommand.error.dumpingaliases");
if (DialectFactory.isMySQL(session.getMetaData()))
try
try
try
try
try
try
try
testIntegerColType(sourceName, destName);
_tabbedPane = UIFactory.getInstance().createTabbedPane();
result = bindClobVarInMemory(ps, index, rs, type);
* @see java.lang.Object#toString()
_schemaInfoCache.clearTables(doi.getCatalogName(), doi.getSchemaName(), null, new String[]{"VIEW"});
SessionPluginInfo[] plugins = app.getPluginManager().getPluginInformation(getSession());
SQLDatabaseMetaData d = session.getSQLConnection().getSQLMetaData();
_aliasName.setToolTipText(_aliasName.getText());
String msg = s_stringMgr.getString("DBUtil.info.bindclobfile", f.getAbsolutePath());
* @see java.lang.Object#toString()
FileWrapper f = new FileWrapperImpl(dir, "test.tst");
}
String newDirURL = dir.getAbsolutePath();
private static final long serialVersionUID = 1L;
setContentAreaFilled(false);
public void setSession(ISession session)
jcheckboxMember.setEnabled(radioButtonRoles.isSelected());
jcheckboxAll.setEnabled(radioButtonTables.isSelected() || radioButtonViews.isSelected());
String LOADING_PREFIX = s_stringMgr.getString("DeleteTablesCommand.loadingPrefix");
--depth;
String msg = s_stringMgr.getString("DBUtil.error.bindclobfailure");
for (int i = 0; i < dbObjs.length; i++)
* @see java.lang.Object#toString()
Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();
_closing = true;
String msg = s_stringMgr.getString("DBUtil.error.unknowntype", Integer.valueOf(sourceColType));
if (isMaterializedView(ti, _session))
final String msg = s_stringMgr.getString("ViewLogsSheet.error.processinglogfile");
s_log.debug(s_stringMgr.getString("ViewLogsSheet.info.nulllogfile"));
try
System.out.println("columnName: "+columnName);
String msg = s_stringMgr.getString("DBUtil.info.bindblobmem", Integer.valueOf(blobValue.length));
* @see java.lang.Object#toString()
String msg = s_stringMgr.getString("DBUtil.info.bindblobfile", f.getAbsolutePath());
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
//we don't want to update UI for this button
public void updateUI()
protected void paintComponent(Graphics g)
String msg = s_stringMgr.getString("DBUtil.info.bindcloblength", Integer.valueOf(length));
final Hashtable<String, TableIndexInfo> buf = new Hashtable<String, TableIndexInfo>();
* @see java.lang.Object#toString()
dataArray[index++] = outData;
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
if (tagList.size()> 0 ) {
* @see java.lang.Object#toString()
super(getData(conn));
// Logger for this class
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
* @see java.lang.Object#toString()
ToolsPopupAccessor tpa = (ToolsPopupAccessor) props.get((ToolsPopupAccessor.class.getName()));
closeDock();
private static final long serialVersionUID = 1L;
colList.add(inData[i].substring(startIndex));
/** If <TT>true</TT> line numbers should be displayed. */
for (int i = 0; i < infos.length; i++) {
FBMaintenanceManager mm = new FBMaintenanceManager();
private FileWrapper getCoreArtifactLocation(String artifactName, FileWrapper rootDir, FileWrapper coreDir)
public TreeNode getParent() {
lblNewLineNote = new MultipleLineLabel(s_stringMgr.getString("syntax.abrevNewLineNote"));
if (t instanceof SQLWarning) {
String LOADING_SCHEMAS_MSG =
final String msg =
String LOADING_FUNCTIONS_MSG =
jscrollpane1.setViewportView(jtableRoles);
_tables.put(tableName, h);
if (_dmd != null)
* @see java.lang.Object#toString()
private final Class<?>[]  cTypes = { TreeTableModel.class,
String TITLE = s_stringMgr.getString("editWhereColsPanel.limitColsInCell");
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
result.append(nextVal);
super.DROP_COLUMN_SQL_TEMPLATE = ST_DROP_COLUMN_STYLE_TWO;
s_stringMgr.getString("explainplanexecuter.objectName"),
while(0 < beginPos && false == isParseStop(text.charAt(beginPos), false))
* @see java.lang.Object#toString()
StringBuffer sqlbuf = new StringBuffer();
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
s_log.error("Unexpected exception: " + e.getMessage(), e);
/** If <TT>true</TT> caret should blink. */
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
private JTree jtreeReceiver;
if (app == null)
return s_stringMgr.getString("oracle.explainPlan");
if (status.isCoreArtifact())
boolean result = false;
final boolean anonLogon = _prefs.getUseAnonymousLogon();
/** If <TT>true</TT> show matching brackets. */
private static final long CHECK_INTERVAL_MS = 100;
if (colNames != null) {
RESTORE_FAILED_MESSAGE = s_stringMgr.getString("PreLaunchHelperImpl.restoreFailedMessage");
return null;
ModuleXmlBean module = new ModuleXmlBean();
_session.getApplication().getSessionManager().removeSessionListener(_sessionListener);
WebServiceSession wss = new WebServiceSession(_prefs,_wsSessionProps);
// "CREATE VIEW $viewName$ " +
};
FileWrapper f = new FileWrapperImpl(dir, "te% \u20ac st.tst");
public void removeCaretListener(CaretListener lis)
// Tree.
}
}
private JCheckBox jcheckboxSelect = new JCheckBox();
for (ListDataListener listener : _listeners.toArray(new ListDataListener[0]))
_schemaInfoCache.clearTables(doi.getCatalogName(), doi.getSchemaName(), null, new String[]{"TABLE"});
_schemaInfoCache.clearStoredProcedures(null, doi.getSchemaName(), null);
String SHOW_VIEW_SOURCE = s_stringMgr.getString("InformixPlugin.showViewSource");
new FileOutputStream(f1.getAbsolutePath());
* Determines from the user's preference whether or not to install the
* @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()
* Collection of <TT>ResultTabInfo</TT> objects for all
* Pool of <TT>ResultTabInfo</TT> objects currently being used.
/** Each tab is a <TT>ExecuterTab</TT> showing an installed executer. */
rowCountErrorMessage +=
rowCountErrorMessage +=
tm.addColumn(s_stringMgr.getString("oracle.sqlText"));
columnModel.getColumn(1).setPreferredWidth(300);
JButton exitButton = new JButton("Exit");
JMenu dbdiffMenu = _resources.createMenu("dbdiff");
/* (non-Javadoc)
String HINT = s_stringMgr.getString("WhereClausePanel.hint");
ConnectCommand cmd = new ConnectCommand(_session, _prefs, _sessionProps);
disableLogging(ColTypeMapper.class);
/** If <TT>true</TT> show EOL markers. */
_schemaInfoCache.clearStoredProcedures(doi.getCatalogName(), null, null);
l_call.addParameter("a_userName", XMLType.XSD_STRING, ParameterMode.IN);
s_log.error(s_stringMgr.getString("AliasInternalFrame.error.sessioncreation"));
testBlobColType(sourceName, destName);
private boolean reportedHang = false;
diff.setCol2Exists(false);
return s_stringMgr.getString("DataSetUpdateableTableModelImpl.info.deletecancelled");
String catalog = objs[0].getCatalogName();
String NO_DIFFS_MESSAGE =
//		return new File(_userSettingsDir + File.separator + "squirrel-sql-debug.log");
_tree.setSelectionPath(new TreePath(newFolder.getPath()));
@Test (expected = IllegalArgumentException.class)
g2.scale(scale, scale);
/**
String ONE_FILE_DROP_MESSAGE =
String newURIPath = dir.getAbsolutePath();
private final class MyInternalFrameListener extends WindowAdapter
origAction.actionPerformed(e);
// alter table foo add constraint foocon UNIQUE (myid)
s_log.error(s_stringMgr.getString("AliasWindowFactory.error.copyAlias"), ex);
f = new FileWrapperImpl("/../");
_targetDBMSVersion = md.getDatabaseProductVersion();
// [schema_name.]sequence_name
fos.write(fileString.getBytes());
else if ((value != null) && (value.length() > 0))
}
deletePlan = getSession().getSQLConnection().prepareStatement(
_app.getMessageHandler().showWarningMessage(s_stringMgr.getString("AliasWindowFactory.schemaPropsCopiedWarning"));
// "ALTER TABLE $tableName$ " +
private ButtonTableHeader _tableHeader;
_tabbedExecuterPanel = UIFactory.getInstance().createTabbedPane();
final IApplication app = getApplication();
None
g2.translate(pf.getImageableX(), pf.getImageableY());
g2.translate(0f, -pageIndex * pageHeight);
if (pageIndex >= totalNumPages) {
String hint =
doubleColumnPKOne = getIntegerColumn(primaryKeyTestColumnOne,
SwingUtilities.invokeLater(new Runnable()
None
// Logger for this class
for (int i = 0; i < options.length; i++)
return;
_callback.connected(conn);
"migratePreferences was set to true, but " +
return s_stringMgr.getString("SchemasTab.hint");
// TODO: just noticed that MySQL 5.0 supports a multi-bit BIT
String sourceCatalog = null;
if (DialectFactory.isOracle(sourceSession.getMetaData())
None
if(null == locks)
if (transferData.startsWith("file://")) {
protected IDataSet mockDataSet = mockHelper.createMock(IDataSet.class);
if (useTrunc)
final File outFile = appFiles.getJDBCDebugLogFile();
private ArtifactDownloaderImpl classUnderTest = null;
HashMap<String, String> colNames = (EditWhereCols.get(getFullTableName()));
if (onUnix) {
String HINT = s_stringMgr.getString("oracle.displayUserDetails");
public void testGetReadDateAsTimestamp()
}
l_url = new URL(l_sd.getTarget());
}
OldFileNameFilter fileFilter = new OldFileNameFilter(fileBase);
"MockResultSetMetaData.getColumnClassName: stub not yet implemented");
sep.setPreferredSize(new Dimension(100, 20));
addWindowListener(new WindowAdapter()
syntaxLexer.reset(
String sql = FrameWorkAcessor.getSQLPanelAPI(m_session, m_plugin).getSQLScriptToBeExecuted();
private static String secondUniqueConstraintName = "uniq_constraint2";
ResultSet catalogResultSet1 = buildVarcharResultSetAsRows(null, new String[] { TEST_CATALOG });
cbuf[off + i] = (char)((s.charAt(i)) % 256);
getColumnForModelIndex(i, table.getColumnModel()).setCellEditor(editor);
// Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode
File dir = new File(dirPath);
// i18n[oracle.auotRefresh2=Enable auto refresh]
LoggerController.createLogger(DriverWindowFactory.class);
LoggerController.createLogger(SquirrelPreferences.class);
tfFieldLength.setText(fd.getFieldLength());
String HINT = s_stringMgr.getString("mysql.displayStatus");
String TITLE = s_stringMgr.getString("mysql.status");
String HINT = s_stringMgr.getString("mysql.displayOpenTables");
KeyStroke escapeStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
LoggerController.createLogger(SquirrelPreferences.class);
String HINT = s_stringMgr.getString("MysqlTriggerDetailsTab.hint");
LoggerController.createLogger(SquirrelPreferences.class);
if (collector != null && inMultiSQLStatement) {
if (obj1 != null)
KeyStroke escapeStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
private boolean isAllFields = true;
String[] info = rs.getString(2).split(" located on ");
return 2;
dbo    billing_bak            public             dbo     Grant       Delete .
private FirebirdManagerDataAccess() {}
final Object[] parms = new Object[]
_availableTable = new JTable(new DefaultTableModel(0,0));
msg = s_stringMgr.getString("SQLResultExecuterPanel.rowsUpdated",
_session.getApplication().showErrorDialog(s_stringMgr.getString("mmsql.catalogErr", params));
* the name of the index. */
SQLDriverProperty[] props = _session.getSQLConnection().getConnectionProperties().getDriverProperties();
