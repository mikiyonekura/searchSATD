Iterator it = getPathItemFigs().iterator();
if (settings == null) {
return new SelectionRerouteEdge(this);
LOG.error("Exception", e);
File theFile = new File(saveDir, defaultName + "."
return handle instanceof Component
return String.class;
// forceRepaintShadow();
private static PopupToolBoxButton buildPopupToolBoxButton(Object[] actions,
public final void focusLost(FocusEvent arg0) {
void nodeAdded(Object source, Object arg);
setGraphModel(createGraphModel());
if (value instanceof Collection) {
private CollabDiagramGraphModel createGraphModel() {
return Collections.emptyList();
return Collections.EMPTY_SET;
Stereotype stereo2 = (Stereotype) extensionHelper.getStereotype(ns,
public Object getStateMachine() {
extent.refDelete();
public TargetManagerPanel() {
long startTime = System.currentTimeMillis();
private void translateWithContents(int dx) {
if (contained(nsa, me)) {
try {
/* 4.5.2.18 ElementOwnership */
/* This solves issue 2287. */
damage();
Usage usage = createUsage();
public List<String> getSearchPathList();
addTrigger("end_navigable");
tree.expandPath(tree.getPathForRow(1));
public class CrOppEndConflict extends CrUML {
if (c == null) {
p.addMember(model);
class UMLPartitionContentListModel extends  UMLModelElementListModel {
LOG.error("Error registering profile " + p.getDisplayName());
image = new BufferedImage(width, scaledBufferHeight, imageType);
val = new ArrayList<String>();
public StereotypeStyle getDefaultStereotypeView() {
if (target instanceof FigEdgeModelElement) {
Project p = ProjectManager.getManager().getCurrentProject();
public void remove();
if (UndoManager.getInstance().isGenerateMementos()) {
FigRect fr = new FigRect(X0, Y0, 160, 200, DEBUG_COLOR, DEBUG_COLOR);
* @author jaap.branderhorst
int threshold = getThreshold();
// self associations are special cases. No need to let the maze
* @param threshold The threshold to compare to.
/**
private static Object findNamespace(Object phantomNS, Object targetModel) {
if (Model.getFacade().isASignal(value)) {
* @since Jan 3, 2003
private volatile ListSet allOffenders;
Class<?>[] interfaces = expression.getClass().getInterfaces();
public ListSet getOffenders() {
public interface ControlMech  {
* @param o the given object
LOG.debug("single: "
tagValue = "";
// TODO: Do nothing until code is reviewed
Designer.disableCritiquing();
{Abstraction.class, UmlClass.class, Interface.class, null, },
return null;
return Property.class;
boolean bContinue = true;
PersistenceManager.getInstance()
private JPopupMenu popupMenu;
int serial = getDiagramCount();
public void setDecisionPriority(String decision, int priority) {
Object temp[] = node.getActualParameterListTail().toArray();
if (uri == null) {
mclassifier.getFeature().clear();
InputSource source =
* @param e the element
protected void updateBounds() {
minimumHeight = headFig.getMinimumHeight() + 10;
return results;
* @see org.xml.sax.ContentHandler#characters(char[], int, int)
return handle instanceof Property
panel.registerKeyboardAction(shortcut.getActionInstance(),
if (!(handle instanceof InstanceSpecification)) {
public void remove() {
Project project = getProject();
private static final int MAX_ROW_WIDTH = 1200;
for (Object stereotype
LOG.debug("single: "
if (bodies.size() > 1) {
// Why does the text get added to ALL the elements on the stack? - tfm
setForeground(Color.blue);
popUpActions.addElement(
//   public void setGoalInfo(String goal, String info) {
long critiqueStartTime;
critiquerThread = new Thread(this, "CritiquingThread");
* @param d the designer
((ArgoDiagram) diagram).setDiagramSettings(getDiagramSettings());
public void vetoableChange(PropertyChangeEvent pce) {
/**
private UndoManager undoManager = new DefaultUndoManager(this);
if ((node instanceof ToDoItem) && !flatChildren.contains(node)) {
//        uri = PersistenceManager.getInstance().fixUriExtension(theProjectUri);
Object ep =
getClass().getResource(modelPath).toExternalForm());
if (true) {
* @param overwrite if true, the file is going to be overwritten
if (o instanceof CompositeState) {
if (feature.equals("clientDependency")) {
if ((res.width + res.x) > 6000) {
critique =
getNameFig().setLineWidth(0);
private ActionSettings settingsAction;
if (type == UMLClassDiagram.class) {
if (myName == null || myName.equals("")) {
// GenericArgoMenuBar, but should  be fixed if project open/close is moved
return (parFlavor.getMimeType().equals(
addAllUniqueModelElementsFrom(availableTagDefs, paths,
showUml2warning = false;
if (modelImpl.getFacade().isAPackage(ns)) {
performCommandsInternal(commands);
System.setProperty(
Rectangle bounds = new Rectangle(
private void setLastModified(Project project, File file) {
protected void applyArrowHeads() {
nameFig.setFilled(true);
if (showUml2warning
public class UMLStimulusActionTextProperty  {
if (Model.getFacade().isAClassifierRole(element)) {
* @see junit.framework.TestCase#setUp()
void deleteEnumeration(Object elem) {
if (Model.getFacade().getUmlVersion().charAt(0) == '1') {
// TODO: Must be the incoming messages or the sent ones?
public final class ArgoEventPump {
public Object createAbstraction();
f.setTitle(Translator.localize(title));
*            the Class or null
*            the Class or null
if (!(client instanceof TemplateableElement)) {
return false;
* Collects all the packages participating in a package dependency cycle
*                is the value
org.tigris.gef.util.ResourceLoader.addResourceExtension("gif");
*            the Class or null
throw new NotYetImplementedException();
return "2.2"; //$NON-NLS-1$
LOG.warn("Not yet implemented - returning empty");
operation.setName("newOperation");
Collection<Classifier> listToRemove = new ArrayList<Classifier>();
new String[] {eventName });
public ListSet getOffenders() {
try {
if (metatypeName.equals(mofClass.getName())) {
public class GoalModel extends Observable implements Serializable {
names[i++] = mofClass.getName();
modelImpl.getExtensionMechanismsFactory().buildStereotype(per,
if (elem instanceof Element) {
public Object getDefaultAttributeType();
synchronized (lock) {
getCore().deleteEnumeration(elem);
// 4.5.3.20 [2] No GeneralizableElement can have a parent
// Create add and remove buttons if needed first
SwingUIFactory builder = new SwingUIFactory();
public void refresh() { setTarget(target); }
synchronized (items) {
public abstract JPanel makePanel(int newStep);
TabToDo ttd =
Localizer.addResource("GefBase",
*            The stereotype to copy from.
Localizer.addResource("GefBase",
public static Locale[] getLocales() {
public Object getDefaultAttributeType();
* @see #buildClass()
evt = sMFactory.buildTimeEvent(s, ns);
* @see #buildClass()
public void moveToTrash(Object obj);
return Component.class;
Object getPackage(Object handle);
public void updateRoots() {
class SimpleStateTransformer implements Transformer {
public class TestModelEventPump extends TestCase {
private void computeExtensionLocations() {
public String getUniqueDiagramName() {
addModelInternal(theRoot);
LOG.debug("Deleting last diagram - creating new default diag");
public NotationSettings() {
String tagName = Facade.DERIVED_TAG;
}
public void testAttributeNewTypeNamespace() throws ParseException {
}
attributeSpecialStrings[assPos++] =
ZipEntry zipEntry =
if (majval <= 0) {
public static String encode(String str) {
if (expr != null) {
fooClass = project.findType(
public class CrConsiderFacade extends CrUML {
// forceRepaintShadow();
throw new XmiFormatException(ex);
*            the project to save
String xmiEntry = getEntryNames(file, ".xmi").iterator().next();
public final class ModeInspectorPanel extends JPanel implements ModeChangeListener {
String name = attrList.getValue("name");
private void addTranslations() {
/**
private void setStyleAttributes(Fig fig, Map<String, String> attributeMap) {
Editor editor = Globals.curEditor();
Diagram d = super.readDiagram(is, closeStream);
// Fig(Rectangle, DiagramSettings)
Object parameters[] = new Object[2];
* @return "0"=hidden, null=shown
public final class ModeInspectorPanel extends JPanel implements ModeChangeListener {
for (Class clazz : persistersByClass.keySet()) {
* @throws DOMException
public class TestXmiReaderImpl extends TestCase {
loadModel();
if (str.equals("Class")) {
private List<CrOCL> getAllCritiquesInModel() {
for (Object object : packages) {
throw new RuntimeException();
CoreProfileReference.setProfileDirectory("uml22");
if (subject == null) {
List<String> vars = (ArrayList<String>) parameters[0];
public class UndoUmlHelperDecorator extends AbstractUmlHelperDecorator {
throw new UnsupportedFlavorException(dataFlavor);
UndoManager.getInstance().empty();
// solution for the fill color, better find a more general solution:
ArgoDiagram activeDiagram = DiagramUtils.getActiveDiagram();
Object newNode = Model.getUmlFactory().buildNode(getArg("className"));
* @param compositeState the given compositestate
// We're looking at focus change to
private void loadTabs(String direction) {
return TemplateParameterSubstitution.class;
private static boolean isMainApplication;
private boolean isDeleteEventRequired(
private DetailsPane northEastPane;
saveAction = new ActionSaveProject();
private Font defaultFont = new Font("Dialog", Font.PLAIN, 10);
public void trySaveWithProgressMonitor(
Project p =
class UMLPartitionContentListModel extends  UMLModelElementListModel {
* @deprecated in 0.29.1 This is only a helper class for save/load and will
private boolean isDeleteEventRequired(
GenericArgoMenuBar menu = (GenericArgoMenuBar) getJMenuBar();
public void trySaveWithProgressMonitor(
if (Model.getFacade().getUmlVersion().charAt(0) == '1') {
abstract class UMLIncludeListModel extends UMLModelElementListModel {
private static class ShadowFig extends FigNodeModelElement {
if (target instanceof PathContainer) {
public class TestModelEventPump extends TestCase {
if (result.startsWith("Uml")) {
public static void jumpToDiagramShowing(List targets) {
ArrayList<ModeFactory> modeFactories = new ArrayList<ModeFactory>();
if (myMap instanceof HashMap) {
putDefaultShortcut(ACTION_AUTO_CRITIQUE, null,
public class GenericArgoMenuBar extends JMenuBar implements
* @param tagName
this.add(new ActionDeleteModelElements());
public void addFileSaved(String filename) {
if (!multiSelect) {
this.add(new ActionDeleteModelElements());
public void structureChanged() {
Model.getPump().addClassModelEventListener(this,
private static final UUIDManager INSTANCE = new UUIDManager();
if (!Model.getFacade().isATransition(mee.getNewValue())) {
packagePerspective.addRule(new GoOperationToCollaboration());
treeModel.modelElementChanged(event.getSource());
if (Model.getFacade().isAPackage(o)) {
* MVW: These are the WFRs for DataType:
Collection<Object> newTargets = new ArrayList<Object>();
String className = getClass().getName();
* @see Designer
public void setThreshold(int threshold) {
public class CrOppEndVsAttr extends CrUML {
if (Model.getFacade().isAGeneralization(name1Object)) {
if (Model.getFacade().isAStateMachine(o)) {
public List presentationsFor(Object obj);
factories.put(type, factory);
String getName(Object handle);
getLayer().getGraphModel().removeGraphEventListener(getLayer());
Project p = ProjectManager.getManager().getCurrentProject();
if (!(UndoManager.getInstance() instanceof DiagramUndoManager)) {
setBigPort(new FigEmptyRect(r.x, r.y, r.width, r.height));
public class FigClassAssociationClass extends FigClass {
setLineColor(LINE_COLOR);
Editor curEditor = Globals.curEditor();
* @throws IllegalStateException If the target pointer is at the
public void setCompositeStateHeight(int h) {
Model.getCoreHelper().setMultiplicity(target, item);
public Object makeNode() {
if (Model.getFacade().isAModel(node)) {
updateFields();
GridBagConstraints c = new GridBagConstraints();
typeInstanceValueList.addActionListener(new ActionListener() {
if ((mee.getPropertyName().equals("incoming")
private Object target;
private JTextArea stringField;
if (!Model.getFacade().isATransition(mee.getNewValue())) {
if ("name".equals(fieldName)) {
private boolean notifyModel;
if (!contains(o)) {
public void propertyChange(PropertyChangeEvent evt) {
updateStereotypeText();
// TODO: We need the property panels to have some reference to the
*            model to use for namespace if namespace is null
f = oper;
public Collection<StateVertex> getAllPossibleSubvertices(Object oState) {
doCopyNamespace(source, target);
Rectangle drawingArea =
ownedElements.addAll(((Namespace) elem).getOwnedElement());
if (parent.isLeaf()) {
if (arguments != null) {
return usage;
Set<ModelElement> results = new HashSet<ModelElement>(2000);
if (isCompartmentVisible(Model.getMetaTypes().getAttribute())) {
private void setNewTrigger(Transition transition, Event event) {
.getConnections(relationship).iterator();
public Collection getAllBehavioralFeatures(Object ns) {
final Set<ModelElement> dupCheck =
public void delete(Object elem) {
return false;
* <li>The 2nd column is the "from" element type.
layoutedObjects.add(obj);
LOG.error("Property '" + attribute
private Collection<String> getSubtypes(ModelPackage extent,
// We're looking at focus change to
|| Thread.currentThread().equals(eventThread)) {
if (base != null && !getAllPossibleBases(role).contains(base)) {
return getInnerContainingModel(
// add the listeners to the newOwner
protected void updateCompartment(Object metaType) {
// Set up reader to be first filter in chain
public Object createMultiplicity(int lower, int upper) {
name = modelImpl.getFacade().getUMLClassName(element)
private Map<Resource, Boolean> readOnlyMap =
@Override
if (!(classifier instanceof Classifier)) {
if (me.getClickCount() >= 2) {
Element result = ((Element) handle).getModel();
EList<Class> eList = ((Stereotype) handle).getExtendedMetaclasses();
return Collections.emptySet();
if (LOG.isInfoEnabled() && mee.getNewValue() == null) {
for (Property p : ((Classifier) handle).getAttributes()) {
return o instanceof State && ((State) o).getOwner() == null;
* TODO We should loop round the compartments to build this string. That
public final class ModeInspectorPanel extends JPanel implements ModeChangeListener {
* @return true if the stereotype may be applied
* equal to the given one - inheritance does not work.*/
* @param tagName
Object buildCompositeStateOnStateMachine(Object statemachine);
Object type,
public void setCompartmentVisible(FigCompartment compartment,
public void populate() {
for (Object f : getFigs()) {
return Collections.emptySet();
List figList = fg.getFigs();
newH = Math.max(minNameHeight + 2 * getLineWidth(), newH);
String GENERATED_TAG = "GeneratedFromImport"; //$NON-NLS-1$
*            the Class or null
public Object createAbstraction();
public Object createAbstraction();
Iterator it = getPathItemFigs().iterator();
public Object createAbstraction();
public Object createAbstraction();
public Object createAbstraction();
public Object createAbstraction();
public Object createAbstraction();
public final class ModeInspectorPanel extends JPanel implements ModeChangeListener {
* @return Object
Object getStatebyName(String path, Object container);
*            the Class or null
DiagramFactory.getInstance().registerDiagramFactory(
ToDoList tdList = Designer.theDesigner().getToDoList();
protected boolean invisibleAllowed = false;
// used to process PGML.tee forces this to be public. I don't understand why.
* Default width for a node fig.
setName(unnamed1, null);
LayerPerspective lp = (LayerPerspective) getLayer();
public ClearAction(String name) {
Object intType = project.findType("Integer", false);
private void setNewTrigger(Transition transition, Event event) {
// Because UML 1.4 & 2.1 metamodels are organized differently we need
// Instead that subsystem should register its desired menus and actions.
private void setNewTrigger(Transition transition, Event event) {
ToDoItem item = hitClarifier(me.getX(), me.getY());
@Override
public void setUnderline(boolean u) {
int iconX = getX();
{"org.argouml.persistence", "org.argouml.ui"},
*            The addAction to set
Method m = obj.getClass().getMethod("getItemUID", (Class[]) null);
return r.getURIFragment((EObject) element);
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
model, Namespace.class);
private void deepUpdateFontRecursive(Font f, Object pathFig) {
model, Namespace.class);
protected void setSuppressCalcBounds(boolean scb) {
if (titleLabel != null) {
@Override
private static JCheckBoxMenuItem getCheckItem(Action a) {
me.consume();
public class SystemInfoDialog extends ArgoDialog {
public TargetManagerPanel() {
private void fixup(Object owner) {
return ProjectManager.getManager().getCurrentProject();
public class TestProfileDefault extends TestCase {
TableColumn elemCol = srcPathTable.getColumnModel().getColumn(0);
super.setLineColor(LINE_COLOR);
for (Fig f : (List<Fig>) getPathItemFigs()) {
if (Model.getFacade().isANamedElement(own)) {
boolean isTopState(Object o);
* org.argouml.uml.ui.behavior.common_behavior.
if (delegate instanceof FigNodeModelElement) {
* @author jaap.branderhorst@xs4all.nl
@Override
class UMLStubStateComboBoxModel extends UMLComboBoxModel {
public TargetManagerPanel() {
ExplorerEventAdaptor.getInstance().structureChanged();
*            The object becoming a copy.
* Construct a new critic instance.  Typically only one instance of
if (getOwner() == null) {
if (getStereotypeFig().isVisible()) {
public class SourceUnit {
if (middleGroup != null) {
TargetManager.getInstance().addTargetListener(this);
Rectangle drawingArea =
FigBaseNode(final Object owner, final Rectangle bounds,
* call to setSelectedItem() outside the "buildingModel",
* call to setSelectedItem() outside the "buildingModel", otherwise
abstract class UMLIncludeListModel extends UMLModelElementListModel {
LOG.info("user pressed cancel");
public class ActionGenerateAll extends UndoableAction {
// We're looking at focus change to
return super.getListCellRendererComponent(list, text, index,
return ((target instanceof Diagram || Model.getFacade().isAUMLElement(
* @return the string s with all non-letters/digits stripped off
class UMLStubStateComboBoxModel extends UMLComboBoxModel {
|| target instanceof Critic)) {
/**
* @param newNode this is the new node that one of the ends is dragged to.
public Object getTarget() {
*            The edge for which the menu item will be added.
public void setUnderline(boolean u) {
public void actionPerformed(ActionEvent event) {
if (target instanceof FigEdge) {
public class TabTaggedValuesModel extends AbstractTableModel implements
diagramClasses.put(DiagramType.Class, UMLClassDiagram.class);
ArgoDiagram diagram = createDiagram(ns, settings);
LOG.warn("IllegalArgumentException caught", iae);
* @see org.tigris.gef.graph.MutableGraphModel#connect(
setExpandOnly(true);
JPanel setDefStereoV = new JPanel();
* @since Jan 3, 2003
String getName(Object handle);
aValue = "";
private void setStyleAttributes(Fig fig, Map<String, String> attributeMap) {
public String repair();
*            The property name the listener wishes to receive events for.
*            ModelElement to be used as argument
ExplorerEventAdaptor.getInstance().modelElementAdded(
if (Model.getFacade().isAClassifier(o)) {
if (Model.getFacade().isAStateMachine(o)) {
if (Model.getFacade().isAUMLElement(o)) {
boolean changed = false;
ProjectManager.CURRENT_PROJECT_PROPERTY_NAME)
* @param tagName
Project p = ProjectManager.getManager().getCurrentProject();
Action action =
dontTest.add("Permission");
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
class SimpleStateTransformer implements Transformer {
duplicate.put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, DEFAULT_MASK),
Project project = ProjectManager.getManager().getCurrentProject();
public void setShadowSize(int size) {
public class ExceptionDialog extends JDialog implements ActionListener {
elementName.getEditor()
* @since Jan 3, 2003
private boolean isDeleteEventRequired(
eastPane  =
"org.netbeans.mdr",
public class UndoUmlHelperDecorator extends AbstractUmlHelperDecorator {
public TargetManagerPanel() {
// convinced ourselves that everything with a getItemUID method
Object name = null;
Method m = obj.getClass().getMethod("getUUID", (Class[]) null);
public static void setProfileDirectory(String dir) {
String filename = modelFile.getName();
private static boolean registerPersister(Class target, String tag,
for (Object edge : d.getLayer().getContentsEdgesOnly()) {
*                 if interrupted - should never occur in test environment
* @since Jan 3, 2003
if ("org.argouml.uml.diagram.ui.PathItemPlacement".equals(
stereotypesView.addRadioItem(new ActionStereotypeViewTextual(this));
if (Notation.findNotation(newLanguage) == null) {
private final List<ProjectMember> members = new MemberList();
* @return the persister used and usable for file.
*            model to use for namespace if namespace is null
* @since Jan 3, 2003
public boolean getShowStereotypesValue() {
* @throws DOMException
init(true, Configuration.makeKey("notation", "all"));
private static final String UML_PATH_PREFIX;
if (!"1.4".equals(Model.getFacade().getUmlVersion())) {
* @since 0.17.3
* @return true if ModelElement is owned by the given Namespace and it is
// Specific classes to be remapped
public void setUri(final URI theUri);
((ToDoPane) ProjectBrowser.getInstance().getTodoPane())
public class TestModelEventPump extends TestCase {
if (lastPanel != null) {
LOG.debug("single: "
public class GoalModel extends Observable implements Serializable {
private boolean isDeleteEventRequired(
if (Configuration.getBoolean(getCriticKey(), true)) {
* @see org.tigris.gef.graph.MutableGraphModel#connect(
public class GoalModel extends Observable implements Serializable {
class CurDecisionCM implements ControlMech {
public class GoalModel extends Observable implements Serializable {
public Object getDefaultAttributeType();
* commented out next piece to remove failure of testcase. The testcase
private Set<ResolvedCritic> resolvedItems;
final FigGroup group = (FigGroup) getGroup();
private void setNewTrigger(Transition transition, Event event) {
public int getEventEndRange() {
private void setNewTrigger(Transition transition, Event event) {
private void populateClassMaps(
private static boolean showUml2warning = true;
*            the Class or null
firePropChange("text", oldText, s);
}
public void setUnderline(boolean u) {
protected void positionChildren() {
LayerPerspective lp = (LayerPerspective) getLayer();
@Override
public class TestSequenceDiagramModule extends TestCase {
FigPoly poly = (FigPoly) returnEdge.getFig();
points[i].y = fe.getFirstPoint().y + DEFAULT_ACTIVATION_HEIGHT;
+ nameFig.getMinimumHeight() + 4;
public class TestSequenceDiagramModule extends TestCase {
notationSettings.setShowSequenceNumbers(true);
final int x =
@Override
public Object createAbstraction();
Rectangle r = new Rectangle(center.x - (size.width / 2),
public class UndoUmlHelperDecorator extends AbstractUmlHelperDecorator {
public Object createAbstraction();
public Object createAbstraction();
private Collection internalGetAllRealizedInterfaces(Object o,
private Collection internalGetAllRealizedInterfaces(Object o,
public Object createAbstraction();
public Object createAbstraction();
void deleteEnumeration(Object elem) {
public Object createAbstraction();
public Object createAbstraction();
public Object createAbstraction();
public Object createAbstraction();
public Object createAbstraction();
*            The stereotype to copy from.
public class ActionAddTopLevelPackage extends UndoableAction {
public Object createAbstraction();
public Object createAbstraction();
public Object createAbstraction();
public Object createAbstraction();
void deleteEnumeration(Object elem) {
public Object createAbstraction();
public Object createAbstraction();
public Object createAbstraction();
public Object createAbstraction();
public Object createAbstraction();
void deleteEnumeration(Object elem) {
if (!figList.equals(graph.selectedFigs())) {
public Object createAbstraction();
public Object createAbstraction();
*            the Class or null
*            the Class or null
*            the Class or null
*            the Class or null
version = ApplicationVersion.getVersion();
*            the Class or null
throw new NotImplementedException();
// If we don't have a fig for this UML object, we'll need to add
ModelCommandCreationObserver mco = getModelCommandCreationObserver();
private Collection internalGetAllRealizedInterfaces(Object o,
* @return a List of directory paths
class SimpleStateTransformer implements Transformer {
class FacadeEUMLImpl implements Facade {
return Collections.EMPTY_SET;
return State.class;
protected static final Logger LOG = Logger
if ("typedParameter".equals(name)) {
if (!(handle instanceof Collaboration)) {
if (!(handle instanceof Collaboration)) {
return null;
return handle instanceof Element;
try {
instanceof org.omg.uml.behavioralelements.commonbehavior.Object;
return false;
return handle instanceof MultiplicityElement;
return AggregationKind.SHARED_LITERAL.equals(((Property) handle)
return false;
return false;
return true;
private AdapterFactoryEditingDomain editingDomain;
addOwnedElement(container, handle);
if (from == null || to == null) {
return handle instanceof Signal;
if (!(element instanceof Classifier)) {
if (sel instanceof SelectionClass) {
((MultiplicityElement) handle).setLowerValue(null);
if (!(o instanceof BehavioralFeature)) {
//       Update for UML 1.4 metamodel if not replaced by reflection
throw new NotImplementedException();
if (!(bexpr instanceof ValueSpecification)) {
editingDomain = new UML2AdapterFactoryEditingDomain(
private void initializeEditingDomain() {
public void deleteCollection(Collection col) {
Iterator it = modelImpl.getCoreHelper().getSupertypes(object)
Iterator<Package> iter = ((Profile) ns).getNestedPackages()
for (Stereotype o : getStereotypes(model)) {
* <li>The 2nd column is the "from" element type.
public boolean isContainmentValid(Object metaType, Object container) {
if (isATransition(handle)) {
updateCompartment(Model.getMetaTypes().getAttribute());
if (rootModel != null
RunnableClass run = new RunnableClass() {
@Deprecated
synchronized (idToObjectMaps) {
Project p = ProjectManager.getManager().getCurrentProject();
public Object getExitPoint() {
private InputSource chainedTransform(String[] styles, InputSource input)
String systemId = input.getSystemId();
File tmpFile = File.createTempFile(TEMP_XMI_FILE_PREFIX, ".xmi");
public class TestReadCompressedFilesAndHref extends
if (classifier != null) {
allEnds = new ArrayList<AssociationEnd>(allEnds);
((Reception) reception).setSignal(null);
Stereotype stereo =
modelUrl = getValidURL(fixupURL(systemId));
public Object getStereotype(Object ns, Object stereo) {
Iterator it =
final String suffix = getSuffix(systemId);
// removing everything and adding it again. - tfm
((TagDefinition) handle).setTagType(tagType);
Include theInclude = ((Include) extend);
if (ref == null) {
LOG.error("Failed to resolve " + docId + "#" + xmiId );
return getUpper(ranges.get(ranges.size() - 1));
if (modelUrl == null) {
reverseUrlMap.put(modelUrl.toString(), relativeUri);
if (modelUrl == null) {
return ((ClassifierRole) handle).getBase();
for (ElementImport ei : ((UmlPackage) pack).getElementImport()) {
return Collections.unmodifiableCollection(
return ((ElementImport) handle).getImportedElement();
public Object getContainer(Object handle) {
return ((EnumerationLiteral) value).getName();
Object value;
} catch (InvalidObjectException e) {
for (Message mes2 : listToChange) {
if (language != null && language.length() > 0) {
private void registerClassEvent(PropertyChangeListener listener,
StringBuffer result = new StringBuffer();
LOG.warn("Can't handled TaggedValue.dataValues which "
decrementEvents();
if (LOG.isDebugEnabled()) {
public Stereotype buildStereotype(
Parameter param = getCore().createParameter();
private static final Class<?>[][] VALID_CONNECTIONS = {
mclassifier.getFeature().clear();
final Collection<Permission> permissions = getPackageImports(ns);
permission, ModelManagementHelper.ACCESS_STEREOTYPE)
if ("1_N".equals(sarg)) {
private Collection internalGetAllRealizedInterfaces(Object o,
if (handle instanceof ModelElement
if (kindType.equals("composite")) {
ret = new ArrayList(ret);
for (Iterator i = allOfType.iterator(); i.hasNext();) {
Set<ModelElement> allContents = new HashSet<ModelElement>(2000);
if (!(child1 instanceof GeneralizableElement
if (!(child1 instanceof GeneralizableElement
Collection<Dependency> deps = ns.getClientDependency();
}
(Classifier) handle);
if (container != null
target.setMultiplicity(getMultiplicity11());
@Deprecated
protected final void setPorts(Layer layer, FigEdge newEdge) {
* @param isSpecification
if ("name".equals(fieldName)) {
@SuppressWarnings("unchecked")
public void changedUpdate(final DocumentEvent p1) {
public UMLExpressionLanguageField(UMLExpressionModel m, boolean n) {
JPanel p = new JPanel();
public TargetManagerPanel() {
@SuppressWarnings("unchecked")
private Component scrollPane;
valueExists = new JCheckBox();
if (Model.getFacade().getUmlVersion().charAt(0) != '1') {
@Override
//	    if (Model.getFacade().isALiteralBoolean(sType)) {
public void changedUpdate(DocumentEvent arg0) {
* When display to user, we only show one body. A "..." button is enabled for
removeAllElements();
super("type", modelElement.getClass(),
return ret;
for (Object importedElem : Model.getModelManagementHelper()
KeyboardFocusManager focusManager =
if (Model.getUmlHelper().isMovable(metaType)) {
if (language != null && language.length() > 0) {
return null;
public class CompoundCritic extends Critic {
return name.hashCode();
report =
private DiagramSettings settings;
ToDoItem item = toDoItem(i.getOffenders().get(0), dsgr);
LOG.warn("Configuration not loaded from " + propertyLocation, ioe);
// Check if there is a LOG.debug(String, String) method that can
showBoldName = getSettings().isShowBoldNames();
GUI.getInstance().addSettingsTab(tab);
throw new NotYetImplementedException();
// org.argouml.model.XmiException: Unknown element in XMI file : Model
throw new NotYetImplementedException();
return handler;
if (input.getSystemId() == null) {
* Show the description of a todo item.
String id = inputSource.getPublicId();
for (ToDoItem item : tde.getToDoItemList()) {
* @return true if thisitem is still valid
comp.setEnabled(false);
JLabel image = new JLabel("");
detailsPanel.add(new JLabel(""), labelConstraints);
node.getLetExpressionTypeDeclaration().apply(this);
* @since Jan 3, 2003
return ep;
return ProjectManager.getManager().isSaveActionEnabled();
}
CommentEdge ce = (CommentEdge) obj;
private boolean creatingCurrentProject;
private static String formatCountLabel(int size) {
// add Figs to the FigNode in back-to-front order
}
if (currentProject == oldProject) {
return figNode;
firePropertyChanged(OPEN_PROJECTS_PROPERTY,
add(tools);
List<String> path = new ArrayList<String>();
if (isReception) {
LOG.error("Exception caught", e);
return modelImpl.getCoreHelper().getSource(relationship);
if (Model.getFacade().isAModel(obj)) {
String extForm = getClass().getResource(Argo.ARGOINI).toExternalForm();
//        return dirty;
boolean loadedClass = false;
ms.setSelected();
if (argoRoot.startsWith(JAR_PREFIX)) {
if ( Model.getFacade().getUmlVersion().charAt(0) == '1') {
}
private static final String DEFAULT_NOTATION_NAME = "UML";
public TargetManagerPanel() {
private static NotationSettings initializeDefaultSettings() {
}
}
//        try {
String getName(Object handle);
private boolean showTypes;
//                Model.getExtensionMechanismsFactory().buildTaggedValue(
* Parse a string representing an extension point and return a new extension
Project project =
static {
/**
g = Model.getStateMachinesFactory().createGuard();
new TransitionNotationUml(t).parseTransition(t, line);
s.append((new TransitionNotationUml(trans)).toString(trans,
}
if (me == null || !(Model.getFacade().isAModelElement(me))) {
result.append(name).append(separator);
//		w.println("<!DOCTYPE profile SYSTEM \"profile.dtd\" >");
return NO_PROBLEM;
PGMLStackParser parser = new PGMLStackParser(project.getUUIDRefs(),
break;
GridBagLayout gb = new GridBagLayout();
private static final String[] FONT_NAMES = {
String varName = vars.get(0);
node.getPathName().apply(this);
List<File> profileFiles = UserDefinedProfileHelper.getFileList(
if (entry != null) {
}
val = (int) Double.parseDouble(node.getReal().getText());
node.getQualifiers().apply(this);
node.getDeclaratorTypeDeclaration().apply(this);
public class StylePanelFigText extends StylePanelFig {
// these operations are ok for lists too
setTarget(e.getNewTarget());
// Additional Operation 4.5.3.3 [1]
if (feature.equals("sum")) {
/* 4.5.2.3 Association */
} else if (sym.equals("OclExpression")) {
if (feature.equals("namespace")) {
return new HashSet<Object>(Model.getFacade()
if (feature.toString().trim().equals("oclIsKindOf")
if (!("namespace".equals(event.getPropertyName()))) {
ArgoEventPump.fireEvent(new ArgoStatusEvent(
List res = new ArrayList();
lineField.setSelectedItem(c);
if (feature.equals("supplierDependency")) {
sel = Model.getFacade().getModelElementContainer(sel);
putDefaultShortcut(ACTION_REORDER_FORWARD, KeyStroke.getKeyStroke(
}
updateStats();
tabs.addTab(
final AbstractAction rememberedSaveAction = this.saveAction;
perspectiveList.requestFocus();
Globals.showStatus(Translator.localize("action.setting-size",
textArea = new JEditorPane();
if (language != null && language.length() > 0) {
Collection children = Collections.emptySet();
LOG.error("Exception", e);
removeTargetListener((TargetListener) tab);
public void dragGestureRecognized(
Collection str = Model.getFacade().getFeatures(dm);
/* If the destination is not a NameSpace, then abort: */
* @param tagName
}
LOG.error("Explorer caught exception ", e);
public void propertyChange(PropertyChangeEvent evt) {
LOG.error(this.getClass().toString() + ": getSourcePort("
return handle instanceof Action
if (conns == null || conns.size() != 2) {
renderingChanged();
p.destroy();
public class DevActionFactory implements ContextActionFactory {
public class UMLActivityDiagram extends UMLDiagram implements ActivityDiagram {
addTrigger("end_navigable");
return popUpActions;
//      if (Model.getFacade().isAOperation(base)
Object newRegion = mee.getNewValue();
if (mee instanceof AssociationChangeEvent
if (eName == "incoming" || eName == "outgoing") {
renderingChanged();
cl = new Checklist();
}
* relocate() has been implemented. */
* @param c the Classifier. If this is not a Classifier, then
// Status as of Nov. 2008 - Figs created, property panels exist, more
int iconX = getX();
private static final String EVENT_NAME = "ownerScope";
getGroup().calcBounds();
updateOwnerScope(Model.getScopeKind().getClassifier().equals(
if (aboveAndRight) {
LOG.debug("Attempted to populate a FigEditableCompartment"
getFig().setLineColor(Color.red);
stereotypeStyle = getSettings().getDefaultStereotypeView();
return /*"unnamed " + */ getLabelName();
setNamespace(ns);
ce.getLayerManager().getActiveLayer().calcDrawingArea();
if (!Arrays.asList(getComponents()).contains(toolbar)) {
point.x = elemFig.getX() + elemFig.getWidth() + DISTANCE;
firePropChange("pathVisible", !visible, visible);
Iterator it = delegate.iterator();
setText();
if (element instanceof Classifier) {
private Set<Object[]> listeners = new HashSet<Object[]>();
public void mouseReleased(MouseEvent e) {
public class ImportStatusScreen extends JDialog
*            of the project
return Collections.EMPTY_SET;
if (element instanceof Classifier) {
/** Default X offset of origin used when building figs */
instructions =
.getRoot());
getStereotypeFig().setVisible(true);
* @return the string s with all non-letters/digits stripped off
* Set the action as enabled when any row is selected
*            the model element to query for connections
return packageName.replace('.', DIAGRAM_NAME_SEPARATOR)
JTextField text = new JTextField(ps.getDefaultPath());
getConfigPanel();
}
private String getQualifiedName(Object element) {
return null /*ActionSequence.class*/;
private List objects = new LinkedList();
public static String generateID() {
JOptionPane.showMessageDialog(
add(controlsPanel, BorderLayout.SOUTH);
project.addMember(mmodel);
* @see org.tigris.gef.graph.MutableGraphModel#connect(
inAListExpressionListOrRangeTail(node);
fireContentsChanged(this, 0, size - 1);
// probably the TabText should only show an empty pane in that case
public class TestModelEventPump extends TestCase {
removeTargetListener((TargetListener) lastPanel);
//Parser.ParseAndUpdate(modelObject, s);
if (isFiring() && !newValue.equals(getProperty())) {
Project p = ProjectManager.getManager().getCurrentProject();
Class targetClass = targetItem.getClass();
* @since Jan 3, 2003
}
super(Translator.localize("label.static"),
* @see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)
* @see org.argouml.model.DataTypesHelper#getValueSpecificationValues(java.lang.Object)
}
public class UndoUmlHelperDecorator extends AbstractUmlHelperDecorator {
}
ModuleLoader2.getDescription(
updateEdges();
private static String[] allModelElements =
private int offset = 0;
// Check superclass.
if (Model.getFacade().isACallAction(action)) {
// get the source of the return message
removeFig(act);
updateMinimumHeight();
// [4] The parent must be included in the Namespace of the
* @param compositeState the given compositestate
*            the Class or null
throw new NotYetImplementedException();
*            model to use for namespace if namespace is null
for (Region region : regions) {
return null;
throw new NotYetImplementedException();
return false;
throw new NotYetImplementedException();
public class TestModelEventPump extends TestCase {
public Collaboration buildCollaboration(Object handle) {
allMetaTypes = new ArrayList<Class<?>>(125);
list.addAll(Model.getModelManagementHelper()
currentIndex = num;
setFont(LookAndFeelMgr.getInstance().getStandardFont());
class UMLValueSpecificationPanel extends JPanel {
}
Object namespace = Model.getFacade().getNamespace(target);
throw new NotYetImplementedException();
namespace = target;
if (Model.getFacade().isAClassifier(o)
//   public void resolve(Object reason) {
// Delete the old extent first
result.addAll(getAllBehavioralFeatures(it.next()));
Object container = pack;
// There actually don't appear to be any restrictions on the
if (ta == null || ta.getModelElement() == null) {
LOG.debug(
* TODO: Note this should not be ni UML2 version
List<Pair> readOnlyListeners;
public AbstractArgoJPanel(String theTitle) {
if (project != null) {
setGraphModel(createGraphModel());
if (isReadOnly(element)) {
for (int i = 0; i < len; i++) {
}
return ro;
if (values.size() + refValues.size() > 1) {
// TODO: not implemented for UML 2 - tfm
if (activeDiagram == null) {
Model.getExtensionMechanismsHelper().addTaggedValue(
if (handle instanceof Parameter
for (Pair p : listeners) {
((ComponentInstance) handle).setNodeInstance(null);
System.setProperty("com.apple.mrj.application.apple.menu.about.name",
"label.namespace.navigate.tooltip"),
public boolean canFixIt(ToDoItem item) { return false; }
*            is the JMenuItem to do this for.
private static Hashtable statuses = new Hashtable();
/**
node.getQualifiers().apply(this);
System.out.println("VOILA!");
* @see javax.swing.Action#isEnabled()
// Additional Operation in 4.5.3.9
return ""; //$NON-NLS-1$
* Supply the encoding to be used throughout the persistence
public AbstractArgoJPanel(String theTitle) {
private void setNewTrigger(Transition transition, Event event) {
private void checkOffs(ListSet offs) {
addFig(getBigPort());
public Object makeNode() {
Rectangle r = getBounds();
protected ColorUIResource getPrimary1() { return primary1; }
// static variables
* Remove an edge from the graphmodel and notify GEF.
getStereotypeFig().setBounds(X + 10, Y + NAME_FIG_HEIGHT + 1,
None
int maxWidth = 0;
if (Model.getFacade().isAGeneralization(subject)) {
final GraphEdgeRenderer renderer =
Dimension minimumSize = getMinimumSize();
getNameFig().setBounds(x + (w - nm.width) / 2,
public List<AbstractArgoJPanel> getDetailsTabs() {
String release = getReleaseVersionFromFile(file);
public void vetoableChange(PropertyChangeEvent pce) {
/**
renderingChanged();
Rectangle bbox = getBounds();
public void layout() {
popUpActions.add(new JSeparator());
int      aggCount = 0;
Action[] stereoActions =
f.setLayer(getLayer());
if (pName.equals("editing")
final LayerPerspective lay = (LayerPerspective) getLayer();
int mpn = recCountPredecessors(msg, ptr2) + 1;
private Set<Object[]> listeners = new HashSet<Object[]>();
aSize.width = Math.max(WIDTH, aSize.width);
final List<Action> modulesActions =
for (Object stereotype
List<ToDoItem> items = tdList.elementListForOffender(getOwner());
return false;
items = tdList.elementListForOffender(this);
// we return false
textEdited((FigText) src);
return false;
super.propertyChange(pve);
addFig(getStereotypeFig());
modelChanged(pve);
((TargetListener) listeners[i + 1]).targetSet(targetEvent);
}
if (sourceFig instanceof FigClassifierBox) {
@Override
} else if (setting instanceof PathListSelection) {
None
// static variables
Notification.ADD,
//        putValue(Action.SHORT_DESCRIPTION, Translator.localize(s));
@Override
ConfigurationKey key =
setTextFilled(false);
Fig separatorFig = epc.getSeparatorFig();
} catch (IllegalArgumentException iae) {
}
DiDiagram dd = GraphChangeAdapter.getInstance()
public UMLEditableComboBox(UMLComboBoxModel model, Action selectAction) {
if (f.getLayer() == null) {
return;
public void addNodeRelatedEdges(Object node) {
}
private double calcX(double a, double b, double y) {
if (end0 == null || end1 == null) {
newEdge.setSourcePortFig(baseFN);
// static variables
Object cr = Model.getCollaborationsFactory().createClassifierRole();
Point fcCenter =
assertTrue("GoalModel.removeGoal(goalName) failed",
f.setLineColor(getLineColor());
Notification.ADD,
this.setBetweenNearestPoints(true);
critic.setPriority(Decision.UNSPEC.getPriority());
public void notationRenderingChanged(NotationProvider np, String rendering) {
@Override
redraw();
snooze.snooze();
super.computeRouteImpl();
Object package1 =
srcPt = sourcePortFig.connectionPoint(p.getPoint(1));
*            the model element to query for connections
Object sourceModelElement = null;
@Override
Collection conns = Model.getFacade().getConnections(edge);
@Override
if (bounds != null) {
@Override
if (Model.getFacade().isAClassifier(node)) {
* java.lang.Object, java.lang.Object)
Object me = Model.getFacade().getModelElement(eo);
public String getTabKey() { return "tab.modules"; }
popUpActions.add(popUpActions.size() - getPopupAddOffset(),
public boolean remove(Object o) {
super.setLineWidth(w);
public boolean relocate(Object base) {
final int delta = 3;
}
Collection clients   = Model.getFacade().getClients(edge);
getNodes().add(node);
@Override
fireNodeAdded(node);
public void setTarget(Object t) {
getEdges().add(edge);
@Override
fireNodeAdded(node);
}
return true;
public Class getColumnClass(int col) {
if ((Model.getFacade().isAActor(me))
public LayoutedObject getObject(int index) {
removeEdge(me);
LOG.debug("model added " + me);
if (getOwner() != null) {
super();
@Override
super.refresh();
if ((associationEnd0 == null) || (associationEnd1 == null)) {
None
List regions = Model.getStateMachinesHelper().getRegions(
getStereotypeFig().setBounds(getBigPort().getCenter().x,
public void mousePressed(MouseEvent e) {
}
ArgoDiagramAppearanceEventListener,
super.modelChanged(mee);
setFilled(true);
private FigSingleLineText label;
if (!multiSelect && selectedItem instanceof ProfileConfiguration) {
Notification.ADD,
}
trySomeActionErrors(m3);
persLabel.setBorder(BorderFactory.createEmptyBorder(
if (TargetManager.getInstance().getTargets().size() == 1) {
if (oldOwned.contains(eo)) {
UndoManager.getInstance().addMementoLock(this);
epCheckBox.setSelected(false);
assertTrue("Decision.setName() failed",
addFig(getBigPort());
updateCompartment(Model.getMetaTypes().getOperation());
setDashed(true);
private List objects = new ArrayList();
setDestArrowHead(endArrow);
propPanelFactory =
setBetweenNearestPoints(true);
@Override
ArgoDiagram diag = DiagramUtils.getActiveDiagram();
if (Model.getFacade().getNamespace(me) == null
Object base = Model.getFacade().getBase(edge);
if (encloser != null
FigNode baseFN = (FigNode) lay.presentationFor(base);
@Override
newEdge.setSourcePortFig(clientFN);
@Override
getExtensionPointsCompartment();
protected boolean isValidElement(Object element) {
setExtensionPointsVisible(false);
@Override
Fig b = new FigMyCircle(0, 0, 100, 60);
Object sm = Model.getStateMachinesHelper().getStateMachine(dm);
Vector popUpActions = super.getPopUpActions(me);
public boolean conformsTo(Type type) {
a = (x * b) / Math.sqrt(b * b - y * y);
Object asc = Model.getFacade().getAssociation(ae);
return new Rectangle(
return NO_PROBLEM;
@Override
if (h.index == -1) {
if (pips instanceof PathItemPlacement) {
ArgoJMenu addMenu = new ArgoJMenu("menu.popup.add");
public Class getColumnClass(int col) {
popUpActions.add(popUpActions.size() - getPopupAddOffset(),
super.insertString(offset, str, a);
double a;
if (Model.getFacade().isAPseudostate(dm)) {
return new Dimension(((int) (Math.ceil(a) + getLineWidth()) * 2),
if (!(Model.getFacade().isAAssociation(dm))) {
@Override
None
if (newOwner != null) {
* All Figs need to listen to "remove", too: */
/* Issue 689: Look for a transition that arrives
for (Object ep : Model.getFacade().getExtensionPoints(newOwner)) {
Collection conn = Model.getFacade().getConnections(asc);
if (extensionPointsFigCompartment == null) {
else {
condition = new ArgoFigText(owner,
compartmentHeight += (requestedHeight - neededHeight)
fg = new FigTextGroup(owner, getSettings());
if (isCreateDiagramsSelected() && diagramInterface != null) {
fg.addFig(label);
public void setVisible(boolean arg0) {
setDashed(true);
public void setUp() throws Exception {
PropPanelFactory diagramFactory = new UseCaseDiagramPropPanelFactory();
if (!useAngle) {
}
protected Object getNewNodeType(int buttonCode) {
@SuppressWarnings("unchecked")
int d1 = Math.max(0, pathDistance - slopeSegLen / 2);
checkParseException(m3, "1.2.1 / 1.2 :");
// if this composite state is not attached to a statemachine
}
None
// encoding.  Specifying an encoding will produce more
if (enc.startsWith("cp")) {
Rectangle bounds = parseBBox();
@Override
if (Model.getFacade().isAModel(objectToAccept)) {
figNode = new FigPackage(modelElement, bounds, settings);
}
public void targetSet(TargetEvent e) {
* The ArgoUML editor.
/**
TargetManager.getInstance().setTarget(addedTargets.get(0));
String endSectionId = null;
classTableModel = new TableModelClassChecks();
protected boolean isValidElement(Object element) {
JButton selectAllButton = new JButton();
Object ae = assocEnds.next();
outputDirectoryComboBox =
* @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()
// _compileCheckBox = new JCheckBox();
Collection<String> files = generator.generateFiles(
if (!f.isDirectory() && !f.getName().endsWith(".bak")) {
LOG.info("Registering as listener");
FileReader fr = new FileReader(f);
* @see org.tigris.swidgets.Dialog#nameButtons()
if (e.getSource() == getOkButton()) {
Iterator assocEnds = Model.getFacade().getConnections(dm).iterator();
path = path.substring(0, path.length()
Object cs = Model.getFacade().getContainer(dm);
Map<String, Set<Object>> nodesPerPath =
None
} catch (Exception userPressedCancel) {
//        if (pve instanceof AttributeChangeEvent) {
for (Map.Entry entry : nodesPerPath.entrySet()) {
@Override
checked[j] = new HashSet<Object>();
return handle instanceof Classifier;
JFileChooser chooser = new JFileChooser(
if (!(Model.getFacade().isAAssociation(dm))) {
None
public String getDescription() {
/**
public boolean accept(File f) {
tryChangingDirection(m1, m6, m7);
@Override
JPanel setDefStereoV = new JPanel();
if (!(Model.getFacade().isAClass(Model.getFacade().getType(ae0))
new ArgoStatusEvent(ArgoEventTypes.STATUS_TEXT,
if (currentProject == null) {
None
addClassDiagram(p, name);
public void actionPerformed(ActionEvent event) {
@Override
FigClassifierBox existingFig = null;
public synchronized int read(byte[] b, int off, int len)
currentGM.addNodeRelatedEdges(classifier);
results.add(curDir);
currentModule = modules.get("Java");
// TODO: This appears to expect that the UML 1.3 tag name
if (Globals.curEditor().getGraphModel()
ClassGenerationDialog cgd = new ClassGenerationDialog(classes);
suffixFilters = currentModule.getSuffixFilters();
LOG.warn("There was some unidentified problem");
Object model =
Rectangle r = ce.getJComponent().getVisibleRect();
String fn = file.getAbsolutePath();
if (Model.getFacade().isAModelElement(((Fig) target).getOwner())) {
}
None
protected Remover() {
monitor.setMaximumProgress(MAX_PROGRESS);
public void removeActionListener(ActionListener l) {
public void actionPerformed(ActionEvent event) {
String text = makeText(value);
None
if (!(Model.getFacade().isNavigable(ae0)
@Override
protected Remover() {
@Override
for (FigEdge edge : existingEdges) {
if (isDiagramLayoutSelected()) {
* parsing "name1;name2;name3" and stereotypes.
if (problems != null && problems.length() > 0) {
if (e instanceof AttributeChangeEvent
if (packageName != null
if (Model.getFacade().isAInterface(element)) {
private StringBuffer printToBuffer(Exception e) {
@Override
* Create a GridBagConstraints object to use with the layout.
private JRadioButton classOnly;
protected void buildModelList() {
private JRadioButton classAndFeatures;
protected Object getSelectedModelElement() {
private JRadioButton fullImport;
// clarifiers.
if (configPanel == null) {
JLabel importDetailLabel = new JLabel(Translator
return;
private JComponent getConfigPanelExtension() {
None
Diagram diag = ((LayerPerspective) lay).getDiagram();
theImport.setSelectedSuffixFilter(null);
public void addElement(Object obj) {
progressLabel = new JLabel();
@Override
progress = new JProgressBar();
panel = makePanel();
public int size() {
File[] files = curDir.listFiles();
final String suffix = getSuffix(systemId);
}
if (recurse && !seenDirectories.contains(curFile)) {
messageArea.setText(messageArea.getText() + title + "\n" + introduction
if (icons[0] != null && hitAbove(cx + cw / 2, cy,
if (urls.size() == 0) {
protected Remover() {
URL[] urlArray = new URL[urls.size()];
@Override
messageArea = new JTextArea(10, 50);
gbc.fill = GridBagConstraints.BOTH;
cancelButton = new JButton(Translator.localize("button.cancel"));
public void componentMoved(ComponentEvent e) {
protected void setProperty(String text) {
// static variables
for (int i = 0; i < len; i++) {
@Override
None
public Object getChild(Object parent, int index) {
northLabel =
public void modelChanged(UmlChangeEvent evt) {
canceled = true;
public void actionPerformed(ActionEvent e) {
JPanel controlsPanel = new JPanel();
removeButton.setEnabled(false);
LOG.warn("failed to cancel editing - "
if (index == pathsModel.getSize()) {
if (fn != null && Model.getFacade().isAComment(fn.getOwner())) {
index--;
}
// TODO: This should be hidden by default, but accessible on
continueButton = new JButton(Translator.localize("button.continue"));
public LayoutedObject[] getObjects() {
continueButton.addActionListener(this);
public Dimension getMinimumDiagramSize() {
return true;
buttonGroup.add(new JRadioButton());
if (depth > MAX_DEPTH) {
OCLEditor.OPTIONMASK_AUTOSPLIT*/);
@Deprecated
/**
Iterator features = str.iterator();
for (int i = listeners.length - 2; i >= 0; i -= 2) {
public FontUIResource getSystemTextFont() { return systemFont; }
public FontUIResource getUserTextFont() { return userFont; }
public Object getValueAt(int row, int col) {
Object[] listeners = listenerList.getListenerList();
None
if (caseSensitiveComparison != 0) {
Object f = offs.get(0);
setTargetInternal(target);
public void add(LayoutedObject object) {
// There is no need to test if classes is empty because
Iterator assocEnds = conns.iterator();
en.nextElement().setSelected(true);
uri = uri.appendFileExtension("xmi"); //$NON-NLS-1$
if (oTarget != null) {
critics.add(clsNaming);
Object mmeContext = OCLUtil
public void propertyChange(PropertyChangeEvent evt) {
return;
int iter = 0;
OclTree tree = null;
if (Model.getFacade().isUtility(dm)) {
if (euHelper.getDoAutoSplit()) {
None
if (Model.getFacade().getNamespace(
list.addItem("Test1");
String path = System.getProperty("eUML.resources"); //$NON-NLS-1$
Object mcOld = null;
theMMcConstraint =
checkAssignIDToObject(figclassifierrole, true, true);
if (!euHelper.isValidConstraintName(sName)) {
public void notestXmiRoseUml14() {
Model.getCoreHelper().setNamespace(cr1, collab);
None
try {
if (nameID == 0) {
public String getRuleName() {
}
// static variables
tryPredecessors(m1, m3, m4, m5, m7);
if (Model.getFacade().
private void addNewTaggedValue(Object element, String type,
Model.getUmlFactory().delete(model);
}
public void changedUpdate(final DocumentEvent p1) {
}
ToDoItem item = new ToDoItem(critic, headline, priority, description,
instructions.setText(cue);
Object sourceVertex = Model.getFacade().getSource(dm);
@Override
public String getH() {
}
if (!Model.getFacade().equalsPseudostateKind(
public boolean isDataFlavorSupported(DataFlavor parFlavor) {
if (language != null && language.length() > 0) {
setSelectedItem(evt.getNewValue());
public void targetSet(TargetEvent e) {
public void setNodeInstance(Object handle, Object nodeInstance) {
addElement(evt.getNewValue());
if (!topSystemIdSaved) {
fireListEvents = true;
foo[i] = params[i].newInstance();
first = index;
if (Model.getFacade().isAModelElement(comboBoxTarget)) {
public void removeSourceFlow(Object handle, Object flow) {
last++;
if ("1.1".equals(version)) {
addOtherModelEventListeners(listTarget);
checkGenerated(aState, "entry/test1\nexit/b\ndo/it\ninternal/activity",
this.target = target;
@Override
comboBoxTarget = null;
protected void removeOtherModelEventListeners(Object oldTarget) {
}
@Override
|| isValidElement(getChangedElement(e))) {
assertTrue("GoalModel not initilized with UnspecifiedGoal",
}
NotationProviderFactory2.TYPE_OPERATION,
"language",
@Override
* and an expression with no script,
Object t1g = checkGenerated(aState, "when(condition1)[guard]/effect",
parseMessage(m3, " 1.1.1 : ");
trySimpleMoving(m1, m2, m3);
public void targetAdded(TargetEvent e) {
String notationStr = notation.toString(it,
public void targetRemoved(TargetEvent e) {
int y = insets.top;
dontTest.add("Primitive");
public void setValueAt(Object ob, int row, int col) {
setSelectedItem(getSelectedModelElement());
parseMessage(m3, " / 1..2 : ");
modelValid = false;
checkGenerateCD(m1, "1 : oper()", npSettings);
/* TODO: Should there really be () here? */
public boolean isCellEditable(int row, int col) {
checkGenerated(aState, "\n\nEntry/a\n\nExit/b\n\nDo/it\n\n\n",
public int getRowCount() {
attr = attrs.get(1);
if (Model.getFacade().isAPackage(namespace)) {
// TODO: Except this won't work because the names are different which
if (eventSource == null || eventSource == target) {
public int getChildCount(Object parent) {
Object eventSource = event.getSource();
String name;
if (!Model.getFacade().isANamespace(namespace)) {
// according to the UML spec, but we rely on the caller to enforce
Model.getUmlFactory().delete(model);
Object candidate = Model.getFacade().getNamespace(ns);
Collection rootElements = Model.getFacade().getRootElements();
if (Model.getFacade().getNamespace(parent) != null) {
public void dragExit(DragSourceEvent dragSourceEvent) {
setEnabled(true);
if (model != null) {
None
public void lostOwnership(Clipboard clipboard, Transferable transferable) {
predicates.add(new DefaultPredicate());
+ "</profile>";
if (target instanceof Fig) {
sure = true;
ModuleLoader2.getDescription(
ArgoDiagram diagram = (ArgoDiagram) target;
sure = true;
return (ProjectManager.getManager().getCurrentProject()
@Override
&& target.equals(ProjectManager.getManager().getCurrentProject()
assertEquals("1:", todoPane, pane.getTabs().getSelectedComponent());
private static final Logger LOG =
public void itemStateChanged(ItemEvent e) {
public void targetAdded(TargetEvent e) {
Model.getModelManagementHelper().getAllModelElementsOfKind(
public void remove(int offs, int len) throws BadLocationException {
for (Class<?>[] modeElementPair : validItems) {
Model.getCoreHelper().setKind(p1,
a3 = Model.getCoreFactory().buildAssociation(c3, c4);
String changeIndicator = "";
protected void setUp() throws Exception {
boolean sure = false;
Integer[] multArgs = {1, 1};
String confirmStr =
Model.getUseCasesFactory().buildExtend(useCase1, useCase3);
if (size > 0) {
public int getColumnCount() {
if (e.getSource() == getOkButton()) {
isClearable = clearable;
if (e.getSource() == delButton) {
private static String getNames(Node node) {
int firstSel = rowSM.getMinSelectionIndex();
public void insertUpdate(final DocumentEvent p1) {
StringBuffer msg = new StringBuffer();
rowHeight = rowHeights.get(row).intValue();
super.remove(0, getLength());
diagram = DiagramFactory.getInstance().create(type, model,
return false;
rl.add(Model.getMetaTypes().getUMLClass());
Object[] options =
protected void tearDown() {
public void addTreeModelListener(TreeModelListener l) {
protected void setUp() throws Exception {
buildModel();
trySomePredecessorErrors(m2, m3);
public void run() {
protected ColorUIResource getPrimary2() { return primary2; }
//        actionClient.actionPerformed(new ActionEvent(this, 0, "foo"));
ProjectManager.getManager().removeProject(proj);
String s = Configuration.getString(
FileFilter ffilter = chooser.getFileFilter();
chooser.setFileView(ProjectFileView.getInstance());
TransformerAction(String nameKey, Project project, Object sourceModelElement) {
// static variables
public Object getValueAt(int row, int col) {
None
public void propertyChange(PropertyChangeEvent evt) {
document.setTarget(Model.getFacade().getTaggedValue(
File n =
tb.add(new ActionNewStereotype());
None
updateUI();
public UMLEditableComboBox(UMLComboBoxModel model, Action selectAction,
protected boolean isValidElement(Object element) {
public void actionPerformed(ActionEvent event) {
@Override
public ActionExecSilk() {
assertTrue("Decision.setPriority() failed",
* setProperty("org.netbeans.lib.jmi.Logger.fileName", "")
public MBeanNotificationInfo[] getNotificationInfo() {
try {
// static variables
if (!(Model.getFacade().isAClassifier(dm))) {
layouter.layout();
// only classes with name need a constructor
if (Thread.interrupted()) {
if (aggCount > 1) {
LOG.info("setTarget: there are "
public void setNodeInstance(Object handle, Object nodeInstance) {
if (propPanel instanceof PropPanel) {
FigActivation currentActivation = null;
Object[] listeners = listenerList.getListenerList();
public void mouseClicked(MouseEvent e) {
None
if (fromElement.getClass() != toElement.getClass()) {
Model.getFacade().isAAbstraction(o),
return (validConnectionMap.get(connectionType) != null);
return PROBLEM_FOUND;
for (Class<?>[] modeElementPair : validItems) {
None
public TargetListener getTargettableModel() {
if (e instanceof MalformedXMIException) {
public void removeUpdate(final DocumentEvent p1) {
if ((triggerAssociation == null) && (getToDoItem() != null)) {
public void setNodeInstance(Object handle, Object nodeInstance) {
String action = "";
public void setNodeInstance(Object handle, Object nodeInstance) {
JPanel thePanel = new JPanel();
// Give the parser a map of model elements
selectedListModel = new UMLModelElementStereotypeListModel();
HashMap<String, Object> globalXmiIdToObjectMap =
addStButton = new JButton(">>");
addSupportedDecision(UMLDecision.NAMING);
} else if (e instanceof AddAssociationEvent) {
Object asc = /*(MAssociation)*/ dm;
addStButton = new JButton(">>");
addStButton.addActionListener(new AddRemoveListener());
* The constructor.
Object a = cf.buildClass("a", model);
@Override
// Enumerate constructors
public void setItem(Object anObject) {
public TagDefinition buildTagDefinition(String name, Object owner,
public Component getEditorComponent() {
ta1 = Model.getCoreFactory().buildTemplateArgument(
public void addActionListener(ActionListener l) {
Object p1 = null;
GridBagConstraints gridBagConstraints1 = new GridBagConstraints();
None
return false;
if (defaultToProperties || lastNonNullTab < 0) {
.getAssociation(ends.iterator().next());
try {
String name = Model.getFacade().getName(elem);
operSeen.add(op);
if (oldValue == getSelectedItem()) {
matches = registry.getMatches("key2", "foo");
LOG.debug("register called twice for the same object "
workAreaPane = new BorderSplitPane();
public void selectAll() {
public Object getItem() {
imageIconLabel.setOpaque(true);
public final void focusGained(FocusEvent arg0) {
public boolean isRelevant(Critic c, Designer d) {
@Override
&& (o == null || "".equals(o)))) {
imageIconLabel.setBorder(BorderFactory
for (Object o : operSeen) {
add(LabelledLayout.getSeparator());
final Object returnMessage = gm.connectMessage(
UMLTextArea2 comment = new UMLTextArea2(
public String getColumnName(int col) {
UMLTextArea2 commentBody = new UMLTextArea2(
@Override
final Color inactiveColor =
public Icon getClarifier() {
((FigEdge) target).getFig().removePropertyChangeListener(this);
public List<Goal> getSupportedGoals() {
FigClassAssociationClass ac =
if (ac != null) {
currentLayer.add(newFig);
// the responsibility of determining if the given target is a
public Icon getClarifier() {
updateArrow();
public void targetSet(TargetEvent e) {
public boolean canFixIt(ToDoItem item) { return false; }
public void toDoItemsRemoved(ToDoListEvent tde) {
public boolean hasState(String name) {
if (downlinks.size() == 1) {
Object[] listeners = listenerList.getListenerList();
public Object getElementAt(int index) {
chooser.addPropertyChangeListener(
if (y < getY()) {
SwingUtilities.invokeLater(new Anonymous1(fileName));
return activatingMessage.getSourceFigNode()
if (drawingArea.width <= 0 || drawingArea.height <= 0) {
ImageIO.write(i, "gif", s);
super.actionPerformed(ae);
private FigMessage activatingMessage;
RenderedImage i = new DeferredBufferedImage(canvasArea,
new HashSet<Object>(TargetManager.getInstance().getTargets()),
// Java SE 6 has a native GIF writer, but it's not in Java 5.  One
Layer layer = ce.getLayerManager().getActiveLayer();
}
public class TestModelEventPump extends TestCase {
setSourcePortFig(sourceFN);
bounds.width -= bounds.x;
DOMImplementation domImpl =
// static variables
Document document = domImpl.createDocument(null, "svg", null);
public void keyTyped(KeyEvent e) {
bounds.width = Math.max(bounds.width, fig.getX() + fig.getWidth());
if (currentActivation != null) {
public void toDoItemsChanged(ToDoListEvent tde) {
SVGGraphics2D svgGenerator = new SVGGraphics2D(document);
curBody.getDocument().addDocumentListener(this);
reader.readLine();
priorities = p;
public void toDoListChanged(ToDoListEvent tde) {
for (Iterator i = modelImpl.getUmlPackage().getCore().getTagDefinition()
// static variables
public boolean isLeaf(Object node) {
else if (Model.getFacade().isAMessage(element)) {
public static List getEdges(Diagram diagram) {
@Override
public void componentShown(ComponentEvent e) {
return true;
if (message.isCreateMessage()
public void keyReleased(KeyEvent e) {
int n = -1;
public void toDoItemsAdded(ToDoListEvent tde) {
action = ac;
return 0;
public void stateChanged(ChangeEvent  e) {
public Set getDependencies(Object parent) {
if (row == tvs.size()) {
* @param tagName
selectItem(todo);
}
FigVertex compositeState = (FigVertex) encloser;
}
public void targetRemoved(TargetEvent e) {
None
public void bindPort(Object port, Fig f) {
Model.getExtensionMechanismsHelper().addTaggedValue(target, tv);
// static variables
@Override
fireTableChanged(new TableModelEvent(this));
@Override
public String getParsingHelp() {
return null;
public void addModelEventListener(PropertyChangeListener listener,
public void valueForPathChanged(TreePath path, Object newValue) {
setCurrentDiagram(m);
public void addModelEventListener(PropertyChangeListener listener,
public List<AbstractArgoJPanel> getDetailsTabs() {
if (currentGM.canAddNode(classifier)) {
// static variables
if (!isSelfMessage()) {
((TreeModelListener) listeners[i + 1]).treeNodesChanged(e);
public Type navigateQualified(String name, Type[] qualifiers)
final File oldFile = new File(getOldDefaultPath());
if (Model.getFacade().isAClassifier(node)) {
public boolean contains(Object elem) {
@Override
public Vector getPopUpActions(MouseEvent me) {
protected final void fireContentsChanged(Object source, int index0, int index1) {
public void removeTreeModelListener(TreeModelListener l) {
// 1. Remember current message paths
public void generatorAdded(ArgoGeneratorEvent e) {
* @param tagName
if (handle instanceof MultiplicityElement) {
None
for (Fig fig : figs) {
|| isValidElement(getChangedElement(e))) {
public AbstractArgoJPanel spawn() {
super(Translator.localize("action.import-sources"),
notationProviderBody = NotationProviderFactory2.getInstance()
chooser.setAcceptAllFileFilterUsed(false);
public FontUIResource getMenuTextFont() { return controlFont; }
* Parse a given inputsource to a collection of top level model elements.
public void componentHidden(ComponentEvent e) {
private List createChildren(List children, Object parent, int currentLevel,
assertEquals("Got wrong namespace for first shared", c,
Collection getProperties(Object arg0);
extend =
public void mouseExited(MouseEvent e) {
buttonPanel.putClientProperty("ToolBar.toolTipSelectTool",
Object ge = coreFactory.createClass();
buttonPanel.setMinimumSize(new Dimension(0, height));
project = persister.doLoad(file);
dispatch = new UMLChangeDispatch(this,
for (TargetListener action : collectTargetListenerActions()) {
return handle;
fireTargetSet(new TargetEvent(
public void parse(Object modelElement, String text) {
* java.awt.event.ActionEvent)
public void move(Object parent, Object element, Direction direction) {
public synchronized int read() throws IOException {
if (container instanceof TabTarget) {
@Override
childHeight = getChildHeight(childComp);
public Object findClassifierByName(Object ofs, String s) {
final JLabel jlabel = (JLabel) childComp;
if (childComp.getMaximumSize() != null
fooClass = project.findType(
return getMinimumHeight(childComp);
public Object getObjectFlow() {
// WFR 2.10.3.3 #4
public XmiReferenceException(String message) {
rebuildModelList();
trySomeMoreComplexMoving(m1, m2, m3);
vertex.setContainer((Region) region);
if (searchString != null && key == KeyEvent.VK_BACK_SPACE
Rectangle mousePoint = new Rectangle(x - 5, y - 5, 5, 5);
return null;
public Collection getChildren(Object parent) {
public void caretUpdate(CaretEvent e) {
public void parse(Object modelElement, String text) {
State state = UMLFactory.eINSTANCE.createState();
return false;
return handle instanceof TemplateParameterSubstitution;
public Object invokeFeature(Map<String, Object> vt, Object subject,
None
Project project = ProjectManager.getManager().makeEmptyProject();
rebuildModelList();
boolean hasContents = false;
private static String name = Translator.localize("label.name");
public void handleResetToDefault() {
Icon icon = ResourceLoaderWrapper.getInstance().lookupIcon(value);
@Deprecated
String type = null;
public Profile lookForRegisteredProfile(String value) {
public void handleStartElement(XMLElement e) throws SAXException {
Project p2 = ProjectManager.getManager().makeEmptyProject();
public Project doLoad(File file) throws OpenException, InterruptedException {
public void valueChanged(ListSelectionEvent lse) {
public final String getMainTag() {
protected String getDesc() {
public String getExtension() {
public void load(Project project, InputStream inputStream)
setTargetInternal(null);
b = new JButton();
public void refresh() {
if (isVisible()) {
machine = target;
public void handleSettingsTabRefresh() {
class ActionRemoveTaggedValue extends UndoableAction {
setEnabled(false);
None
public JPanel getTabPanel() { return this; }
machine = Model.getStateMachinesFactory().buildStateMachine(target);
public boolean shouldBeEnabled(Object target) {
public void targetAdded(TargetEvent e) {
public void handleSettingsTabSave() {
public boolean doCommand(String args) {
throw new NotImplementedException();
bodies.clear();
methodImpl.getBodies().set(bodyIndex, body);
addSupportedDecision(UMLDecision.RELATIONSHIPS);
machine = Model.getStateMachinesFactory().createStateMachine();
public void targetAdded(TargetEvent e) {
public void structureChanged() {
labelWidth,
public void modelElementChanged(Object node) {
dialog = new JDialog(frame, title, true);
Project p = ProjectManager.getManager().getCurrentProject();
if (event.getSource() == theButton) {
final Collection<FigEdge> existingEdges = getFigEdges();
None
* @see org.argouml.persistence.ProgressListener#progress(org.argouml.persistence.ProgressEvent)
public void setNodeInstance(Object handle, Object nodeInstance) {
Object type = Model.getFacade().getType(ae);
public void setFig(Fig f) {
Integer.parseInt(str);
public Collection getChildren(Object parent) {
Collection c = Model.getFacade().getExtensionPoints(
public String getRuleName() {
int priority = 2;
bindPort(element, bigPort);
Iterator assocEnds = Model.getFacade().getConnections(dm).iterator();
if (Model.getFacade().getTargetScope(getTarget()) == null) {
Object inner = Model.getCoreFactory().buildClass(classifier);
checkParseException(m1, " 1.1 : ");
public void setNodeInstance(Object handle, Object nodeInstance) {
@Override
Object kind = null;
} else {
return ""; //$NON-NLS-1$
public void actionPerformed(ActionEvent e) {
final boolean result = copyFile(oldFile, file);
None
try {
for (Object st : stereotypes) {
setModelInvalid();
public void mouseClicked(MouseEvent e) {
setModelInvalid();
public void pushNamespaceElement(NamespaceElement element) {
}
@Override
@Override
// static variables
return -1;
if (!(assoc instanceof Association)) {
return comparePaths(o1, o2);
String name1, name2;
if (caseSensitiveComparison == 0) {
rootPane.getActionMap().put(ACTION_KEY_ESCAPE, new AbstractAction() {
goalModel.stopDesiring(unspecifiedGoal.getName());
if (caseSensitiveComparison != 0) {
assertTrue("GoalModel.setGoalPriority added an extra Goal",
/**
case KeyEvent.VK_BACK_SPACE:
}
case KeyEvent.VK_HOME:
return null;
public void keyPressed(KeyEvent e) {
return null;
return null;
return null;
Class cls = org.tigris.gef.base.Editor.class;
Package pckg = saxObject.getClass().getPackage();
public void printStackTrace(PrintStream ps) {
a.putValue("popped", Boolean.valueOf(false));
}
LOG.error(ioe);
if (step1Choice == null) {
LOG.error("Mac OS X Adapter could not talk to EAWT:");
public String getZipFileExtension() {
setHandledMethod.invoke(event, new Object[] { Boolean.valueOf(handled) });
try {
try {
try {
*            the model element to query for connections
Method enableAboutMethod = macOSXApplication.getClass().getDeclaredMethod("setEnabledAboutMenu", new Class[] { boolean.class });
protected ColorUIResource getPrimary3() { return primary3; }
public boolean callTarget(Object appleEvent) {
@Override
// This error will throw when running from the ant setup.
public void caseAMultiplicativeExpressionTail(
* @since 0.15.3
suite.addTest(new TimeStamp());
int choice = -1;
{"org.argouml.uml.diagram", "org.argouml.ui"},
public void setNodeInstance(Object handle, Object nodeInstance) {
};
public FontUIResource getControlTextFont() { return controlFont; }
protected void printFooter() {
if (findAssociation(dm, 0)) {
assertNotNull(i.getDetailsTabs());
@Override
ArgoEventPump.addListener(ArgoEventTypes.HELP_CHANGED, helpTracker);
public void setFig(Fig f) { fig = f; }
ArgoEventPump.removeListener(ArgoEventTypes.HELP_CHANGED, helpTracker);
final ArgoDiagramAppearanceEvent displayEvent =
}
evt = new ArgoGeneratorEvent(ArgoEventTypes.GENERATOR_CHANGED, this);
}
evt = new ArgoHelpEvent(ArgoEventTypes.HELP_CHANGED, this,
evt = new ArgoNotationEvent(ArgoEventTypes.NOTATION_CHANGED, this);
@Override
totalEventsFired++;
eventStatus |= (0x01 << event);
public String computeSuggestion(String name) {
private TArgoHelpEventListener helpTracker =
* @param i the todo item
SwingUtilities.invokeAndWait(new Runnable() {
if (thisFig == getStereotypeFig()) {
for (int events = eventStatus; events > 0; ++eventsFired) {
rc = new ResolvedCritic("rc", (List<String>) null);
try {
if (!(client instanceof BehavioredClassifier)) {
/* testmc should now have an ItemUID so we should be able to
rc = new ResolvedCritic(c, set, false);
assertTrue("EnabledCM.isRelevant(Critic, Designer) is incorrect",
critic.setEnabled(false);
assertTrue("EnabledCM.isRelevant(Critic, Designer) is incorrect",
critic.snooze();
critic.unsnooze();
assertTrue("NotSnoozedCM.isRelevant(Critic, Designer) is incorrect "
assertTrue("CurDecisionCM.isRelevant(Critic, Designer) is "
assertTrue(
* Next level in the settings hierarchy to inherit from if the value
assertTrue(
public Object getDestination(Object relationship) {
int priority = ToDoItem.HIGH_PRIORITY;
ToDoList list = new ToDoList();
list.addElement(item);
currentKeyStroke = decodeKeyStroke(confCurrentShortcut);
list.addElement(item);
assertTrue("ToDoList.size() is incorrect", list.size() == 1);
public void doAction(int oldStep) {
assertTrue("ToDoItem.get(0) did not return correct item",
public void paintIcon(Component c, Graphics g, int x, int y) {
assertTrue("ToDoItem.removeElement(item) failed to remove item", list
assertTrue("ToDoList.size() is incorrect", list.size() == 0);
GoalModel goalModel = new GoalModel();
modelChanged(pve);
goalModel.setGoalPriority(unspecifiedGoal.getName(), unspecifiedGoal
assertTrue("GoalModel not correctly updating goal priority", goalModel
goalModel.removeGoal(unspecifiedGoal);
goalModel.startDesiring(unspecifiedGoal.getName());
assertTrue("GoalModel.startDesiring did not add a Goal",
@Override
UMLStateDiagram statediag = new UMLStateDiagram();
InitializeModel.initializeMock();
checkAssignIDToObject(statediag, true, true);
@Override
Object iface = Model.getCoreFactory().createInterface();
// static variables
checkAssignIDToObject(figinitialstate, true, true);
checkAssignIDToObject(figtransition, true, true);
umlReserved.add("becomes");
Decision decision = new Decision(name, priority);
LOG.warn("A deleted element still exists on the diagram");
assertTrue("Decision.getName() is incorrect",
}
priority = 1;
if (returnParasSb.length() == 3) {
name = "misc.decision.uncategorized";
@Override
assertTrue("Decision.equals(Decision) failed",
assertEquals(headline, item.getHeadline());
@Override
ChecklistStatus list = new ChecklistStatus();
assertTrue("ChecklistStatus.size() is incorrect", list.size() == 4);
LOG.info("The user chose to exit and save");
destMult.textEdited();
assertTrue("ChecklistStatus items incorrectly added (category: "
ChecklistStatus list2 = new ChecklistStatus();
list2.addAll(list);
// Find the preceding message, if any, on either end of the
assertTrue("ChecklistStatus.addAll(Checklist) failed",
public void actionPerformed(ActionEvent e) {
ChecklistStatus list = new ChecklistStatus();
CheckItem item = new CheckItem(category, description,
public String getProfileIdentifier() {
category += "- Set Test";
CheckItem item2 = new CheckItem(category, description);
// static variables
assertTrue("CheckItem.getDescription() incorrect "
SnoozeOrder snooze = new SnoozeOrder();
snooze.unsnooze();
Object package1 =
Object aClass = Model.getCoreFactory().buildClass("Test", p.getRoot());
// Set the appropriate aggregation on each end
Object machine =
//        putNotationArgument("showAssociationName",
Model.getCoreHelper().setNamespace(machine, aClass);
Object package1 =
None
if (rowObj == null) {
Object actgrph =
saveNewFile = true;
//            pce = (PropertyChangeEvent) rxdEvent.getSource();
assertTrue("CurDecisionCM.isRelevant(Critic, Designer) is incorrect "
SwingUtilities.invokeAndWait(new Runnable() {
ProjectManager.getManager().makeEmptyProject();
@Override
ProfileManager profileManager = ProfileFacade.getManager();
Object model = project.getUserDefinedModelList().get(0);
project.getProfileConfiguration().removeProfile(metaProfile, model);
File projFile = File.createTempFile("projFile", ".zargo");
Object namespace = Model.getFacade().getNamespace(modelElement);
// subsystem and contains a stereotype and this contains a
tryGuardAndIteratorSyntax(m3);
theStereotype =
pckge = project.getUserDefinedModelList().get(0);
public JPanel makePanel(int newStep) {
ProfileManager profileManager = ProfileFacade.getManager();
private static final String PTYPE_BOOLEAN_NAME = "Boolean";
project.getProfileConfiguration().addProfile(userDefinedProfile, model);
@Override
File projFile = File.createTempFile("projFile", ".zargo");
SwingUtilities.invokeAndWait(new Runnable() {
project = persister.doLoad(file);
profileManager.removeProfile(userDefinedProfile);
if (e.getCause() instanceof XmiReferenceException) {
Model.getUmlFactory().delete(profileModel);
Model.getExtensionMechanismsHelper().addBaseClass(theStereotype,
Model.getExtensionMechanismsHelper().removeBaseClass(theStereotype,
suite.addTestSuite(TestExtensionMechanismsFactory.class);
return suite;
for (int i = addedTargets.length - 1; i >= 0; i--) {
public void setTaggedValue(Object handle, Object property, Object value) {
public String getType() {
private static final boolean PERFORMANCE_TEST = false;
InitializeModel.initializeMDR();
}
/**
Object g1 = coreFactory.createGeneralization();
Runnable dispatch = null;
private static final int CHILDREN_PER_NAMESPACE = 5;
critic.setEnabled(true);
Object g3 = coreFactory.createGeneralization();
if ((System.currentTimeMillis() - startTime) > TIME_LIMIT) {
None
Object g2 = coreFactory.createGeneralization();
Object base = children.get(NAMESPACE_LEVELS);
trySomeGuardAndIteratorErrors(m3);
c = helper.copy(k, m2);
GridBagConstraints c = new GridBagConstraints();
public Object getOwner() {
public TestCopyHelper(String name) {
ModelManagementFactory mmf = Model.getModelManagementFactory();
Object model = Model.getModelManagementFactory().createModel();
Object theModelTarget =
Object copiedPackage = Model.getCopyHelper().copy(p1, p2);
connection = getUseCases().buildExtend(toElement, fromElement);
Model.getCoreHelper().addOwnedElement(p1, interface_);
@Override
assertNotNull(copiedPackage);
Collection collection = Model.getCoreHelper().getAllClasses(
collection = Model.getCoreHelper().getAllInterfaces(copiedPackage);
collection = Model.getFacade().getAttributes(copiedInterface);
o = helper.copy(k, m2);
Model.getCoreHelper().setName(k, "TestClass");
@Override
x = x  * scale;
@Override
Model.getCoreHelper().setName(k, "TestClass2");
public Object getRoot() {
if (!objects.contains(o)) {
public void remove(LayoutedObject object) {
c2 = helper.copy(k, m2);
@Override
@Override
o = helper.copy(d, m2);
Checklist cl;
c2 = helper.copy(k, m2);
public Object getDependentElement() {
o = helper.copy(i, m2);
public boolean isRelocationAllowed(Object base)  {
private void updateTaggedValue(Object element, String type,
assertTrue("ArgoEventPump did not fire all "
o = helper.copy(p, m2);
o = helper.copy(s, m2);
if ((name == null) || name.equals("")) {
}
if (namesSeen.contains(name)) {
None
Collection ends = Model.getFacade().getAssociationEnds(class2);
public void actionPerformed(ActionEvent event) {
}
}
validContainmentMap.put(Interface.class,
}
args.clear();
* then the "enclosed" Fig has been moved on the diagram.
Object changeable = Model.getChangeableKind().getChangeable();
@Override
}
public boolean isRemoveFromDiagramAllowed(Collection figs) {
ref = stateMHelper.getPath(refObject);
return false;
@Override
return false;
validContainmentMap.put(UmlPackage.class,
noteFig.setLocation(calculateLocation(diagram, firstTarget, noteFig));
}
return ((UmlAssociation) handle).getConnection();
settings = renderSettings;
validContainmentMap.put(Region.class,
Model.getUmlFactory().delete(stereo);
@Override
mockModelImplementation.reset();
// Indicate that the test was validated
@Override
// Enumerate methods
@Override
validated = true;
Boolean truth = truths.get(class1);
public void removeSourceFlow(Object handle, Object flow) {
assertNotProhibitedClass(self.getClass().getSuperclass());
validContainmentMap.put(Stereotype.class,
// Enumerate fields
for (int i = 0; i < VALID_CONNECTIONS.length; ++i) {
Model.getFacade().isAAbstraction(o),
runTruthTest(Model.getFacade().isAModel(o),
None
validContainmentMap.put(UseCase.class,
Model.getFacade().isAAbstraction(o),
boolean valueOfTarget(Object t) {
TestCase.assertNotNull("toString() corrupt in " + c,
validContainmentMap.put(Operation.class,
None
createMethod = findMethod(factory.getClass(), Factory.class,
// Find the preceding message, if any, on either end of the
isAMethod =
deleteAndRelease(createMethod.invoke(factory, args));
public boolean isStereotypeVisible() {
@Override
"ActionSequence",
public class TestModelEventPump extends TestCase {
@Override
// TODO: This doesn't work, but should
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
assertSame(package1, Model.getFacade().getNamespace(assoc));
@Override
assertFalse(Model.getFacade().isNavigable(
public void outAIntegerLiteral(AIntegerLiteral node) {
return false;
SAXParserFactory spf = SAXParserFactory.newInstance();
Model.getCoreHelper().setNamespace(cr1, collab);
None
@Override
None
Object model = Model.getModelManagementFactory().createModel();
None
continue;
None
if (factoryIF.isPrimitive() && factoryIF.getName().equals("void")) {
public abstract String getInputSourceEncoding();
if (factoryIF.isPrimitive() && factoryIF.getName().equals("boolean")) {
public String getTabKey() { return "tab.user"; }
if (factoryIF.getName().equals("java.lang.Throwable")) {
protected Collection getUmlCollection() {
if (factoryIF.getName().equals("java.lang.Object")) {
} else {
void toggleValueOfTarget(Object t) {
}
e.printStackTrace();
NodeList list = doc.getElementsByTagName("Model:Class");
//      if (gen.getParent() == null || gen.getChild() == null) {
public abstract boolean isRelocationAllowed(Object base);
if (versionNode == null) {
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
throw new NotImplementedException();
public CoreHelper getCoreHelper() {
}
@Override
if (className.equals(name) && remap.containsKey(pkgName)) {
@Override
remap.put("Core:Stereotype", "ExtensionMechanisms:Stereotype");
public void delayedVetoableChange(PropertyChangeEvent pce) {
remap.put("Kernel", "Core");
@Override
String[] array = new String[allModelElements.length - 1];
tryTheActions(m3);
@Override
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
if (evt == null) {
@Override
Node pkg = node;
@Override
remap.put("Kernel:Expression", "DataTypes:Expression");
public void outARealLiteral(ARealLiteral node) {
Object st =
public boolean isMinimizeFigsSelected() {
public abstract boolean isDescendSelected();
public final boolean getDefaultValue() {
public boolean isDescendSelected() {
/**
Object k = Model.getFacade().getKind(dv);
/*
public void updateSubTask(final String action) {
//        assertNotNull(Model.getUmlFactory().buildNode(
public List<String> getOptions() {
Object t1t = checkGenerated(aState, "after(1s)[guard]/effect",
}
//        assertNotNull(Model.getUmlFactory().buildNode(
public void testCreatePropPanel() {
if (getNewEdge() != null) {
Model.getCollaborationsHelper().addBase(role2, class1);
} catch (Exception e) {
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
}
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
graphics.setClip(0, 0, width, scaledBufferHeight);
Set<Classifier> bases = new HashSet<Classifier>();
public UMLEditableComboBox(UMLComboBoxModel model, Action selectAction,
None
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
for (int i = 0; i < nrParameters; i++) {
assertFalse(settings.setNotationLanguage("foo"));
assertEquals(Notation.DEFAULT_NOTATION, settings.getNotationLanguage());
@Override
public ActionExecSilk() {
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
public ActionExecSilk() {
}
public Object getTarget() {
Object t1s = checkGenerated(aState, "trigger1[guard]/effect",
public boolean buildPopup(JPopupMenu popup, int index) {
Object t1c = checkGenerated(aState, "trigger1()[guard]/effect",
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
text = "after(a while)";
text = "when(it happens)";
public TargetListener getTargettableModel() {
Object bClass = Model.getCoreFactory().buildClass("B", aClass);
public void targetAdded(TargetEvent e) {
return;
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
Object m1 =
* (they are composed as "storageId":"serialNumber"). NOTE: The storage
trySomeErrors(m3);
protected String getProperty() {
if (isATransition(handle)) {
if (getModelElementContainer(handle) == null) {
public Object newExpression(String lang, String body) {
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
public Fig getPortFig(Object port) {
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
public ActivityGraphsHelper getActivityGraphsHelper() {
parseMessage(m3, "");
None
}
npSettings.setShowSequenceNumbers(true);
npSettings.setShowSequenceNumbers(false);
* @param element The element to store.
Model.getCoreHelper().setName(m1, "m1-name");
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
checkGenerateCD(m1, "1 : oper()", npSettings);
checkGenerateCD(m1, "1 : aEBody()", npSettings);
* 		java.lang.String[])
checkGenerateCD(m1, "1 : oper()", npSettings);
protected Object getNamespace() {
/* TODO: Should there really be () here? */
public org.argouml.model.CopyHelper getCopyHelper() {
checkGenerateCD(m1, "1 : aEBody (argument-value)", npSettings);
public CommonBehaviorHelper getCommonBehaviorHelper() {
/* If a message has a name and a named operation
false, false, false, 1, false);
public VisibilityKind getVisibilityKind() {
checkGenerated(aState, "ENTRY/test2\nexIT/b\nDO/it",
public boolean isEmpty() {
checkGenerated(aState, "internal(test3:int=5,b=4.0:float)[g]/"
public PseudostateKind getPseudostateKind() {
checkGenerated(aState, "entrys/test4\nexiting/b\ndone/it",
checkGenerated(aState,
protected ActionAddDiagram getAction() {
}
public String getParsingHelp() {
false, false, false, 0, false);
public MessageSort getMessageSort() {
Model.getCommonBehaviorHelper().setScript(entry, null);
return ret;
*          java.lang.String[])
public UmlFactory getUmlFactory() {
public ExtensionMechanismsFactory getExtensionMechanismsFactory() {
File file = new File("test.xmi");
public ModelManagementHelper getModelManagementHelper() {
loaded = false;
@Override
Project p = doLoad("/testmodels/uml14/LinkedProfile.zargo");
testPersister = persistence.getPersisterFromFileName(
*          java.beans.PropertyChangeListener, java.lang.Object,
+ "\t\t<plugin>\n"
public abstract void addModelEventListener(PropertyChangeListener listener,
Project project = ProjectManager.getManager().makeEmptyProject();
public boolean containsAll(Collection arg0) {
ProfileConfigurationFilePersister persister =
@Override
project = ProjectManager.getManager().makeEmptyProject();
validContainmentMap.put(SimpleState.class,
ProfileMother.DependencyCreator dependencyCreator =
public Collection getAllClassifierRoles(Object ns) {
File dependentProfileFile = mother.createXmiDependentProfile(
public Object getSource(Object link) {
assertTrue("The file to where the file was supposed to be saved "
public Object getValueOfTag(Object handle, Object property) {
public Object getPackage() {
public Object getJunction() {
ProfileMother profileMother = new ProfileMother();
public Object getInParameter() {
public Object getShallowHistory() {
File profileFile = new File(testDir, "testLoadingConstructor.xmi");
*             if either Classifier is null
manager.getRegisteredProfiles();
Collection rootElements = Model.getFacade().getRootElements();
|| (container instanceof StateMachine
None
* @param namespace Namespace to get contents of
String path = "C:" + File.separatorChar + "userProfilesDir"
//        return struc.getOwner().getNamespace().getOwnedElement().contains(
baseProfileFile = FileHelper.moveFileToNewTempDirectory(
// static variables
assertFalse("A".equals(new DependentString("A")));
#public)->includes (r.participant) or
new HashSet<Object>(TargetManager.getInstance().getTargets()),
}
/**
HashMap<Class, Object> meMap = new HashMap<Class, Object>();
{Abstraction.class, UmlClass.class, UmlClass.class, null, },
theDetailsPane.getTab(TabProps.class);
saveImageAsJPEG((BufferedImage)createImageFromComponent(
SwingUtilities.invokeAndWait(new Runnable() {
assertNotNull(todoPane);
TargetManager.getInstance().setTargets(Collections.EMPTY_SET);
assertTrue(!((MockStylePanel) pane).isRefreshCalled());
((position.equals("West") || position.equals("East"))
assertTrue(((MockStylePanel) pane).isRefreshCalled());
public void add(int arg0, T arg1) {
Object target1 = new Object();
assertTrue(!((MockStylePanel) pane).isRefreshCalled());
return modelImpl.getCoreHelper().getSource(relationship);
new File(OUTPUT_FILE1).delete();
UmlPackage oldPackage = umlPackage;
new String[] {eventName });
Object target3 = new Object();
TargetManager.getInstance().setTarget(target1);
None
Collection<Object> s = new ArrayList<Object>();
@Override
TargetManager.getInstance().addTarget(target2);
None
s.add(target1);
start = end + 1;
TargetManager.getInstance().setTargets(s);
if (Model.getFacade().isADataType(dest)) {
// For ant setup
ProfileMother.cleanAllExtents();
assertFalse(cr.predicate2(dm, null));
modelImpl.createDefaultExtent();
public void testGetWizardClass() {
assertTrue(critic.predicate2(ns1, null));
if (modelName.lastIndexOf(dot) > 0) {
assertFalse(critic.predicate2(ns1, null));
"org.argouml.swingext",
Model.getCoreHelper().setName(a1, "A2");
boolean copyAction =
Model.getCoreFactory().buildInterface("B", ns1);
if (!dropTargetDragEvent.isDataFlavorSupported(
assertFalse(critic.predicate2(ns2, null));
Model.getCoreHelper().setName(c1, "C1");
ghostRectangle.setRect(pt.x - clickOffset.x,
assertTrue(critic.predicate2(useCase1, null));
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
Model.getCoreFactory().buildAssociation(useCase1, actor);
public void mouseReleased(MouseEvent e) {
graph.removeGraphSelectionListener(this);
public T set(int arg0, T o) {
private DiagramSettings settings = new DiagramSettings();
public boolean addAll(Collection< ? extends T> arg0) {
public <A> A[] toArray(A[] arg0) {
assertEquals(tabDiagram.getJGraph(), graph);
Model.getUseCasesFactory().buildInclude(useCase2, useCase1);
new InitProfileSubsystem().init();
public List<T> subList(int fromIndex, int toIndex) {
long currentTime = (new Date()).getTime();
@Override
private Rectangle bounds = new Rectangle(10, 10, 20, 20);
Model.getUmlFactory().delete(ns);
@Override
new InitProfileSubsystem().init();
modelElem = Model.getCoreFactory().buildClass("AClass", model);
protected List getValidNamespaceClasses() {
public FontUIResource getSubTextFont() { return smallFont; }
return Model.getModelManagementFactory().createPackage();
modelImpl.getModelEventPump().stopPumpingEvents();
model = null;
createDefaultExtent();
model = new UMLModelElementNameDocument();
Object theTagDefinition2 = Model.getExtensionMechanismsFactory().
AbstractActionAddModelElement2 actionSupplier =
public void update(Observable o, Object arg) {
proj = ProjectManager.getManager().makeEmptyProject();
}
Object stereotype = TestStereotypeUtility.findModelElementNamed(
proj.getProfileConfiguration().addProfile(profile, model);
repository.beginTrans(true);
URL url = CheckMain.class.getClassLoader().getResource(filename);
removePerspectiveButton.setEnabled(false);
Object aClass = Model.getCoreFactory().buildClass("AClass", model);
Object tagDef = TestStereotypeUtility.findModelElementNamed(
Method enableAboutMethod = macOSXApplication.getClass().getDeclaredMethod("setEnabledAboutMenu", new Class[] { boolean.class });
Rectangle scrSize =
// static variables
private static final int AUTOSCROLL_MARGIN = 12;
public void elementRemoved(RemoveAssociationEvent evt) {
public int getIndexOfChild(Object parent, Object child) {
} else if (style.equals("rect")) {
// static variables
public boolean isDataFlavorSupported(DataFlavor parFlavor) {
None
JPanel setDefStereoV = new JPanel();
// static variables
None
@SuppressWarnings("unchecked")
String dir = System.getProperty("argouml.tests.dir");
List<Locale> v = getModifiedSupportedLanguages();
Model.getPump().flushModelEvents();
Runnable doWorkRunnable = new Runnable() {
public List getPorts(Object nodeOrEdge) {
@Override
if (lastArchiveFile.exists()) {
@Override
String token;
if (handle instanceof AssociationEnd) {
@Override
for (int i = 0; i < subkeys.length; i++) {
None
public DataTypesHelper getDataTypesHelper() {
StreamSource xsltStreamSource = new StreamSource(xsltUrl
@Override
if ((Model.getFacade().getName(dm) == null)
None
if (!(Model.getFacade().isAAssociation(dm))) {
Object m = Model.getFacade().getRoot(oper);
* Overridden to set Argo-specific RenderingHints to determine whether
if (Model.getFacade().getStateMachine(cs) == null) {
Editor curEditor = Globals.curEditor();
int[] selectedIndexes = getSelectedIndexes();
// static variables
fireTableDataChanged();
for (int i = 0; i < componentCount; ++i) {
} else {
LOG.error("problem parsing And Checking Constraints",
super("stereotype", false);
@Override
* @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
critic.setPriority(0);
SwingUtilities.invokeAndWait(new Runnable() {
if (Model.getFacade().getName(e1) == null) {
public Type navigateQualified(String name, Type[] qualifiers)
Object element = invoke(createMethod, factory, args);
public boolean isCellEditable(int row, int col) {
// TODO: Maybe a return message already exists. Check first and
public Any getClassifier(String name) {
final Object returnMessageSource =
final Object returnMessageDest =
@SuppressWarnings("unchecked")
String body = (String) o;
@Override
if ((SwingUtilities.windowForComponent((Component) source)
public void printStackTrace(PrintWriter pw) {
addSettingsTab(new SettingsTabPreferences());
public void caseAPostfixExpressionTail(APostfixExpressionTail node) {
LOG.debug("target is null in set target or "
for (int i = 0; i < tabPanelList.size(); i++) {
"label.namespace.navigate.tooltip"),
@Override
public void outABooleanLiteral(ABooleanLiteral node) {
currentKeyStroke = defaultKeyStroke;
if (file == null) {
public void windowActivated(WindowEvent e) {
LOG.info("Registering Quit handler for Mac");
return Collections.emptySet();
@Override
}
return result;
// static variables
public void windowClosing(WindowEvent e) {
// static variables
public void windowDeactivated(WindowEvent e) {
None
public void keyTyped(KeyEvent e) {
FigSingleLineTextWithNotation comp = null;
public void handleSettingsTabCancel() {
// static variables
return collator.compare(getName(obj), getName(obj1));
if (fe instanceof MouseListener) {
// static variables
// static variables
if (newSourceFig == newDestFig) {
if (!canAddNode(node)) {
public UndoableAction(String name) {
newEdge.setSourcePortFig(extensionFN);
final String suffix = getSuffix(systemId);
Model.getCollaborationsHelper().setActivator(
public void dispose() {
+ "<profile>\n"
protected ColorUIResource getSecondary3() { return secondary3; }
numOfMEsWithSrcPath = 2;
public void mouseEntered(MouseEvent e) {
if (anotherPt.x > x + width) {
@Override
final FigMessage firstMessageAbove = getNearestMessage(
LOG.info("Looking for minimum space below");
JPanel setDefStereoV = new JPanel();
public Component getListCellRendererComponent(
List regions = Model.getStateMachinesHelper().getRegions(
@Override
LayerPerspective lay = new
UmlDiagramRenderer renderer = createDiagramRenderer();
if (ns == null) {
@Override
it = xList.iterator();
public void mouseClicked(MouseEvent me) {
// static variables
None
// static variables
// static variables
// static variables
public StateMachinesFactory getStateMachinesFactory() {
// static variables
public void edgeRemoved(GraphEvent e) {
Object otherNode = null;
if (!(Model.getFacade().isAAssociation(dm))) {
// name compartment and build up.
public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node,
public void menuDeselected(MenuEvent me) { }
int opposite = p2.y - p1.y;
ySender = figMessage.getFinalY();
currentActivation = createActivationFig(
ySender = figMessage.getFinalY();
ySender = figMessage.getStartY();
public T remove(int index) {
}
public int compare(FigMessage m1, FigMessage m2) {
for (FigActivation act : activations) {
if (Model.getFacade().isAClassifierRole(element)) {
return true;
if (Model.getFacade().isAPackage(o)) {
&& Model.getFacade().getNamespace(node) == getCollaboration();
assertTrue("CheckItem.getDescription() incorrect "
public void dragOver(DragSourceDragEvent dragSourceDragEvent) {
if (Model.getFacade().isAAssociationRole(dm)) {
x1 = me.getX();
while (intersects(points, result, size) && count++ < limit) {
}
public int compare(FigMessage m1, FigMessage m2) {
lastX1 = Math.min(snapPt.x, lastX1);
public void valueChanged(ListSelectionEvent lse) {
lastX2 = Math.max(snapPt.x, lastX2);
if (currentDirection == DIRECTION_UPWARD
} else {
if (currentDirection == DIRECTION_UNDEFINED) {
protected void applyOffsetAmount(
if (currentDirection == DIRECTION_DOWNWARD
source.createActivations();
g.fillRect(x1 - 10, y - 2, 20, 4);
@Override
ke.consume();
@Override
if (figMessage.getFinalY() >
&& ((FigMessage) fig).getDestFigNode() != null
int x = getX() + getWidth() / 2 - width / 2;
public UseCasesFactory getUseCasesFactory() {
else if (y < lifeLineFig.getY()) {
@Override
public void dropActionChanged(
protected void setStandardBounds(final int x, final int y, final int w,
return NotationProviderFactory2.TYPE_SD_MESSAGE;
@Override
if (Model.getFacade().isACallAction(getAction())) {
public void nodeAdded(GraphEvent e) {
np = null;
if (getDestPortFig() == null || getSourcePortFig() == null) {
FigClassifierRole source = (FigClassifierRole) getSourceFigNode();
@Override
LOG.error("Exception caught", e);
protected void setStandardBounds(final int x, final int y, final int w,
FigMessageSpline (Point start) {
public void actionPerformed(ActionEvent event) {
switch (hand.index) {
target = t;
@Override
public List getPorts(Object nodeOrEdge) {
public List getInEdges(Object element) {
region = Model.getUmlFactory().buildNode(
public void setValueAt(Object ob, int row, int col) {
@Override
c.gridx = 0;
public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node,
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
shouldDraw = false;
public void setNodeInstance(Object handle, Object nodeInstance) {
for (Fig workOnFig : figs) {
for (Fig workOnFig : figs) {
for (Fig workOnFig : figs) {
if (workOnFig instanceof FigClassifierRole) {
int startName = name.lastIndexOf('.') + 1;
switch (hand.index) {
if (workOnFig instanceof FigClassifierRole) {
MutableGraphModel gm = new SequenceDiagramGraphModel();
for (Fig fig : (List<Fig>) getLayer().getContentsNoEdges()) {
public Object getOwner(Object port) {
(new InitStateDiagram()).init();
None
/**
public List getInEdges(Object element) {
/**
Rectangle box = calculateCompartmentBoxDimensions(
public void setNodeInstance(Object handle, Object nodeInstance) {
}
/**
/**
/**
protected void setStandardBounds(final int x, final int y, final int w,
/**
/*
boolean addProperty(Object arg0, Object arg1);
boolean addProperty(Object arg0, Object arg1);
boolean hasProperty(Object diagramElement,
updateListeners(oldV, newOwner);
* Getter for the ChangeableKind object.
/**
/**
public void actionPerformed(ActionEvent e) {
@Override
// static variables
None
public void dragExit(DropTargetEvent dte) {
File xmiFile = File.createTempFile("TestXmiRead", "xmi");
InputSource inputSource = new InputSource(new FileInputStream(xmiFile));
@Override
if (ignoredElements != null) {
File emptyFile = File.createTempFile("TestXmiRead", "xmi");
public void mouseClicked(MouseEvent e) {
if (xe.getLineNumber() == -1) {
assertEquals("CheckItem.equals(o) incorrect", item, item2);
assertEquals(p.getRoot(), p.getModel());
List list = null;
assertEquals("Unexpected line number", -1, xe.getLineNumber());
assertEquals("Unexpected line number", 1, xe.getLineNumber());
* @author Bob Tarling
assertEquals("Wrong number of top level elements read", 1, elements
List list = null;
@Override
LOG.info("Setting ignore delete for " + vertex); //$NON-NLS-1$
public void mouseDragged(MouseEvent me) {
protected Object getNewNode(int arg0) {
@Override
return null;
public void modelChanged(UmlChangeEvent evt) {
} else if (handle instanceof OpaqueBehavior) {
*         javax.swing.JList, java.lang.Object, int, boolean, boolean)
return handle;
instanceof org.omg.uml.behavioralelements.commonbehavior.Object;
@Override
if (!(handle instanceof Stereotype)) {
public void render(Runnable r) {
private void selectChildren(ExplorerTreeModel model, ExplorerTreeNode node,
public Object getExitPoint() {
for (Relationship rel : ((Element) handle).getRelationships()) {
TreeIterator<Notifier> ti =
&& !(handle instanceof String)
public void delayedVetoableChange(PropertyChangeEvent pce) {
}
return Collections.EMPTY_SET;
return handle != null ? handle.toString() : null;
List<Trigger> trs = ((Transition) handle).getTriggers();
return false;
public Component getTreeCellRendererComponent(JTree tree, Object value,
return false;
@Override
return modelElement instanceof InputPin
* during draging. Use translateFig(int dx, int dy) to force change of the
return false;
public void propertyChange(PropertyChangeEvent e) {
return false;
return null;
if (name.regionMatches(true, startName, "UML", 0, 3)) {
return handle instanceof DestroyObjectAction;
|| handle instanceof OpaqueExpression;
return false;
}
}
public void setUp() throws Exception {
return false;
LOG.error("some unidentified problem", t);
return false;
return false;
return null;
addPathItem(fg, new PathItemPlacement(this, fg, 50, 10));
@Override
return Property.class;
public void addElement(Object o) {
"There are no extensions in UML 1.x");
public void drop(DropTargetDropEvent dropTargetDropEvent) {
if (isNew()) {
@Override
return Signal.class;
return false;
return;
return InteractionConstraint.class;
for (Iterator it = ((org.omg.uml.UmlPackage) instance
// and before the next $ or end of class name.
return false;
Object guard = Model.getFacade().getGuard(dm);
return State.class;
public void setToDoItem(ToDoItem i) { }
}
if (isNew()) {
Object target = TargetManager.getInstance().getModelTarget();
// specifies valid elements for an AssociationRole to contain
exitItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4,
}
private Map<Object, List<Listener>> registerForElements =
final Collection<FigEdge> existingEdges =
private Map<Object, List<Listener>> registerForClasses =
if (!(figBounds.equals(styleBounds))) {
events.add(new EventAndListeners(
// static variables
private EUMLModelImplementation modelImplementation;
return false;
newPoint.translate(-deltax, -deltay);
list.add("LiteralString");
Configuration.setString(Configuration.makeKey(oldAction
list.add("LiteralBoolean");
if (!_initiallyLaidOut) {
//list.add("LiteralReal");//UML 2.4
public Object getOwner(Object port) {
return newValueSpecification;
CollaborationsPackage cPkg = ((org.omg.uml.UmlPackage) cr
} else if (handle instanceof LiteralString) {
OpaqueExpression oe = (OpaqueExpression) handle;
bodies.clear();
} else if (handle instanceof LiteralString) {
public RefObject getReference (String docId, String xmiId) {
if (Model.getFacade().isAActor(fromP)
throw new NotYetImplementedException();
OpaqueBehavior methodImpl = null;
role.getConnection().add(buildAssociationEndRole(from));
for (Behavior impl : ((Operation) handle).getMethods()) {
XmiReferenceResolverImpl(RefPackage[] extents, XMIInputConfig config,
if (methodImpl == null) {
methodImpl = UMLFactory.eINSTANCE.createOpaqueBehavior();
Collection<Fig> removeCollection = new ArrayList<Fig>(getFigs());
methodImpl.setSpecification((Operation) handle);
((Operation) handle).getMethods().add(methodImpl);
if (methodImpl.isSetLanguages()) {
}
.getRoot());
methodImpl.getLanguages().add("java");
* This will collate e, E, �, � together, but not eliminate non-identical
throw new IllegalArgumentException();
// so we won't implement it
public void handleSettingsTabRefresh() {
String[] pieces = arg.trim().split("_");
if (!flag) {
*            is the JMenuItem to do this for.
throw new NotImplementedException();
if (mee.getPropertyName().equals("name")) {
Object supplier =
packageRegistry.put(XMI212UMLResource.UML_METAMODEL_2_1_1_NS_URI,
Fig target = panelTarget;
packageRegistry.put(UML212UMLResource.UML_METAMODEL_NS_URI,
extensionToFactoryMap.put(
if (o instanceof RefBaseObject) {
Model.getStateMachinesHelper().setConcurrent(
if (SwingUtilities.isEventDispatchThread()) {
SwingUtilities.invokeLater(new Runnable() {
return new String[0];
/* Disabled since it gives various problems: e.g. the toolbar icons
String reference =
Object osxAdapterProxy = Proxy.newProxyInstance(OSXAdapter.class.getClassLoader(), new Class[] { applicationListenerClass }, adapter);
for (Map.Entry<Position, DetailsPane> entry
Object changeable,
Project p = ProjectManager.getManager().makeEmptyProject();
// static variables
Model.getFacade().getMultiplicity(multiplicityOwner);
public Object getSource(Object relationship) {
//            createProperty("label.properties-pane",
st.mark("initialize modules");
org.argouml.cognitive.Translator.setTranslator(
OpaqueBehavior method = UMLFactory.eINSTANCE.createOpaqueBehavior();
return UMLFactory.eINSTANCE.createGeneralization();
TargetManager.getInstance().addTargetListener(this);
if (!(ns instanceof UmlPackage)) {
public Collection getCommonTaggedValueTypes() {
public void propertyChange(PropertyChangeEvent evt) {
Iterator<Package> iter = ((Profile) profile).getNestedPackages()
public Object invokeFeature(Map<String, Object> vt, Object subject,
for (AssociationRole ar : associationRoles) {
* Not implemented.
if (!internalsInfo.checkRetain(line)) {
if (!classLoaderAlreadyAdded) {
ext.destroy();
if (prop.isMultivalued() && !(value instanceof Collection)) {
String msg =
Iterator it = attributes.entrySet().iterator();
value = col.iterator().next();
Stereotype stereotype = (Stereotype) prop.eContainer();
if (feature.equals("targetScope")) {
}
Iterator<Package> iter = ((Profile) profile).getNestedPackages()
Iterator<Package> iter = ((Profile) handle).getNestedPackages()
{Extend.class,           UseCase.class, },
if (Model.getFacade().isAConstraint(subject)) {
if (Model.getFacade().isATagDefinition(evt.getSource())) {
{AssociationClass.class, UmlClass.class, },
* Package-private constructor.
None
connection = modelImpl.getCoreFactory().buildAssociation(
o = modelImpl.getModelManagementFactory().createSubsystem();
private static final Logger LOG;
for (Class<?> containerType : validContainmentMap.keySet()) {
Class<?>[] validElements =
for (Classifier base1 : bases)  {
public Object makeEdge() { return null; }
* @return a copy of element, or null.
* @param tagName
validContainmentMap.put(Profile.class,
public void hitHandle(Rectangle cursor, Handle h) {
validContainmentMap.put(UmlClass.class,
validContainmentMap.put(Classifier.class,
validContainmentMap.put(Signal.class,
validContainmentMap.put(Actor.class,
validContainmentMap.put(Component.class,
@Override
validContainmentMap.put(Node.class,
damage();
Class<?>[] modeElementPair = new Class[2];
Class<?>[] modeElementPair = new Class[2];
@Override
// swap elements the elements and add again.
validContainmentMap.put(DataType.class,
public void handleSettingsTabSave() {
validContainmentMap.put(Action.class,
try {
// so we won't implement it
getGlassPane().setVisible(true);
ce.getLayerManager().getActiveLayer().calcDrawingArea();
if ("ownedElement".equals(pce.getPropertyName())) {
try {
// static variables
ErrorManager.Annotation[] annotations =
@Override
}
if (isReadOnly(element)) {
InputSource xformedInput = serialTransform(transformFiles,
* @param target The target to set
public Map<String, Object> getXMIUUIDToObjectMap() {
assertTrue("Interaction not removed",
String xsltFileName = STYLE_PATH + styles[i];
File tmpOutFile = File.createTempFile(TEMP_XMI_FILE_PREFIX, ".xmi");
if (!(handle instanceof BehavioralFeature)) {
if (e.getModifiers() == 0) {
for (int i = 0; i < styles.length; i++) {
jContentPane.add(jlblFamilies, gridBagConstraints4);
Transformer transformer = stf.newTransformer(xsltStreamSource);
myInput =
xmiHeader = new String(bytes);
if (umlPackage != null) {
None
MDRepository defaultRepository =
Collection<File> dirs = new ArrayList<File>();
if (mofExtent == null) {
theModelEventPump = new ModelEventPumpMDRImpl(this, repository);
public DiagramInterchangeModel getDiagramInterchangeModel() {
*         java.lang.Object, int, int)
public Facade getFacade() {
public String getColumnName(int col) {
public ModelEventPump getModelEventPump() {
public DirectionKind getDirectionKind() {
public ActivityGraphsFactory getActivityGraphsFactory() {
setRowHeight(18);
// TODO: Localize
if (inputSource.getByteStream() != null
String dummyStr = Model.getFacade().getName(stimulus);
if (uml13) {
Thread currentThread = Thread.currentThread();
repository.endTrans(true);
resolver.clearIdMaps();
public int getColumnCount() {
theDataTypesFactory = new DataTypesFactoryMDRImpl(this);
theCopyHelper = new CopyHelper(this);
None
synchronized (extents) {
public CollaborationsFactory getCollaborationsFactory() {
public OrderingKind getOrderingKind() {
*      Change in explorer tree selection -> set target in target
public CoreFactory getCoreFactory() {
if (newValue != oldValue) {
public DataTypesFactory getDataTypesFactory() {
* @see GUISettingsTabInterface#handleSettingsTabCancel()
buf.append("+ Decki" + cpbi + "\n");
public ModelManagementFactory getModelManagementFactory() {
protected final void fireContentsChanged(Object source, int index0, int index1) {
public Object getValueAt(int row, int col) {
public StateMachinesHelper getStateMachinesHelper() {
public UmlHelper getUmlHelper() {
public UseCasesHelper getUseCasesHelper() {
public ChangeableKind getChangeableKind() {
public AggregationKind getAggregationKind() {
public ScopeKind getScopeKind() {
@Override
public ConcurrencyKind getConcurrencyKind() {
public int getRowCount() {
LOG.debug("Failed to remove index entries for mof ID " + mofId);
private XmiWriterMDRImpl(MDRModelImplementation theParent, Object theModel,
modelImpl.getRepository().endTrans();
public FontUIResource getWindowTitleFont() { return windowTitleFont; }
public Collection<Stereotype> getAllPossibleStereotypes(Collection models,
None
return handle;
* When the ok or apply button is pressed.
}
Collection<String>   namesSeen = new ArrayList<String>();
FigSingleLineTextWithNotation comp = createFigText(
public Object getAbstraction() {
Action action = (Action) elem;
modelImpl.getUmlHelper().deleteCollection(
public void paint(Graphics g) {
modelImpl.getUmlHelper().deleteCollection(instance.getLinkEnd());
events.add(new AddAssociationEvent(
modelImpl.getUmlHelper().deleteCollection(
Model.getPump().addClassModelEventListener(this,
modelImpl.getUmlFactory().delete(link);
public DataFlavor[] getTransferDataFlavors() {
modelImpl.getUmlHelper().deleteCollection(
events.add(new AttributeChangeEvent(
modelImpl.getUmlHelper().deleteCollection(
InitializeModel.initializeDefault();
protected ColorUIResource getSecondary1() { return secondary1; }
return ((Comment) handle).getBody();
ae.getFixedElement(),
for (Iterator it = ((org.omg.uml.UmlPackage) stimulus
} else {
public void tableChanged(TableModelEvent e) {
c.setName(((Classifier) classifier).getName()
* @param elem
validContainmentMap.put(Enumeration.class,
public XMIReferenceProvider.XMIReference getReference(RefObject object) {
// substates in a concurrent composite state.<p>
XmiReference ref = mofIdToXmiId.get(mofId);
if (namespaces1 != Collections.EMPTY_LIST
return role;
/**
@Override
super(extents, config);
validContainmentMap.put(AssociationRole.class,
private static final javax.jmi.model.AggregationKindEnum MOF_COMPOSITE =
if (mdrEvent instanceof TransactionEvent) {
* @param elem
protected ColorUIResource getSecondary2() { return secondary2; }
Interaction i = message.getInteraction();
super.register(resolvedSystemId, xmiId, object);
String exts = "\\.jar|\\.zip";
if (modelUrl == null) {
modelUrl = getValidURL(public2SystemIds.get(systemId));
protected final void fireContentsChanged(Object source, int index0, int index1) {
String modelUrlAsString = findModuleURL(suffix);
public Object getSelectedItem() {
modelUrl = findModelUrlOnClasspath(systemId);
}
modelUrl = super.toURL(systemId);
((FigTextEditor) focusOwner).endEditing();
URL url = pendingProfiles.remove(arg0);
public void setSelectedItem(Object anItem) {
}
public Class getColumnClass(int col) {
super.readExternalDocument(arg0);
LOG.error("Error reading external document " + arg0);
validContainmentMap.put(CallState.class,
validContainmentMap.put(ActionState.class,
if (isATransition(handle)) {
settings = renderSettings;
Collection<MofClass> metaTypes = getMetaClasses();
public void showStatus(String s) {
return "Imported " + typeName + ": " + elemName;
RefPackage pkg = extent.refPackage(names.get(0));
return pkg.refClass(names.get(1));
if (hasAsActivator(activator, mes)) {
None
if (mes.getPredecessor().contains(activator)) {
Collection<UmlAssociation> listToRemove = new ArrayList<UmlAssociation>();
if (aRole.getName() == null || aRole.getName().equals("")) {
returnList.removeAll(mmh.getAllModelElementsOfKind(ns,
}
public void removeBase(Object handle, Object c) {
public void writeHeader (Writer ps) {
*         java.beans.PropertyChangeEvent)
String header =
}
Globals.setSticky(false);
public void setNodeInstance(Object handle, Object nodeInstance) {
public void setNodeInstance(Object handle, Object nodeInstance) {
public void addModelEventListener(PropertyChangeListener listener,
String mofid = ((InstanceEvent)mdrEvent).getInstance().refMofId();
public String getText(int offset, int length) throws BadLocationException {
*         java.beans.PropertyChangeEvent)
events.add(new AttributeChangeEvent(
public void setOrientation(Orientation newOrientation) {
}
return null;
public List getOutEdges(Object element) {
events.add(new AttributeChangeEvent(
public Element getDefaultRootElement() {
if (!name.endsWith("CreateInstanceEvent")) {
public Component getListCellRendererComponent(
if (event instanceof DeleteInstanceEvent) {
if (comp == null) {
Set<PropertyChangeListener> listeners =
listeners.addAll(listenedClasses.getMatches(className, event
LOG.debug("Firing event on " + pcl.getClass().getName()
enableSizeChecking(false);
if (false/*LOG.isDebugEnabled()*/) {
CompositeState deletedCompositeState =
LOG.debug("No listener for "
// Make all the parts match the main fig
String mofId = ((RefBaseObject) modelElement).refMofId();
return names;
@Override
RefObject ro = null;
if (!(metaobject instanceof MofClass)) {
if (!(metaobject instanceof MofClass)) {
"Attempt to instantiate abstract type");
JButton btnApply = new JButton(Translator.localize("button.ok"));
@Override
public Object getAddOnly() {
Map<String, List<T>> entry = registry.get(key);
public int getLength() {
if (subkeys == null || subkeys.length < 1) {
public void propertyChange(PropertyChangeEvent evt) {
Object rootModel = modelImpl.getModelManagementFactory().getRootModel();
taggedValues.clear();
.getTargets().toArray())));
TagDefinition td = (TagDefinition) elem;
private void doCopyStereotype(Stereotype source, Stereotype target) {
}
return true;
}
{Usage.class,            ModelElement.class, },
{Abstraction.class, UmlClass.class, Interface.class, null, },
public void actionPerformed(ActionEvent ae) {
{Abstraction.class, UmlClass.class, UmlClass.class, null, },
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
validContainmentMap.put(org.omg.uml.modelmanagement.Model.class,
@Override
@Override
}
validContainmentMap.put(Operation.class,
validContainmentMap.put(Event.class,
return Model.getUseCasesHelper().getSpecificationPath(subject);
@Override
public void setNodeInstance(Object handle, Object nodeInstance) {
validContainmentMap.put(State.class,
Polygon newPoly = new Polygon();
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
validContainmentMap.put(SubactivityState.class,
if (editOnRedraw) {
Collection<FigEdgeNote> toRemove = new ArrayList<FigEdgeNote>();
if (elementType == this.metaTypes.getAttribute()) {
* UML 1.4 spec says "A UseCase cannot contain any
List list = Collections.EMPTY_LIST;
if (Model.getFacade().isAModelElement(subject)) {
List<Class<?>[]> validItems = validConnectionMap.get(connectionType);
if (Model.getFacade().isAStructuralFeature(subject)) {
Object currentBase = Model.getFacade().getBase(role);
modelImpl.getRepository().beginTrans(false);
if (Model.getFacade().isADependency(subject)) {
if (elem instanceof GeneralizableElement) {
if (elem instanceof Parameter) {
if (Model.getFacade().isABehavioralFeature(subject)) {
if (elem instanceof Link) {
LOG.error("Encountered deleted object during delete of " + elem);
LOG.error("Encountered deleted object during delete of " + elem);
if (feature.equals("contents")) {
if (namespaces == Collections.EMPTY_LIST || namespaces.size() == 0) {
((RefObject) o).refImmediateComposite();
if (isVisiblyOwned(element, g.getParent(), dupCheck)) {
remove.add(object);
&& stereo.getBaseClass()
result.add((Classifier) parent);
@Override
None
|| ns instanceof UseCaseInstance
if (!(modelElement
public final void focusLost(FocusEvent arg0) {
if (ends.size() >= 3) {
ArrayList features = new ArrayList();
getNameFig().setTopMargin(
if (isProfilePackage(ns)) {
|| modelElement instanceof Stereotype)) {
// stereotype which can only contain the following types
if (list == Collections.EMPTY_LIST) {
// static variables
private boolean contained(Object container, Object candidate) {
return false;
protected void setStandardBounds(int x, int y, int w, int h) {
d.supplier.oclAsType(Package).allImportedElements->select (e |
</blockquote>
Iterator<Namespace> path1 = getPath((Namespace) ns1).iterator();
Namespace lastMatch = null;
if (ends.size() >= 3) {
if (ak == AggregationKindEnum.AK_AGGREGATE
return true;
((Comment) handle).setBody(body);
for (Object element : modelImpl.getModelPackage().getDataType()
for (Object element : modelImpl.getModelPackage().getPrimitiveType()
public Collection getAllNamespaces(Object ns) {
if (feature.equals("allFeatures")) {
Collection returnElements = new ArrayList();
Rectangle bounds = parseBBox();
ArrayList behavioralfeatures = new ArrayList();
Collection toAddEIs = new ArrayList();
return Collections.emptySet();
if (ns instanceof UmlPackage) {
if (assoc == null || !(assoc instanceof UmlAssociation) || type == null
}
updateElementListeners(listeners);
} else if (mult2 == MULT_UNLIMITED) {
}
if (handle == null) {
modelImpl.getUmlFactory().delete(assoc);
modelImpl.getUmlHelper().deleteCollection(
Attribute attr = (Attribute) elem;
public MetaTypes getMetaTypes() {
modelImpl.getUmlHelper().deleteCollection(
public void removeSourceFlow(Object handle, Object flow) {
public Object findClassifierByName(Object ofs, String s) {
// static variables
deps = org.argouml.model.Model.getFacade()
modelImpl.getUmlHelper().deleteCollection(
return NO_PROBLEM;
modelImpl.getUmlHelper().deleteCollection(
}
public String nextElement() {
extensionPoint.setName("newEP");
for (Feature f : ((Classifier) source).getFeature()) {
public boolean hasMoreElements() {
*            The stereotype to copy from.
}
}
@Override
Collection<Signal> raisedSignals = ((org.omg.uml.UmlPackage) source
ModelElement targetME = ((ModelElement) target);
for (String language : methodImpl.getLanguages()) {
for (Stereotype s : sourceME.getStereotype()) {
ModelElement element = (ModelElement) anelement;
* @see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)
if ("".equals(str)) {
if (lower == -1) {
pack = (Namespace) context;
modelImpl.getUmlHelper().deleteCollection(
modelImpl.getUmlHelper().deleteCollection(
registry.register("multi1", "key4", null);
for (Object literal : Model.getFacade().getEnumerationLiterals(
registry.register("multi3", "key4", null);
@Override
if (lFirst != null) {
Collection transitions = new ArrayList(
@Deprecated
Object trans = null;
currentY += minNameHeight - 1; // -1 for 1 pixel overlap
protected String getName() {
// critic) if this is a binary association or is an association role.
* one by one: */
Collection<Fig> figs = getProject().findAllPresentationsFor(getSource());
ssFig.removeFromDiagram();
@Override
}
//   Stimuli -> Stimulus
public void deleteCollection(Collection col) {
Object container = ((RefObject) elem).refImmediateComposite();
if (struc.getType() == null || struc.getOwner() == null) {
* Delete EnumerationLiteral.
addGetterSetter("ownedOperation", new FeatureGetterSetter());
//list.add("InstanceValue");
public Object get(Object modelElement, Class<?> type) {
public void actionPerformed(ActionEvent event) {
node.getTimeExpression().apply(this);
public UndoableAction() {
return false;
for (Profile profile : p.getProfileConfiguration().getProfiles()) {
d.supplier.oclAsType(GeneralizableElement).
public void actionPerformed(ActionEvent event) {
addGetterSetter("association", new AssociationEndGetterSetter());
metaClasses = new LinkedList<String>(tmpMetaClasses);
@Override
Dimension nameMin = getNameFig().getMinimumSize();
try {
return false;
modelImpl.getUmlHelper().deleteCollection(
ret.add(vars);
return Collections.emptySet();
Dimension symbol = figPoly.getSize();
Model.getCoreHelper().setInitialValue(target, null);
protected boolean isValidElement(Object element) {
@SuppressWarnings("unchecked")
public Object getExitPoint() {
public void setSelectedItem(Object anItem) {
* Most notabely, do not move the setNamespace method any level up in
LOG.debug("buildModelList threw exception for target "
protected void buildModelList() {
return 0;
protected void tearDown() throws Exception {
public UndoableAction(String name, Icon icon) {
public ExtensionMechanismsHelper getExtensionMechanismsHelper() {
None
@Override
protected boolean isValidElement(Object m) {
ArgoEvent evt = new ArgoStatusEvent(ArgoEventTypes.STATUS_TEXT, this,
protected Object getSelectedModelElement() {
"label.namespace.navigate.tooltip"),
}
}
}
@SuppressWarnings("unchecked")
elements.addAll(Model.getExtensionMechanismsHelper()
elements.addAll(p.getProfileConfiguration().findByMetaType(
elements.addAll(Model.getExtensionMechanismsHelper()
LinkedList<String> lst = new LinkedList<String>(
Model.getUmlFactory().deleteExtent(packages.iterator().next());
public void removeUpdate(final DocumentEvent p1) {
@Override
public void actionPerformed(ActionEvent e) {
others = new ArrayList(Model.getFacade().getConnections(newTarget));
protected void runTest() throws Throwable {
addToDefaultProfiles(profileGoodPractices);
public void setUp() throws Exception {
public void setNodeInstance(Object handle, Object nodeInstance) {
protected void buildModelList() {
protected boolean isValidElement(Object element) {
if (Model.getFacade().isAOperation(o)) {
protected void setTarget(Object theNewTarget) {
Model.getPump().addModelEventListener(
public void targetRemoved(TargetEvent e) {
public void caseARelationalExpressionTail(ARelationalExpressionTail node) {
public void targetAdded(TargetEvent e) {
Object cis =
updateCompartment(Model.getMetaTypes().getAttribute());
@Override
private Stereotype buildStereotype(String text) {
None
/* This check is needed, otherwise the setbase()
public JPanel getTabPanel() {
d.supplier.oclAsType(Namespace).ownedElement->select (e |
public void caseAIfExpression(AIfExpression node) {
list.add(selectedElement);
getStereotypeFig().setHeight(STEREOHEIGHT + LINE_WIDTH);
// if "expression" implements one of the combobox, select it
if (!Model.getFacade().isAClassifier(newValue)) {
for (Behavior impl : ((Operation) handle).getMethods()) {
new ProfileLoader().doLoad();
private static final String EMPTYSTRING = "";
startListeningForModelChanges();
private List<Namespace> getPath(Namespace element) {
LOG.debug(">>Got an event for a modelchange that we inflicted ourselves...");
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
return language;
trueButton = new JRadioButton(Translator.localize("misc.boolean.true"));
body = new FigPackageFigText(getOwner(),
// Build the field
if (oldSelected != newSelected) {
+ "a.allConnections->exists(r | "
Boolean[] values = new Boolean[1];
getModel().setValue(values);
if (ends.size() >= 3) {
oldSelected = falseButton.isSelected();
public String getName() { return "Default"; }
rememberExpression = getExpression();
Model.getCoreHelper().setInitialValue(target, rememberExpression);
for (Object element : modelImpl.getModelPackage().getEnumerationType()
Model.getCoreHelper().setInitialValue(target,exp);
//                LOG.debug("Duplicate property name found - " + typeName + ":"
LOG.debug(
public CommonBehaviorFactory getCommonBehaviorFactory() {
protected boolean isValidElement(Object element) {
bContinue = isUniqueLanguage(tabValues, curLanguage
setElements(Model.getCollaborationsHelper()
public CollaborationsHelper getCollaborationsHelper() {
validContainmentMap.put(ObjectFlowState.class,
repository.endTrans();
expression = target;
public Object getInOutParameter() {
public int lastIndexOf(Object o) {
/* Listening only to "remove" events does not work...
public void removeUpdate(final DocumentEvent p1) {
AssociationEnd assEnd = (AssociationEnd) handle;
public void clearStereotypes(Object modelElement) {
public void notifyObservers() {
public Object getPublic() {
public TaggedValue createTaggedValue() {
element = buildNode(elementType);
// been overridden in a descendent and it is the action from
if (s != null && s.length() > 0) {
public Iterator<T> iterator() {
Object target = TargetManager.getInstance().getTarget();
addControl(panel, Translator.localize(prop.getLabel()),
public Object getPrivate() {
public Object getInstance() {
public Object getJoin() {
public Object getInitial() {
model.setValue(null);
delButton.setEnabled(false);
uvsPanel = new UMLValueSpecificationPanel(model, "");
file.delete();
}
Component c = component.getParent().getParent();
* @return all owned elements with a visibility of VK_PUBLIC
public void addModelEventListener(PropertyChangeListener listener,
public void flushModelEvents() {
public Collection getStereotypes(Object ns) {
public Object getSequential() {
*          java.beans.PropertyChangeListener, java.lang.Object,
public boolean isMovable(Object element) {
*          java.lang.String[])
public abstract void addClassModelEventListener(
public int getSize() {
@Override
// USED BY PGML.tee
// static variables
public Object getFrozen() {
if (modelUrl != null) {
public Collection getAllUseCases(Object ns) {
* spec is more restrictive - "[4] A Collaboration may only
public String expand(String desc, ListSet offs) {
return ((Extend) handle).getExtensionPoint();
public void windowClosing(WindowEvent e) {
Set<Classifier> bases = new HashSet<Classifier>();
if (evt instanceof AttributeChangeEvent
// This code has to go within the startElement block after the strings
String name = ((Class) type).getName();
protected List getValidNamespaceClasses() {
private void build() {
public void propertyChange(PropertyChangeEvent evt) {
tabValues[(currentIndex - 1) * 2] = savTabValues[0];
public void setValueAt(Object ob, int row, int col) {
if (pips != null
setName("UML Properties");
Collection<String> listVS = Model.getDataTypesHelper()
if (model != null) {
Object expression = this.model.getExpression();
@Override
public Object getSource(Object trans) {
typeInstanceValueList.setSelectedIndex(0);
public List<Decision> getSupportedDecisions() {
public String expand(String desc, ListSet offs) {
public boolean supports(Decision d) {
public boolean supports(Goal g) {
curBody = new JTextArea();
public boolean containsKnowledgeType(String type) {
JButton button = new JButton("...");
JPanel panel = new JPanel();
@Override
@Override
public Set<Object> getCriticizedDesignMaterials() {
Object p1type = Model.getFacade().getType(p1);
ret.addAll(Model.getFacade().getSubvertices(top));
public void setNodeInstance(Object handle, Object nodeInstance) {
System.arraycopy(tabValues, currentIndex * 2, savTabValues,
public void unsnooze() {
public void snooze() {
public void fixIt(ToDoItem item, Object arg) { }
tabValues[currentIndex * 2] = tabValues[(currentIndex + 1) * 2];
public boolean shouldBeEnabled(Object target) {
*         org.argouml.ui.targetmanager.TargetEvent)
if (!Model.getFacade().isAOperation(newValue)) {
*         org.argouml.ui.targetmanager.TargetEvent)
public void generatorRemoved(ArgoGeneratorEvent e) {
public void targetRemoved(TargetEvent e) {
public ListIterator<T> listIterator(int index) {
tabValues[(currentIndex + 1) * 2] = savTabValues[0];
target = ((UMLModelElementListModel) model).getTarget();
for (Object meta : metaTypes) {
if (addAction != null) {
Runnable doWorkRunnable = new Runnable() {
public class FigLink extends FigEdgeModelElement {
ListSet offs = null;
public void targetSet(TargetEvent e) {
.setInteger(
* @param tagName
* @param tagName
while (i.hasNext()) {
Fig fig = getUnderlyingFig();
JLabel labelLangage = new JLabel(Translator
System.arraycopy(tabValues, 0, newTabValues, 0,
#public)->includes (r.participant) or
System.arraycopy(tabValues, currentIndex * 2 + 2,
ArgoNotationEventListener,
tabValues[currentIndex * 2] = tabValues[currentIndex * 2 - 2];
if (getDestFigNode() == getSourceFigNode()) {
curLanguage = new JTextField();
final JTree dummyTree = new JTree();
JButton btnAdd = new JButton("+"); // +
public void parse(Object modelElement, String text) {
if (d.getPriority() > 0 && d.getPriority() <= getPriority()) {
if (qname.equals("private") && (container instanceof Container)) {
// 1. a noneditable applied profile
list.add(getSelectedModelElement());
copyMember(file, "todo", encoding, writer);
None
project.moveToTrash(attribute);
* Otherwise a "assert initialized" would suffice. */
TargetManager.getInstance().setTarget(cls2);
if (i != -1) {
public void handleSettingsTabCancel() {
e.printStackTrace(new PrintStream(stream));
@Override
}
if (wantedMenuItem == null) {
*   contents = self.ownedElement -> union(self.namespace, contents)
// static variables
public XmiReader getXmiReader() throws UmlException {
// static variables
None
// static variables
public void clear() {
// static variables
element =
// static variables
synchronized (this) {
if (critiquingRoot != null
JCheckBoxMenuItem wantedMenuItem = null;
protected void paintComponent(Graphics g) {
// static variables
*            The stereotype to copy from.
&& critiqueLock <= 0) {
Collection<Dependency> deps = org.argouml.model.Model.getFacade()
}
LOG.warn("Element " + dm
public String getParsingHelp() {
}
/**
* Used by the copy functions. Do not call this function directly.
*            The stereotype to copy from.
return getDesignerName();
None
// static variables
if (!(Model.getFacade().isAClassifier(newNode))
return null;
Namespace ns = null;
if (Model.getFacade().isAState(sv)) {
@Deprecated
if (wizClass != null) {
return getHeadline();
// static variables
None
if (fail == null) {
////////////////////////////////////////////////////////////////
ExtensionPoint ep = (ExtensionPoint) elem;
None
public void windowOpened(WindowEvent e) {
if (!JavaRuntimeUtility.isJreSupported()) {
/**
@Deprecated
abstract class CompositeCM implements ControlMech {
((PropertyChangeListener) nt).propertyChange(null);
class EnabledCM implements ControlMech {
public void handleStartElement(XMLElement e) throws SAXException {
class AndCM extends CompositeCM {
class NotSnoozedCM implements ControlMech {
class DesignGoalsCM implements ControlMech {
class OrCM extends CompositeCM {
// How much control should critics have over when they are relavant?
None
AwtExceptionHandler.registerExceptionHandler();
@Override
st.mark("create splash");
st.mark("initialize laf");
ProjectBrowser pb = initializeSubsystems(st, splash);
@Override
Configuration.load();
String directory = Argo.getDirectory();
org.argouml.util.Tools.logVersionInfo();
Translator.init(Configuration.getString(Argo.KEY_LOCALE));
System.setProperty("gef.imageLocation", "/org/argouml/Images");
PrintManager.getInstance().print();
System.exit(0);
protected void setupTokens() {
if (project == null) {
Class c;
Object o = null;
if (base.getNamespace() != null) {
LOG = Logger.getLogger(Main.class);
JPanel todoPane = new ToDoPane();
showTypes.setSelected(Configuration.getBoolean(
/**
/**
LOG.debug("Module " + module + " not found");
None
((DetailsPane) ProjectBrowser.getInstance().getDetailsPane())
None
Layer lay = editor.getLayerManager().getActiveLayer();
for (int i = pos + 1; i < len; i++) {
org.tigris.gef.base.Globals.setLastDirectory(dir);
return Configuration.getString(KEY_STARTUP_DIR,
.setInteger(
}
public void paintButtons(Graphics g) {
break;
high = getDestFigNode();
.lookupIcon("action.configure-perspectives"));
public void notifyObservers(Object o) {
None
synchronized (pausedMutex) {
valid = false;
recomputeAllOffenders();
// static variables
public Object evaluate(Map<String, Object> vt, ModelInterpreter mi,
if (itemSet.contains(item)) {
while (elems.hasNext()) {
public void refresh() {
// "no longer valid");
public int count(Object element) {
public Object getBuiltInSymbol(String sym) {
public Object getTarget() {
public void actionPerformed(ActionEvent event) {
found = true;
None
listenerList.add(ToDoListListener.class, l);
public void refresh() {
mi.setHorizontalTextPosition(SwingConstants.RIGHT);
None
// SELECTED value is found then this defaults to true in order
ListSet all = allOffenders;
/*
private String cachedExpandedHeadline;
/*
public boolean isCanceled() {
dsgr.setClarifier(ResourceLoaderWrapper.lookupIconResource("PostItD0"));
listenerList.add(ToDoListListener.class, l);
descriptionTextArea.setWrapStyleWord(true);   //MVW - Issue 2422
return list;
// static variables
public int getIconWidth() { return 0; }
None
public void notifyMessage(final String title, final String introduction,
None
Enumeration enumeration = lists.keys();
/**
Checklist chlist = (Checklist) lists.get(clazz);
*         org.argouml.ui.targetmanager.TargetEvent)
lists.put(cls, chlist);
*         org.argouml.ui.targetmanager.TargetEvent)
protected boolean isValidElement(Object element) {
JPanel setDefStereoV = new JPanel();
JPanel setDefStereoV = new JPanel();
JPanel setDefStereoV = new JPanel();
public void modelChange(UmlChangeEvent evt) {
JPanel setDefStereoV = new JPanel();
public void close() {
protected void addOtherModelEventListeners(Object newTarget) {
public boolean addAll(int arg0, Collection< ? extends T> arg1) {
snoozeUntil =  new Date(0);
public void progress(final ProgressEvent event) {
return last * 2;
None
// static variables
setColumnWidths();
finished = true;
None
Collections.sort(critics, new Comparator<Critic>() {
JPanel tablePanel = new JPanel(new BorderLayout(5, 5));
List<ToDoItem> candidates = new ArrayList<ToDoItem>();
public void notifyNullAction() {
JPanel detailsPanel = new JPanel(new GridBagLayout());
if (timeEvent) {
/*
List list = null;
actCol.setMinWidth(50);
if (getColumnModel().getColumnCount() > 3) {
if (Model.getFacade().isAAssociation(assoc)
tableSP.setPreferredSize(table.getInitialSize());
Translator.localize("label.decision-priority"));
c.gridy = 1;
//     c.gridx = 0;
//     c.gridx = 0;
c.gridy = 2;
public void targetAdded(TargetEvent e) {
/**
public T get(int index) {
public void modelElementRemoved(Object node) {
// static variables
// static variables
private final ImageIcon postIt0     = lookupIconResource("PostIt0");
public void run() {
private final ImageIcon postItD0    = lookupIconResource("PostItD0");
None
//   protected boolean isNeeded(ToDoPseudoNode node) {
None
public void removePerspective(Object perspective) {
addControl(panel, null, control, target);
c.gridy = 0;
public void targetAdded(TargetEvent e) {
image.setIcon(getWizardIcon());
public void targetAdded(TargetEvent e) {
None
None
None
Designer d = Designer.theDesigner();
None
}
None
Designer.theDesigner().getToDoList().setPaused(
Object expression = getExpression();
if (allOffenders.contains(parent)) {
None
Designer.firePropertyChange(Designer.MODEL_TODOITEM_ADDED, null, item);
boolean visible = true;
public void setNodeInstance(Object handle, Object nodeInstance) {
public boolean add(T arg0) {
description.setTarget(item);
/*
* @param owner the model element that owns the compartment
None
protected void doIt(ActionEvent event) {
setRoot(Designer.theDesigner().getToDoList());
/**
/*
return null;
@Override
}
None
}
addPerspective(userDefinedPerspective);
((TreeModelListener) listeners[i + 1]).treeNodesChanged(e);
if (offenders.contains(off)) {
ToDoList list = Designer.theDesigner().getToDoList();
DesignIssuesDialog d = new DesignIssuesDialog();
GoalsDialog d = new GoalsDialog();
None
removeAllElements();
applyProfileConfiguration(project, model);
public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node,
Model.getCoreHelper().setReadOnly(element, true);
None
// static variables
}
Collection ends = Model.getFacade().getConnections(node);
// static variables
// static variables
// static variables
// static variables
.setInteger(
.setInteger(
Model.getCoreHelper().setReadOnly(element, false);
// This is done for compatibility with previous version:
if (loaded) {
_lastX = snapX;
y1 = y;
None
Graphics2D graphics = image.createGraphics();
Project p = ProjectManager.getManager().getCurrentProject();
graphics.setColor(BACKGROUND_COLOR);
editor.print(graphics);
graphics.dispose();
initialized = true;
systemDefaultLocale = Locale.getDefault();
* @param pubId The public identifier of the entity which generated the
final Interaction macroCommand;
None
None
private DiagramSettings diaDefault;
private NotationSettings npSettings;
private String headerComment =
showTypes.setSelected(Configuration.getBoolean(
showTypes.setSelected(Configuration.getBoolean(
return false;
model = (AbstractProjectMember) member;
setTodoList((AbstractProjectMember) member);
Designer.setSaveAction(save);
public boolean subsumes(Object obj) {
None
List<Action> createActions = new ArrayList<Action>();
for (Profile p : ProfileFacade.getManager().getDefaultProfiles()) {
int i = 0;
private URI uri;
private String authorname;
private String version;
members.add(pm);
members.add(pm);
ProjectMember pm = new ProjectMemberModel(m, this);
d.setProject(this);
return getDiagram(savedDiagramName);
@Override
return diagrams.get(0);
return models.iterator().next();
uuidRefs = null;
}
}
protected void finalize() {
public int getColumnCount() {
public String getColumnName(int col) {
return handle instanceof State && ((State) handle).isSubmachineState();
public int getRowCount() {
defaultDiagram = diagrams.get(0);
// static variables
ProjectManager.getManager()
.setInteger(
public class UndoUmlHelperDecorator extends AbstractUmlHelperDecorator {
public boolean retainAll(Collection< ? > arg0) {
}
* @see GUISettingsTabInterface#getTabKey()
* Gets the loaded status for some other module.
* Get a Collection with all the names.
/**
catch (Throwable e) {
// Load modules specified by a System property.
LOG.warn(file + " does not have a manifest");
loadedClass =
Translator.addClassLoader(classloader);
ModuleStatus ms = new ModuleStatus();
public void propertyChange(PropertyChangeEvent evt) {
if (!(moduleInstance instanceof ModuleInterface)) {
if (!loadedClass && !file.getName().contains("argouml-i18n-")) {
for (ModuleInterface foundMf : moduleStatus.keySet()) {
private static NotationName notationArgo =
.getAssociation(ends.iterator().next());
if (n == null) {
if (nameString.length() != 0) {
// static variables
@Override
private boolean showAssociationNames;
for (Object uml : Model.getFacade().getStereotypes(modelElement)) {
public boolean isDragConnectable() {
Object type = Model.getFacade().getType(uml);
for (Object uml : Model.getFacade().getTaggedValuesCollection(modelElement)) {
@Override
addElementListener(entryAction, "operation");
public void translate(int dx, int dy) {
}
Collection prms = Model.getFacade().getParameters(event);
Collection args = Model.getFacade().getActualArguments(action);
for (Object uml : Model.getFacade().getParameters(modelElement)) {
for (Object param : Model.getFacade().getParameters(modelElement)) {
addElementListener(modelElement,
// static variables
// that change the text
addElementListener(operation,
removeElementListener(
NotationUtilityProviders.addListenersForTransition(this, modelElement);
addElementListener(
Object doActivity = Model.getFacade().getDoActivity(modelElement);
Iterator it =
@Override
return "Parsing in Java not yet supported";
* @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
return sb.toString();
} else if ("abstract".equals(token)) {
if (name != null) {
if (!isValidJavaClassName(name)) {
Collection returnParams =
private static UndoableAction srcMultOne =
if (text.charAt(text.length() - 1) == ';') {
List params = new ArrayList(
/**
start = end + 1;
// copy - can't iterate modify live collection while iterating it
.generateStereotype(RECEPTION_KEYWORD,
Collection b = new ArrayList(Model.getFacade().getBases(cls));
if (s.length() > 0) {
StringBuilder baseString = NotationUtilityUml.formatNameList(
Object returnType = currentProject.getDefaultReturnType();
project.moveToTrash(attribute);
Model.getCoreHelper().setStatic(
if (text.length() > 0 && "/".indexOf(text.charAt(0)) >= 0) {
if (text.length() > 0
if (Model.getFacade().getType(modelElement) != null) {
&& showTypes) {
return "";
}
StringBuilder baseStr = NotationUtilityUml.formatNameList(
currentProject.moveToTrash(operation);
currentProject.moveToTrash(operation);
start = end + 1;
} catch (NoSuchElementException nsee) {
if (!Model.getFacade().isAReception(op)
StringBuffer genStr = new StringBuffer(30);
public List getOutEdges(Object element) {
StringBuffer parameterStr = new StringBuffer();
StringBuffer returnParasSb = getReturnParameters(modelElement,
return "";
else {
public Object getNamespaceElement() {
if (Model.getFacade().isQuery(modelElement)) {
propertySb.append("}");
public void setDefaultScopeToken(String theToken) {
String derived = "";
epName = st.nextToken().trim();
public boolean removeAll(Collection arg0) {
MsgPtr ptr;
*     predecessors number ":" action
public boolean contains(Object o) {
int mpn = recCountPredecessors(msg, ptr2) + 1;
String n = Model.getFacade().getName(umlMessage);
}
boolean mustBePre = false;
Collection c = Model.getFacade().getSuccessors(umlPredecessor);
StringBuilder guard = null;
public void componentResized(ComponentEvent e) {
buildAction(umlMessage);
}
Collection c = new ArrayList(
// TODO: treat Message
}
Model.getFacade().getSender(umlMessage);
Model.getCollaborationsHelper().setActivator(umlMessage, root);
if (effect == null) {
if (varname == null) {
public void valueForPathChanged(TreePath path, Object newValue) {
if (fname == null) {
if (guard != null) {
Object a = Model.getCommonBehaviorFactory()
if (!it.hasNext()) {
if (ep == null) {
Object newEp = parseExtensionPoint(text);
// This method has insufficient information to call buildExtensionPoint.
ep = null;
evt = findCallEvent(triggerName, ns);
if (text == null) {
epName = st.nextToken().trim();
epLocation = st.nextToken().trim();
String s = "";
String epName = Model.getFacade().getName(modelElement);
if ((epName != null) && (epName.length() > 0)) {
if ((epLocation != null) && (epLocation.length() > 0)) {
String newClassName = null;
boolean found = false;
for ( Object op : Model.getFacade().getOperations(clazz)) {
Object model =
new Rectangle(0, 0, 0, 0));
public NamespaceElement peekNamespaceElement() {
Model.getCoreHelper().setReadOnly(element, true);
} else {
type = p.findType(name, false);
type = Model.getCoreFactory().buildClass(name,
public Iterator iterator() {
taggedValue =
/* TODO: For UML2: Check if the type of the TV is String. */
Model.getExtensionMechanismsHelper().setDataValues(
ModelElementInfoList internalsInfo =
result = Translator.localize("misc.stereo.concatenate",
StringBuffer s = new StringBuffer();
|| kind == Model.getDirectionKind().getInParameter()) {
} else if (kind == Model.getDirectionKind().getOutParameter()) {
if (multiplicity != null) {
*          Object, Object, Class)
if (s.startsWith("[")) {
if (c != null) {
Model.getCoreHelper().setType(objectFlowState, classifier);
StringTokenizer tokenizer = new StringTokenizer(s, ",");
public Namespace getBaseNamespace() {
states.removeAll(statesToBeRemoved);
} else {
String msg =
Model.getActivityGraphsHelper().setInStates(c, states);
None
public void setNodeInstance(Object handle, Object nodeInstance) {
Object cis =
Model.getCoreHelper().setName(modelElement, name);
if (evt == null) {
Object target = Model.getFacade().getTarget(transition);
String msg =
/* TODO: Is this a good way of handling nested notation?
internalsInfo.add(t, true);
Object k = Model.getFacade().getKind(target);
Model.getStateMachinesHelper().setInternalTransitions(st,
Collection<Object> newModelElementsList = new ArrayList<Object>();
theList.clear();
return newModelElementsList;
String language = LANGUAGE;
String s = "";
String triggerName =
if (tokenizer.hasMoreTokens()
Object ns =
}
static Object getFromCollection(Collection collection, int index) {
if (evt == null) {
actions));
evt = findOrBuildChangeEvent(s, ns);
evt = findOrBuildSignalEvent(trigger, ns);
NotationUtilityUml.parseParamList(evt, s, 0);
Model.getStateMachinesHelper().setEffect(trans, effect);
}
public void menuSelected(MenuEvent me) {
Object timeExpr = Model.getFacade().getWhen(evt);
timeExpr = Model.getDataTypesFactory().createTimeExpression("", s);
delete(evt); /* TODO: What if used elsewhere? */
Object changeExpr =
changeExpr = Model.getDataTypesFactory()
Object evt = Model.getFacade().getTrigger(trans);
delete(evt); /* TODO: What if used elsewhere? */
String triggerName =
} else {
if (!Model.getFacade().getName(evt).equals(trigger)) {
if (evt == null) {
result = event;
project.moveToTrash(literal);
project.moveToTrash(literal);
if (Model.getFacade().getName(modelElement) != null) {
Model.getCoreHelper().setType(objectFlowState, c);
if (rolestr != null) {
if (rolestr != null) {
String name = Model.getFacade().getName(modelElement);
if (singleton == null) {
if (Model.getFacade().isAAssociation(assoc)
// changed the loading of the projectfiles to solve hanging
Object assoc = Model.getFacade().getBase(modelElement);
if (Model.getFacade().isAAssociationClass(dm)) {
None
Collection associationEnds =
if (Model.getFacade().getName(ae) != null
if (Model.getFacade().isReturn(mp)) {
public void edgeAdded(GraphEvent e) {
if (sReturnType != null && !sReturnType.equalsIgnoreCase("void")) {
// static variables
@Override
boolean isSet = false, isSequence = false; // cannot be Bag
Collection attributes =
java.util.Collection operations =
protected Object getSource() {
if (!(Model.getFacade().isPrimaryObject(dm))) {
if (!Model.getFacade().isQuery(foundOp)) {
None
int index = 0;
@Override
if (!(Model.getFacade().isAClass(dm))) {
if (Model.getFacade().isAbstract(dm)) {
Iterator iter = Model.getFacade().getAttributes(dm).iterator();
if (!(Model.getFacade().isAClass(dm))) {
Notification.ADD,
return PROBLEM_FOUND;
if (!(Model.getFacade().isSingleton(dm))) {
None
diagramDefaults.setShowBidirectionalArrows(!
None
project.setSavedDiagramName(e.getText().trim());
Designer.enableCritiquing();
if (newNode == oldNode) {
project.setVersion(ApplicationVersion.getVersion());
|| s.endsWith(".xmi.zip")
@Override
DiagramSettings defaultSettings =
uvsPanel.selectDefaultVS();
}
throw new SaveException(e);
throw new RuntimeException(e);
@Override
// static variables
@Override
boolean upgradeRequired = true;
if (Model.getFacade().getUmlVersion().charAt(0) == '2') {
ArgoParser parser = new ArgoParser();
* @since 0.15.3
List<String> entries = getEntryNames(file, null);
/* This would be solution (1):
ZipInputStream zis =
String rootLine;
String version = getVersion(rootLine);
reader.readLine();
ZipInputStream zis = new ZipInputStream(toURL(file).openStream());
private Orientation orientation;
while (realRead() != '<') {
for (i = 0; i < tagName.length(); ++i) {
if (found && !isNameTerminator((char) terminator)) {
mark(1000);
while (Character.isWhitespace((char) character)) {
int quoteSymbol = realRead();
@Override
return;
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
super.gotElement(contents);
else {
LOG.error("Got badly formed user defined profile entry " + e);
* @param c the Classifier. If this is not a Classifier, then
if (owner.equals(f.getOwner())
public boolean hit(int x, int y) {
diagramSettings = new DiagramSettings(defaultSettings);
if (container instanceof FigGroupHandler) {
if (st.hasMoreElements()) {
if (f.getOwner() != modelElement) {
URL url = new URL(is.getSystemId());
return (ArgoDiagram) readDiagram(stream, closeStream);
name = name.substring(0, 12) + "...";
for (int i = 0; i < subkeys.length; i++) {
Fig f = findFig(figId);
final Object parameters[] = new Object[3];
final Object parameters[] = new Object[2];
if (filename == null /* || model == null */) {
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
jarfile = new JarFile(file);
* Construct a new critic instance.  Typically only one instance of
ApplicationVersion.getVersion() + "("
}
@Override
profile = ProfileFacade.getManager().getProfileForClass(
@Override
try {
for (ProjectMember projectMember : project.getMembers()) {
ProgressMgr progressMgr = new ProgressMgr();
int fileVersion = getPersistenceVersionFromFile(file);
@Override
inputSource.setPublicId(originalFile.toURI().toURL()
if ("uml:Model".equals(persister.getMainTag())
None
progressMgr.nextPhase();
if (fileVersion > PERSISTENCE_VERSION) {
@Override
Object current = Model.getFacade().getOperation(target);
private CharBuffer outCB = CharBuffer.allocate(BUFFER_SIZE);
private final Pattern xmlDeclarationPattern = Pattern
CoderResult result = decoder.decode(inBB, outCB, false);
Matcher matcher = xmlDeclarationPattern.matcher(outCB);
String headerRemainder = matcher.replaceAll("");
public void modelElementAdded(Object node) {
do {
ByteBuffer bb = decoder.charset().encode(headerRemainder);
byte[] outBytes = new byte[bb.limit()];
String line = reader.readLine();
break;
dsgr = Designer.theDesigner();
}
public void addPerspective(Object perspective) {
public void startElement(String uri,
public void endElement(String uri, String localname, String name)
public void characters(char[] ch, int start, int length)
public void testRoundTrip() {
private static final String STRING_ARGO                   = "argo";
private static final String STRING_GENERATION_OUTPUT_DIR
// static variables
}
// static variables
// static variables
String jarFile = "";
None
getGlassPane().setVisible(false);
// changed the loading of the projectfiles to solve hanging
getMemberFilePersister(projectMember);
// static variables
None
defaultPersister = new OldZargoFilePersister();
None
public void menuCanceled(MenuEvent me) { }
nRow =
for (j = i + 2; j < prop.size(); j += 2) {
// static variables
if (s.equalsIgnoreCase(getExtension())) {
None
|| s.endsWith(".xmi.zip") || s.endsWith(".xml.zip")));
try {
public void setNodeInstance(Object handle, Object nodeInstance) {
None
final Facade f = Model.getFacade();
String name = Model.getFacade().getName(obj);
"entry/it\nexit/test2\ndo/b\nint1/act1\nint2/act2",
(nRow <= 0 ? 0 : nRow - 1)
private static List<String> getMetaclassNames(Document doc) {
try {
if (Model.getFacade().isAModelElement(obj)
Object state =
String dependencyListStr = Model.getFacade().getTaggedValueValue(pkg,
PropPanelFactory factory = new ProfilePropPanelFactory();
model = Model.getUmlFactory().getExtentPackages(
// Association Class
cl = new Checklist();
// it works, but a bug in namespace.contents prevents it from
/* Testing: does not fire. */
public void caseALogicalExpressionTail(ALogicalExpressionTail node) {
/* Testing: does not fire. */
/* TODO: Partly overlaps CrOppEndVsAttr. */
/* Tested with fabricated XMI - OK. */
/* Testing: does not fire. */
/* Testing: Does not fire. Conflict with CrNameConflict. */
//
/* Testing: does not fire. */
/* Tested with fabricated XMI - OK. */
* "forAll (x, y | ..." does not cover all combinations. */
/* Tested OK, except in some cases, depending on the
/* Tested with fabricated XMI - OK. */
Model.getCommonBehaviorHelper().setOperation(callAction,
critics.add(new CrOCL("context ActionState inv:"
return null;
// register the built-in profiles
registerProfileInternal(profileGoodPractices);
LOG.info("Failed to load user defined profile "
loadDefaultProfilesfromConfiguration();
}
if (profileClass != null
Model.getUmlFactory().delete(model);
assert profileUML.getClass().getName().startsWith(NEW_PROFILE_PACKAGE);
if (Model.getFacade().isAAssociationEnd(element)) {
if (op instanceof AEqualRelationalOperator) {
}
node.getTimeExpression().apply(this);
@Override
@Override
if (subject instanceof Collection) {
if (parameters == null) {
if ((subject instanceof Collection)
if (actualPackage != null) {
None
return null;
false,
remove.add(object);
if (subject instanceof Set) {
// TODO investigate: Abstraction.mapping is not in the Model Subsystem
if (Model.getFacade().isAAssociation(subject)) {
if (feature.equals("allConnections")) {
if (Model.getFacade().isAAssociationEnd(subject)) {
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
if (feature.equals("upperbound")) {
if (Model.getFacade().isAAttribute(subject)) {
if (Model.getFacade().isABinding(subject)) {
if (Model.getFacade().isAClass(subject)) {
if (Model.getFacade().isAClassifier(subject)) {
if (feature.equals("feature")) {
if (Model.getFacade().isAComment(subject)) {
showTypes.setSelected(Configuration.getBoolean(
if (Model.getFacade().isAComponent(subject)) {
if (feature.equals("allResidentElements")) {
(nRow < getRowCount() - 1 ? nRow + 1 : nRow);
if (Model.getFacade().isAElementResidence(subject)) {
if (Model.getFacade().isAEnumeration(subject)) {
if (Model.getFacade().isAEnumerationLiteral(subject)) {
if (Model.getFacade().isAFeature(subject)) {
None
if (feature.equals("parent")) {
if (Model.getFacade().isAGeneralizableElement(subject)) {
if (Model.getFacade().isAMethod(subject)) {
name = "";
if (feature.equals("stereotype")) {
if (feature.equals("supplier")) {
if (Model.getFacade().isANode(subject)) {
if (Model.getFacade().isAOperation(subject)) {
if (Model.getFacade().isAMethod(o)) {
if (Model.getFacade().isAParameter(subject)) {
Icon icon = ResourceLoaderWrapper.lookupIcon(name);
public int getIconHeight() { return 0; }
@Override
if (location != null) {
private String toString(Object modelElement, boolean useGuillemets,
if (Model.getFacade().isATemplateArgument(subject)) {
if (Model.getFacade().isATemplateParameter(subject)) {
None
if (Model.getFacade().isAUseCase(subject)) {
if (Model.getFacade().isAAssociationClass(subject)) {
* @param ordering
if (((curHandle.index == 0) || (curHandle.index == 2))
if (Model.getFacade().isAStereotype(subject)) {
if (Model.getFacade().isATagDefinition(subject)) {
if (Model.getFacade().isATaggedValue(subject)) {
public String repair() {
addMouseListener(new MouseAdapter() {
boolean sourceIsComponent = (event.getSource() instanceof Component);
if (aComponent instanceof RootPaneContainer) {
getTopLevelAncestor().setCursor(
Toolkit.getDefaultToolkit().addAWTEventListener(
super.setVisible(value);
Toolkit.getDefaultToolkit().removeAWTEventListener(this);
if (parameterlist.charAt(parameterlist.length() - 1) != ')') {
super.setVisible(value);
if (getTopLevelAncestor() != null) {
}
None
* not supposed to have incoming transitions. */
public Object getTransferData(DataFlavor dataFlavor)
public boolean isDataFlavorSupported(DataFlavor dataFlavor) {
None
public void setSuggestion(String s) {
None
while ((aComponent.getParent() != null)
None
@Override
settingsTabs = GUI.getInstance().getSettingsTabs();
if (theWindow == null) {
public void treeWillCollapse(TreeExpansionEvent tee) {
JFileChooser chooser = new JFileChooser();
return NO_PROBLEM;
if (withToolbar) {
assertEquals(startingProfiles,
final int minimumWidth = 500;
name = name.substring(0, 12) + "...";
None
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
if (doingShow) {
Project p = ProjectManager.getManager().getCurrentProject();
*         org.argouml.ui.targetmanager.TargetEvent)
public int indexOf(Object o) {
if (!windowOpen) {
cl = new Checklist();
protected boolean isValidElement(Object element) {
handleCancel();
}
cl = new Checklist();
/**
int recipnumerator = (p1.x - p2.x) * -1;
/**
/** TODO: factor out
public static void registerRule(TreeModel rule) {
public void treeCollapsed(TreeExpansionEvent event) {
JScrollPane paneScrollPane = new JScrollPane( panes[i]);
None
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
model.addElement(Translator
if (adjacentindex == -1) {
Rectangle figBounds = target.getBounds();
if (target.isFilled()) {
if (target.getLineWidth() > 0) {
if (target == null) {
String bboxStr = bboxField.getText().trim();
// probably the TabText should only show an empty pane in that case
None
}
Dimension contentPaneSize = getContentPane().getPreferredSize();
private static final MetalTheme		DEFAULT_THEME =
Object tv = Model.getFacade().getTaggedValue(o, "src_visibility");
Project project = ProjectManager.getManager().getCurrentProject();
Object ns = Model.getFacade().getNamespace(modelElement);
return THEMES[0].getName();
}
UIManager.setLookAndFeel(defaultLafClass);
myInsetPanel.setBorder(new EmptyBorder(30, 40, 40, 40));
UIManager.setLookAndFeel(lafClass);
public void fireTreeCollapsed(TreePath path) {
public void setModel(TreeModel newModel) {
imgHeight += 40 + 40;
}
setSize(imgWidth + 10, imgHeight + 120);
}
buf.append("* GEF (gef.tigris.org)\n");
None
private static final int HEAD_POSN = 2;
if (project == null) {
@Override
//        setFont(LookAndFeelMgr.getInstance().getSmallFont());
int h = stereoDim.height - 2 + nameDim.height + PADDING;
setToolTipText("Tree");
/**
if (Model.getFacade().getName(dm) == null
if (showStereotype) {
if (Model.getFacade().isAUMLElement(value)) {
final Object top;
/**
labelConstraints.anchor = GridBagConstraints.LINE_START;
addElementListener(classifier, "name");
fieldConstraints.anchor = GridBagConstraints.LINE_END;
labelConstraints.gridy = 0;
Iterator iter = Model.getFacade().getConnections(asc).iterator();
labelConstraints.gridy = 1;
JLabel lblDescription = new JLabel(
labelConstraints.gridy = 6;
}
}
* @see Designer
// static variables
"label.namespace.navigate.tooltip"),
if (Model.getFacade().isAUMLElement(value)) {
public void undoIt() {
public void setMaximumProgress(int max) {
firePropChange("bounds", oldBounds, getBounds());
//    private JCheckBox jchbItalic = null;
public void nodeRemoved(GraphEvent e) {
private JLabel jlblFamilies = null;
None
None
ProjectBrowser pb = ProjectBrowser.getInstance();
None
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
// static variables
inner_d = inner_d - (getLineWidth() % 2);
public void graphChanged(GraphEvent e) {
protected void buildModelList() {
Thread currentThread = Thread.currentThread();
public boolean isEmpty() {
None
public boolean isCreateDiagramsSelected() {
protected Object getDestination() {
// static variables
// static variables
}
/**
s.removeAll(Model.getFacade().getStereotypes(getTarget()));
}
ProjectBrowser.getInstance().loadProjectWithProgressMonitor(
}
hasTabs = true;
boolean valid = false;
ProjectBrowser.getInstance().loadProject(file, showUi, pmw);
public void windowIconified(WindowEvent e) {
if (!tabSelected) {
|| "detail".equalsIgnoreCase(direction)) {
if (path != null) {
Component selectedTab = topLevelTabbedPane
public boolean isSaveEnabled() {
removeTargetListener((TargetListener) tab);
if (lastNonNullTab >= 0) {
if (sel instanceof TabTarget) {
if (Math.abs(difference) < EPSILON) {
if (!(Model.getFacade().isAClassifier(dm))) {
// iterate through the tabbed panels to determine whether they
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
public void setNamespace(Object ns) {
List modifiedList = new ArrayList();
Iterator ends = Model.getFacade().getAssociationEnds(dm).iterator();
/**
setButtonPanelSize(18);
/**
private GlassPane glassPane;
public void setStereotypeVisible(boolean isVisible) {
timer = new Timer(25, new TimerListener());
GlassPane aPane = GlassPane.mount(ArgoFrame.getFrame(), true);
@Override
setGlassPane(aPane);
Notification.ADD,
None
public void save(ProjectMember member, OutputStream stream)
getContentPane().add(assemblePanels(), BorderLayout.CENTER);
public Insets getAutoscrollInsets() {
setDefaultCloseOperation(ProjectBrowser.DO_NOTHING_ON_CLOSE);
public void autoscroll(Point pt) {
ProjectManager.getManager().addPropertyChangeListener(this);
@SuppressWarnings("deprecation")
addKeyboardFocusListener();
String listOfClasses = System.getProperty("argouml.modules");
&& (obj != evt.getNewValue())) {
if (splash != null) {
LOG.info("Request to delete a Fig " + obj.getClass().getName());
@Override
@Override
@Override
final JPanel toolbarBoundary = new JPanel();
public void setPathVisible(boolean visible) {
Iterator it = detailsPanesByCompassPoint.entrySet().iterator();
public void dragEnter(DragSourceDragEvent dragSourceDragEvent) {
private Dimension getSavedDimensions(ConfigurationKey width,
for (DetailsPane detailsPane : detailsPanesByCompassPoint.values())  {
protected void setStandardBounds(int x, int y, int w, int h) {
/*
if (evt.getPropertyName()
private static Icon icons[] =
TargetManager.getInstance().setTarget(p.getInitialTarget());
if (uri != null && !saveNewFile) {
if (!file.exists()) {
int response = JOptionPane.showConfirmDialog(
public void addModelEventListener(PropertyChangeListener listener,
if (response == JOptionPane.YES_OPTION) {
final String suffix = "Impl"; //$NON-NLS-1$
return;
@Deprecated
if (saveNewFile) {
trySaveWithProgressMonitor(overwrite, file, exitAfterSave);
String report = project.repair();
if (Model.getUmlFactory().isRemoved(modelElement)) {
if (saveAction != null) {
private void testSimulateErrors() {
if (false) {
if (figs.size() > 0) {
if (figs.size() > 1) {
if (figs.size() > 2) {
this.addFileSaved(file);
}
public void dropActionChanged(
Configuration.setString(Argo.KEY_MOST_RECENT_PROJECT_FILE,
.getDiagramMemberFilePersister();
public void progress(final ProgressEvent event) {
return null;
this.saveAction = rememberedSaveAction;
public void updateMainTask(final String name) {
label.setLabelFor(fieldGraphicsResolution);
public boolean setSelection(int sel) {
setComponentOrientation(list.getComponentOrientation());
public Component getTreeCellRendererComponent(JTree tree, Object value,
ConfigurationKey configurationKey = Configuration
public void targetAdded(TargetEvent e) {
boolean visibility = getConfiguredToolbarAppearance(newToolbar
SwingUtilities.invokeLater(new Runnable() {
testPersister = persistence.getPersisterFromFileName(
toolBarsForClass.add(newToolbar);
newToolbar.addMouseListener(new MouseAdapter() {
static {
public void windowDeiconified(WindowEvent e) {
public boolean sameNotationAs(NotationName nn) {
public void generatorChanged(ArgoGeneratorEvent e) {
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
public int getDefaultSelection() {
public int getImportLevel() {
pbar.setNote(action);
public final boolean isSelected() {
None
super.refresh();
public boolean isDiagramLayoutSelected() {
setTargetBBox();
@Override
//     c.gridx = 0;
public void stateChanged(ChangeEvent  e) {
public boolean isChangedOnlySelected() {
private void showStatusOnSwingThread(final String status) {
"label.namespace.navigate.tooltip"),
final String prefix = "UML"; //$NON-NLS-1$
None
Object f = TargetManager.getInstance().getFigTarget();
public void treeWillCollapse(TreeExpansionEvent tee) {
private static final int WARN_THRESHOLD = 75;
_x = x;
if (project.getRoots().contains(first)) {
if (Model.getModelManagementHelper().isReadOnly(
public void actionPerformed(ActionEvent e) {
public void setTarget(Object item) {
private long free;
g.setColor(TOTAL_COLOR);
//     c.gridy = 3;
if (Model.getFacade().isAClassifier(node)) {
// probably the TabText should only show an empty pane in that case
sb.append(generateClassifierRef(Model.getFacade().getType(parameter)));
private JComboBox elementName = new JComboBox();
return -1;
private JPanel nameLocTab = new JPanel();
labelWidth,
public abstract boolean isCreateDiagramsSelected();
//    private JPanel tagValsTab = new JPanel();
}
//    private JPanel constraintsTab = new JPanel();
c.gridx = 0;     c.gridy = 3;
mainPanel.add(nameLocTab, BorderLayout.NORTH);
public abstract boolean isDiagramLayoutSelected();
type.addItem(PredicateMType.create(
public void actionPerformed(ActionEvent e) {
public ListIterator<T> listIterator() {
/* mvw: Indeed. The intention of the constructor parameter is to prove
pw.print(message );
@Override
textArea.setText(message.replaceAll("\n", "<p>"));
"label.namespace.navigate.tooltip"),
public Type navigateQualified(String name, Type[] qualifiers)
"label.namespace.navigate.tooltip"),
String oldOperationName = null;
/**
if (newEp == null) {
}
extensionPoint.setName("newEP");
super(Translator.localize("action.new"),
}
public class CriticBrowserDialog extends ArgoDialog
/**
None
* See issue 4282. Do not use a class
/**
extends JPanel {
void updateInfo() {
None
TargetManager.getInstance().cleanHistory();
public String expand(String desc, ListSet offs) {
&& (fi.getEnclosedFigs() == null
public Namespace getCommonNamespace(Namespace namespace) {
}
@Override
if (fi.isResizable()
public abstract boolean isChangedOnlySelected();
super(Translator.localize("action.find"));
Rectangle bounds = null;
static {
None
None
putDefaultShortcut(ACTION_GENERATE_ONE, null, new ActionGenerateOne());
LOG.debug("Unknown modifier: " + modifier);
putDefaultShortcut(ACTION_GO_TO_DIAGRAM, null, new ActionGotoDiagram());
/**
public Object[] toArray() {
putDefaultShortcut(ACTION_ALIGN_TOPS, null, new AlignAction(
putDefaultShortcut(ACTION_SELECT_ALL, KeyStroke.getKeyStroke(
putDefaultShortcut(ACTION_USE_CASE_DIAGRAM, null,
putDefaultShortcut(ACTION_PREFERRED_SIZE, null,
public void removeSourceFlow(Object handle, Object flow) {
putDefaultShortcut(ACTION_SYSTEM_INFORMATION, null,
a.putValue("shortcut", KeyStroke.getKeyStroke(
None
putDefaultShortcut(ACTION_DISTRIBUTE_H_SPACING, null,
@Override
None
//<!DOCTYPE pgml SYSTEM "pgml.dtd">
this.setFocusTraversalKeys(
this.addKeyListener(new KeyListener() {
return true;
if (attributes != null) {
return NO_PROBLEM;
Configuration.setString(Configuration.makeKey(oldAction
@Override
Configuration.removeKey(Configuration.makeKey(oldAction
}
if (KeyEventUtils.isActionEvent(ke)) {
private static boolean uml2 = false;
default:
mruList = new LastRecentlyUsedMenuList(file);
@Override
generate = add(new JMenu(menuLocalize("Generation")));
exitAction = new ActionExit();
initAlignMenu(align);
customButton.addActionListener(this);
Collection operSeen = new ArrayList();
JMenuItem argoHelp = help.add(new ActionHelp());
else {
public void windowClosed(WindowEvent e) {
Collection<Action> c = new ArrayList<Action>();
add(help);
//// Method 1:
c.add(new ActionFind());
String entryName = f.getName();
@Deprecated
JMenuItem item =
@Override
File f = new File(filename);
for (i = 0; i < maxCount; i++) {
fileMenu = filemenu;
item.setText(entryName);
i = 0;
}
lruCount = i;
for (int i = 0; i < lruCount; i++) {
public boolean accept(File pathname) {
menuItems[0] = addEventHandler(filename, menuIndex);
int i, j;
lruCount = j;
for (int k = 0; k < lruCount; k++) {
public void addListenersToModel(Object model) {
None
public abstract void addModelEventListener(PropertyChangeListener listener,
None
}
None
table = new JTable(new ShortcutTableModel());
maxCount =
String[] tempNames = new String[maxCount];
public abstract void addClassModelEventListener(
enableFields(true);
private static final int OFFSET_Y = 25;
selectedContainer.setBorder(BorderFactory.createTitledBorder(Translator
if (target.getCurrentShortcut() == null) {
* 		java.lang.String[])
noneButton.setSelected(true);
defaultButton.setSelected(true);
customButton.setSelected(true);
item.setCategory(category);
actions = ShortcutMgr.getShortcuts();
public void clearStereotypes(Object modelElement) {
JOptionPane.showMessageDialog(this,
figId = figId.substring(0, figId.indexOf('.'));
if (!noneButton.isSelected()) {
public void startPumpingEvents() {
table.setValueAt(oldAction, -1, -1);
table.getSelectionModel().removeListSelectionListener(this);
if (Argo.DOCUMENTATION_TAG.equals(tag)) {
setTarget(actions[table.getSelectedRow()]);
for (Constructor constructor : constructors) {
KeyStroke duplicate = ShortcutMgr.getDuplicate(keyStroke);
for (int i = 0; i < actions.length; i++) {
public Object getDeepHistory() {
shortcutField.setText(formattedKeyStroke);
public Object getConcurrent() {
table.getModel().setValueAt(newKeyStroke, table.getSelectedRow(), 1);
public Object getComposite() {
this.shortcutField.setBackground(Color.YELLOW);
assertTrue("SnoozeOrder started as snoozed", !snooze.getSnoozed());
if (ob instanceof ActionWrapper) {
for (int i = 0; i < actions.length; i++) {
public Object getChangeable() {
public Object getChoice() {
public Object getOutParameter() {
this.setMaximumRowCount(9);
return ((Comment) comment).getBody();
boolean multiSelect =
try {
}
assertTrue("DesignGoalsCM.isRelevant(Critic, Designer) is incorrect",
if (Model.getFacade().isAProfile(selectedItem)) {
void toggleValueOfTarget(Object t) {
if (!multiSelect && mutableModelElementsOnly) {
Project project = ProjectManager.getManager().getCurrentProject();
&& !(projectModels.size() == 1
assertTrue("GoalModel not initialized with one goal",
boolean haveAtLeastOneDiagram = false;
public Object getGuarded() {
return countNodesAndEdges(d);
ListSet all = allOffenders;
if (Model.getUmlFactory().isContainmentValid(metaType, target)) {
public Object getOrdered() {
for (Object metaType : Model.getMetaTypes().getAllMetaTypes()) {
/**
getSelectionModel().setSelectionPath(path);
configPanelNorth = new JPanel();
}
/**
evt = new ArgoProfileEvent(ArgoEventTypes.PROFILE_ADDED, this);
}
setSelection(TargetManager.getInstance().getTargets().toArray());
TreePath[] addedOrRemovedPaths = e.getPaths();
Boolean selected = (Boolean) a.getValue("SELECTED");
int rows = getRowCount();
boolean callSetTarget = true;
public boolean isPathVisible() {
List removedTargets = new ArrayList();
throw new SaveException(e);
if (!removedTargets.isEmpty()) {
None
public void setLineWidth(int width) {
public Object getUnordered() {
public Object getReturnParameter() {
public Object findClassifierByName(Object ofs, String s) {
ExplorerPerspective selPers =
public Object getNone() {
ruleLibraryListModel.clear();
public Object getClassifier() {
public abstract int getImportLevel();
ruleLibLabel.setText(Translator.localize("label.rules-library")
public Object getFork() {
for (ExplorerPerspective perspective : perspectives) {
public abstract boolean isMinimizeFigsSelected();
if (!(ruleLibraryListModel.size() > selLibNr)) {
public Object getAggregate() {
model.nodeChanged(this);
if (pce instanceof UmlChangeEvent) {
treeModel.structureChanged();
if ("remove".equals(pce.getPropertyName())) {
Collection targets = TargetManager.getInstance().getModelTargets();
public final class ModeInspectorPanel extends JPanel implements ModeChangeListener {
if (pce.getNewValue() != null) {
if (Model.getFacade().isANamespace(subject)) {
ProfileManager profileManager = ProfileFacade.getManager();
path.append(Model.getFacade().getName(undeployedProfile));
try {
if ((currentLookAndFeel != null
while (pst.hasMoreTokens()) {
String perspectiveName = perspectiveDetails.nextToken();
if (perspectiveDetails.hasMoreTokens()) {
while (perspectiveDetails.hasMoreTokens()) {
String ruleName = perspectiveDetails.nextToken();
try {
continue;
int index = paths.getSelectedIndex();
addPerspective(userDefinedPerspective);
loadDefaultPerspectives();
if (getPerspectives().size() == 0) {
protected int getNotationType() {
packagePerspective.addRule(new GoStatemachineToDiagram());
if (Model.getFacade().getUmlVersion().charAt(0) == '1') {
DragGestureRecognizer dgr =
this);
public void targetAdded(TargetEvent e) {
dgr.setSourceActions(
JLabel lbl =
lbl.setSize((int) raPath.getWidth(), (int) raPath.getHeight());
public void dragDropEnd(
ghostImage =
Icon icon = lbl.getIcon();
// Add displacement angle to slope
g2.setComposite(AlphaComposite.getInstance(
sourcePath = path;
public boolean isCellEditable(int row, int col) {
dragGestureEvent.startDrag(null, ghostImage,
* @since 0.17.3
if (!Model.getFacade().isANamespace(dest)) {
*      AbstractTestActionAddDiagram#getValidNamespaceClasses()
// TODO: Any Namespace can contain other elements.  Why don't we allow
public void actionPerformed(ActionEvent event) {
if (Model.getModelManagementHelper().isReadOnly(dest)) {
public Enumeration gen(Object o) {
Collection transfers =
loadLibrary();
}
int nRow = getRowForLocation(pt.x, pt.y);
if (nRow < 0) {
public abstract boolean relocate(Object base);
// Is row at top of screen?
hoverTimer =
return;
}
public final class ModeInspectorPanel extends JPanel implements ModeChangeListener {
None
@Override
if (ghostImage != null) {
if (!DragSource.isDragImageSupported()) {
paintImmediately(ghostRectangle.getBounds());
/**
paintImmediately(cueLine.getBounds());
Rectangle raPath = getPathBounds(path);
if ((aContainer.getGlassPane() != null)
ghostRectangle = ghostRectangle.createUnion(cueLine);
// utility is a namespace collection - also not strictly required
if (path.equals(sourcePath)) {
menuItems.add(new OrderedMenuItem(
if (!Model.getFacade().isANamespace(dest)) {
hoverTimer.stop();
repaint(ghostRectangle.getBounds());
Point loc = dropTargetDropEvent.getLocation();
None
Collection modelElements =
JOptionPane.showMessageDialog(this,
if ((dropTargetEvent.getDropAction()
private Boolean showBoldNames;
Point pt = dropTargetEvent.getLocation();
static {
Object o = d.getDependentElement();
/**
@Override
if (getRoot() instanceof ExplorerTreeNode) {
public static final String toJavaIdentifier(String s) {
for (Collection nodes : modelElementMap.values()) {
if (rules == null) {
@Override
if (updatingChildren.contains(node)) {
if (newValue == null
if (Model.getFacade().isType(dm)) {
theMAlConstraints.add(null);
@Override
Enumeration enChld = node.children();
super.removeNodeFromParent(child);
for (ExplorerTreeNode child : reordered) {
super.insertNodeInto(child, node, ip);
for (PerspectiveRule rule : rules) {
Iterator it = removeSet.iterator();
it.remove();
newChildren.remove(obj3);
add(top, BorderLayout.CENTER);
while (firstNew != null) {
order = (Comparator) e.getItem();
Collections.sort(newChildren, order);
public void refresh(PropertyChangeEvent e) {
return Collections.EMPTY_SET;
@Override
((TargetListener) sel).targetSet(new TargetEvent(this,
}
allDiagrams.setPreferredSize(new Dimension(
if (!(t instanceof Fig)) {
@Override
if (!Model.getFacade().isAAbstraction(incomingIt.next())) {
if (!diagramResults.contains(child)) {
mainPanel.add(allDiagrams, BorderLayout.CENTER);
return d.getName();
public final class ModeInspectorPanel extends JPanel implements ModeChangeListener {
/**
st.mark("perform commands");
@Override
.setInteger(
if (Model.getFacade().isAProfileApplication(o)) {
st.mark("initialize gui");
continue;
continue;
continue;
continue;
for (ModuleInterface module : getInstance().availableModules()) {
return showInDiagramColumn
if ((d instanceof SequenceDiagram)
* like "tearing off" a tab.<p>
@Override
List<Trigger> trs = ((Transition) handle).getTriggers();
if (!(lafClass != null && !lafClass.equals(currentLookAndFeel))) {
return Collections.EMPTY_SET;
return Collections.EMPTY_SET;
public Object getProtected() {
private JTabbedPane tabs = new JTabbedPane(SwingConstants.BOTTOM);
if (targets.size() == 0) {
public Dimension getSize() { return new Dimension(w, h); }
newTarget = o;
targets.removeAll(c);
JScrollPane pane = createScrollPane();
if (Model.getFacade().isUtility(dm)) {
/*
String confCurrentShortcut = Configuration.getString(Configuration
ntarg = targetsList.iterator();
* The log4j logger to log messages to.
} else {
((NotificationEmitter) o).addNotificationListener(
if (inBB.remaining() > 0) {
if (targetsList.size() == targets.size()) {
ns = Model.getFacade().getNamespace(ns);
ProjectManager.getManager().addPropertyChangeListener(this);
public void outAEnumLiteral(AEnumLiteral node) {
((Diagram) o).addPropertyChangeListener(this);
None
return " A class that represents ...\n\n"
None
Collection topLevelStereotypes = getTopLevelStereotypes(topLevelModels);
for (Object o : toBeRemoved) {
* Table model for the table with modules.
Collection<Object> toBeRemoved = new ArrayList<Object>();
if (!isPathSelected(path)) {
if (d instanceof UMLDiagram) {
for (String stereotypename : stereotypes) {
for (Object ownedElement : ownedElements) {
boolean classifierRoleFound = false;
/*
if (Model.getFacade().isAUMLElement(o)) {
model.updateChildren(new TreePath(node.getPath()));
addAllUniqueModelElementsFrom(availableStereotypes, paths,
JPanel setDefStereoV = new JPanel();
return Model.getFacade().getUMLClassName(rowObj);
@Override
return Model.getFacade().getName(rowObj);
return (d == null)
if (Model.getFacade().isAComment(dest)) {
ProjectActions.jumpToDiagramShowing(getOffenders());
* @return TYPE_CLASSIFIERROLE
return Translator.localize("misc.tooltip.commentlink");
public boolean accept(File pathname) {
// really is one - tfm 20070702
public void treeCollapsed(TreeExpansionEvent event) {
//            if (ae.isOfType(AssociationEvent.EVENT_ASSOCIATION_REMOVE)
cl = new Checklist();
// TODO: treat Message
// of the statemachine or activitygraph they belong to.
new DropTarget(this, new ArgoDropTargetListener());
if (Model.getFacade().isACallAction(getAction())) {
cl = new Checklist();
if (handle == null) {
public void printStackTrace() {
/* Finally set the bounds of the big box and the border fig: */
while (matchPos != -1) {
g2.setComposite(AlphaComposite.getInstance(
char initalChar = nameStr.charAt(pos);
umlReserved.add("framework");
umlReserved.add("metaclass");
if (Model.getFacade().isADataType(dest)) {
umlReserved.add("stereotype");
evalStr = Translator.localize("misc.name.deleted");
//              r | self.namespace.allContents->excludes
None
public boolean isVisibilityVisible() {
String nameStr = Model.getFacade().getName(attr);
}
Collection origParam =
public void dragEnter(
if (pos >= length) {
modelElementMap = new HashMap<Object, Set<ExplorerTreeNode>>();
public void paintIcon(Component c, Graphics g, int x, int y) {
public void setVisibilityVisible(boolean isVisible) {
@Override
umlReserved.add("deletion");
None
List<ExplorerTreeNode> actualNodes = new ArrayList<ExplorerTreeNode>();
if (Model.getFacade().isReadOnly(attr)) {
None
if ((Model.getFacade().getName(dm) == null)
if (fc == null || !fc.isVisible()) {
if (Model.getFacade().isAGeneralizableElement(dm)
protected Remover() {
// FigText for attributes is drawn before drawing things
public void outAStringLiteral(AStringLiteral node) {
if (Model.getFacade().isAUseCase(dm)) {
Iterator iter2 = Model.getFacade().getExtends(dm).iterator();
// TODO: treat Message
None
result.add(start
return Collections.EMPTY_SET;
String start = Translator.localize("misc.name.anon");
return null;
Iterator iter = Model.getFacade().getConnections(
@Override
Model.getCoreHelper().setAggregation1(ae0,
Model.getCoreHelper().setAggregation1(ae0,
Model.getCoreHelper().setAggregation1(ae0,
Model.getCoreHelper().setAggregation1(ae0,
Model.getCoreHelper().setAggregation1(ae0,
@Override
LOG.error("WizAssocComposite: could not set " + "aggregation.",
Iterator eri =
if (!super.canFinish()) {
if (getStep() == 0) {
if ((getStep() == 1) && (step1Choice != null)
return false;
if (!(Model.getFacade().isAClassifier(dm))) {
public void propertyChange(PropertyChangeEvent evt) {
public void dragExit(DropTargetEvent dropTargetEvent) {
action = getInitiatorOfAction(umlAction);
* Default constructor.  Builds a critic that checks UML reserved names.
if (endExpr == -1) {
public void layout() {
// static variables
Object parameterizedClass2 = Model.getCoreFactory().buildClass(
None
return res;
if (Model.getFacade().isType(dm)) {
return NO_PROBLEM;
@Override
if (!Model.getFacade().isAAssociation(dm)) {
public GraphModel makeGraphModel() { return null; }
None
public class CrEmptyPackage extends CrUML {
Object ae = assocEnds.next();
}
public void caseAUnaryUnaryExpression(AUnaryUnaryExpression node) {
// TODO: Model implementation independent
Collection ownedElements =
@Override
None
class ChildGenDerivedClasses implements ChildGenerator {
@Override
Object inner = Model.getCoreFactory().buildClass(classifier);
}
public int getTypeOrderNumer() {
None
None
None
Iterator params1 = Model.getFacade().getParameters(op1).iterator();
None
// required to have variables.
public void setName(String n) throws PropertyVetoException;
if (!(Model.getFacade().isPrimaryObject(dm))) {
public boolean containsNode(Object node) {
assert newEdge != null : "There has been no FigEdge created";
JPanel setDefStereoV = new JPanel();
}
//                        }
if (Model.getFacade().isAModelElement(node)) {
return NO_PROBLEM;
private ArgoDiagram createInternal(final DiagramType type,
public Collection loadModel(ProfileReference reference)
throw new IllegalStateException(
None
Object connection =
Collection cmnt = new ArrayList();
return false;
return NO_PROBLEM;
/**
String name1 = Model.getFacade().getName(op1);
}
public static int getInteger(ConfigurationKey key, int defaultValue) {
}
return report.toString();
private String fontName;
if (VALID_CONNECTIONS[i].length < 4) {
private Font fontPlain;
if ((fontName != null && !"".equals(fontName) && fontSize != null)
// utility is a namespace collection - also not strictly required
addVetoableChangeListener(this);
public void stopPumpingEvents() {
return presentationFor(Model.getFacade().getOwner(obj));
private static CompoundCritic crCompoundConstructorNeeded;
public void execute() {
if (f.getLayer() == null) {
if (!Model.getFacade().isStatic(attr)
createDiagrams.addActionListener(new ActionListener() {
if (haveInterfaceEnd && otherEndNavigable) {
None
return NO_PROBLEM;
if (!f.isVisible()) {
private JComponent getChooser() {
if (!getLayer().equals(f.getLayer())) {
if (Model.getFacade().isAOperation(obj)
ArgoEventPump.addListener(ArgoEventTypes.ANY_NOTATION_EVENT, this);
if (f.getLayer() == null) {
if (f.getLayer() == null) {
if (f.getLayer() == null) {
public List<AbstractArgoJPanel> getDetailsTabs() {
if (ns == null) {
if (fig instanceof ArgoFig) {
private ArgoDiagram diagram;
private static final Point STARTING_POINT = new Point(100, 10);
private Object finalState = null;
for (Iterator it = diagram.getNodes().iterator(); it.hasNext();) {
int lastIndex = placeNodes(new ArrayList(), first, 0);
Point location = new Point(STARTING_POINT);
target = null;
if (Model.getFacade().getNamespace(modelElement) == ns) {
return figClone;
super.removeFromDiagramImpl();
w = Math.max(MIN_WIDTH, w);
if (leftEdge && topEdge) {
figPool.removeFromDiagram();
}
for (Object o : getLayer().getContents()) {
else {
Model.getPump().addModelEventListener(this, theActivityGraph,
JPanel setDefStereoV = new JPanel();
}
setNamespace(newNamespace);
@Override
//      if (Model.getFacade().isAOperation(base)
//      if (Model.getFacade().isAOperation(base)
Object type = Model.getFacade().getType(newOwner);
HashMap map = new HashMap();
List xList = new ArrayList(map.keySet());
/**
if (layer == null) {
* We only need to listen to its "type", and "remove". */
int blank = (h - PADDING - classDim.height - stateDim.height) / 2;
Object machine = Model.getFacade().getSubmachine(newOwner);
return getNotationSettings();
return getOwner();
addFig(s1);
super.modelChanged(mee);
listeners.add(new Object[] {newOwner, null});
PropPanelFactory diagramFactory = new ActivityDiagramPropPanelFactory();
Rectangle bounds = new Rectangle(X0 + PADDING, Y0,
Rectangle r = getBounds();
return figClone;
end0 = Model.getFacade().getGeneral(gen);
return new Dimension(w, h);
// or should we leave them since they contain so much state that the
@Override
getStereotypeFig().setLineWidth(0);
if ("ownedElement".equals(pce.getPropertyName())) {
None
if (getNameFig() == null) {
return new FigRect(X0, Y0, DEFAULT_WIDTH, DEFAULT_HEIGHT,
cover = new FigRect(X0, Y0, DEFAULT_WIDTH, DEFAULT_HEIGHT, LINE_COLOR,
getStereotypeFig().setBounds(x, y + extraEach, newW,
Rectangle oldBounds = getBounds();
getBigPort().setBounds(x, y, newW, newH);
int extraEach = (newH - nameMin.height - stereoMin.height) / 2;
}
getActionMessage(),
/**
Iterator it = figs.iterator();
Iterator it = figs.iterator();
PropPanelFactory diagramFactory =
assertEquals(new DependentString("A"), "A");
PropPanelFactory diagramFactory =
JPanel setDefStereoV = new JPanel();
h = Math.max(3 * DEPTH, h);
_x = x; _y = y; _w = w; _h = h;
return figClone;
None
None
if (Model.getFacade().isAStateVertex(node)) {
Object me = Model.getFacade().getModelElement(eo);
Object target = Model.getFacade().getTarget(transition);
if (uml != null) {
if (!(Model.getFacade().isAClass(newNode)
if (figs.isEmpty()) {
@Override
return true;
None
if (getLayer() != null && getOwner() != null) {
if (!(event instanceof RemoveAssociationEvent)
the bottom region has a minimum height*/
if (ms) {
renderingChanged();
if ((mee.getSource().equals(getOwner()))) {
None
if (container != null
}
// static variables
// This indicates a change in association, not name - tfm
if (mee.getPropertyName().equals("submachine")) {
if (container != null
ref = stateMHelper.getPath(mee.getSource());
}
if (container != null
stateMHelper.setReferenceState(getOwner(), ref);
if (container != null
if (container != null
persistanceManager.addTranslation(
persistanceManager.addTranslation(
while (i < nodes.size() && !figClassifierRoleFound) {
}
//assert  w == h;
/* Ignore w and h from here on. */
if (mee.getPropertyName().equals("top")) {
int out_d = DISC + 2 * getLineWidth();
divider2 =
if (!SwingUtilities.isEventDispatchThread()) {
public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node,
if (Model.getFacade().isAOperation(feat)) {
}
region = Model.getUmlFactory().buildNode(
Rectangle r = getBounds();
}
if (w > f.getBounds().width) {
// TODO: This comparison is very suspect, it should use equals
if (actualPackage != null) {
public void mouseDragged(MouseEvent me) {
Model.getFacade().getOwner(context));
Model.getPump().addModelEventListener(this, theStateMachine,
&& getNamespace() != newNamespace) {
setNamespace(newNamespace);
PropPanelFactory diagramFactory = new StateDiagramPropPanelFactory();
if (oldOwned.contains(elementImport)) {
if (Model.getFacade().isAModelElement(port)) {
if (Model.getFacade().isAGeneralizableElement(port)) {
if (Model.getFacade().isAClassifier(port)
if (Model.getFacade().isNavigable(nextAssocEnd)) {
if (Model.getFacade().isAClassifier(port)
Object edgeAssoc = edge;
Model.getCoreHelper().setType(theEnd, newNode);
theOtherEnd = iter.next();
theEnd = iter.next();
}
fig.addPoint(centerRight.x + SELF_SIZE, centerRight.y + yoffset);
fig.addPoint(centerRight.x + SELF_SIZE, centerRight.y);
fig.addPoint(centerRight.x, centerRight.y + yoffset);
Fig fs = getSourceFigNode();
int difference = centerHigh - centerLow;
return result;
|| (hasPackage && split.isPackage() == hasPackage)
int xPosNew =
if (!(handle instanceof Element)) {
None
if (handle == null) {
private FigTextGroup middleGroup;
None
addFig(getStereotypeFig());
createCompartments();
FigCompartment ops = getCompartment(Model.getMetaTypes().getOperation());
super("", m, new ClassDiagramGraphModel());
int xInit = 0;
for (ClassdiagramNode node : nodeTree) {
action = Model.getFacade().getAction(getOwner());
figNode = new FigStereotypeDeclaration(modelElement, bounds,
Rectangle bounds = new Rectangle(DEFAULT_COMPARTMENT_BOUNDS);
bounds.y = DEFAULT_COMPARTMENT_BOUNDS.y + ROWHEIGHT + 1;
popUpActions.add(
if (newOwner != null) {
if (Model.getFacade().getStereotypes(modelElement).isEmpty()) {
for (Object feat : Model.getFacade().getFeatures(newOwner)) {
popUpActions.add(
ArgoJMenu addMenu = buildAddMenu();
getNameFig().setLineWidth(w);
super.updateStereotypeText();
} else {
if (!EventQueue.isDispatchThread()
/* This populates the stereotypes area: */
getNameFig().setTopMargin(0);
if (isStereotypeVisible()) {
aSize.width += indentX + 1;
aSize.height += 28 + 2 * getLineWidth();
return aSize;
Rectangle oldBounds = getBounds();
Dimension minimumSize = getMinimumSize();
int currentY = ya;
body.setBounds(xa, currentY, newW, newH + ya - currentY);
getBigPort().setBounds(xa, ya, newW, newH);
Rectangle previousBounds = figPoly.getBounds();
calcBounds();
Editor ce = Globals.curEditor();
if (lFirst == null) {
/* If we get here then we didn't get the
// TODO: Aren't stereotypes handled elsewhere?
me.consume();
} /* if doubleclicks */
super.mouseClicked(me);
classDiagram.setName(diagramName);
/**
None
if (Globals.curEditor().getGraphModel()
if (index == LOWER_LEFT) {
None
if (Globals.curEditor().getGraphModel()
Color fill = super.getFillColor();
updateElementListeners(lst);
getNameFig().setTopMargin(
setBounds(getBounds());
if (encloser != null
// Update the listeners to match the desired set using the minimal
PropPanelFactory diagramFactory = new ClassDiagramPropPanelFactory();
private FigText bodyTextFig;
Dimension aSize = bodyTextFig.getMinimumSize();
textEdited((FigText) src);
bodyTextFig.setBounds(px + 2, py + 2 + stereotypeHeight,
Rectangle bbox = getBounds();
}
getBigPort().setBounds(px, py, w, h);
outlineFig.setLineColor(col);
outlineFig.setFilled(f);
getSettings());
*         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,
outlineFig.setLineWidth(w);
// static variables
// static variables
if (getStereotypeFig().isVisible()) {
return new Dimension(aSize.width + 4 + dogear,
urCorner.setBounds(px + w - 1 - dogear, py, dogear, dogear);
// static variables
for (Iterator i = c.iterator(); i.hasNext(); ) {
if (!newlyCreated) {
newlyCreated = false;
None
}
/* but its position may have been changed: */
@Override
super();
}
//        return null;
if (menuItem == null) {
public class FigStereotypeDeclaration extends FigCompartmentBox {
ArgoJMenu addMenu = buildAddMenu();
ArgoJMenu show = buildShowPopUp();
for (Object td : Model.getFacade().getTagDefinitions(newOwner)) {
}
public boolean isEnabled() {
if (drawingArea.x < 0 || drawingArea.y < 0 || drawingArea.width <= 0
if (gm instanceof DeploymentDiagramGraphModel) {
private Image diagramImage;
Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
Image diagramGifImage =
}
g.setColor(new Color(SaveGIFAction.TRANSPARENT_BG_COLOR));
dim = new Dimension(minWidth, minHeight);
if (present > 1) {
if ((cType & COMPARTMENT_ATTRIBUTE) != 0) {
super.setFilled(false);
ypos + 1 /*?LINE_WIDTH?*/ + acounter
@Override
for (Fig f : figs) {
Rectangle b = comp.getBounds();
addFig(keywordFig);
comp.initNotationProviders();
// Now put the text in
String ftText = comp.getNotationProvider().toString(umlObject,
private CompartmentFigText findCompartmentFig(
// Fill property cannot be changed.
// Fill property cannot be changed.
private static UndoableAction srcAgg =
None
}
target.removePropertyChangeListener(this);
String t = MessageFormat.format(Translator
nameField.setText(target.getText());
@Override
if (node instanceof FigEdgePort) {
return PseudostateKindEnum.PK_INITIAL.equals(kind);
actions[table.getSelectedRow()].setCurrentShortcut(newKeyStroke);
Fig f = TargetManager.getInstance().getFigTarget();
firstRegionFig.setLineColor(ArgoFig.INVISIBLE_LINE_COLOR);
if (!regionFigs.isEmpty()) {
rFig.width - 2 * FigConcurrentRegion.INSET_HORZ,
/* Make the composite state 1 region higher: */
figCompositeState.setCompositeStateHeight(
for (Object fig : getFigEdges()) {
FigEdgeAssociationClass dashedEdge =
if (!oldName.equals(newName)) {
this.setText(notationProvider.toString(getOwner(),
}
}
me.consume();
}
--stereotypeCount;
highlightTag  = field.getHighlighter().addHighlight(0,
setLineWidth(0);
for (Fig f : removeCollection) {
for (Fig f : allFigs) {
if (keyword != null) {
removeCollection.remove(keywordFig);
addFig(keywordFig);
removeCollection.remove(stereotypeTextFig);
updateHiddenStereotypes();
return Model.getFacade().getExtensionPoints(usecase);
for (Fig fig : (Collection<Fig>) getFigs()) {
refreshTransaction = true;
Rectangle oldAssociationBounds = target.getBounds();
Rectangle oldAssociationBounds = target.getBounds();
keywordFig =
return null;
Dimension dim = null;
None
// static variables
// static variables
if (singleton == null) {
TargetManager.getInstance().addTargetListener(new TargetListener() {
Object ep =
None
associationClassLink = (FigEdgeAssociationClass) edge;
final MutableGraphModel gm =
final Collection<Object> associationEnds =
for (FigEdge edge : existingEdges) {
public void dragEnter(DropTargetDragEvent dtde) {
public void dragEnter(DropTargetDragEvent dtde) {
public void dragEnter(DropTargetDragEvent dtde) {
private static UndoableAction srcMultOne =
None
dtde.acceptDrag(dtde.getDropAction());
/*
None
None
None
for (Fig fig : (List<Fig>) getFigs()) {
if (((PathContainer) f).isPathVisible()) {
Iterator< ? > i =
private static UndoableAction showEdges = new ActionEdgesDisplay(true,
ownedElements.addAll(((Namespace) elem).getOwnedElement());
WIDTH, ROWHEIGHT + 2 /* 2*LINE_WIDTH?  or extra padding? */ );
private List<FigCompartment> compartments =
getStereotypeFig().setHeight(STEREOHEIGHT + LINE_WIDTH);
getNameFig().setFillColor(null);
Dimension aSize = getNameFig().getMinimumSize();
aSize = ArgoFigUtil.addChildWidth(aSize, getStereotypeFig());
for (FigCompartment c : compartments) {
Rectangle oldBounds = getBounds();
Dimension nameMin = getNameFig().getMinimumSize();
* Construct a new critic instance.  Typically only one instance of
for (FigCompartment c : compartments) {
newH += neededHeight - requestedHeight;
getBigPort().setBounds(x, y, newW, newH);
damage();
Dimension aSize = getMinimumSize();
public void stuffPoint(Point res) {
public void setClosestPoint(Point newPoint) {
for (Object f : compartment.getFigs()) {
@Override
Memento memento = new Memento() {
double len =
/**
if (distance >= length) {
if (useCollisionCheck) {
// TODO: The size of text figs, which is what we care about most,
FigEdge fp = (FigEdge) _pathFigure;
int scaledOffset = vectorOffset + increment;
if (false /* count >= limit */) {
LOG.debug("Retry limit exceeded.  Trying other side");
return result;
int pathLength = _pathFigure.getPerimeterLength();
int d2 = Math.min(pathLength - 1, d1 + slopeSegLen);
if (d1 == d2) {
if (opposite == 0) {
if (opposite < 0) {
theta = Math.atan((double) opposite / (double) adjacent);
if (adjacent < 0) {
if (theta < 0) {
final boolean aboveAndRight = false;
if (swap && theta > Math.PI / 2 && theta < Math.PI * 3 / 2) {
if (theta > Math.PI * 2) {
int dx = (int) (theOffset * Math.cos(theta));
Color c = Globals.getPrefs().handleColorFor(itemFig);
LOG.warn("Could not find rectangle intersection, using inner point.");
protected void updateLayout(UmlChangeEvent event) {
if (oldBounds != getBounds()) {
public String getClassAndModelID() {
if (Model.getFacade().isANamespace(owner)) {
None
}
if (p1 == null || p2 == null) {
Globals.setStatusBar(new StatusBarAdapter());
TabDiagram newPanel = new TabDiagram();
public void modeChange(ModeChangeEvent mce) {
} else {
List currentSelection =
&& !Globals.getSticky()
addedTargets.add(owner);
Object container = Model.getFacade().getModelElementContainer(targets[i]);
// probably the TabText should only show an empty pane in that case
if ("remove".equals(arg0.getPropertyName())) {
translateMouseEvent(me);
super.setTopMargin(1);
if (owner != null) {
Object firstTarget = null;
Collection targets = TargetManager.getInstance().getModelTargets();
Fig noteFig = diagram.presentationFor(comment);
ArgoDiagram diagram = DiagramUtils.getActiveDiagram();
if (!Model.getFacade().getAnnotatedElements(comment)
TargetManager.getInstance().setTarget(noteFig.getOwner());
mgm.addNode(comment);
i = Model.getFacade().getAnnotatedElements(comment).iterator();
FigEdgeModelElement sourceEdge = (FigEdgeModelElement) underMouse;
}
done();
this.addMessage(target);
TargetManager.getInstance().setTarget(message);
None
if (getNameFig() != null) {
return;
Point firstPoint = this.getFirstPoint();
if (rSquared > 100) {
setArrow(EAST);
@Override
/**
/*, new String[] {"name", "visibility", "stereotype"}*/
for (int i = 0; i < subkeys.length; i++) {
private static final int NONE = 0;
private static final int NAV = 3;
role.textEdited();
role.textEditStarted();
super.propertyChange(pce);
None
destMult.renderingChanged();
}
boolean first = true;
}
None
addElementListener(element);
return org.eclipse.uml2.uml.InstanceSpecification.class;
super.setFillColor(FILL_COLOR);
bigPort = createBigPortFig();
@Override
return clone;
return figClone;
protected void removeAllElementListeners() {
@Override
ArgoJMenu stereotypesView =
umlDiagram.setModelElementNamespace(getOwner(), null);
Model.getCoreHelper().setName(c1, "C1");
final Collection<Object> common = new ArrayList<Object>(er1);
Model.getCoreFactory().buildElementResidence(
namespace = newEncloser.getOwner();
Model.getUmlFactory().delete(elementResidence);
} else {
return;
if (pve.getPropertyName().equals("supplierDependency")
if (bbox.x != getX()
final Rectangle bbox = getBounds();
return;
setArrow(WEST);
setArrow(SOUTH);
ArgoEventPump.fireEvent(new ArgoHelpEvent(
}
Fig f2 = ((FigGroup) f).hitFig(r);
}
}
notationProviderName.cleanListener();
if (getStereotypeFig() != null) {
return State.class;
int practicalView = getStereotypeView();
getNameFig().setLineWidth(0);
DiagramInterface diagram =
gm.addEdge(edge);
if (edge == null) {
@Override
super.setFilled(false);
* Construct text fig
maxW = Math.max(maxW, MIN_TEXT_WIDTH);
int overallH = maxH + getTopMargin() + getBotMargin()
sourceFig =
pointIndex = -1;
if (me.isConsumed() || !armed || pointIndex == -1) {
int x = me.getX(), y = me.getY();
FigNodeModelElement newFig = null;
Editor editor = Globals.curEditor();
while (figs.hasMoreElements()) {
if (newFig == null) {
if (mgm.canChangeConnectedNode(newFig.getOwner(),
pointIndex = -1;
//        north.add(tabs, BorderLayout.CENTER);
public List<AbstractArgoJPanel> getDetailsTabs() {
if (true) {
//    	List callers = mn.getCallers();
// 4.5.3.8 [5]
MouseEvent me =
Point p =
me =
for (int i = 0; i < 99; i++) {
public boolean isPathVisible() {
mX = Math.max(mX, 0);
((Clarifiable) getContent()).paintClarifiers(g);
button = hand.index;
/**
/**
/**
"edgeClass",
if (false) {
fe.addPathItem(f, new PathItemPlacement(fe, f, pct, delta, angle,
return "enumeration literals";
private static final long serialVersionUID = -6659510145586121263L;
discriminator.setFilled(false);
super.modelChanged(e);
if (fig instanceof FigClassifierRole) {
public void elementRemoved(RemoveAssociationEvent evt) {
int ix = id.lastIndexOf('/');
