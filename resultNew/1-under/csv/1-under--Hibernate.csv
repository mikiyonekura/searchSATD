search_string,predict_under_code,line_no,similarity,filepath
"// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable","return ExecuteUpdateResultCheckStyle.COUNT;",810,0.6588235294117647,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//perhaps not really necessary...","String sequentialSelect = generateSequentialSelect(loadable);",733,0.6896551724137931,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// todo : what else to do here?","return null;",142,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/ProxyFactoryFactoryImpl.java
"//TODO: disable batch loading if lockMode > READ?","return BatchingEntityLoader.createBatchingEntityLoader(",1895,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//TODO: to handle concurrent writes correctly, the client should pass in a Lock","Long ts = new Long( region.nextTimestamp() );",76,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/UpdateTimestampsCache.java
"// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*","for ( Iterator ii = props.keySet().iterator(); ii.hasNext(); ) {",140,0.6782608695652174,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-c3p0/src/main/java/org/hibernate/connection/C3P0ConnectionProvider.java
"//note there is a wierd implementation in the client side","}",43,0.8495575221238938,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/function/CastFunction.java
"// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.","return disassembledState;",147,0.6363636363636364,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/entry/CacheEntry.java
"// Do we need to drop constraints before dropping tables in this dialect?","return true;",447,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
""/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */"","*           Environmental properties; currently unused.",154,0.17142857142857143,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-infinispan/src/main/java/org/hibernate/cache/infinispan/InfinispanRegionFactory.java
"// Does this dialect support check constraints?","return false;",432,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start","* Callback to perform any necessary cleanup of the underlying cache implementation during SessionFactory.close().",64,0.6631578947368421,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/NoCacheProvider.java
"// Does this dialect support the UNIQUE column syntax?","return true;",400,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:","if ( value instanceof ToOne ) {",2264,0.8217054263565892,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// Does this dialect support the FOR UPDATE syntax?","return false;",543,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// todo : what is the implication of this?","id.setDynamic( !entity.hasPojoRepresentation() );",476,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// todo : YUCK!!!","optimizer = Environment.getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );",104,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/PojoEntityTuplizer.java
"// todo : again, how *should* this work for non-pojo entities?","if ( component.getOwner().hasPojoRepresentation() ) {",1885,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?","return false;",548,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//TODO: really bad, evil hack to fix!!!","mappings.addSecondPass( new ManyToOneSecondPass(manyToOne) );",1623,0.6055045871559633,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?","aliasRefNode.resolve( false, false ); //TODO: is it kosher to do it here?",884,0.8613861386138614,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"//TODO: better to degrade to lazy="false" if uninstrumented","}",1577,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?","return false;",553,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//Icky workaround for MySQL bug:","!( dialect instanceof MySQLDialect ) ||",1092,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Configuration.java
"// we have to set up the table later!! yuck","}",1446,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//TODO: Somehow add the newly created foreign keys to the internal collection","log.debug( "processing foreign key constraints" );",1259,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Configuration.java
"// This inner class implements a case statement....perhaps im being a bit over-clever here","abstract static class CollectionType {",2825,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//TODO: merge into one method!","cascadeBeforeSave(source, persister, entity, createCache);",157,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultPersistEventListener.java
"// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()","boolean indexIsFormula = false;",2433,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// TODO: what type?","None",None,None,None
"//TODO: inefficient","CacheEntry ce = new CacheEntry(",160,0.43902439024390244,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/EntityUpdateAction.java
"//FIXME: get the PersistentClass","java.util.Map propertyResults = bindPropertyResults(alias, returnElem, null, mappings );",140,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/ResultSetMappingBinder.java
"// todo : we can remove this once the deprecated ctor can be made private...","None",None,None,None
"//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here","// IMPL NOTE : currentDepth might be less-than zero if this is the",682,0.7123287671232876,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/JoinWalker.java
"//TODO: redesign how PropertyAccessors are acquired...","Property property = (Property) itr.next();",153,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/AbstractEntityTuplizer.java
"// TODO : not so sure this is needed...","throw new QueryException( "duplicate association path: " + wholeAssociationPath );",173,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"//create an index on the key columns??","}",65,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/IdentifierCollection.java
""/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a			 * slightly higer level in the stack (to get all the information we need)			 * Right now HbmBinder does not support the			 */"","simpleValue.getTable().addColumn( column );",1154,0.5803921568627451,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//TODO: improve this hack!","null;",77,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/UniqueKey.java
"//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).","if ( StringHelper.isEmpty(condition) ) {",3019,0.32360742705570295,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//use of trim() here is ugly?","useOffset ? getFirstRow(selection) : 0,",1665,0.8135593220338984,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()","* Retrieves a PropertyAccessor instance based on the given property definition and",50,0.1909814323607427,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/property/PropertyAccessorFactory.java
"// can happen because of the multiple ways Cache.remove() // can be invoked :(","log.trace("skipping lock checks...");",87,0.8596491228070176,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/util/DataVersionAdapter.java
"//ick!","}",452,0.41379310344827586,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/StringHelper.java
"// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load","return nullSafeGet(rs, names, session, owner);",102,0.7368421052631579,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/AbstractType.java
"//TODO: should this be Session.instantiate(Persister, ...)?","copyCache.put( original, copy );",287,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/EntityType.java
"//TODO: suck this into initLaziness!","if ( "extra".equals( node.attributeValue("lazy") ) ) {",1435,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).","// The need for it is intended to be alleviated with future development, thus it is",103,0.32304038004750596,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/SettingsFactory.java
"//TODO: is this right??","}",191,0.5,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/AnyType.java
"//ie. the subquery! yuck!","}",337,0.676923076923077,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"//use of a stringbuffer to workaround a JDK bug","return new StringBuffer( ownerEntityTable ).append( "_" )",81,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/DefaultComponentSafeNamingStrategy.java
"//TODO: copy/paste from recreate()","offset = writeKey( st, id, offset, session );",1416,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL","if ( !hasNotNullableColumns ) {",361,0.6163522012578616,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// todo : this eventually needs to be removed","public static PropertyAccessor getPropertyAccessor(Class optionalClass, String type) throws MappingException {",141,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/property/PropertyAccessorFactory.java
"// todo : remove","LoadEventListener.LoadType type = nullable",1030,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"//just to help out during the load (ugly, i know)","private transient Class elementClass;",56,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentArrayHolder.java
"// hack/workaround as sqlquery impl depend on having a key.","}",106,0.78125,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/ResultSetMappingBinder.java
"//TODO: handle the case of a foreign key to something other than the pk","createForeignKeyOfEntity( ( (EntityType) getType() ).getAssociatedEntityName() );",99,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/OneToOne.java
"//TODO: assumes all collections disassemble to an array!","return (Serializable[]) state;",41,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/entry/CollectionCacheEntry.java
"// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...","org.dom4j.Document document = findPossibleExtends();",1275,0.4672897196261682,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Configuration.java
"// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).","private static final Class[] COLLECTION_PERSISTER_CONSTRUCTOR_ARGS = new Class[] {",65,0.3565640194489465,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/PersisterFactory.java
"//TODO: deprecated, remove eventually",") {",89,0.6296296296296297,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Column.java
"//TODO possibly relax that","throw new DuplicateMappingException(",2659,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Configuration.java
"// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)","String [] idColNames = owner.getQueryable().getIdentifierColumnNames();",520,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"//use a degenerated strategy for backward compatibility","return StringHelper.unqualify(propertyName);",75,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/DefaultNamingStrategy.java
"//TODO: this is temporary in that the end result will probably not take a Property reference per-se.","if ( null == mode || EntityMode.POJO.equals( mode ) ) {",73,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/property/PropertyAccessorFactory.java
"// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.","int filteredParamCount = queryParameters.getFilteredPositionalParameterTypes() == null",577,0.6137184115523465,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"// get the right object from the list ... would it be easier to just call getEntity() ??","Iterator iter = results.iterator();",66,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/entity/BatchingEntityLoader.java
"// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)","private String substituteBrackets(String sqlQuery) throws QueryException {",87,0.6595744680851063,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryParser.java
"//TODO: this dependency is kinda Bad","private static final PropertyAccessor BASIC_PROPERTY_ACCESSOR = new BasicPropertyAccessor();",50,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/ReflectHelper.java
"//TODO: get SQL rendering out of this package!","}",57,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/criterion/NullExpression.java
"// why does this matter?","if ( oj.getJoinable().isCollection() ) {",897,0.43956043956043955,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/JoinWalker.java
"// important, to account for newly saved entities in query // todo : some kind of check for new status...","log.trace( "owning entity already loaded; ignoring" );",135,0.725925925925926,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/CollectionLoadContext.java
"//TODO: can we *always* use the "null property" approach for everything?","/*if ( isPrimaryKey && !isSpecialOneToOne ) {",1059,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";","None",None,None,None
"//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays","endCollectionLoad( resultSetId, session, collectionPersisters[i] );",957,0.3794466403162055,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...","LoadEventListener.LoadType type = nullable",1030,0.3023255813953488,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// sql-server, at least needed this dropped after use; strange!","}",244,0.907563025210084,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/AbstractTransactSQLDialect.java
"// is it necessary to register %exact since it can only appear in a where clause?","registerFunction( "%exact", new StandardSQLFunction( "%exact", Hibernate.STRING ) );",292,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays","endCollectionLoad( resultSetId, session, collectionPersisters[i] );",954,0.38596491228070173,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// Does this dialect support the ALTER TABLE syntax?","return true;",390,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy","( (initialVersion instanceof Number) && ( (Number) initialVersion ).longValue()<0 )",103,0.4588744588744589,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Versioning.java
"//TODO: reenable if we also fix the above todo","/*EntityPersister persister = getEntityPersister();",107,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/EntityIdentityInsertAction.java
"// orphans should not be deleted during copy??","return false;",312,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"// orphans should not be deleted during merge??","return false;",287,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"//TODO: suck this logic into the collection!","final Collection orphans;",467,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Cascade.java
"// todo : we can actually just determine this from the incoming EntityEntry-s","rtn.hasNonReadOnlyEntities = ois.readBoolean();",1524,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't","/*if ( persister.hasCache() && !persister.isCacheInvalidationRequired() ) {",81,0.5226130653266332,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/EntityIdentityInsertAction.java
"// this class has no proxies (so do a shortcut)","return load(event, persister, keyToLoad, options);",268,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultLoadEventListener.java
"//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)","final PersistenceContext persistenceContext = session.getPersistenceContext();",118,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/TwoPhaseLoad.java
"// todo : need map? the prob is a proper key, right?","public EntityLoadContext(LoadContexts loadContexts, ResultSet resultSet) {",44,0.6165413533834586,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/EntityLoadContext.java
"//TODO: better to pass the id in as an argument?","if ( log.isDebugEnabled() ) {",195,0.5954198473282443,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Collections.java
"//do we even really need this? the update will fail anyway....","if ( session.getFactory().getStatistics().isStatisticsEnabled() ) {",587,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"//TODO: would it be better to do a refresh from db?","}",130,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultReplicateEventListener.java
""/**	 * This form used from annotations (?).  Essentially the same as the above using a	 * resultset-mapping reference, but without cacheMode, readOnly, and comment.	 *	 * FIXME: annotations do not use it, so it can be remove from my POV	 * @deprecated	 *	 *	 * @param query The sql query string	 * @param resultSetRef The result-set-mapping name	 * @param querySpaces Any specified query spaces (used for auto-flushing)	 * @param cacheable Whether the query results are cacheable	 * @param cacheRegion If cacheable, the region into which to store the results	 * @param timeout A JDBC-level timeout to be applied	 * @param fetchSize A JDBC-level fetch-size to be applied	 * @param flushMode The flush mode to use for this query	 * @param parameterTypes parameter type map	 * @param callable Does the query string represent a callable object (i.e., proc)	 */"","public ScrollableResults scroll(ScrollMode scrollMode) throws HibernateException {",190,0.030136986301369864,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SQLQueryImpl.java
"//TODO: ugly here:","final String queryString = queryParameters.getFilteredSQL();",59,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/SubselectFetch.java
"//TODO: not quite sure about the full implications of this!","addExtraJoins( joinFragment, rootAlias, rootJoinable, true );",168,0.819672131147541,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/JoinSequence.java
"// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!","Iterator iter = context.getCollectionEntries().entrySet().iterator(); //TODO: calling entrySet on an IdentityMap is SLOW!!",175,0.46774193548387094,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/BatchFetchQueue.java
"// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...","loadContexts.unregisterLoadingCollectionXRef( collectionKey );",212,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/CollectionLoadContext.java
"// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.","loadContexts.cleanup( resultSet );",220,0.0958904109589041,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/CollectionLoadContext.java
"// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!","return;",601,0.07462686567164178,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
"//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...","PostLoadEvent postLoadEvent = new PostLoadEvent(session).setEntity(result)",693,0.6172839506172839,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultLoadEventListener.java
"// todo : should we check the current isolation mode explicitly?","Object nextVersion = persister.forceVersionIncrement(",103,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractLockUpgradeEventListener.java
"// brand new collection //TODO: or an array!! we can't lock objects with arrays now??","throw new HibernateException( "reassociated object has dirty collection reference (or an array)" );",82,0.43956043956043955,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/OnLockVisitor.java
"// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities","Map transientCopyCache = getTransientCopyCache(event, copyCache );",85,0.3870967741935484,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better","removeCollection(persister, collectionKey, session);",83,0.38235294117647056,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/OnUpdateVisitor.java
"// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?","return changed && existsInDatabase( target, source, persister );",462,0.7251461988304093,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
""/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */"","public interface QueryTranslator {",44,0.1610738255033557,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/QueryTranslator.java
"// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it","CollectionType type = (CollectionType) getDataType();",74,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence","if ( node instanceof DotNode ) {",445,0.25908372827804105,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!","createSelectClauseFromFromClause( qn );",622,0.3706293706293706,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// TODO : better way?!?","( ( DotNode ) dot ).setPropertyPath( ( ( FromReferenceNode ) property ).getPath() );",597,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL","// Prepare persisters and link them up with their cache",277,0.3021276595744681,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(","versionIncrementNode = getASTFactory().create( HqlSqlTokenTypes.PLUS, "+" );",1126,0.8129032258064516,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.","None",None,None,None
"// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...","if ( sqlAst.needsExecutor() ) {",189,0.20152091254752852,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"//TODO:this is only needed during compilation .. can we eliminate the instvar?","private boolean compiled;",90,0.8427672955974843,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// TODO : absolutely no usages of this constructor form; can it go away?","super( sql, flushMode, session, parameterMetadata );",118,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SQLQueryImpl.java
"//TODO: is this a bit ugly?","expr.setText( text );",417,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate","// TODO : decide if it is better performance-wise to doAfterTransactionCompletion that check, or to simply use the MultiTableUpdateDelegate",548,0.43205574912891986,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// TODO : remove these last two as batcher is no longer managing connections","/**",164,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/Batcher.java
"// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.","private FieldInterceptionHelper() {",40,0.3298429319371728,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/intercept/FieldInterceptionHelper.java
"// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses","String name = propertyNode.getText();",157,0.23166023166023167,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IntoClause.java
"// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those","final Delete delete = new Delete()",79,0.435,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/exec/MultiTableDeleteExecutor.java
"//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!","switch ( x.getType() ) {",161,0.718562874251497,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...","return persister.getSubclassPropertyTableNumber( propertyName ) != 0;",196,0.30162412993039445,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IntoClause.java
"// implicit joins are always(?) ok to reuse","None",None,None,None
"//TODO: used to be exprNoParens! was this needed?","}",151,0.7706422018348624,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IndexNode.java
"// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.","Node lhs = getLeftHandOperand();",104,0.6166666666666667,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/BinaryArithmeticOperatorNode.java
"// we do not know either type //BLIND GUESS!","return Hibernate.DOUBLE; //BLIND GUESS!",117,0.7796610169491526,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/BinaryArithmeticOperatorNode.java
"// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.","JoinSequence joinSequence = fromElement.getJoinSequence();",142,0.6532663316582915,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IndexNode.java
"// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)","public class WhereParser implements Parser {",57,0.3780487804878049,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// short-circuit for performance...","namedParamsCopy.put( name, new TypedValue( type, vals.iterator().next(), session.getEntityMode() ) );",755,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/AbstractQueryImpl.java
"// not absolutely necessary, but does help with aggressive release","session.getBatcher().closeQueryStatement( ps, resultSet );",121,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/AbstractScrollableResults.java
"// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName","return factory.getEntityPersister( entityName )",1487,0.3914590747330961,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....","String[] tokens = StringHelper.split( StringHelper.WHITESPACE + "(),", query, true );",81,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/QuerySplitter.java
"//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop","//  doAfterTransactionCompletion "join post processing" once for the entire query (including",352,0.15846994535519127,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromClause.java
"//yuck!","return buf.append(')').toString();",237,0.27450980392156865,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/criterion/Example.java
"// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...","public boolean isDereferencedBySuperclassProperty() {",637,0.5051546391752577,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElement.java
"//TODO: make this a bit nicer","None",None,None,None
"// yuck!","return buf.append(')').toString();",237,0.27450980392156865,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/criterion/Example.java
"// todo : potentially look at optimizing these two arrays","oos.writeObject( loadedState );",345,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/EntityEntry.java
"//note that i parameter is now unused (delete it?)","/**",220,0.6614173228346457,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentCollection.java
"// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.","if ( manyToMany ) {",383,0.6699029126213593,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElement.java
"// TODO : this constructor form is *only* used from constructor directly below us; can it go away?","super( sql, flushMode, session, parameterMetadata );",134,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SQLQueryImpl.java
"// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.","// We would probably refactor to have LogicParser (builds a tree of simple",53,0.5841584158415841,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?","final Object result = persistenceContext.getEntity(key);",653,0.5487804878048781,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.","String replacement = ( String ) walker.getTokenReplacements().get( constant.getText() );",209,0.5545454545454546,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/LiteralProcessor.java
"//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur","//We should actually rework this class to not implement Parser",52,0.5376344086021505,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"//TODO: optimize this better!","return index==-1 ? 0 : getSubclassPropertyTableNumber(index);",1486,0.3939393939393939,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//TODO: should we allow suffixes on these ?","return ( String[] ) subclassPropertyColumnNames.get( propertyName );",1670,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//TODO: is this really necessary????","boolean[] includeOldField = entityMetamodel.getOptimisticLockMode() == Versioning.OPTIMISTIC_LOCK_ALL ?",2549,0.5517241379310345,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// TODO : not sure the best way to handle this. // The non-performant way :","last();",261,0.7628865979381443,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/FetchingScrollableResultsImpl.java
"//TODO: is there a better way?","return collectionName != null && !getPropertyType().isCollectionType();",437,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"//The class is now way to complex!","private int dotcount;",59,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...","NativeSQLQuerySpecification spec;",588,0.7354260089686099,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"//name from a super query (a bit inelegant that it shows up here)","}",820,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"//real hacky... // used to count the nesting of parentheses","None",None,None,None
"//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync","region.put( spaces[i], ts );",68,0.6493506493506493,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/UpdateTimestampsCache.java
"// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)","String[] tokens = StringHelper.split( ".", token, true );",344,0.6624203821656051,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// FIXME Hacky workaround to JBCACHE-1202","if ( !( ( ( NodeSPI ) regionRoot ).getVersion() instanceof NonLockingDataVersion ) ) {",155,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/BasicRegionAdapter.java
"//TODO: COPY/PASTE FROM SessionImpl, pull up!","public List list(String query, QueryParameters queryParameters) throws HibernateException {",506,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/StatelessSessionImpl.java
"// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...","private static final Logger log = LoggerFactory.getLogger(SessionImpl.class);",158,0.35526315789473684,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"//Must be done here because of side-effect! yuck...","int scalarSize = scalarTypes.size();",602,0.6875,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.","//The class is now way to complex!",56,0.6625,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.","return jdbcContext.getConnectionManager().getBatcher();",306,0.4806201550387597,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value","return finalKey;",118,0.7643312101910829,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/CollectionAction.java
"// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?","if ( discrimColumnName != null && !"clazz_".equals( discrimColumnName ) ) {",94,0.5683060109289617,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SessionFactoryHelper.java
"//work around a bug in all known connection pools....","if ( ps.getMaxRows()!=0 ) ps.setMaxRows(0);",297,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
"//TODO: reuse the PreLoadEvent","PreLoadEvent preLoadEvent = new PreLoadEvent( session )",125,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/entry/CacheEntry.java
"// Need a better way to define the suffixes here...","text = child.renderValueCollectionSelectFragment( nonscalarSize, nonscalarSize + k );",438,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"//workaround for WebLogic","log.debug( "could not log warnings", sqle );",66,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/JDBCExceptionReporter.java
"//TODO: temporary","ComponentMetamodel metamodel = new ComponentMetamodel( this );",183,0.5517241379310345,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Component.java
"// TODO : YUCK!!!  fix after HHH-1907 is complete","return Environment.getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();",206,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/PojoEntityTuplizer.java
"// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop","final EntityKey optionalObjectKey = getOptionalObjectKey( queryParameters, session );",804,0.4721311475409836,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)","None",None,None,None
"// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance","Criteria parent = null;",186,0.6781609195402298,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...","private final CriteriaQueryTranslator translator;",56,0.5611510791366906,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaJoinWalker.java
"// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be","EntityUniqueKey euk = new EntityUniqueKey(",1526,0.4608294930875576,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"//This is not very nice (and quite slow):","final String[][] cols = persister == rootPersister ?",1502,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"//TODO: get SQL rendering out of here","CollectionElement elem = new CollectionElement();",368,0.496,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"// meant to handle dynamic instantiation queries...(Copy from QueryLoader)","HolderInstantiator holderInstantiator = buildHolderInstantiator( resultTransformer );",414,0.8108108108108109,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?","Type type = definition.getParameterType( name );",94,0.7261904761904762,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/FilterImpl.java
"// worrying about proxies is perhaps a little bit of overkill here...","if ( element instanceof HibernateProxy ) {",99,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"// todo : throw exception?  maybe warn if not the same?","}",100,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/param/DynamicFilterParameterSpecification.java
"//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible","//NOTE: unlike all other Loaders, this one is NOT",63,0.2268041237113402,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaLoader.java
"// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]","DecimalFormat jdkFormatter = new DecimalFormat( FORMAT_STRING );",320,0.5471698113207547,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/LiteralProcessor.java
"//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?","else {",95,0.5,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Set.java
"// TODO: copy/paste from ManyToOneType","public Serializable disassemble(Object value, SessionImplementor session, Object owner)",85,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/SpecialOneToOneType.java
"//TODO: code duplication with SingleTableEntityPersister","ArrayList columnTableNumbers = new ArrayList();",393,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java
"// todo : throw exception?","}",100,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/param/DynamicFilterParameterSpecification.java
"//should this interface extend PropertyMapping?","/**",38,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/Joinable.java
"// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete","optimizer = Environment.getBytecodeProvider().getReflectionOptimizer(",88,0.7074829931972789,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/component/PojoComponentTuplizer.java
"//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!","private final EntityMetamodel entityMetamodel;",71,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/AbstractEntityTuplizer.java
"//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:","super.getReturnedClass().isInstance(parent);",54,0.5340909090909091,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/EmbeddedComponentType.java
"//TODO: implement caching?! proxies?!","EntityUniqueKey euk = new EntityUniqueKey(",667,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/EntityType.java
"// is this really necessary?","ByteArrayOutputStream outputStream = new ByteArrayOutputStream(2048);",77,0.4897959183673469,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/AbstractBynaryType.java
"//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call","replaceElements( result, target, owner, copyCache, session );",580,0.7906976744186046,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"//TODO: this is a bit arbitrary, expose a switch to the user?","return "";",413,0.7692307692307693,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/EntityType.java
""/**	 * @return collection removal	 * FIXME: even if isInverse=""true""?	 */"","*         FIXME: even if isInverse="true"?",466,0.5434782608695652,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/stat/ConcurrentStatisticsImpl.java
"// TODO: Fix this so it will work for non-POJO entity mode","Type keyType = getPersister( session ).getKeyType();",371,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:","* Is the primary key of the owning entity table",44,0.6575342465753424,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/AssociationType.java
"//TODO: would be nice to handle proxy classes elegantly!","None",None,None,None
"//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?","int spacesSize = 1 + persistentClass.getSynchronizedTables().size();",171,0.6991869918699187,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"//TODO: is there a more elegant way than downcasting?","AbstractQueryImpl query = (AbstractQueryImpl) session.getNamedSQLQuery(queryName);",65,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/NamedQueryCollectionInitializer.java
"//TODO: remove use of instanceof!","Component component = (Component) prop.getValue();",691,0.5979381443298969,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/PersistentClass.java
"//TODO: perhaps this should be some other RuntimeException...","throw new HibernateException("illegally attempted to associate a proxy with two open Sessions");",125,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/proxy/AbstractLazyInitializer.java
"//Yuck:","if ( inFromClause",318,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/Template.java
"//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors","return new Dom4jAccessor( nodeName, type, factory );",118,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/property/PropertyAccessorFactory.java
"//TODO: design new lifecycle for ProxyFactory","pf.postInstantiate(",103,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/DynamicMapEntityTuplizer.java
"// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here","columnNames = getSessionFactoryHelper().generateColumnNames( queryReturnTypes );",254,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// TODO: Should this really return null?  If not, figure out something better to do here.","}",276,0.9240506329113924,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementType.java
"// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...","log.warn( "Transaction started on non-root session" );",1467,0.7540983606557377,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?","String alias = getLhs().getFromElement().getQueryable().getTableName();",283,0.35294117647058826,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type","SessionFactoryImplementor sessionFactory = getSessionFactoryHelper().getFactory();",80,0.6129032258064516,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/BinaryLogicOperatorNode.java
"// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...","private static final Logger log = LoggerFactory.getLogger( JDBCContext.class );",60,0.30939226519337015,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/JDBCContext.java
"// create an index on the key columns??","}",65,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/IdentifierCollection.java
"//is this ok?","}",289,0.5238095238095238,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/property/Dom4jAccessor.java
"//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names","String tableName = getTable().getQuotedName(dialect);",158,0.5439330543933054,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/SimpleValue.java
"// perhaps this should be an exception since it is only ever used // in the above method?","return false;",479,0.848,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..","// was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried",1009,0.6,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?","source.getPersistenceContext().addEntry(",270,0.5423728813559322,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractSaveEventListener.java
"//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?","copyCache.put( original, copy );",287,0.8709677419354839,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/EntityType.java
"//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);","getLoadQueryInfluencers()",1673,0.13095238095238096,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge","for ( Iterator it=transientCopyCache.entrySet().iterator(); it.hasNext(); ) {",144,0.3674418604651163,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects","EntityEntry entry = source.getPersistenceContext().getEntry(entity);",68,0.8142857142857143,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultLockEventListener.java
"//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)","/*Object[] cachedState = null;",316,0.671875,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultSaveOrUpdateEventListener.java
"//this is kinda the best we can do...","if ( object instanceof HibernateProxy ) {",124,0.47619047619047616,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ForeignKeys.java
"/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */","cacheable,",81,0.9221556886227545,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/NamedSQLQueryDefinition.java
"//TODO: this needn't exclude subclasses...","if ( checkForEnd && i == end ) {",244,0.5671641791044776,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/BatchFetchQueue.java
"//TODO: we use two visitors here, inefficient!","OnReplicateVisitor visitor = new OnReplicateVisitor( source, id, entity, false );",159,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultReplicateEventListener.java
"//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?","return collection.wasInitialized() &&",377,0.5396825396825397,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionEntry.java
"// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source","// potentialTrimCharacterArgIndex = 1 assumes that a",66,0.348993288590604,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/function/TrimFunctionTemplate.java
"//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)","else {",80,0.05454545454545454,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/OneToOne.java
"// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()","Serializable entityId = getLoadedCollectionOwnerIdOrNull( ce );",749,0.8152866242038217,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"//I suppose?","}",426,0.6470588235294118,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
""// TBD should this be varbinary($1)? //		registerColumnType(Types.VARBINARY,     ""binary($1)"");"","//		registerColumnType(Types.VARBINARY,     "binary($1)");",245,0.5210084033613446,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//shortcut","}",279,0.5714285714285714,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/SimpleValue.java
"//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective","private static final Logger log = LoggerFactory.getLogger(ConcurrentStatisticsImpl.class);",19,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/stat/ConcurrentStatisticsImpl.java
"// TODO : probably better to calculate these and pass them in, as it'll be more performant","None",None,None,None
"// todo : should we additionally check the current isolation mode explicitly?","SessionFactoryImplementor factory = session.getFactory();",94,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/lock/UpdateLockingStrategy.java
"//TODO: simply remove this override //      if we fix the above todos","None",None,None,None
"// todo : is there really any reason to kkeep trying if this fails once?","oracleCursorTypeSqlType = extractOracleCursorTypeValue();",410,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Oracle8iDialect.java
"// TODO : not sure this is correct, could not find docs on how to do this.","return "{?= call current_timestamp}";",95,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/FrontBaseDialect.java
"//HSQL has no Blob/Clob support .... but just put these here for now!","if ( hsqldbVersion < 20 ) {",114,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/HSQLDialect.java
""// merges don't cascade to uninitialized collections //			//TODO: perhaps this does need to cascade after all...."","return getLoadedElementsIterator(session, collectionType, collection);",282,0.6301369863013698,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"// yick!  need this for proper serialization/deserialization handling...","wrapper.setWrapped( wrapped );",188,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/context/ThreadLocalSessionContext.java
"//TODO: should orphans really be deleted during lock???","return false;",186,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"// todo : move to StringHelper?","if ( stringForm != null ) {",202,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/PropertiesHelper.java
"// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);","this.set = set;",86,0.5280898876404494,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentSet.java
"// TODO: It would be really, really nice to use this to also model components!","/**",37,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/PropertyMapping.java
"//TODO: move to .sql package!!","buf.append("select ");",416,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)","EntityType entityType =(EntityType) type;",714,0.7457627118644068,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/JoinWalker.java
"// TODO : add this info to the translator and aggregate it here...","return null;",162,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/query/HQLQueryPlan.java
"// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases","if ( value != old ) {",186,0.45544554455445546,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentMap.java
"//TODO: code duplication with JoinedSubclassEntityPersister","ArrayList columnJoinNumbers = new ArrayList();",364,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"//TODO: refactor to .sql package","private CollectionSubqueryFactory() {",44,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/CollectionSubqueryFactory.java
"//TODO: *two* hashmap lookups here is one too many...","String[] columns = (String[]) columnsByPropertyPath.get(propertyName);",93,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractPropertyMapping.java
"//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses","//figure out which tables need to be fetched",650,0.7411764705882353,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?","Iterator itr = associations.iterator();",100,0.4117647058823529,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/collection/BasicCollectionJoinWalker.java
"//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface","//NOTE: unlike all other Loaders, this one is NOT",61,0.6357615894039735,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaLoader.java
"// Do we need to qualify index names with the schema name?","return false;",395,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//TODO: We probably should have a StatisticsNotPublishedException, to make it clean","SessionFactory sf;",54,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jmx/StatisticsService.java
"//yukky! Don't you have subclasses for that! //TODO race conditions can happen here","if (e.getMessage().startsWith("Cannot parseConfiguration CacheManager. Attempt to create a new instance of " +",137,0.6972477064220184,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-ehcache/src/main/java/org/hibernate/cache/EhCacheProvider.java
"// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode","Type keyType = getPersister( session ).getKeyType();",370,0.5523809523809524,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"//TODO: need to make the majority of this functionality into a top-level support class for custom impl support","/**",316,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/PojoEntityTuplizer.java
"// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer","return ( ( Element ) value ).asXML();",180,0.47368421052631576,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"//TODO: inefficient if that cache is just going to ignore the updated state!","CacheEntry ce = new CacheEntry(",160,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/EntityUpdateAction.java
"// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()","// return collection.getOwner()",749,0.7852760736196319,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"//TODO:refactor + make this method private","arrayHolders.put( holder.getValue(), holder );",923,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...","private static final Logger log = LoggerFactory.getLogger( HQLQueryPlan.class );",63,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/query/HQLQueryPlan.java
"// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...","if ( !joinAlias.equals( referencedFromElement.getTableAlias() ) ) {",466,0.22535211267605634,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop","// could also add a check to SessionFactory to only conditionally call start",64,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/NoCacheProvider.java
"//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults","Integer minPoolSize = PropertiesHelper.getInteger( Environment.C3P0_MIN_SIZE, props );",130,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-c3p0/src/main/java/org/hibernate/connection/C3P0ConnectionProvider.java
"// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()","if ( fromElement.getOrigin() == null ) {",190,0.4946236559139785,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"//kinda ugly, but needed for collections with a "." node mapping","if (value==null) {",287,0.7346938775510204,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/property/Dom4jAccessor.java
"// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id","return factory.getReferencedPropertyType( entityType.getAssociatedEntityName(), EntityPersister.ENTITY_ID ) != null;",256,0.47491638795986624,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractPropertyMapping.java
"// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception","log.trace( "transient instance could not be processed by merge: " +",124,0.5903614457831325,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...","index += ArrayHelper.countTrue( includeColumns[i] ); //TODO:  this is kinda slow...",2167,0.7311827956989247,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//TODO: move to .sql package, and refactor with similar things!","return StringHelper.join( "=? and ",",3069,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//TODO: I am not so sure about the exception handling in this bit!","sequentialSelect = session.getBatcher().prepareSelectStatement( sql );",2214,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties","if ( useStaticLoader ) {",1781,0.8557692307692307,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// append the SQL to return the generated identifier //TODO: suck into Insert","if ( j == 0 && identityInsert && useInsertSelectIdentity() ) { //TODO: suck into Insert",2078,0.8073394495412844,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//This is really ugly, but necessary:","/**",1676,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// todo : modify the class definition if not already transformed...","byte[] b = cc.toBytecode();",61,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/TransformingClassLoader.java
"//TODO: should we use SELECT .. FOR UPDATE?","Select select = new Select( getFactory().getDialect() );",1246,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""/** Create an action that will evict collection and entity regions based on queryspaces (table names).	 *  TODO: cache the autodetected information and pass it in instead.	 **/"","None",None,None,None
"//TODO: is this 100% correct?","getSession().getPersistenceContext().getCollectionsByKey().remove(",84,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/EvictVisitor.java
"/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////","// Prepare persisters and link them up with their cache",277,0.48299319727891155,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..","return new Alias( suffix ).toAliasStrings( getIdentifierAliases() );",1009,0.6064981949458483,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//TODO: move into collection type, so we can use polymorphism!","if ( collectionType.hasHolder( session.getEntityMode() ) ) {",91,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/WrapVisitor.java
"// TODO should we just collect these like with the collections above?","sqlAliasSuffixes[i] = ( size == 1 ) ? "" : Integer.toString( i ) + "_";",179,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"// todo : should really move this log statement to CollectionType, where this is used from...","if ( log.isTraceEnabled() ) {",216,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/LoadContexts.java
"//hum ... should we cascade anyway? throw an exception? fine like it is?","return;",76,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultReplicateEventListener.java
"// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.","/**",38,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/exception/Configurable.java
"//TODO: copy/paste from insertRows()","int loc = writeKey( st, id, offset, session );",1195,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//TODO: suck into event class","}",455,0.819672131147541,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"//TODO: never reached, since getTypeName() actually throws an exception!","sqlType = type;",65,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/function/CastFunction.java
"// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider","return System.currentTimeMillis() / 100;",51,0.6310679611650486,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/NoCacheProvider.java
"// xmlforest requires a new kind of function constructor","registerFunction( "year", new StandardJDBCEscapeFunction( "year", Hibernate.INTEGER ) );",379,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// TODO Is this a valid operation on a timestamps cache?","cacheAdapter.remove(key);",44,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-infinispan/src/main/java/org/hibernate/cache/infinispan/timestamp/TimestampsRegionImpl.java
"// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used","if (jbcTsCache != null) {",417,0.5803108808290155,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/builder/MultiplexingCacheInstanceManager.java
"// TODO Why not use the timestamp in a DataVersion?","Option opt = getNonLockingDataVersionOption(false);",132,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/timestamp/TimestampsRegionImpl.java
"// todo : eventually merge this with TreeCache and just add optional opt-lock support there.","None",None,None,None
"// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...","if (this == dataVersion) {",105,0.6883116883116883,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/util/DataVersionAdapter.java
"// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used","if (jbcTsCache != null) {",419,0.3291139240506329,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/builder/MultiplexingCacheInstanceManager.java
"//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)","persister.setIdentifier( instance, generatedId, session );",75,0.6214689265536724,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/EntityIdentityInsertAction.java
"// unhappy about this being public ... is there a better way?","None",None,None,None
"// TODO : safe to interpret "map.remove(key) == null" as non-dirty?","initialize( true );",207,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentMap.java
"// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node","Node added = null;",419,0.5205479452054794,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/util/CacheHelper.java
"// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...","if (this == dataVersion) {",105,0.6883116883116883,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/util/DataVersionAdapter.java
"// TODO: Replace this with a more elegant solution.","String[] idColumnNames = ( persister != null ) ?",167,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementType.java
"// short cut check...","if ( !Character.isLetter( chars[0] ) ) {",468,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/StringHelper.java
"//TODO: to handle concurrent writes correctly, this should return a Lock to the client","Long ts = new Long( region.nextTimestamp() + region.getTimeout() );",62,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/UpdateTimestampsCache.java
"// this is ugly here, but needed because its a subquery","q.addQuerySpaces( q.getCollectionPersister( pathExpressionParser.getCollectionRole() ).getCollectionSpaces() );",377,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// TODO : will need reference to session factory to fully complete HHH-1907","//	private final SessionFactoryImplementor sessionFactory;",45,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/component/ComponentMetamodel.java
"// inheritance cycle detection (paranoid check)","PersistentClass superclass = getSuperclass();",162,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/PersistentClass.java
"// TODO: encapsulate the protected instance variables!","private final String role;",101,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//polymorphism comment above","ukName,",1532,0.6341463414634146,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.","batchNumber = new Integer( actionBatches.size() );",637,0.24334600760456274,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"// TODO: handle TypeDefs","Attribute typeNode = node.attribute( "type" );",2010,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//TODO: get all properties, not just the fetched ones!","Object[] propertyValues = meta.getPropertyValues( entity, getEntityMode(criteria, criteriaQuery) );",207,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/criterion/Example.java
"//TODO: native ids","Serializable id = persister.getIdentifierGenerator().generate( getSession(), entry );",328,0.48484848484848486,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentIdentifierBag.java
"// TODO: bindpropertyresults(alias, returnElem)","lockMode",147,0.8461538461538461,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/ResultSetMappingBinder.java
"//TODO: handle property-ref","return "? " +",64,0.3875968992248062,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/criterion/SizeExpression.java
"//TODO: validate existing of property with the chosen name. (secondpass )","ArrayList allResultColumns = getResultColumns(propertyresult);",277,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/ResultSetMappingBinder.java
"//TODO: check that entry.getIdentifier().equals(requestedId)",".getColumnIterator() );",360,0.4383561643835616,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Collection.java
"// TODO: RESTRICT VIOLATION","case 23001: return null;",323,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/PostgreSQLDialect.java
"//TODO: assertion only, could be optimized away","throw new AssertionFailure( "entity was persistent" );",232,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultSaveOrUpdateEventListener.java
"// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?","}",47,0.6283185840707964,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/function/SQLFunctionRegistry.java
"//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"","EntityKey entityKey = new EntityKey( id, persister, session.getEntityMode() );",599,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// TODO: toLowerCase was not done before. Only used in Template.","}",54,0.627906976744186,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/function/SQLFunctionRegistry.java
"//TODO: arithmetic expressions, multiple new Foo(...)","private static final Set COUNT_MODIFIERS = new HashSet();",46,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/SelectParser.java
"// TODO: not visible to the user!","}",68,0.5806451612903226,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/DefaultEntityAliases.java
"//TODO: proxies!","if ( me.getValue()==element ) return me.getKey();",108,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/MapType.java
"//TODO: can we limit stored procedures ?!","if ( useLimit && dialect.bindLimitParametersFirst() ) {",1688,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"//TODO: formulas ?","public void initCollectionPropertyMap() {",1707,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// TODO: better error message since we actually support composites if names are explicitly listed.","throw new QueryException(",225,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryParser.java
"//TODO: use these in methods above","public String getEntityName(Criteria subcriteria, String propertyName) {",578,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"//TODO: cache the persister, this shows up in yourkit","final Serializable id = session.getEntityPersister( entityName, obj ).getIdentifier( obj, session );",50,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/Assigned.java
"//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables","fk.setTable( this );",600,0.75177304964539,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Table.java
"//TODO: create uk loaders for component properties","}",1813,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// TODO : still need to make CollectionPersisters EntityMode-aware","private PersisterFactory() {}",57,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/PersisterFactory.java
"//TODO: terrible implementation!","return value==null ?",183,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/AnyType.java
"//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);","/*if ( otherAlias!=null && !columnAlias.equals(otherAlias) ) {",145,0.611764705882353,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/SelectFragment.java
"// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()","return isOwnerVersioned( session ) && super.isDirty( old, current, session );",305,0.7239263803680982,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"// TODO: check if key contains the owner ID","}",410,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"//TODO: cache this in an instvar","return getFactory().getDialect().getIdentitySelectString(",2331,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// TODO : temporary initial step towards HHH-1907","ComponentMetamodel metamodel = new ComponentMetamodel( this );",183,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Component.java
"// todo : remove this once ComponentMetamodel is complete and merged","LoadEventListener.LoadType type = nullable",1030,0.36619718309859156,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"//TODO: add owner argument!!","throws HibernateException;",68,0.4424778761061947,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/CollectionPersister.java
"//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far","StringBuffer buf = new StringBuffer( "create" )",83,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Index.java
"//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings","mergeJoins( sql.getJoinFragment() );",626,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"//TODO: unnecessary for databases with ANSI-style joins","DisjunctionFragment df = new DisjunctionFragment();",949,0.8032786885245902,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/JoinWalker.java
"//TODO: maybe call it getRowSelection() ?","public RowSelection getSelection() {",132,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/AbstractQueryImpl.java
"//TODO: make this handle multiple collection roles!","final CollectionPersister[] collectionPersisters = getCollectionPersisters();",744,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"//TODO: include the rowids!!!!","if ( hasSubclasses() ) {",289,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here","if (!isResolved()) {",133,0.3291139240506329,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"// TODO : or should we return 'containsTableAlias'??","log.trace( "forcing inclusion of extra joins [alias=" + alias + ", containsTableAlias=" + containsTableAlias + "]" );",139,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/JoinProcessor.java
"/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...","// Prepare persisters and link them up with their cache",277,0.8068181818181818,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"//TODO: avoid this for non-new instances where mightBeDirty==false","boolean substitute = wrapCollections( session, persister, types, values);",151,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"//TODO: theoretically non-threadsafe...","if (name!=null) {",132,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryObjectFactory.java
"// todo : look at optimizing these...","oos.writeObject( loadQueryInfluencers );",2208,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// todo : cache this sql...","String versionIncrementString = generateVersionIncrementUpdateString();",1301,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""/**	 * TODO: Check if Mimer SQL cannot handle the way DB2 does	 */"","public boolean supportsIdentityColumns() {",156,0.9108910891089109,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/MimerSQLDialect.java
"//TODO: if we are using identity columns, fetch the identifier","}",432,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentIdentifierBag.java
"//TODO check there is no actual definition elemnents when a ref is defined","}",97,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/NamedSQLQuerySecondPass.java
"// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null","mappings.addColumnBinding( logicalColumnName, column, table );",1084,0.3333333333333333,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null","mappings.addColumnBinding( logicalColumnName, column, table );",1085,0.6324786324786325,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )","throw new CacheException("unsupported access type [" + accessType.getName() + "]");",63,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/collection/CollectionRegionImpl.java
"//TODO: return new Lock(ts);","}",72,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/UpdateTimestampsCache.java
"// TODO : why aren't these the same?","if ( lhs.getImpliedJoin() != null || lhs.getFromElement().isImplied() ) {",161,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/AssignmentSpecification.java
"//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!","FieldInterceptionHelper.injectFieldInterceptor( entity, getEntityName(), lazyProps, session );",325,0.7538461538461538,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/PojoEntityTuplizer.java
"//TODO mappings.getLogicalTableName(ownerTable)","String logicalOwnerTableName = ownerTable.getName();",1458,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//TODO: if lock.getTimestamp().equals(ts)","for ( int i=0; i<spaces.length; i++ ) {",78,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/UpdateTimestampsCache.java
"//TODO: always true for now, but not if we later decide to support elements() in the from clause","inElementsFunction = true;",308,0.9239766081871345,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:","prepareCollectionFlushes(session);",89,0.5109489051094891,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractFlushingEventListener.java
"// See if the user configured a multiplexer stack","if (channelFactory == null) {",318,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/builder/MultiplexingCacheInstanceManager.java
"//root entity comes *last*","userAliases = ArrayHelper.toStringArray(userAliasList);",116,0.5411764705882353,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaJoinWalker.java
"//==elementType ??","else {",534,0.7857142857142857,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)","//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....",77,0.5075757575757576,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/QuerySplitter.java
"//identifier collections not supported for 1-to-many","if ( getFactory().getSettings().isCommentsEnabled() ) {",123,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/OneToManyPersister.java
"// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly","int potentialTrimCharacterArgIndex = 1;",70,0.5508982035928144,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/function/TrimFunctionTemplate.java
"// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public boolean supportsEmptyInList() {",422,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/DB2Dialect.java
"// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...","addCollection( collectionName, collectionRole );",906,0.21052631578947367,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"// update removed rows fks to null","try {",189,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/OneToManyPersister.java
"//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );","registerFunction( "unhex", new StandardSQLFunction( "unhex", Hibernate.STRING ) );",131,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/IngresDialect.java
""//			buf.append( selectFragment( lhsAlias, """" ) )//ignore suffix for collection columns!"","None",None,None,None
"// initialize the Set of queried identifier spaces (ie. tables)","Iterator iter = collections.values().iterator();",641,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"//use suffix for the entity columns",".toString();",333,0.5042016806722689,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/OneToManyPersister.java
"// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent","entityIsTransient(event, copyCache);",393,0.5899280575539568,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"// the class hierarchy structure","private final String subquery;",66,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"// remove the current element from insertions. It will be added back later.","String entityName = action.getEntityName();",624,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"//private final String rootTableName;","private final String[] subclassClosure;",69,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...","Option option = new Option();",312,0.2602040816326531,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/BasicRegionAdapter.java
"//INITIALIZATION:","public UnionSubclassEntityPersister(",79,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private final Map propertyIndexes = new HashMap();",99,0.5103448275862069,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityMetamodel.java
"//not null ... (start with 1) is implicit","}",182,0.6476190476190476,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/DB2Dialect.java
"// continue loop","}",581,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"// return existing object or initialized proxy (unless deleted)","log.trace( "entity found in session cache" );",346,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultLoadEventListener.java
"// the list of entity names that indicate the batch number","for ( Iterator actionItr = insertions.iterator(); actionItr.hasNext(); ) {",621,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"//disassembled state gets put in a new array (we write to cache by value!)","this.disassembledState = TypeHelper.disassemble(",67,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/entry/CacheEntry.java
"// Add these directly to the executions queue","None",None,None,None
"// Execute the SQL:","public String fromTableFragment(String name) {",324,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"//sort the updates by fk","java.util.Collections.sort( collectionCreations );",332,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"// This could also just be true all the time...","return isAbstract() || hasSubclasses();",357,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"// the mapping of entity names to their latest batch numbers.","private HashMap latestBatches = new HashMap();",604,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"//chop the last union (all)","buf.setLength( buf.length() - ( dialect.supportsUnionAll() ? 11 : 7 ) );",445,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"","if ( resultSet.isAfterLast() ) {",411,0.7225806451612903,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"//TODO: check this....","return getTableName();",472,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"// for deprecated saveOrUpdateCopy()","public void cascade(EventSource session, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)",299,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}","if ( sqle.getSQLState().startsWith( "23" ) ) {",281,0.6206896551724138,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/H2Dialect.java
"// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class","private final int[] subclassPropertyTableNumberClosure;",89,0.7466666666666667,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java
"//expressionTerminators.add(","); // deliberately excluded","EXPRESSION_OPENERS.add( "and" );",81,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE","private final Map subclassesByDiscriminatorValue = new HashMap();",101,0.5524861878453039,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java
"//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression","None",None,None,None
"// Multi-param numeric dialect functions...","registerFunction( "atan2", new StandardSQLFunction("atan2", Hibernate.FLOAT) );",153,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Oracle9Dialect.java
"// Use theta style (for regression) // Move the node up, after the origin node.","FromElement origin = fromElement.getOrigin();",681,0.7,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// Multi-param date dialect functions...","registerFunction( "add_months", new StandardSQLFunction("add_months", Hibernate.DATE) );",161,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Oracle9Dialect.java
"// add the main query",".append(" ) as row_"); 					// close off the inner nested select",263,0.4788732394366197,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/DB2Dialect.java
"// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",1367,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"//add the restriction to the outer select","if (hasOffset) {",272,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/DB2Dialect.java
"// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22","registerFunction(",78,0.3782051282051282,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/TeradataDialect.java
"// This assumes you will want to ignore any update counts","while (!isResultSet && ps.getUpdateCount() != -1) {",354,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/DB2Dialect.java
"//skip the FROM keyword in params","/**",47,0.42105263157894735,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/function/AnsiTrimEmulationFunction.java
"// Custom sql","customSQLInsert = new String[tableSpan];",313,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java
"// return a newly loaded object","return load(event, persister, keyToLoad, options);",284,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultLoadEventListener.java
"// make it circular-reference safe","EntityKey entityKey = new EntityKey( id, subclassPersister, session.getEntityMode() );",637,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultLoadEventListener.java
"//Cope with special cases of AND, NOT, ()","specialCasesBefore( lcToken );",265,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// subclass closure properties","//TODO: code duplication with SingleTableEntityPersister",391,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java
"// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.","if ( !sessionFactory.getDialect().supportsRowValueConstructorSyntax() ) {",92,0.8604651162790697,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/BinaryLogicOperatorNode.java
"// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!","return;",601,0.2608695652173913,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
"// SUBCLASSES","subclassByDiscriminatorValue.put(",155,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/UnionSubclassEntityPersister.java
"//need to hydrate it.","// grab its state from the ResultSet and keep it in the Session",1429,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"//starts with 1, implicitly","}",182,0.5714285714285714,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Oracle9Dialect.java
"// instantiate a new instance","object = session.instantiate( instanceClass, key.getIdentifier() );",1425,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// simple nullability constraint","return null;",290,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Oracle9Dialect.java
"//we need to upgrade the lock mode to the mode requested","session.getPersistenceContext().getEntry(object)",1389,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
""//	register the type of the out param - an Oracle specific type"","statement.registerOutParameter(col, oracletypes_cursor_value);",311,0.9811320754716981,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Oracle9Dialect.java
"// look for a proxy","Object proxy = persistenceContext.getProxy(keyToLoad);",274,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultLoadEventListener.java
"// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",201,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Oracle8iDialect.java
"// evicts don't cascade to uninitialized collections","return getLoadedElementsIterator(session, collectionType, collection);",229,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~","public String getAddColumnString() {",293,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Oracle8iDialect.java
"// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...","// Note, it potentially could be a proxy, so doAfterTransactionCompletion the location the safe way...",2870,0.5859375,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();","value.addColumn( new Column( columnName ) );",145,0.24444444444444444,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/CopyIdentifierComponentSecondPass.java
"// might happen with a managed connection","}",58,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tool/hbm2ddl/SuppliedConnectionProviderConnectionHelper.java
"// don't need subclass tables, because they can't appear in conditions","}",524,0.9022556390977443,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java
"// not final-static to avoid possible classcast exceptions if using different oracle drivers.","int oracletypes_cursor_value = 0;",300,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Oracle9Dialect.java
"//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!","None",None,None,None
"//private List aliases = new ArrayList();","List types = new ArrayList();",522,0.8571428571428571,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/CustomLoader.java
"// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.","private final PathExpressionParser pathExpressionParser;",42,0.8053691275167785,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/GroupByParser.java
"// register resolvers set via Environment property","String userSpecifedResolverSetting = Environment.getProperties().getProperty( Environment.DIALECT_RESOLVERS );",57,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/resolver/DialectFactory.java
"// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)","getPersister().remove( getKey(), getSession() );",103,0.4354243542435424,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/CollectionRemoveAction.java
"//update all the modified entries","int count = doUpdateRows( id, collection, session );",1584,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// special case where we need to force incloude all subclass joins","return Declarer.SUBCLASS;",776,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java
"// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection","p.getIdentifierType(),",1025,0.14193548387096774,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"// binary %Stream // character %Stream","None",None,None,None
"//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);","public String getAddColumnString() {",74,0.9873417721518988,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/MckoiDialect.java
"// assumes that types are all of span 1","Iterator iter = namedParams.entrySet().iterator();",1883,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// hibernate impelemnts cast in Dialect.java","registerFunction( "ceiling", new StandardSQLFunction( "ceiling", Hibernate.INTEGER ) );",265,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!","if ( checkVersion( includeProperty ) ) {",1980,0.5201793721973094,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list",""bit_length", new SQLFunctionTemplate( Hibernate.INTEGER, "octet_length(cast(?1 as char))*4" )",83,0.21794871794871795,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/TeradataDialect.java
"//its the given optional object","object = optionalObject;",1421,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"//decide which ResultSet to get the property value from:","final boolean propertyIsDeferred = hasDeferred &&",2256,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// properties of this class, including inherited properties","createClassProperties( node, subclass, mappings, inheritedMetas );",872,0.375,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// otherwise assume the parent is the the criteria that created us","parent = subcriteria.getParent();",200,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class","private final int[] subclassPropertyTableNumberClosure;",90,0.5714285714285714,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java
"// we can go straight to the first required row","rs.absolute( firstRow );",1604,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)","return session.getPersistenceContext()",90,0.5534591194968553,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/NamedQueryLoader.java
"//before adding to collection!","None",None,None,None
"// discriminator column","private final Map subclassesByDiscriminatorValue = new HashMap();",101,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// Code to handle subclasses of topClass","Object discriminatorValue = persister.getDiscriminatorType().nullSafeGet(",1568,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"//NONE, because its the requested lock mode, not the actual!","defaultLockModes = ArrayHelper.fillArray( LockMode.NONE, size );",202,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"//private final Map propertyTableNumbersByName = new HashMap();","private final Map propertyTableNumbersByNameAndSubclass = new HashMap();",117,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap","throw e;",65,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/resolver/BasicDialectResolver.java
"// CLASS + TABLE","joinSpan = persistentClass.getJoinClosureSpan()+1;",135,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.","if ( session.getFactory().getSettings().isWrapResultSetsEnabled() ) {",1958,0.7724867724867724,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// required to exception table // iconst_0 // i","code.addIconst( 0 );",251,0.5,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)","this.isKey = metamodel.isKey();",72,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/ComponentType.java
"// checkcast // cast the bean into a raw bean","code.addCheckcast( this.targetBean.getName() );",257,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)","afterCommitRollback();",168,0.5023255813953489,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/transaction/JTATransaction.java
"// checkcast (case of primitive type) // invokevirtual (case of primitive type)","code.addInvokevirtual( target_type_index, getterName, getter_desc );",214,0.3614457831325301,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).","final QueryNode select = ( QueryNode ) queryTranslator.getSqlAST();",337,0.30260047281323876,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"/* | this | bean | args | i | raw bean | exception | */","if ( setters.length > 0 ) {",248,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).","AST firstChild = getFirstSelectExpression();",46,0.8113207547169812,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectExpressionList.java
"// new // BulkAccessorException","code.addNew( BULKEXCEPTION_CLASS_NAME );",328,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"//"as" is not in KEYWORDS","&& !BEFORE_TABLE_KEYWORDS.contains( lcToken ) ) {",320,0.6,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/Template.java
"// getfield // get field "$JAVASSIST_CALLBACK" defined already","code.addOpcode(Opcode.GETFIELD);",143,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~","None",None,None,None
"// dup","code.addOpcode( Opcode.DUP );",201,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel","private ComponentTuplizerFactory componentTuplizerFactory = new ComponentTuplizerFactory();",48,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/component/ComponentEntityModeToTuplizerMapping.java
"// putfield // put field "$JAVASSIST_CALLBACK" defined already","code.addOpcode(Opcode.PUTFIELD);",167,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// Configure the cache to use our TM","cacheConfig.getRuntimeConfig().setTransactionManager(tm);",479,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/builder/MultiplexingCacheInstanceManager.java
"/* local variables | this | callback | */","Bytecode code = new Bytecode(cp, 3, 3);",161,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// find the batch number associated with the current association, if any.","Integer associationBatchNumber = ( Integer ) entityBatchNumber.get( value );",690,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"// invokeinterface","code.addInvokeinterface( target_type_index, getterName, getter_desc, 1 );",210,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// we *always* assume an instance with a null // identifier or no identifier property is unsaved!","if ( id == null ) {",3563,0.6271186440677966,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",1550,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
""// seems to not really... //	public boolean supportsRowValueConstructorSyntax() { //		return true; //	}"","public int hashCode() {",102,0.20952380952380953,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/envers/src/demo/java/org/hibernate/envers/demo/Address.java
"// below is for Cache' that don't have str in 2007.1 there is str and we register str directly","registerFunction( "str", new SQLFunctionTemplate( Hibernate.STRING, "cast(?1 as char varying)" ) );",350,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private final String[] propertyNames;",84,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityMetamodel.java
"// byte","if ( Byte.TYPE.equals( javaType ) ) {",87,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/TypeLocatorImpl.java
"// the column doesnt exist at all.","StringBuffer alter = new StringBuffer( root.toString() )",313,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Table.java
"// note that %string is deprecated","registerFunction( "%string", new VarArgsSQLFunction( Hibernate.STRING, "%string(", ",", ")" ) );",353,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//If the object is already loaded, return the loaded one","object = session.getEntityUsingInterceptor( key );",1320,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// create new lock that times out immediately","Lock lock = new Lock( ts, nextLockId(), null );",241,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/ReadWriteCache.java
"// convenience methods relating to operations across arrays of types...","None",None,None,None
"// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp","return version!=null && comparator.compare(version, newVersion) < 0;",423,0.5038167938931297,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/ReadWriteCache.java
"// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.","return ( SelectClause ) ASTUtil.findTypeInChildren( this, SqlTokenTypes.SELECT_CLAUSE );",82,0.5941422594142259,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/QueryNode.java
"// DISCRIMINATOR","bindDiscriminatorProperty( table, entity, subnode, mappings );",393,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...","public Object seed(SessionImplementor session) {",110,0.4186046511627907,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/AbstractBynaryType.java
"// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private final Map propertyIndexes = new HashMap();",99,0.6090534979423868,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityMetamodel.java
"// Use the lower case function name. // Remember whether we're in a SELECT clause or not.","None",None,None,None
"// %upper is deprecated","registerFunction( "%upper", new StandardSQLFunction( "%upper" ) );",373,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// let this take precedence if defined, since it works for // assigned identifiers","Boolean result = entityMetamodel.getVersionProperty()",3572,0.8205128205128205,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//throw new UnsupportedOperationException("Can't write to a readonly object");","public synchronized boolean put(",68,0.9857142857142858,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/ReadOnlyCache.java
"// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.","return this;",3919,0.6935483870967742,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed","// If <trim specification> is omitted, BOTH is assumed.",74,0.08463251670378619,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/function/AbstractAnsiTrimEmulationFunction.java
"// The syntax used to add a foreign key constraint to a table.","return new StringBuffer( 300 )",415,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
""//note: it is conceptually possible that a UserType could map null to //	  a non-null value, so the following is arguable:"","if ( isNullableTable( j ) && isAllNull( fields, j ) ) {",2366,0.7204968944099379,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// note: interfaces is assumed to already contain HibernateProxy.class","try {",155,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/proxy/pojo/javassist/JavassistLazyInitializer.java
"// identifier-commalist",".append( ") REFERENCES " )",422,0.5057471264367817,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//assembled state gets put in a new array (we read from cache by value!)","Object[] assembledProps = TypeHelper.assemble(",116,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/entry/CacheEntry.java
"// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!","Iterator elems = getElementsIterator( collection, session );",94,0.6586826347305389,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"// disassemble named parameters","final Map namedParameters;",93,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/QueryKey.java
"// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );","persistentCollection = (PersistentCollection) collection;",70,0.3968871595330739,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DirtyCollectionSearchVisitor.java
"// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.","if ( !region.isTransactionAware() ) {",85,0.5217391304347826,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/impl/bridge/EntityAccessStrategyAdapter.java
"// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.","getDefaultProperties().setProperty(Environment.USE_GET_GENERATED_KEYS, "false");",81,0.45627376425855515,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Oracle9Dialect.java
"// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction","ccs.clear();",116,0.5024154589371981,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/impl/bridge/EntityAccessStrategyAdapter.java
"// remove all collections for the entity from the session-level cache","if ( persister.hasCollections() ) {",108,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultEvictEventListener.java
"// invokeinterface // callback.write*(..)","code.addInvokeinterface( target_type_index, getterName, getter_desc, 1 );",210,0.6181818181818182,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private final SessionFactoryImplementor factory;",130,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// JOINS","Iterator joinIter = persistentClass.getJoinClosureIterator();",180,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.","else {",80,0.06997084548104957,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/OneToOne.java
"// classes mentioned in extends not available - so put it in queue","Element hmNode = doc.getRootElement();",133,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private final Map propertyIndexes = new HashMap();",99,0.5068493150684932,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityMetamodel.java
"//propertyTableNumbersByName.put( prop.getName(), join );","propertyTableNumbersByNameAndSubclass.put(",376,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally","DotNode lhs = ( DotNode ) eq.getFirstChild();",68,0.4808362369337979,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/AssignmentSpecification.java
"//Access cached SQL","protected boolean isDiscriminatorFormula() {",502,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private final Map propertyIndexes = new HashMap();",99,0.5156794425087108,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityMetamodel.java
"//figure out which tables need to be fetched","AbstractEntityPersister subclassPersister = (AbstractEntityPersister) persister;",653,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
""//	private final List persisters = new ArrayList();"","private final Map alias2Return = new HashMap();",81,0.9782608695652174,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryReturnProcessor.java
"//figure out which columns are needed","ArrayList columnNumbers = new ArrayList();",666,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy","if ( initializer.isUninitialized() ) {",1869,0.6413043478260869,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"//figure out which formulas are needed","ArrayList formulaNumbers = new ArrayList();",675,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"//get em on the second pass!","columnReaders = (String[]) columnReadersByPropertyPath.get(foreignKeyProperty);",199,0.6571428571428571,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractPropertyMapping.java
"//render the SQL","return renderSelect(",684,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/SingleTableEntityPersister.java
"// local cache, so we use synchronization","}",78,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/HashtableCache.java
"// SQL strings","private String sqlVersionSelectString;",211,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""/*public static Object[] clone(Class elementClass, Object[] array) {		Object[] result = (Object[]) Array.newInstance( elementClass, array.length );		System.arraycopy(array, 0, result, 0, array.length);		return result;	}*/"","@Override",97,0.11981566820276497,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/envers/src/test/java/org/hibernate/envers/test/integration/hashcode/WikiPage.java
"// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",513,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"//if there is no resulting row, return null","if ( !rs.next() ) {",1100,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// *load_1 // each type","addTypeDependDataLoad(code, finfo.getDescriptor(), 1);",248,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...","log.info( "pooled optimizer source reported [" + value + "] as the initial value; use of 1 or greater highly recommended" );",418,0.4574468085106383,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/enhanced/OptimizerFactory.java
"// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html","// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",103,0.46766169154228854,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/H2Dialect.java
"// The optional SQL string defined in the where attribute","private final String sqlWhereString;",151,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//pass this as an argument only to avoid double looking","SessionImplementor source) {",498,0.8440366972477065,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractSaveEventListener.java
"// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...","if ( prop.getGeneration() == PropertyGeneration.INSERT ) {",520,0.6238532110091743,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// added this caching as I noticed that getType() is being called multiple times...","if ( type == null ) {",175,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Component.java
"//information about lazy properties of this class","private final String[] lazyPropertyNames;",170,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// If there are any scalars (non-entities) selected, render the select column aliases.","renderScalarSelects( selectExpressions, fromClause );",236,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"//information about all columns/formulas in class hierarchy","private final String[] subclassColumnClosure;",191,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public final class Subcriteria implements Criteria, Serializable {",409,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/CriteriaImpl.java
"// ( (Column) discrim.getColumnIterator().next() ).setType(type);","}",544,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public Object saveOrUpdateCopy(String entityName, Object object)",881,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// dynamic filters attached to the class-level","private final FilterHelper filterHelper;",202,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events","this.affectedOwner = session.getPersistenceContext().getLoadedCollectionOwnerOrNull( collection );",68,0.5989847715736041,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/CollectionRemoveAction.java
"// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",1201,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// assume we are in an auto-commit state","inAutoCommitState = true;",240,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/ConnectionManager.java
"// CUSTOM SQL","handleCustomSQL( node, entity );",700,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);","super.cascadeBeforeSave(source, persister, entity, copyCache);",302,0.44660194174757284,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"// model.getKey().setType( new Type( model.getIdentifier() ) );",".getColumnIterator() );",360,0.4383561643835616,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Collection.java
"// The syntax used to add a column to a table","return " add column";",437,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:","String[] aliasedLhsColumns = StringHelper.qualify(alias, lhsColumns);",636,0.6986301369863014,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/JoinWalker.java
"// Completely optional cascading drop clause.","return "";",442,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.","rtn.defaultReadOnly = ois.readBoolean();",1517,0.41064638783269963,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// PROPERTIES","Iterator iter = node.elementIterator();",1007,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );","None",None,None,None
"// IDENTIFIER","identifierColumnSpan = persistentClass.getIdentifier().getColumnSpan();",485,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods","// key value upon which to doAfterTransactionCompletion the breaking logic.  However,",424,0.28732394366197184,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// VERSION","bindVersioningProperty( table, subnode, mappings, name, entity, inheritedMetas );",389,0.6428571428571429,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//operations which cascade as far as the collection also cascade to collection elements",");",337,0.974025974025974,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/JoinWalker.java
"//WHERE STRING","sqlWhereString = StringHelper.isNotEmpty( persistentClass.getWhere() ) ? "( " + persistentClass.getWhere() + ") " : null;",517,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level","sql = query;",183,0.47619047619047616,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/TableGenerator.java
"// SUBCLASS PROPERTY CLOSURE","ArrayList columns = new ArrayList();",610,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.","List matches = null;",183,0.31693989071038253,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/CollectionLoadContext.java
"//before add :-)","formnos[l] = -1;",669,0.5283018867924528,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization","return false;",186,0.5977011494252874,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/JDBCContext.java
"// Handle any filters applied to the class level","filterHelper = new FilterHelper( persistentClass.getFilterMap(), factory.getDialect(), factory.getSqlFunctionRegistry() );",736,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case","log.warn( "Could not close a JDBC result set", e );",359,0.6486486486486487,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
"// only one-to-one is lazy fetched","return null;",777,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// replicate does cascade to uninitialized collections","return getLoadedElementsIterator(session, collectionType, collection);",422,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"//note early exit here:","return initializeLazyPropertiesFromCache( fieldName, entity, session, entry, cacheEntry );",811,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""/**	 * Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type.	 *	 * @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes)	 * @return a JoinFragment.XXX join type.	 * @see JoinFragment	 * @see SqlTokenTypes	 */"","public void setJoinType(int joinType) {",123,0.13991769547325103,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!","// was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried",1009,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//deliberately ignore return value!","return getJoinType( nullable, currentDepth );",162,0.5161290322580645,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaJoinWalker.java
"//strip leading ", "","setText( text );",91,0.5964912280701754,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/MapEntryNode.java
"// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy","return persister.createProxy( id, this );",276,0.9069767441860465,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/StatelessSessionImpl.java
"// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.","// NOTE : in the case of this being a collection property in the select, not generating the subquery",332,0.8864864864864865,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementType.java
"//otherwise return the "hydrated" state (ie. associations are not resolved)","Type[] types = getPropertyTypes();",1105,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// The name of the SQL function that transforms a string to lowercase","return "lower";",640,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//null owner ok??","}",1111,0.30303030303030304,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...","//   but we capture that there simply to doAfterTransactionCompletion the unbind...",320,0.32280701754385965,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/context/ThreadLocalSessionContext.java
"// automatically makes a column with the default name if none is specifed by XML","public static void bindSimpleValue(Element node, SimpleValue simpleValue, boolean isNullable,",1184,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// just ignore","}",338,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor","throw new DetailedSemanticException( "Unable to locate appropriate constructor on class [" + className + "]", e );",168,0.813953488372093,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/ConstructorNode.java
"// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior","* We encountered a delete request on a transient instance.",178,0.6936416184971098,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultDeleteEventListener.java
"// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...","ps = session.getBatcher().prepareSelectStatement(lazySelect);",843,0.46153846153846156,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// if the property mapping consists of all formulas,  // make it non-updateable","final boolean[] columnUpdateability = value.getColumnUpdateability();",150,0.8,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Property.java
"// the user specifically supplied insert="true", // which constitutes an illegal combo","throw new MappingException(",1290,0.7288135593220338,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// if the property mapping consists of all formulas,  // make it insertable","// make it non-updateable",150,0.8301886792452831,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Property.java
"//it might be an unwrapped collection reference! //try to find a wrapper (slowish)","Iterator wrappers = IdentityMap.keyIterator(collectionEntries);",952,0.75,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"//Custom SQL","private String customSQLInsert;",49,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Join.java
"//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );","Table ownerTable = collection.getOwner().getTable();",1456,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// return","// transaction that was already begun before openSession() was called",656,0.26666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);","//session.getPersistenceContext().removeDatabaseSnapshot(key);",116,0.31627906976744186,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultEvictEventListener.java
"//bad cast","}",93,0.20930232558139536,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/JoinHelper.java
""/*ArrayList list = new ArrayList();			list.addAll( getKey().getConstraintColumns() );			list.addAll( getIndex().getConstraintColumns() );			getCollectionTable().createUniqueKey(list);*/"","public void validate(Mapping mapping) throws MappingException {",82,0.29523809523809524,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/IndexedCollection.java
"//property-refs for associations defined on a //component are not supported, so no need to slice","return lhsPersister.getPropertyColumnNames(propertyName);",125,0.6557377049180327,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/JoinHelper.java
"// we have an embedded composite identifier","try {",399,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/PersistentClass.java
"//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)","return lhsPersister.getSubclassPropertyTableName(property);",143,0.5032258064516129,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/JoinHelper.java
"//stops flush being called multiple times if this method is recursively called","try {",1265,0.8701298701298701,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// Create a new FROM node for the referenced class.","String associatedEntityName = propertyType.getAssociatedEntityName();",395,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// performance op to avoid the array search","return 0;",1470,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// now get an existing proxy for each row element (if there is one)","for ( int i = 0; i < entitySpan; i++ ) {",625,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// ORPHAN DELETE (used for programmer error detection)","Attribute cascadeAtt = node.attribute( "cascade" );",1507,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// empty means no scoping","return dialectScopes.isEmpty() || dialectScopes.contains( dialect.getClass().getName() );",60,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/AbstractAuxiliaryDatabaseObject.java
"//Enable for HHH-440, which we don't like:","/*if ( type.isComponentType() && !propertyName.equals(rootPropertyName) ) {",1478,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"/*(LockMode) anything*/","None",None,None,None
"//this.forceCacheRefresh = forceCacheRefresh;","this.comment = comment;",187,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/QueryParameters.java
"// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set","CollectionPersister[] collectionPersisters = getCollectionPersisters();",1173,0.5137614678899083,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// an "embedded" component (composite ids and unique) // note that this does not handle nested components","if ( component.getOwner().hasPojoRepresentation() ) {",1875,0.6814814814814815,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// and perform the load","None",None,None,None
"// ALIASES","internalInitSubclassPropertyAliasesMap( null, model.getSubclassPropertyClosureIterator() );",1682,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// cache these since they are stateless // this one could even be static...","private final BackrefSetter setter; // this one could even be static...",50,0.6947368421052632,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/property/BackrefPropertyAccessor.java
"// a nested composite element","bindComponent(",1963,0.5617977528089888,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//Must occur after resolving identifiers!","if ( session.isEventSource() ) {",143,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/TwoPhaseLoad.java
"// Get the persister for the _subclass_","final Loadable persister = (Loadable) getFactory().getEntityPersister( instanceEntityName );",1478,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// aliases for composite-id's","if ( getIdentifierType().isComponentType() ) {",1697,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""//		SQLQueryParser parser = new SQLQueryParser( //				sqlQuery, //				processor.getAlias2Persister(), //				processor.getAlias2Return(), //				aliases, //				collAliases, //				collPersisters, //				suffixes, //				collSuffixes //		); // //		sql = parser.process(); // //		namedParameterBindPoints = parser.getNamedParameters();"","customQueryReturns.addAll( processor.generateCustomReturns( parser.queryHasAliases() ) );",136,0.24431818181818182,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLCustomQuery.java
"// Fetch embedded identifiers propertynames from the "virtual" identifier component","CompositeType componentId = ( CompositeType ) getIdentifierType();",1699,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush","version = persister.getVersion( instance, session.getEntityMode() );",75,0.5226130653266332,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/EntityDeleteAction.java
"// embedded composite ids ( alias.idname1, alias.idname2 )","subclassPropertyAliases.put( idPropertyNames[i], new String[] { idAliases[i] } );",1728,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections","WrapVisitor visitor = new WrapVisitor(session);",211,0.39183673469387753,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// TODO: skip formulas?","l++;",1760,0.449438202247191,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",777,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// invokeinterface // invoke Enabled.getInterceptFieldCallback()","code.addInvokeinterface( target_type_index, getterName, getter_desc, 1 );",210,0.44155844155844154,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// hibernate seems to ignore this type...","registerColumnType( Types.BLOB, "BLOB" );",66,0.6140350877192983,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/TeradataDialect.java
"//don't need filters for the static loaders","uniqueKeyLoaders.put(",1804,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock","if ( entry.getStatus() != Status.MANAGED ) {",63,0.8661417322834646,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractLockUpgradeEventListener.java
"//do two passes, for collection property-ref!","initIdentifierPropertyPaths(mapping);",1885,0.6956521739130435,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""/*public boolean dropTemporaryTableAfterUse() {		//we have to, because postgres sets current tx		//to rollback only after a failed create table		return true;	}*/"","public int hashCode() {",102,0.14102564102564102,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/envers/src/demo/java/org/hibernate/envers/demo/Address.java
"// select the correct row by either pk or rowid","if ( useRowId ) {",1962,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""//			optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( //					mappedClass, getterNames, setterNames, propTypes //			);"",".getJdbcSupport()",467,0.1728395061728395,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/Hibernate.java
"//TODO: eventually, rowIdName[j]","}",1964,0.5357142857142857,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//include the discriminator and class-level where, but not filters",".append( persister.filterFragment( getAlias(), Collections.EMPTY_MAP ) );",71,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/entity/EntityJoinWalker.java
"//lazy = !join;","fetchStyle = join ? FetchMode.JOIN : FetchMode.SELECT;",2056,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//not absolutely necessary, but helps for some //equals()/hashCode() implementations","ComponentTuplizer ct = ( ComponentTuplizer ) tuplizerMapping.getTuplizer( entityMode );",433,0.6896551724137931,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/ComponentType.java
"// this is a property of the table, which we are updating","update.addColumns( getPropertyColumnNames(i), propertyColumnUpdateable[i], propertyColumnWriters[i] );",1973,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)","if ( defaultSchema!=null ) {",142,0.4,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/SimpleValue.java
"// This should only be possible if the caches are constructor injected","throw new CacheException("Timestamps cache must be configured if a query cache is used");",281,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/builder/MultiplexingCacheInstanceManager.java
"// transactions marked for rollback-only cause some TM impls to throw exceptions","log.debug( "Transaction is marked for rollback; skipping Synchronization registration" );",207,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/JDBCContext.java
"// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression","if ( componentPath.length() > 0 ) componentPath.append( '.' );",219,0.6617647058823529,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
""// IMPL NOTE : due to the delayed population of setters (setters cached // 		for performance), we really cannot pro0perly define equality for // 		this transformer"","isNaturalKeyLookup = isLookupByNaturalKey;",161,0.1456953642384106,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/QueryParameters.java
"// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);",".getColumnIterator() );",355,0.22,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Collection.java
"// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property","property = identifierProperty;",393,0.6164383561643836,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/PersistentClass.java
"// contained elements:","Iterator iter = node.elementIterator();",2485,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// for non-inverse one-to-many, with a not-null fk, add a backref!","String entityName = ( (OneToMany) collection.getElement() ).getReferencedEntityName();",2573,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//to stop the class from being unloaded","private static final Logger log;",54,0.55,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryObjectFactory.java
"// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).","if ( mappings.getClass( extendsName ) == null && mappings.getClass( getClassName( extendsName, mappings ) ) == null ) {",3095,0.6820809248554913,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// for objects that came in via update()","}",436,0.7096774193548387,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//use dialect default properties","final Properties properties = new Properties();",166,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/SettingsFactory.java
"// increment the version number (if necessary)","final Object nextVersion = getNextVersion(event);",295,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default","settings.setRegionFactory( createRegionFactory( properties, ( useSecondLevelCache || useQueryCache ) ) );",277,0.6633165829145728,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/SettingsFactory.java
"//information about all properties in class hierarchy","private final String[] subclassPropertyNameClosure;",176,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""//		String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); //		log.info( ""Bytecode provider name : "" + provider ); //		BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); //		settings.setBytecodeProvider( bytecodeProvider );"",""hibernate.validator.autoregister_listeners"",961,0.09375,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/AnnotationConfiguration.java
"// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",1746,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// we are using "all" or "dirty" property-based optimistic locking","boolean[] includeInWhere = entityMetamodel.getOptimisticLockMode() == Versioning.OPTIMISTIC_LOCK_ALL ?",1989,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// orphans should be deleted during save/update","return true;",259,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment","Element discriminatorResult = returnElement.element("return-discriminator");",182,0.8125,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/ResultSetMappingBinder.java
"// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string","if ( StringHelper.isNotEmpty( s ) ) {",53,0.6741573033707865,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/JavaConstantNode.java
"// do a check","boolean hasOrphanDelete = loadedPersister != null &&",84,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Collections.java
""//			sqlAliasSuffixes[i] = element.getColumnAliasSuffix();"","includeInSelect[i] = !element.isFetch();",181,0.9824561403508771,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
""//	void setShowSqlEnabled(boolean b) { //		showSql = b; //	} // //	void setFormatSqlEnabled(boolean b) { //		formatSql = b; //	}"","void setSqlStatementLogger(SQLStatementLogger sqlStatementLogger) {",318,0.4697986577181208,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Settings.java
"//materialize associations (and initialize the object) later","hydratedObjects.add( object );",1447,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
""//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907"","private Interceptor interceptor;",197,0.9880952380952381,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Configuration.java
"//fetch="join" overrides default laziness //fetch="join" overrides default laziness","None",None,None,None
"// drop them in reverse order in case db needs it done that way...","ListIterator itr = auxiliaryDatabaseObjects.listIterator( auxiliaryDatabaseObjects.size() );",850,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Configuration.java
"// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).","if ( resultSet.isAfterLast() && isLogicallyAfterLast ) {",480,0.2149122807017544,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context","if ( session.getFactory().getSettings().isIdentifierRollbackEnabled() ) {",90,0.5893719806763285,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Collections.java
"// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)","resultRow = new Object[ columnProcessors.length ];",442,0.5287356321839081,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/CustomLoader.java
""//	public ComponentTuplizerFactory getComponentTuplizerFactory() { //		return componentTuplizerFactory; //	}"","* Iterate the entity mappings",272,0.7544910179640718,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Configuration.java
"// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...","if ( lockMode==LockMode.PESSIMISTIC_FORCE_INCREMENT) {",110,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/MckoiDialect.java
"// it is or was referenced _somewhere_","boolean ownerChanged = loadedPersister != currentPersister ||				// if either its role changed,",230,0.5378151260504201,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Collections.java
"// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...","private static interface Delegate {",92,0.5263157894736842,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/transaction/Isolater.java
"// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here","* {@inheritDoc}",113,0.25,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/property/NoopAccessor.java
"// the root of the incoming property path matched one // of the embedded composite identifier properties","property = identifierProperty;",403,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/PersistentClass.java
"// add normal properties","for ( int i = 0; i < entityMetamodel.getPropertySpan(); i++ ) {",2051,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private void writeObject(ObjectOutputStream oos) throws IOException {",366,0.971830985915493,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/context/ThreadLocalSessionContext.java
"// add the discriminator","if ( j == 0 ) {",2059,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// handles arrays and newly instantiated collections","return collectionType.getElementsIterator(collection, session);",458,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"// if either its role changed,","!currentPersister",232,0.45871559633027525,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Collections.java
"//noncritical, swallow and let the other propagate!","JDBCExceptionReporter.logExceptions(e);",198,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
"// we will need to create new entries","}",256,0.6185567010309279,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Collections.java
"// this piece is needed for usage in select clause","super.setDataType(propertyType);",263,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"// no-op. We don't own the cache so we shouldn't stop it.","}",85,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/builder/JndiSharedCacheInstanceManager.java
"// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself","private Map entityToOperatedOnFlagMap = IdentityMap.instantiate(10);",57,0.7085714285714285,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/EventCache.java
"// Get the names of the columns used to link between the collection // owner and the collection elements.","String[] keyColumnNames = persister.getKeyColumnNames();",323,0.7746478873239436,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"//let's assume that there is only one lazy fetch group, for now!","return result;",104,0.8091603053435115,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/intercept/AbstractFieldInterceptor.java
"// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type","expectedType = getType() == HqlSqlTokenTypes.PLUS ? Hibernate.DOUBLE : rhType;",58,0.35789473684210527,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/BinaryArithmeticOperatorNode.java
"// don't even bother trying to read any further","return null;",475,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// prepend value and type list with null for any positions before the wanted position.","for ( int i = 0; i < position - size; i++ ) {",391,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/AbstractQueryImpl.java
"//+ "_" + referencedColumnName not used for backward compatibility","}",107,0.8226950354609929,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/ImprovedNamingStrategy.java
"// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",434,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public static class BasicExpectation implements Expectation {",52,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/Expectations.java
"// this property belongs on the table and is to be inserted","insert.addColumns( getPropertyColumnNames(i), propertyColumnInsertable[i], propertyColumnWriters[i] );",2054,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// need to extract the component values and check for subtype replacements...","CompositeType componentType = ( CompositeType ) types[i];",250,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/TypeHelper.java
"// add the primary key","if ( j == 0 && identityInsert ) {",2064,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return","errorIfDML();",474,0.6127167630057804,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
""//		registerColumnType( Types.BLOB, 16777215, ""mediumblob"" ); //		registerColumnType( Types.BLOB, 65535, ""blob"" );"","None",None,None,None
"// delegate already handles PK columns","if ( getFactory().getSettings().isCommentsEnabled() ) {",2110,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//ie. e.status==DELETED","if ( log.isTraceEnabled() ) {",515,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractSaveEventListener.java
"// kept for backward compatibility until after the 3.1beta5 release of HA","public NamedQueryDefinition(",51,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/NamedQueryDefinition.java
"// legacy behavior, apply the bridge...","regionFactoryClassName = RegionFactoryCacheProviderBridge.class.getName();",398,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/SettingsFactory.java
"//if an exception occurs during flush, user must call rollback()","}",98,0.7638888888888888,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/transaction/CMTTransaction.java
"// Turn off includeSubclasses on all FromElements.","FromClause from = getCurrentFromClause();",899,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// can't just return null here, since that would // cause an owning component to become null","return NOT_NULL_COLLECTION;",417,0.6896551724137931,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"// the object is transient or detached","//the entity is not associated with the session, so",526,0.927536231884058,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractSaveEventListener.java
"// Now update only the tables with dirty properties (and the table with the version number)","if ( tableUpdateNeeded[j] ) {",2801,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Render the SQL query","final PreparedStatement insert;",2386,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400","return "";",283,0.7338129496402878,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state","dehydrate( id, fields, null, notNull, propertyColumnInsertable, j, insert, session, index );",2409,0.6527196652719666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );","// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",201,0.47577092511013214,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"// TODO : shouldnt inserts be Expectations.NONE?","session.getBatcher().addToBatch( expectation );",2415,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//a proxy cannot be transient and it breaks ForeignKeys.isTransient","&& ForeignKeys.isTransient( childEntityName, child, null, session ) ) {",383,0.7763157894736842,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"//don't bother trying to update, we know there is no row there yet","isRowToUpdate = false;",2465,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// This is the root level node. // Generate an explicit from clause at the root.","None",None,None,None
"// CHECK","Attribute chNode = node.attribute( "check" );",361,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).","private transient ReferenceMap softReferenceCache = new ReferenceMap( ReferenceMap.SOFT, ReferenceMap.SOFT );",55,0.5,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/SoftLimitMRUCache.java
"//if all fields are null, we might need to delete existing row","isRowToUpdate = true;",2469,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//note: updates to joined tables can't be batched...","if ( log.isTraceEnabled() ) {",2505,0.5660377358490566,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","registerFunction( "ascii", new StandardSQLFunction( "ascii", Hibernate.INTEGER ) );",140,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/H2Dialect.java
"// starting index","final PreparedStatement update;",2516,0.7317073170731707,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// object have been loaded with setReadOnly(true); HHH-2236","snapshot[ lazyPropertyNumbers[j] ] = lazyPropertyTypes[j].deepCopy( propValue, session.getEntityMode(), factory );",925,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""/**	 * Build a ResultSetMappingDefinition given a containing element for the ""return-XXX"" elements	 *	 * @param resultSetElem The element containing the return definitions.	 * @param path No clue...	 * @param mappings The current processing state.	 * @return The description of the mappings...	 */"","* @return PropertyHolder",61,0.10948905109489052,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/PropertyHolderBuilder.java
""//	private List collectionOwnerAliases = new ArrayList(); //	private List collectionAliases = new ArrayList(); //	private List collectionPersisters = new ArrayList(); //	private List collectionResults = new ArrayList();"","List collectionOwners = new ArrayList();",109,0.33613445378151263,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/CustomLoader.java
"// Write any appropriate versioning conditional parameters","if ( useVersion && Versioning.OPTIMISTIC_LOCK_VERSION == entityMetamodel.getOptimisticLockMode() ) {",2542,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//check if the detached object being merged is the parent","Object unmergedInstance = mergeMap.get( entityEntryInstance );",1171,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"//Render the SQL query","final PreparedStatement insert;",2386,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// determine if the collection elements are entities...","Type elementType = persister.getElementType();",161,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/CustomLoader.java
"// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued","getIdentifierType().nullSafeSet( delete, id, index, session );",2664,0.8042328042328042,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Let return-propertys override whatever the persister has for aliases.","columnAliases = ( String[] ) fieldResults.get(propertyName);",212,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryParser.java
"// We should use the _current_ object state (ie. after any updates that occurred during flush)","if ( useVersion ) {",2669,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// might need to run a different filter entirely after the flush // because the collection role may have changed","entry = persistenceContext.getCollectionEntryOrNull( collection );",1592,0.726027397260274,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array","public Object[] toArray() {",335,0.7794117647058824,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentMap.java
"// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode","final String result;",1073,0.5375,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
""//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	  oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)"","final boolean[] tableUpdateNeeded = getTableUpdateNeeded( dirtyFields, hasDirtyCollection );",2745,0.615916955017301,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// loop through all the associations of the current entity and make sure that they are processed // before the current batch number","Object[] propertyValues = action.getState();",680,0.8465608465608465,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private List embeddedParameters;",59,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SqlFragment.java
"// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private final String[] propertyNames;",84,0.9420289855072463,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityMetamodel.java
"// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead","Object element = persister.readElement( rs, owner, descriptor.getSuffixedElementAliases(), getSession() ) ;",90,0.6708860759493671,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentBag.java
"/* COLUMN and TABLE should be renamed but it would break the public API */","/** The column parameter */",75,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/TableGenerator.java
"// For many-to-many joins, use the tablename from the queryable collection for the default text.","fromElement.setText( queryableCollection.getTableName() + " " + getTableAlias() );",286,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementType.java
"//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;","@Override",97,0.2,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/envers/src/test/java/org/hibernate/envers/test/integration/hashcode/WikiPage.java
"// For the case of dynamic-update="true", we need to generate the UPDATE SQL","None",None,None,None
"// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public Object merge(String entityName, Object object) throws HibernateException {",847,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// Default to collections sharing entity cache if there is one","collectionConfig = PropertiesHelper.getString(COLLECTION_CACHE_RESOURCE_PROP, properties, null);",350,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/builder/MultiplexingCacheInstanceManager.java
"// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);","String componentPath,",50,0.18181818181818182,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/ComponentJoin.java
"// don't need to check laziness (dirty checking algorithm handles that)","updateStrings = new String[span];",2763,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""/*rootTableName = persistentClass.getRootTable().getQualifiedName( 				factory.getDialect(), 				factory.getDefaultCatalog(), 				factory.getDefaultSchema() 		);*/"","factory.getSettings().getDefaultCatalogName(),",434,0.23333333333333334,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// For the case of dynamic-update="false", or no snapshot, we use the static SQL","updateStrings = getUpdateStrings(",2792,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//abort the save (the object is already saved by a circular cascade)","return IdentifierGeneratorHelper.SHORT_CIRCUIT_INDICATOR;",131,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/ForeignGenerator.java
"// if not "get", then try "is"","if ( methodName.startsWith( "is" ) ) {",384,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/property/BasicPropertyAccessor.java
"// remove initial " and "",".toString();",60,0.4444444444444444,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/CollectionSubqueryFactory.java
"// Default to sharing the entity cache if there is one","String dfltQueryResource = (entityConfig == null ? DEF_QUERY_RESOURCE : entityConfig);",381,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/builder/MultiplexingCacheInstanceManager.java
"// we have the form: trim(trimSource) //      so we trim leading and trailing spaces","trimSource = ( String ) args.get( 0 );",57,0.6530612244897959,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/function/TrimFunctionTemplate.java
"// For the case of dynamic-insert="true", we need to generate the INSERT SQL","boolean[] notNull = getPropertiesToInsert( fields );",2825,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify","if ( object == self ) {",140,0.5398773006134969,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ForeignKeys.java
"//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases","private final String[] userAliases;",71,0.7236842105263158,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaLoader.java
"// For the case of dynamic-insert="false", use the static SQL","id = insert( fields, getPropertyInsertability(), getSQLIdentityInsertString(), object, session );",2833,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins","whereString.append('('); //TODO: unnecessary for databases with ANSI-style joins",948,0.7351351351351352,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/JoinWalker.java
"//a shortcut if its location didn't change!","found = true;",197,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentBag.java
"//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations","private final static String C3P0_STYLE_MIN_POOL_SIZE = "c3p0.minPoolSize";",54,0.6754385964912281,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-c3p0/src/main/java/org/hibernate/connection/C3P0ConnectionProvider.java
"// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...","s.append( persister.getOwnerEntityPersister().getIdentifierType().toLoggableString( ids[i], factory ) );",262,0.4528301886792453,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/pretty/MessageHelper.java
"// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()","private transient boolean ignore;",73,0.7323943661971831,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionEntry.java
"// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private final SessionFactoryImplementor factory;",130,0.9705882352941176,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// new collections that get found + wrapped // during flush shouldn't be ignored","ignore = false;",85,0.6990291262135923,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionEntry.java
"// meant to handle dynamic instantiation queries...","HolderInstantiator holderInstantiator = buildHolderInstantiator( resultTransformer );",414,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)","snapshot = persister.isMutable() ?",89,0.8518518518518519,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionEntry.java
"// Always add the collection's query spaces.","}",94,0.5170068027210885,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.","registerColumnType( Types.VARBINARY, "blob($l)" );",56,0.42735042735042733,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/PointbaseDialect.java
"// detached collections that get found + reattached // during flush shouldn't be ignored","ignore = false;",86,0.5849056603773585,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionEntry.java
"// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.","Integer initialPoolSize = PropertiesHelper.getInteger( C3P0_STYLE_INITIAL_POOL_SIZE, props );",166,0.7389162561576355,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-c3p0/src/main/java/org/hibernate/connection/C3P0ConnectionProvider.java
"// we need to utilize dynamic delete statements","deleteStrings = generateSQLDeletStrings( loadedState );",2884,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// otherwise, utilize the static delete statements","deleteStrings = getSQLDeleteStrings();",2888,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// intentionally empty","}",64,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentMap.java
""/*public boolean equals(Object other) {		read();		return bag.equals(other);	}	public int hashCode(Object other) {		read();		return bag.hashCode();	}*/"","ForeignKeyKey fkk = (ForeignKeyKey) other;",94,0.37714285714285717,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Table.java
"//final boolean forceCacheRefresh,","final String comment,",145,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/QueryParameters.java
"//just a performance opt!","createJoin( alias, innerJoin, includeSubclasses ).toFromFragmentString();",2985,0.9361702127659575,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.","if ( transaction != null ) {",225,0.07954545454545454,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/transaction/JTATransactionFactory.java
"// used to set the type of the parent dot node","String propertyPath = getText() + "." + getNextSibling().getText();",225,0.7659574468085106,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"//all joins join to the pk of the driving table","final JoinFragment join = getFactory().getDialect().createOuterJoinFragment();",3000,0.5066666666666667,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type","expectedType = getType() == HqlSqlTokenTypes.PLUS ? Hibernate.DOUBLE : rhType;",61,0.3467741935483871,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/BinaryArithmeticOperatorNode.java
"//notice that we skip the first table; it is the driving table!","final boolean joinIsIncluded = isClassOrSuperclassTable( j ) ||",3003,0.7878787878787878,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// aliases named identifier ( alias.idname )","if ( hasIdentifierProperty() ) {",1691,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//skip the driving table","final int j = tableNumbers[i];",3023,0.525,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public Serializable insert(Object entity) {",93,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/StatelessSessionImpl.java
"//get 'em in the right order (not that it really matters)","//render the where and from parts",3079,0.7833333333333333,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//NOTE EARLY EXIT!","}",80,0.8205128205128205,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultPersistEventListener.java
"// trying via forName() first to be as close to DriverManager's semantics","Class.forName(driverClass);",79,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/connection/DriverManagerConnectionProvider.java
"//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness","if (requestedId==null) {",309,0.5492227979274611,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
""//	private boolean showSql; //	private boolean formatSql;"","private SQLStatementLogger sqlStatementLogger;",50,0.6329113924050633,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Settings.java
"// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)","result = SessionFactoryObjectFactory.getNamedInstance(name);",771,0.74,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"// try to make sure we don't wrap and already wrapped session","return session != null",117,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/context/ThreadLocalSessionContext.java
"// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.","if ( implied && inFrom ) {",274,0.6604651162790698,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"//render the where and from parts","int drivingTable = tableNumbers[0];",3081,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.","batchNumber = findBatchNumber( action, entityName );",632,0.7132867132867133,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"// allow these to go through the the real session no matter what","}",317,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/context/ThreadLocalSessionContext.java
"// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail","IsolatedWork work = new IsolatedWork() {",143,0.6747967479674797,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/exec/AbstractStatementExecutor.java
"//we *could* regerate this inside each called method!","final String where = createWhereByKey( drivingTable, drivingAlias );",3083,0.5609756097560976,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",134,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"//now render the joins","JoinFragment jf = createJoin( tableNumbers, drivingAlias );",3087,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn","log.warn("Exception occured when closing the Proxool pool", e);",207,0.7941176470588235,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// create a new batch for this type. The batch number is the number of current batches.","latestBatchNumberForType = new Integer( actionBatches.size() );",693,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","protected void registerKeyword(String word) {",479,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// This will add the new from element to the origin.","FromElement elementJoin = factory.createElementJoin( queryableCollection );",77,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IndexNode.java
"//now render the select clause","SelectFragment selectFragment = createSelect( columnNumbers, formulaNumbers );",3090,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// The keyword used to insert a row without specifying // any column values","return " default values";",655,0.8411214953271028,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//now tie it all together","Select select = new Select( getFactory().getDialect() );",3093,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?","return true;",607,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//insert/update/delete SQL","final int joinSpan = getTableSpan();",3112,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// The keyword used to specify a nullable column.","return " null";",265,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"//select SQL","sqlSnapshotSelectString = generateSnapshotSelectString();",3146,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//overriden to avoid System.exit","throw new QueryException("Parser: panic");",381,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"//no need to check laziness, dirty checking handles that","for ( int j = 0; j < dirtyProperties.length; j++ ) {",3339,0.6357615894039735,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",1287,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// Fully resolve the map reference, create implicit joins.","Type type = collectionNode.getDataType();",94,0.7352941176470589,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IndexNode.java
"// break the outer loop !!!","break translator_loop;",217,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/query/HQLQueryPlan.java
"// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.","break;",696,0.5687203791469194,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);",".getBatchFetchQueue()",914,0.22962962962962963,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// The basic implementation is to simply use the node's text","return getText();",59,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/Node.java
"// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using","if ( lockMode==LockMode.PESSIMISTIC_FORCE_INCREMENT) {",562,0.7329842931937173,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//cascade to current collection elements","if ( elemType.isEntityType() || elemType.isAnyType() || elemType.isComponentType() ) {",360,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Cascade.java
"// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public CriteriaImpl(String entityOrClassName, SessionImplementor session) {",89,0.971830985915493,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/CriteriaImpl.java
"//not really necessary, but good for consistency...","eventSource.getPersistenceContext().addChildParent(child, parent);",389,0.7258064516129032,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Cascade.java
"// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used","String pkname = null;",395,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Table.java
"// we can't cascade to non-embedded elements","boolean embeddedElements = eventSource.getEntityMode()!=EntityMode.DOM4J ||",411,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Cascade.java
"//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache","final PersistenceContext persistenceContext = session.getPersistenceContext();",100,0.14207650273224043,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/EntityDeleteAction.java
"//a newly instantiated collection can't have orphans","if ( deleteOrphans ) { // handle orphaned entities!!",444,0.71875,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Cascade.java
"// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates","Transaction tx = suspend();",69,0.7580645161290323,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-infinispan/src/main/java/org/hibernate/cache/infinispan/timestamp/TimestampsRegionImpl.java
"// check the version unsaved-value, if appropriate","final Object version = getVersion( entity, session.getEntityMode() );",3569,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Create the SessionFactory from hibernate.cfg.xml","sessionFactory = new Configuration().configure().buildSessionFactory();",12,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/util/HibernateUtil.java
"// handle orphaned entities!!","if ( log.isTraceEnabled() ) {",446,0.7428571428571429,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Cascade.java
"// check the id unsaved-value","Boolean result = entityMetamodel.getIdentifierProperty()",3581,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
""// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 		NOTE: decided to put this here rather than in the above loop as I was nervous about the performance //		of the loop-in-loop especially considering this is far more likely the 'edge case'"","if ( mergeMap != null ) {",1192,0.4921135646687697,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// check to see if it is in the second-level cache","if ( hasCache() ) {",3588,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//Custom SQL (would be better if these were private)","private String customSQLInsert;",49,0.4,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Join.java
"// our column span is the number of columns in the PK","return getIdentifierOrUniqueKeyType( mapping ).getColumnSpan( mapping );",106,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/ManyToOneType.java
"// For property references generate <tablealias>.<columnname> as <projectionalias>","for ( int j = 0; j < cols.length; j++ ) {",144,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/ComponentJoin.java
"// KEY","Element keyNode = node.element( "key" );",931,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//force immediate execution of the insert","try {",3975,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public static final String SEQUENCE_PARAM = "sequence_name";",102,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/enhanced/SequenceStyleGenerator.java
"// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",47,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/pretty/MessageHelper.java
"// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public CriteriaImpl(String entityOrClassName, SessionImplementor session) {",89,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/CriteriaImpl.java
"// Loaded entity instances, by EntityUniqueKey","private Map entitiesByUniqueKey;",86,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter","None",None,None,None
"// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",237,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/pretty/MessageHelper.java
"// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",155,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/enhanced/SequenceStyleGenerator.java
"// Identity map of EntityEntry instances, by the entity instance","private Map entityEntries;",89,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// Write HTML footer","out.println("</body></html>");",51,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/web/EventManagerServlet.java
"// Entity proxies, by EntityKey","private Map proxiesByKey;",92,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// delete does cascade to uninitialized collections","return CascadingAction.getAllElementsIterator(session, collectionType, collection);",148,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"// Snapshots of current database state for entities // that have *not* been loaded","private Map entitySnapshotsByKey;",95,0.7787610619469026,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// NativeSQL: collect key column and auto-aliases","Column col = ( (Column) iter.next() );",296,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// Identity map of array holder ArrayHolder instances, by the array instance","private Map arrayHolders;",99,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"//cannot occur","}",105,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/property/BasicPropertyAccessor.java
"// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail","if ( !veto ) {",74,0.6518518518518519,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/EntityInsertAction.java
"// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...","AST primaryOrdering = query.getOrderByClause().getFirstChild();",514,0.5572139303482587,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// try "get"","if ( methodName.startsWith( "get" ) ) {",375,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/property/BasicPropertyAccessor.java
"// pass control along to the rest of the processing chain","chain.doFilter( request, response );",40,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/web/SessionInterceptor.java
"// Set of EntityKeys of deleted objects","private HashSet nullifiableEntityKeys;",108,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure","int propertyNumber = getSubclassPropertyIndex( lazyPropertyNames[i] );",753,0.4512820512820513,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query","private List nonlazyCollections;",114,0.6885245901639344,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
""/*protected void initPropertyPaths(			final String path,			final Type type,			final String[] columns,			final String[] formulaTemplates,			final Mapping factory)	throws MappingException {		//addFormulaPropertyPath(path, type, formulaTemplates);		initPropertyPaths(path, type, columns, formulaTemplates, factory);	}*/"","return getEntityPersister(className).getPropertyType(propertyName);",918,0.14330218068535824,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"// Downgrade locks","Iterator iter = entityEntries.values().iterator();",272,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();","value.addColumn( new Column( columnName ) );",145,0.23655913978494625,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/CopyIdentifierComponentSecondPass.java
"// do nothing...","}",85,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/property/IndexPropertyAccessor.java
"// Deserialize //-----------------------------------------------------------------------","* <p>Deep clone an <code>Object</code> using serialization.</p>",73,0.9182389937106918,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/SerializationHelper.java
"// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.","private ArrayList collectionCreations;",80,0.411522633744856,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
""//	public boolean isShowSqlEnabled() { //		return showSql; //	} // //	public boolean isFormatSqlEnabled() { //		return formatSql; //	}"","public String getImportFiles() {",111,0.445859872611465,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Settings.java
"//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set","String alias;",133,0.4956521739130435,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/criterion/SubqueryExpression.java
"/*(array==null) ? tempList.size() :*/","Serializable result = (Serializable) Array.newInstance( persister.getElementClass(), length );",68,0.6732673267326733,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentArrayHolder.java
"//sort the updates by pk","java.util.Collections.sort( updates );",341,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"// should be safe to only ever expect EntityPersister references here","return fromElement.getQueryable() != null &&",403,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementType.java
"//optimize the hash size to eliminate a rehash.","entityBatchNumber = new HashMap( insertions.size() + 1, 1.0f );",612,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"//unwrap the object","}",595,0.5396825396825397,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...","int count = 0;",309,0.5321100917431193,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/StringHelper.java
"// the entity associated with the current action.","Object currentEntity = action.getInstance();",627,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"// this page intentionally left blank :)","}",120,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/property/BackrefPropertyAccessor.java
"// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance","HashMap nameLockOptions = new HashMap();",1046,0.5827814569536424,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"//initialize + unwrap the object","}",618,0.6588235294117647,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",618,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// do not do anything","None",None,None,None
"// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param","final boolean useBatch = j == 0 && expectation.canBeBatched();",2381,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//return the proxied object","}",671,0.7868852459016393,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// else no collection element, but also no owner","}",1158,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!","return;",601,0.3125,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
"//overwrite old proxy","if ( proxyOrig != null ) {",675,0.4634146341463415,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries","private transient LRUMap strongReferenceCache;",59,0.5655737704918032,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/SoftLimitMRUCache.java
"// early exit...","}",746,0.717948717948718,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)","private boolean betweenSpecialCase = false;       //Inside a BETWEEN ... AND ... expression",158,0.06711409395973154,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// or should it actually throw an exception?","old.unsetSession( session );",824,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...","ToOne toOneValue = ( ToOne ) value;",230,0.12352168199737187,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Property.java
"// The property is a component...","checkLhsIsNotCollection();",224,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// the ids are fully resolved, so compare them with isDirty(), not isModified()","return getIdentifierOrUniqueKeyType( session.getFactory() )",182,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/ManyToOneType.java
"//cant instantiate","}",51,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/proxy/HibernateProxyHelper.java
"//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);","addJoin( currentName, q.getFactory().getTypeResolver().getTypeFactory().manyToOne( entityName ), joinColumns );",115,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"//if it is a property of an embedded component, invoke on the "identifier"","if ( componentIdType!=null && componentIdType.isMethodOf(method) ) {",100,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/proxy/pojo/BasicLazyInitializer.java
"// otherwise:","return INVOKE_IMPLEMENTATION;",105,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/proxy/pojo/BasicLazyInitializer.java
"// starts with the name of a mapped class (new style)","if ( joinType != NONE ) throw new QueryException( "outer or full join must be followed by path expression" );",192,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/FromParser.java
"//treat it just like a new collection","addCollection( collection, collectionPersister );",850,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// skip finalize methods","return !( m.getParameterTypes().length == 0 && m.getName().equals( "finalize" ) );",53,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/proxy/pojo/javassist/JavassistLazyInitializer.java
"// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!","Serializable id = (Serializable) getIdentifierOrUniqueKeyType( session.getFactory() )",142,0.5454545454545454,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/ManyToOneType.java
"//do this work only at the very highest level of the load //don't let this method be called recursively","loadCounter++; //don't let this method be called recursively",893,0.7022900763358778,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
""//	public static JDBCException newJDBCException(String string, SQLException root, String sql) { //		string = string + "" ["" + sql + ']'; //		log.error(string, root); //		logExceptions(root); //		return new JDBCException(string, root, sql); //	} // //	public static JDBCException newJDBCException(String string, SQLException root) { //		log.error(string, root); //		logExceptions(root); //		return new JDBCException(string, root); //	}"","None",None,None,None
"//note that each iteration of the loop may add new elements","( (PersistentCollection) nonlazyCollections.remove( size - 1 ) ).forceInitialization();",898,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>","if ( isSingleRowLoader() && id != null ) {",1216,0.5064935064935064,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
""/* This can never happen because this rule will always eliminate the child NOT.			case NOT:				return x.getFirstChild();			// (NOT (NOT x) ) => (x)*/"","default:",232,0.673469387755102,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)","if ( persister.hasCache() ) {",74,0.2968197879858657,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/CollectionAction.java
"// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.","Enhancer.registerCallbacks(factory, null);",141,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/proxy/pojo/cglib/CGLIBLazyInitializer.java
"//no point doing this if NONE was requested","final boolean isVersionCheckNeeded = persister.isVersioned() &&",1378,0.6206896551724138,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// while constructor is running","if ( thisMethod.getName().equals( "getHibernateLazyInitializer" ) ) {",216,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/proxy/pojo/javassist/JavassistLazyInitializer.java
"//there is probably a row there, so try to update //if no rows were updated, we will find out","isRowToUpdate = update( id, fields, oldFields, rowId, includeProperty, j, oldVersion, object, sql, session );",2474,0.6956521739130435,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// note: interface is assumed to already contain HibernateProxy.class","try {",83,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/proxy/pojo/javassist/JavassistLazyInitializer.java
"//do nothing to avoid a lazy property initialization","else {",1316,0.39285714285714285,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// interfaces // arguments","//NOTE: unlike all other Loaders, this one is NOT",63,0.6470588235294118,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaLoader.java
"//Not called at runtime so doesn't matter if its slow :)","int[] sqlTypes = new int[getColumnSpan( mapping )];",98,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/ComponentType.java
"//TODO!","int loc = 0;",651,0.18421052631578946,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/ComponentType.java
"// Chop off the rest of the tree.","node.setType( SqlTokenTypes.SQL_TOKEN );",148,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/LiteralProcessor.java
"// Get the caller","Subject caller = getContextSubject();",58,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/secure/JACCPermissions.java
"// prefer re-generation of identity!","final EntityKey key = regenerate ?",141,0.5,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultReplicateEventListener.java
"// Get the caller principals","Subject caller = getContextSubject();",58,0.7368421052631579,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/secure/JACCPermissions.java
"// refresh doesn't cascade to uninitialized collections","return getLoadedElementsIterator(session, collectionType, collection);",206,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"//private static final Alias DEFAULT_ALIAS = new Alias(10, null);","private String tableName;",50,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/SimpleSelect.java
""/*public boolean isNonExistant(EntityKey key) {		return nonExistantEntityKeys.contains(key);	}*/"","* Do we already know that the entity does not exist in the",1052,0.6323529411764706,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().","renderNonScalarSelects( collectSelectExpressions(), fromClause );",230,0.6946107784431138,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
""/*public boolean isNonExistant(EntityUniqueKey key) {		return nonExistentEntityUniqueKeys.contains(key);	}*/"","public int getCascadeLevel() {",1060,0.6363636363636364,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"//special case ... this is the leaf of the containment graph, even though not immutable","}",260,0.9240506329113924,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/EntityType.java
"// iterate all the entities currently associated with the persistence context.","Iterator entities = IdentityMap.entries(entityEntries).iterator();",1152,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed","if ( args.size() == 1 ) {",71,0.3403441682600382,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/function/AbstractAnsiTrimEmulationFunction.java
"// does this entity entry pertain to the entity persister in which we are interested (owner)?","if ( persister.isSubclassEntityName( entityEntry.getEntityName() ) ) {",1157,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy","final String cacheRegionPrefix = settings.getCacheRegionPrefix() == null ? "" : settings.getCacheRegionPrefix() + ".";",277,0.6698113207547169,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"//check if the managed object is the parent","boolean found = isFoundInParent(",1161,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.","return;",2406,0.5901639344262295,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// otherwise, the proxy was pruned during the serialization process","}",1554,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast","return ( (PersistentCollection) collection ).queuedAdditionIterator();",462,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"// adds remove as a sort-of alias for delete...","STYLES.put( "delete-orphan", DELETE_ORPHAN );",278,0.7358490566037735,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadeStyle.java
"//return lhsPersister.getSubclassPropertyColumnNames(property);","return lhsPersister.getIdentifierColumnNames();",110,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/JoinHelper.java
"// saves / updates don't cascade to uninitialized collections","return getLoadedElementsIterator(session, collectionType, collection);",255,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"//EARLY EXIT","return;",601,0.8461538461538461,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
"// create our own copy of the user-supplied tuplizer impl map","Map userSuppliedTuplizerImpls = new HashMap();",59,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityEntityModeToTuplizerMapping.java
"//if the identifier is quoted, remove the quotes","unquoted = unquoted.substring( 1, unquoted.length()-1 );",82,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/Alias.java
"// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)","final String entityName = collectionType.getAssociatedEntityName( eventSource.getFactory() );",451,0.550561797752809,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Cascade.java
"//truncate the identifier to the max alias length, less the suffix length","unquoted = unquoted.substring(0, length);",86,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/Alias.java
"//full joins are not supported.. yet!","if (joinType==JoinFragment.FULL_JOIN ) throw new UnsupportedOperationException();",44,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/Sybase11JoinFragment.java
""//		 You may still have other ResultSets or update counts left to process here //		 but you can't do it now or the ResultSet you just got will be closed"","return ps.getResultSet();",218,0.6842105263157895,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/AbstractTransactSQLDialect.java
"// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1","buf.append( " else -1" );								//$NON-NLS-1",53,0.7777777777777778,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/DerbyCaseFragment.java
"// properly handle property-ref-based associations","rootPropertyName = assocType.getLHSPropertyName();",1474,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters","if ( StringHelper.isNotEmpty(outerJoinsAfterWhere) ) {",74,0.8513513513513513,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/Select.java
"// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy","HashSet proxyInterfaces = new HashSet();",117,0.7292817679558011,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/PojoEntityTuplizer.java
"// add another (inner) nested select // add the main query // close off the inner nested select","None",None,None,None
""//		origin.addDestination( destination ); // This was the cause of HHH-242 //		origin.setType( FROM_FRAGMENT );			// Set the parent node type so that the AST is properly formed. // The destination node will have all the FROM text. // The parent node is a collection join too (voodoo - see JoinProcessor)"","// Add the query spaces.",335,0.26262626262626265,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// then handle any user-defined entity modes...","if ( !userSuppliedTuplizerImpls.isEmpty() ) {",116,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityEntityModeToTuplizerMapping.java
"// strip off any leading 'and' token","String tmpOuterJoinsAfterWhere = outerJoinsAfterWhere.trim();",133,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/Select.java
"// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available","Tuplizer pojoTuplizer;",75,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityEntityModeToTuplizerMapping.java
"// if the condition is not already there...","if (",123,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/QueryJoinFragment.java
"// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop","log.info( "encountered CME attempting to release batcher; assuming cause is tx-timeout scenario and ignoring" );",345,0.18738049713193117,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
"//dontSpace.add("'");","DONT_SPACE_TOKENS.add(".");",49,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/QuerySelect.java
""//	public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {"","public ComponentMetamodel(Component component) {",57,0.9887640449438202,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/component/ComponentMetamodel.java
"//for MySQL","DONT_SPACE_TOKENS.add(")");",72,0.425531914893617,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/QuerySelect.java
"// Detect discriminator values...","if ( value instanceof Class ) {",535,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
""/**	 * Set a custom entity resolver. This entity resolver must be	 * set before addXXX(misc) call.	 * Default value is {@link org.hibernate.util.DTDEntityResolver}	 *	 * @param entityResolver entity resolver to use	 */"","public void setEntityResolver(EntityResolver entityResolver) {",334,0.41841004184100417,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Configuration.java
"// Handle any filters applied to this collection","filterHelper = new FilterHelper( collection.getFilterMap(), dialect, factory.getSqlFunctionRegistry() );",568,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//handle a property-ref","String propertyRefTable = lhsPersister.getPropertyTableName(propertyName);",149,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/JoinHelper.java
"//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)","callback = jdbcContext.registerCallbackIfNecessary();",114,0.3277310924369748,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/transaction/JTATransaction.java
"//HashMap columnsUnique = new HashMap();","HashSet columnsUnique = new HashSet();",139,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/SelectFragment.java
"//null caused some problems","buf.append( buf2.toString() );",55,0.7384615384615385,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/HSQLCaseFragment.java
"// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join","if ( elem.getFromClause() != elem.getOrigin().getFromClause() ||",282,0.45353159851301117,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// cascade the refresh prior to refreshing this entity","refreshedAlready.put(object, object);",125,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultRefreshEventListener.java
"//not sure if this would ever be null but wanted to be careful","if (region != null) {",68,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/stat/ConcurrentSecondLevelCacheStatisticsImpl.java
"//even on inverse="true"","public long getCollectionRemoveCount();",174,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/stat/Statistics.java
"// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information","boolean alwaysDirtyCheck = type.isAssociationType() &&",148,0.5754716981132075,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/PropertyFactory.java
"// register hibernate types for default use in scalar sqlquery type auto detection","registerHibernateType( Types.BIGINT, Hibernate.BIG_INTEGER.getName() );",235,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// If true then execute db updates, otherwise just generate and display updates","boolean doUpdate = true;",103,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tool/hbm2ddl/SchemaUpdate.java
"// SQLFunction implementation","None",None,None,None
"// we only release the connection","if ( connection != null ) {",69,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tool/hbm2ddl/SuppliedConnectionProviderConnectionHelper.java
"//we only check the version when _upgrading_ lock modes","checkVersion( i, persister, key.getIdentifier(), object, rs, session );",1387,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// deprecated option...","private boolean verbose;",55,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tool/instrument/BasicInstrumentationTask.java
"// only carry on if the method has no parameters","None",None,None,None
"//woops we got an instance of another class hierarchy branch","throw new WrongClassException(",1579,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// COMPOSITE-ID","bindCompositeId( subnode, entity, mappings, inheritedMetas );",385,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// Create an OuterJoinGenerator for this dialect.","return new CacheJoinFragment();",650,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback","catch (SystemException se) {",76,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/transaction/CacheSynchronization.java
"// we need to step through the rows one row at a time (slow)","for ( int m = 0; m < firstRow; m++ ) rs.next();",1608,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",926,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// Create an DotNode AST for the path and resolve it.","FromElement fromElement = evaluateFromElementPath( path, classAlias );",133,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"//its already loaded so don't need to hydrate it","instanceAlreadyLoaded(",694,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// orphans should be deleted during delete","return true;",152,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"// swallow it, and continue to roll back JTA transaction","log.error( "could not close session during rollback", e );",191,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/transaction/JTATransaction.java
""// here, we have two possibilities: // 		1) the property-name matches the explicitly identifier property name //		2) the property-name matches the implicit 'id' property name"","if ( EntityPersister.ENTITY_ID.equals( propertyName ) ) {",529,0.32967032967032966,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// so the transaction is already rolled back, by JTA spec","log.error( "JTA commit failed", e );",159,0.8392857142857143,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/transaction/JTATransaction.java
"// we found a collection element in the result set","if ( log.isDebugEnabled() ) {",1110,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// this method is a noop if there is a Synchronization!","if ( callback ) {",221,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/transaction/JTATransaction.java
"// register the standard dialect resolver","DIALECT_RESOLVERS.addResolver( new StandardDialectResolver() );",54,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/resolver/DialectFactory.java
"// why is all others non final ?","private String processedSQL;",75,0.5154639175257731,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/QueryParameters.java
"// even though we might find a pre-existing element by join path, we may not be able to reuse it...","None",None,None,None
"// HELLA IMPORTANT OPTIMIZATION!!!","processedPositionalParameterValues = getPositionalParameterValues();",463,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/QueryParameters.java
""/*return that.type.equals(type) && 			EqualsHelper.equals(that.value, value);*/"","return type.getReturnedClass() == that.type.getReturnedClass() &&",72,0.5871559633027523,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/TypedValue.java
"//null child could occur for no from clause in a filter","cacheSelectTokens = false;",118,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/ClauseParser.java
"// The 'from element' that the property is in.","checkSubclassOrSuperclassPropertyReference( lhs, propName );",176,0.6551724137931034,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping","resultSet.previous();",504,0.4630541871921182,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// WebSphere, however, is not a sane JEE/JTA container...","return new Integer( transaction.hashCode() );",84,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/transaction/WebSphereExtendedJTATransactionLookup.java
"// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.","// the current batch number is the latest batch for this entity type.",673,0.6593406593406593,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"// for sane JEE/JTA containers, the transaction itself functions as its identifier...","return transaction;",68,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/transaction/JNDITransactionManagerLookup.java
"// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...","Constructor[] ctors = converterClass.getDeclaredConstructors();",111,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/exception/SQLExceptionConverterFactory.java
"//swallow, the transaction was finished","}",117,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/transaction/JDBCTransaction.java
"//will be ignored, using the existing Entry instead",");",98,0.9565217391304348,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractReassociateEventListener.java
"// 60 seconds","}",128,0.6875,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-infinispan/src/main/java/org/hibernate/cache/infinispan/impl/BaseRegion.java
"// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"","String[] propertyColumnNames = getPropertyColumnNames( i );",2003,0.6787878787878788,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Don't hold a transactional lock for this","Transaction tx = suspend();",196,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/BasicRegionAdapter.java
"// some collections are not lazy:","if ( initializeImmediately( entityMode ) ) {",645,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"// Fix up the resident flag","if (regionRoot != null && regionRoot.isValid() && !regionRoot.isResident())",274,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/BasicRegionAdapter.java
"// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?","return true;",602,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~","None",None,None,None
"//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries","SessionFactoryImplementor factory = criteriaQuery.getFactory();",111,0.7796610169491526,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/criterion/SubqueryExpression.java
"// Set the attributes of the property reference expression.","String propName = property.getText();",166,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// the current batch number is the latest batch for this entity type.","Integer latestBatchNumberForType = ( Integer ) latestBatches.get( entityName );",677,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"//take a snapshot","TypeHelper.deepCopy(",212,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/TwoPhaseLoad.java
"//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables","None",None,None,None
"// Never evict this node","newRoot.setResident(true);",214,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/BasicRegionAdapter.java
"// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by","if ( fromElement.getQueryableCollection().hasOrdering() ) {",646,0.5897435897435898,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// Create the join element under the from element.","int joinType = JoinFragment.INNER_JOIN;",346,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved","boolean changed = ! persister.getVersionType().isSame(",446,0.2966751918158568,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"// Moved here from SelectClause [jsd]","}",64,0.5871559633027523,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/AbstractSelectExpression.java
"// pre-determine and cache the hashcode","int hashCode = queryString.hashCode();",64,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/query/sql/NativeSQLQuerySpecification.java
"// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)","case NOT_BETWEEN:",227,0.8860759493670886,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// Make sure the root node for the region exists and  // has a DataVersion that never complains","newRoot = jbcCache.getRoot().getChild( regionFqn );",200,0.7058823529411765,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/BasicRegionAdapter.java
""//			ps.close(); //just close it; do NOT try to return it to the pool! //NOTE: early exit!"","return; //NOTE: early exit!",303,0.8592592592592593,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
"// map of EntityMode -> Tuplizer","None",None,None,None
"//Now write the values of fields onto the prepared statement","index = dehydrate( id, fields, rowId, includeProperty, propertyColumnUpdateable, j, update, session, index );",2539,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// this is a virtual id property...","return new IdentifierProperty(",75,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/PropertyFactory.java
"// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)","public String getCurrentTimestampSelectString() {",132,0.6702702702702703,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/SQLServerDialect.java
"//this one needed only for guessEntityMode()","}",128,0.5735294117647058,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/PojoInstantiator.java
""/* will check current level if some of them are not null		 * or sublevels if they exist		 */"","boolean[] nullability = compType.getPropertyNullability();",175,0.743801652892562,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Nullability.java
"// Build the dynamic-map tuplizer...","Tuplizer dynamicMapTuplizer;",65,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityEntityModeToTuplizerMapping.java
"// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...","if ( lockMode==LockMode.PESSIMISTIC_FORCE_INCREMENT) {",81,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/PointbaseDialect.java
"// then dom4j tuplizer, if dom4j representation is available","Tuplizer dom4jTuplizer;",90,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityEntityModeToTuplizerMapping.java
"// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)","EntityEntry entityEntry = session.getPersistenceContext().getEntry(object);",152,0.47540983606557374,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ForeignKeys.java
"// do the work","entry.setCurrentPersister(null);",125,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Collections.java
"// if its an uninitialized proxy it can't be transient","LazyInitializer li = ( (HibernateProxy) object ).getHibernateLazyInitializer();",127,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ForeignKeys.java
"// We've been here before","throw new HibernateException(",184,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Collections.java
"//return the id, so we can use it to reset the proxy id //return result;","@Override",97,0.36619718309859156,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/envers/src/test/java/org/hibernate/envers/test/integration/hashcode/WikiPage.java
"// return false here, as most databases do not properly support this construct...","return false;",1784,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// put the "standard" tuplizers into the tuplizer map first","if ( pojoTuplizer != null ) {",105,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityEntityModeToTuplizerMapping.java
"// hit the database, after checking the session cache for a snapshot","Object[] snapshot = session.getPersistenceContext().getDatabaseSnapshot(",210,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ForeignKeys.java
"// found a ctor, but it was not publicly accessible so try to request accessibility","None",None,None,None
"// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).","parentAsDotNode = ( DotNode ) parent;",353,0.5439330543933054,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
""//	private final SessionFactoryImplementor sessionFactory;"","private final String name;",72,0.9541284403669725,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityMetamodel.java
"// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object","if ( persister.hasCollections() ) {",162,0.6547619047619048,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// cached for efficiency...","private final int propertySpan;",53,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/component/ComponentMetamodel.java
"// sql server just returns automatically","}",209,0.875,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/AbstractTransactSQLDialect.java
""//		this.sessionFactory = sessionFactory;"","name = persistentClass.getEntityName();",129,0.9210526315789473,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityMetamodel.java
"// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",1175,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"//it was not embedded, so the argument is just an id","return (Serializable) entityOrId;",132,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/Dom4jEntityTuplizer.java
"// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance","entityState = DETACHED;",218,0.34057971014492755,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"//where fragment must be empty!","}",95,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/ANSIJoinFragment.java
"// or its key changed","entry.getLoadedKey(),",234,0.6071428571428571,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Collections.java
""//					int parameterStart = getWalker().getNumberOfParametersInSetClause(); //					List allParams = getIdSelectParameterSpecifications(); //					Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();"","Iterator whereParams = getIdSelectParameterSpecifications().iterator();",134,0.49146757679180886,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/exec/MultiTableUpdateExecutor.java
"// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",1427,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// we will need to remove ye olde entries","if ( entry.isDorecreate() ) {",260,0.6534653465346535,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Collections.java
"// add the current fragment to the THETA_JOINS node","thetaJoins.addChild(fragment);",158,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SyntheticAndFactory.java
"// force initialize!","}",263,0.4675324675324675,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Collections.java
"// lock doesn't cascade to uninitialized collections","return getLoadedElementsIterator(session, collectionType, collection);",182,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"//return currentId;","None",None,None,None
"//unquotedIdentifierColumnName = null;","identifierGenerator = null;",444,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//reset the id","Serializable result = entityMetamodel.getIdentifierProperty()",448,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/AbstractEntityTuplizer.java
"//addInitializedCollection(collection, persister, id);","getFilterQueryPlan( collection, queryString, null, false ).getParameterMetadata()",1395,0.3492063492063492,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// CollectionPropertyMapping processes everything except 'index'.","if ( COLLECTION_INDEX_LOWER.equals( key ) ) {",59,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/CollectionProperties.java
"//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"","return li.getSession()==this;",1746,0.48366013071895425,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"//reset the version","VersionProperty versionProperty = entityMetamodel.getVersionProperty();",453,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/AbstractEntityTuplizer.java
"// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.","SqlFragment discrimNode = ( SqlFragment ) create( SQL_TOKEN, whereFragment );",181,0.30238726790450926,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SyntheticAndFactory.java
"// the default is to simply not lazy fetch properties for now...","return false;",617,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/AbstractEntityTuplizer.java
"// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'","if ( ! entityMetamodel.hasNonIdentifierPropertyNamedId() ) {",1685,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// else if it's elements changed","entry.setDoupdate(true);",268,0.574468085106383,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Collections.java
""//		 This assumes you will want to ignore any update counts "","while ( !isResultSet && ps.getUpdateCount() != -1 ) {",214,0.98,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/AbstractTransactSQLDialect.java
"//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES","// session-start/post-flush persistent state",52,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionEntry.java
"// now rebuild the insertions list. There is a batch for each entry in the name list.","for ( int i = 0; i < actionBatches.size(); i++ ) {",652,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...","if ( original instanceof PersistentCollection ) {",511,0.3185840707964602,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"// session-start/post-flush persistent state","private Serializable snapshot;",54,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionEntry.java
"// allow the CollectionSnapshot to be serialized","private String role;",56,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionEntry.java
"// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners","for ( int i = 0; i < queryReturns.length; i++ ) {",156,0.6308724832214765,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryReturnProcessor.java
"// Add the second join, the one that ends in the destination table.","JoinSequence joinSequence = createJoinSequence( roleAlias, joinType );",444,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.","// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here",250,0.6473429951690821,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// ATTRIBUTES USED ONLY DURING FLUSH CYCLE","// during flush, we navigate the object graph to",64,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionEntry.java
"// Create SQL_TOKEN nodes for the columns.","}",359,0.7128712871287128,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// "current" means the reference that was found during flush()","private transient CollectionPersister currentPersister;",77,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionEntry.java
"// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...","if ( lockMode==LockMode.PESSIMISTIC_FORCE_INCREMENT) {",335,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"// ignore this row of results! Note the early exit","}",122,0.8817204301075269,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/CollectionLoadContext.java
"// Add the new node to the map so that we don't create it twice.","}",370,0.6410256410256411,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromClause.java
""//		return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();"",".getJdbcSupport()",467,0.23333333333333334,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/Hibernate.java
"//not final because proxy factory creation can fail","private final boolean hasCascades;",109,0.822429906542056,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityMetamodel.java
"// Register the FromElement with the FROM clause, now that we have the names and aliases.","fromClause.registerFromElement( this );",154,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElement.java
"// superclass entity-name","private final boolean explicitPolymorphism;",119,0.6133333333333333,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityMetamodel.java
"// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)","None",None,None,None
"// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private final String[] propertyNames;",84,0.971830985915493,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityMetamodel.java
"// cascade-save to collections AFTER the collection owner was saved","source.getPersistenceContext().incrementCascadeLevel();",472,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractSaveEventListener.java
"// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...","SqlFragment fragment = ( SqlFragment ) lhs1;",168,0.6875,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/BinaryLogicOperatorNode.java
"// "loaded" means the reference that is consistent  // with the current database state","private transient CollectionPersister loadedPersister;",59,0.7478260869565218,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionEntry.java
"// cache the actual id of the object, not the value of the // property-ref, which might not be initialized","Object id = ForeignKeys.getEntityIdentifierIfNotUnsaved( getAssociatedEntityName(), value, session );",98,0.6917293233082706,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/SpecialOneToOneType.java
"//init the aliases, after initing the constructornode","initAliases(selectExpressions);",173,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed","return rs;",359,0.6923076923076923,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/DB2Dialect.java
"// Multi-param string dialect functions...","registerFunction( "concat", new VarArgsSQLFunction(Hibernate.STRING, "", "||", "") );",137,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Oracle9Dialect.java
"// during flush, we navigate the object graph to // collections and decide what to do with them","private transient boolean reached;",66,0.6779661016949152,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionEntry.java
"// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public void save(Object obj, Serializable id) throws HibernateException {",689,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// The 'from element' that represents the elements of the collection.","setFromElement( fromElement );",127,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IndexNode.java
"// legacy behavior (with no abstract attribute specified)","isAbstract = persistentClass.hasPojoRepresentation() &&",273,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityMetamodel.java
"// Constructors are always considered scalar results.","return true;",199,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/ConstructorNode.java
"// Get ready to start adding nodes.","int size = fromElements.size();",180,0.5,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"//use the id column alias","if ( keyColumns == null ) {",71,0.4117647058823529,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/ForUpdateFragment.java
"// Collection Types:","None",None,None,None
"// #3 - note that this is also true of "datetime - :param"...","if ( lhsIsDateTime && !rhsIsDateTime ) {",177,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/BinaryArithmeticOperatorNode.java
"// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)","if (isVersionCheckNeeded) {",1383,0.5658536585365853,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"//note: this affects the return value!","target=instantiateResult(original);",108,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/ArrayType.java
"// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...","oos.defaultWriteObject();",308,0.25820568927789933,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/JDBCContext.java
"// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated","None",None,None,None
"// Generate the inner join -- The elements need to be joined to the collection they are in.","FromElement fromElement = collectionNode.getFromElement();",106,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IndexNode.java
"// otherwise, perform a "deep equivalence" check...","None",None,None,None
"// Need to account for allowable '_' within the variant","String variant = "";",65,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/descriptor/java/LocaleTypeDescriptor.java
"// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.","if ( SqlNode.class.isAssignableFrom( lhs.getClass() ) ) {",58,0.6095238095238096,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/InLogicOperatorNode.java
"// If there is no WHERE node, make one.","if ( whereClause == null ) {",72,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/AbstractRestrictableStatement.java
"// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch","return loaded;",271,0.8043478260869565,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/StatelessSessionImpl.java
"// Add the type to the list of returned sqlResultTypes.","fromElement.setIncludeSubclasses( true );",215,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// create one","if ( log.isTraceEnabled() ) {",141,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/CollectionLoadContext.java
"// persists don't cascade to uninitialized collections","return CascadingAction.getAllElementsIterator(session, collectionType, collection);",332,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"//lobs cannot be compared","None",None,None,None
"//Blobs are ignored by merge()","None",None,None,None
"// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.","getFromClause().addChild( this );	// Not sure if this is will fix everything, but it works.",398,0.6577777777777778,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElement.java
"//value is the entity name","}",119,0.6875,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/MetaType.java
"// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)","if ( getType() == HqlSqlTokenTypes.PLUS ) {",170,0.4460431654676259,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/BinaryArithmeticOperatorNode.java
"//optimization","getLoadedPersister() != null &&",173,0.5490196078431373,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionEntry.java
"// the map of batch numbers to EntityInsertAction lists","private HashMap actionBatches = new HashMap();",608,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"//optimization //optimization","None",None,None,None
"// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query","else if ( ".".equals( token ) ) {",142,0.5235602094240838,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"//re-snapshot","}",245,0.3939393939393939,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionEntry.java
"// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...","throw new HibernateException( "LockMode.FORCE is currently not supported for generated version properties" );",1287,0.7083333333333334,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// for convenience to save some lookups","private final EntityMode entityMode;",55,0.616822429906542,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/EntityEntry.java
"// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx","Transaction tx = suspend();",120,0.5583756345177665,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/BasicRegionAdapter.java
"//NOTE: this is not updated when properties are fetched lazily!","private final transient Object rowId;",60,0.6923076923076923,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/EntityEntry.java
"// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.","if (!(isResolved() && nakedPropertyRef)) {",58,0.2913165266106443,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"//EARLY EXIT!","return;",601,0.8888888888888888,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
""//	public List getCollectionAliases() { //		return collectionAliases; //	} // //	/*public List getCollectionOwners() { //		return collectionOwners; //	}*/ // //	public List getCollectionOwnerAliases() { //		return collectionOwnerAliases; //	} // //	public List getCollectionPersisters() { //		return collectionPersisters; //	} // //	public Map getAlias2Persister() { //		return alias2Persister; //	} // //	/*public boolean isCollectionInitializer() { //		return isCollectionInitializer; //	}*/ // ////	public List getPersisters() { ////		return persisters; ////	} // //	public Map getAlias2OwnerAlias() { //		return alias2OwnerAlias; //	} // //	public List getScalarTypes() { //		return scalarTypes; //	} //	public List getScalarColumnAliases() { //		return scalarColumnAliases; //	} // //	public List getPropertyResults() { //		return propertyResults; //	} // //	public List getCollectionPropertyResults() { //		return collectionResults; //	} // // //	public Map getAlias2Return() { //		return alias2Return; //	}"","* Types of the return values of an <tt>iterate()</tt> style query.",285,0.03655913978494624,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();","final Serializable key = getKeyOfOwner(owner, session);",248,0.4557823129251701,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"//xml is the entity name","}",124,0.8,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/MetaType.java
"//named query parameter","q.addNamedParameter( token.substring( 1 ) );",407,0.4158415841584158,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"//tolerates nulls","}",456,0.2601626016260163,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/EntityType.java
"// check to see if our "propPath" actually // represents a property on the persister","propertyType = fromElement.getPropertyType(getText(), propertyPath);",228,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"// Add the token to the AST.","ASTPair currentAST = new ASTPair();",138,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// Use the table fromElement and the property name to get the array of column names.","String tableAlias = getLhs().getFromElement().getTableAlias();",131,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// Set up the cache factory","if (buildCaches && jbcFactory == null) {",316,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/builder/MultiplexingCacheInstanceManager.java
"// we need to strip off the embedded parens so that sql-gen does not double these up","String subselect = selectColumns[0].trim();",49,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/CollectionFunction.java
"//memory optimization","}",136,0.7017543859649122,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/EntityEntry.java
"/*sqlResultTypeList,*/","}",240,0.5116279069767442,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).","JoinSequence joinSequence = getSessionFactoryHelper()",443,0.7761194029850746,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// metaType is assumed to be single-column type","if ( settable==null || settable[0] ) {",152,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/AnyType.java
"// End unit of work","HibernateUtil.getSessionFactory()",56,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/web/EventManagerServlet.java
"// ROW ID","Attribute rowidNode = node.attribute( "rowid" );",370,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//MULTITABLES","final int idColumnSpan = getIdentifierColumnSpan();",145,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/JoinedSubclassEntityPersister.java
""//			final List extendsQueue,"","None",None,None,None
"// Make sure JBC doesn't look one up","cacheConfig.setTransactionManagerLookupClass(null);",482,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/builder/MultiplexingCacheInstanceManager.java
"// Get all the select expressions (that we just generated) and render the select.","SelectExpression[] selectExpressions = collectSelectExpressions();",303,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// visit width-first, then depth","visitPropertySpecNodes( propertyNode.getNextSibling(), types );",184,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IntoClause.java
"// If the uresolved property path isn't set yet, just use the property name.","if ( propertyPath == null ) {",169,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// Look through the FromElement's children to find any collections of values that should be fetched...","ASTIterator iter = new ASTIterator( fromElement );",433,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...","return ForeignKeyDirection.FOREIGN_KEY_FROM_PARENT;",311,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/AnyType.java
"// collections of values","q.addFromCollection( collectionName, collectionRole, joinSequence );",484,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"// copied from Session:","public EntityMode getEntityMode();",308,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/SessionImplementor.java
"// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.","String tableAlias = fromClause.getAliasGenerator().createName( entityPersister.getEntityName() );",439,0.5488721804511278,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// this should not happen since the DTD prevents it","throw new MappingException( "Could not parse version unsaved-value: " + versionUnsavedValue );",132,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/UnsavedValueFactory.java
"// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing","whereFragment = StringHelper.replace( whereFragment, persister.generateFilterConditionAlias( alias ) + ".", "" );",177,0.7070707070707071,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SyntheticAndFactory.java
"// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many","String manyToManyFilter = ( ( QueryableCollection ) last )",182,0.5872340425531914,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/JoinSequence.java
"// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT","if ( fromElement.getType() == JOIN_FRAGMENT &&",166,0.593939393939394,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/JoinProcessor.java
"//check basic level one nullablilty","throw new PropertyValueException(",99,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Nullability.java
"// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.","if (localOnly)",70,0.23923444976076555,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-infinispan/src/main/java/org/hibernate/cache/infinispan/query/QueryResultsRegionImpl.java
"//values is not null and is checkable, we'll look deeper","String breakProperties = checkSubElementsNullability( propertyTypes[i], value );",109,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Nullability.java
"// Possibly handle :something parameters for the query ?","return result.toString();",182,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryParser.java
"//for non null args, check for components and elements containing components","if ( propertyType.isComponentType() ) {",138,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Nullability.java
"// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:","if ( value instanceof Collection ) {",466,0.1643835616438356,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/entitymanager/src/main/java/org/hibernate/ejb/metamodel/AttributeFactory.java
"//cache the hashcode","}",66,0.5217391304347826,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionKey.java
""/*public PropertyProjection project() {		return Projections.property(getPropertyName());	}*/"","public PropertyProjection group() {",163,0.5714285714285714,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/criterion/Property.java
"//persistent collections may have components","CollectionType collectionType = (CollectionType) propertyType;",144,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Nullability.java
"// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).","// Don't hold the JBC node lock throughout the tx, as that",140,0.13728129205921938,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/timestamp/ClusteredConcurrentTimestampsRegionImpl.java
"//test out the optimizer:","Object instance = fastClass.newInstance();",67,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BytecodeProviderImpl.java
""//		registerColumnType( Types.VARCHAR, 16777215, ""mediumtext"" );"","None",None,None,None
"// IDENT might be the name of a class.","Queryable queryable = walker.getSessionFactoryHelper().findQueryableUsingImports( constant.getText() );",107,0.9090909090909091,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/LiteralProcessor.java
"// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster","// Add a zero (or quite low) timeout option so we don't block.",63,0.26,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-infinispan/src/main/java/org/hibernate/cache/infinispan/query/QueryResultsRegionImpl.java
"//TODO!!!","int loc = 0;",651,0.23076923076923078,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/ComponentType.java
"// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.","fromElements = new ArrayList();",109,0.26865671641791045,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/JoinProcessor.java
"//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only","None",None,None,None
"//arbitrary on clause ignored!!","addJoin( tableName, alias, fkColumns, pkColumns, joinType );",108,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/OracleJoinFragment.java
"//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only","None",None,None,None
"// from javax.naming.Referenceable","public Reference getReference() throws NamingException {",755,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"// both are Timestamps","int nn1 = n1 % 1000000;",108,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/descriptor/java/JdbcTimestampTypeDescriptor.java
"// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!","SelectExpression[] selectExpressions = collectSelectExpressions();",138,0.44086021505376344,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// at least one is a plain old Date","return true;",114,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/descriptor/java/JdbcTimestampTypeDescriptor.java
"//swallow it (the transaction _was_ successful or successfully rolled back)","}",229,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/transaction/JDBCTransaction.java
"//check for all components values in the collection","CompositeType componentType = (CompositeType) collectionElementType;",148,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Nullability.java
"// after *all* persisters and named queries are registered","Iterator iter = entityPersisters.values().iterator();",361,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"//do the test","final Object[] values = compType.getPropertyValues( value, session.getEntityMode() );",180,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Nullability.java
"// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public boolean supportsLimit() {",587,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// If close() is called, guarantee unbind()","if ( "close".equals( method.getName()) ) {",306,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/context/ThreadLocalSessionContext.java
"// or BYTE // or TEXT? // or MONEY","None",None,None,None
"//noop","}",333,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/ReadWriteCache.java
""//			        ( implied && DotNode.useThetaStyleImplicitJoins ) ) {"","DotNode.useThetaStyleImplicitJoins ) {",287,0.9811320754716981,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// if the corresponding SQL value is NULL, the reader we got is NULL as well","if (charReader==null) return null;",54,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/AbstractLongStringType.java
"// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.","if ( propertyType == null ) {",212,0.8540540540540541,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// Fetch Reader content up to the end - and put characters in a StringBuffer","StringBuffer sb = new StringBuffer();",57,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/AbstractLongStringType.java
"// Return StringBuffer content as a large String","return sb.toString();",79,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/AbstractLongStringType.java
"// The where clause was added to eliminate this statement from Brute Force Searches.","return  "select permuted_id('NEXT',31) from rdms.rdms_dummy where key_col = 1 ";",278,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"//or Types.LONGVARCHAR?","None",None,None,None
"//TODO","// we should read annotations from fields, even though the access type is "property"?",69,0.1348314606741573,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/envers/src/test/java/org/hibernate/envers/test/integration/accesstype/MixedAccessTypeEntity.java
"// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists","return putFromLoad(key, value, txTimestamp, version);",89,0.48868778280542985,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-infinispan/src/main/java/org/hibernate/cache/infinispan/access/TransactionalAccessDelegate.java
"// Forcefully remove leading ands from where fragments; the grammar will // handle adding them","if ( whereFragment.startsWith( "and" ) ) {",88,0.8732394366197183,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SyntheticAndFactory.java
"// for non-arrays, we don't need to know the element class //elementType.returnedClass();","elementClass = null; //elementType.returnedClass();",517,0.7619047619047619,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested","definition.addQueryReturn( result );",175,0.16352201257861634,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/annotations/ResultsetMappingSecondPass.java
"//different nullability rules for pk/fk","}",592,0.8641975308641975,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/ComponentType.java
"// if the types report logical equivalence, return true...","return true;",219,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IntoClause.java
"//cache this","Object val = propertyTypes[i].hydrate( rs, range, session, owner );",588,0.2972972972972973,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/ComponentType.java
"// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias","if ( isCorrelation() ) {",363,0.18484288354898337,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementType.java
"//only really need new array during semiresolve!","for ( int i = 0; i < values.length; i++ ) {",611,0.6363636363636364,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/ComponentType.java
"// classic translator does not support collection of ordinal // param metadata","return false;",1169,0.8739495798319328,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"//unwrap it","object = li.getImplementation();",135,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ForeignKeys.java
"// an unfetched association can only point to // an entity that already exists in the db","return false;",192,0.6909090909090909,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ForeignKeys.java
"// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases","boolean lhsIsDateTime = isDateTimeType( lhType );",152,0.12481426448736999,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/BinaryArithmeticOperatorNode.java
"// let the interceptor inspect the instance to decide","final boolean registerSynchronization = owner.isAutoCloseSessionEnabled()",96,0.39285714285714285,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/JDBCContext.java
""/*	 * The types represented in the SQL result set.	 *	 * @return The types represented in the SQL result set.	 */"","/*public Type[] getSqlResultTypes() {",84,0.5757575757575758,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// let the persister inspect the instance to decide","EntityPersister persister = session.getEntityPersister(entityName, entity);",201,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ForeignKeys.java
"// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",56,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CascadingAction.java
"//TODO!!!!!!!","int loc = 0;",651,0.3170731707317073,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/ComponentType.java
"// Create a new FILTERS node as a parent of all filters","filters = create( FILTERS, "{filter conditions}" );",134,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SyntheticAndFactory.java
"// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.","return false;",193,0.5764705882352941,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/JDBCContext.java
"// Establish the region root node with a non-locking data version","DataVersion version = optimistic ? NonLockingDataVersion.INSTANCE : null;",150,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/BasicRegionAdapter.java
"//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;","* Set the transaction timeout for any transaction started by",119,0.43478260869565216,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/Transaction.java
"//nothing to do","}",2005,0.5909090909090909,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// we use the assumed value, if there is one, to avoid hitting // the database","if (assumed!=null) return assumed.booleanValue();",206,0.8849557522123894,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ForeignKeys.java
"// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...","if ( isTransient(entityName, object, Boolean.FALSE, session) ) {",239,0.6276595744680851,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ForeignKeys.java
"//int count = 0;","int stringLength = string.length();",312,0.9166666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/StringHelper.java
"// putfield // new value of the field","code.addOpcode(Opcode.PUTFIELD);",315,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"//not really necessary, I guess...","Element parent = container.getParent();",147,0.7407407407407407,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/AbstractType.java
"//Clobs are ignored by merge() operation","None",None,None,None
"//the first key found after the given key","}",187,0.8607594936708861,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/BatchFetchQueue.java
"// collections cannot be compared","}",120,0.8787878787878788,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"//remember the uk value","//This solution would allow us to eliminate the owner arg to disassemble(), but",246,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);","continuation = false;",163,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly","if (cached==null) {",265,0.6515151515151515,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"// collections don't dirty an unversioned parent entity","// TODO: I don't really like this implementation; it would be better if",303,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"// return false;","for (T obj : objects) {",64,0.9230769230769231,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/envers/src/test/java/org/hibernate/envers/test/tools/TestTools.java
"// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception","if ( foreignKeyPropertyName == null ) {",351,0.6950354609929078,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"//NOTE: we avoid joining to the next table if the named property is just the foreign key value","//if its "id"",199,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"// the key is the owning entity itself, so get the ID from the key","ownerId = ownerPersister.getIdentifier( key, session );",406,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"//checkForEnd = false;","}",201,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/BatchFetchQueue.java
"//ignore subselect keywords","if ( isClauseStart ) {",58,0.5882352941176471,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/ClauseParser.java
"// copy elements into newly empty target collection","Type elemType = getElementType( session.getFactory() );",504,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"//end of array, start filling again from start","if ( end != -1 ) {",209,0.9512195121951219,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/BatchFetchQueue.java
"// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection","Object result = target == null || target == original ? instantiateResult( original ) : target;",569,0.717948717948718,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"//we ran out of keys to try","}",217,0.7924528301886793,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/BatchFetchQueue.java
"// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...","return instantiate( -1 );",537,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"//the first id found after the given id","return ids;",246,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/BatchFetchQueue.java
"//we ran out of ids to try","}",263,0.8,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/BatchFetchQueue.java
"// get the elements back into the target making sure to handle dirty flag","boolean wasClean = PersistentCollection.class.isInstance( target ) && !( ( PersistentCollection ) target ).isDirty();",578,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"// check if collection is currently being loaded","PersistentCollection collection = persistenceContext.getLoadContexts().locateLoadingCollection( persister, key );",630,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"// check if it is already completely loaded, but unowned","collection = persistenceContext.useUnownedCollection( new CollectionKey(persister, key, entityMode) );",635,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"// initialize this collection","log.trace( "collection not yet initialized; initializing" );",125,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/CollectionLoadContext.java
"// create a new collection wrapper, to be initialized later","collection = instantiate( session, persister, key );",639,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"// Some JDBC drivers erroneously return an empty array here for a null DB value :/","None",None,None,None
"//cannot batch fetch by unique key (property-ref associations)","if ( uniqueKeyPropertyName == null && id != null ) {",156,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/ManyToOneType.java
"// we already know current is not null...","return true;",179,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/ManyToOneType.java
"//the owner of the association is not the owner of the id","if ( isNotEmbedded(session) ) return id;",115,0.5257142857142857,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/SpecialOneToOneType.java
"// ----------------------------------------------------------- Constructors","None",None,None,None
"// ----------------------------------------------------- Instance Variables","None",None,None,None
"// --------------------------------------------------------- Public Methods","None",None,None,None
"// Compare the two maps for equality","None",None,None,None
"// Simple tests that require no synchronization","None",None,None,None
"//Sybase fail if we don't do that, sigh...","connection.clearWarnings();",70,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/JDBCExceptionReporter.java
"// stream closed in the finally","out = new ObjectOutputStream( outputStream );",133,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/SerializationHelper.java
"// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders","Introspector.flushFromCaches( getClass() );",108,0.7092198581560284,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/Cloneable.java
"// try to "pretty print" it","OutputFormat outformat = OutputFormat.createPrettyPrint();",98,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/XMLHelper.java
"// otherwise, just dump it","System.out.println( element.asXML() );",106,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/XMLHelper.java
"//its an interface so we can't really tell anything...","}",116,0.8846153846153846,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/ReflectHelper.java
"// use default behavior","return null;",99,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/DTDEntityResolver.java
"//NOTE: early return","}",231,0.4675324675324675,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere","if (jndiClass != null) result.put(Context.INITIAL_CONTEXT_FACTORY, jndiClass);",126,0.5174825174825175,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/NamingHelper.java
"// Clone //-----------------------------------------------------------------------","* <p>Deep clone an <code>Object</code> using serialization.</p>",73,0.954248366013072,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/SerializationHelper.java
"// Serialize //-----------------------------------------------------------------------","* <p>Deep clone an <code>Object</code> using serialization.</p>",73,0.9299363057324841,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/SerializationHelper.java
"// warning: can cause a recursive calls! (proxy initialization)","if ( persister.getCollectionType().hasHolder( em ) ) {",260,0.6748466257668712,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/CollectionLoadContext.java
"/* static methods only - hide constructor */","}",39,0.7708333333333334,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/StringHelper.java
"/*&& !('_'==character)*/","}",52,0.5111111111111111,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/StringHelper.java
"// returnign null!","}",135,0.6808510638297872,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/StringHelper.java
"// includes last '.'","}",190,0.2833333333333333,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/StringHelper.java
"// +1 to include the following '.'","None",None,None,None
"// first time we find match!","matchAt = curMatch;",398,0.7419354838709677,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/StringHelper.java
"// entityNames may now include slashes for the representations //classname may be an inner class","None",None,None,None
"// wrapped iterators","private Iterator[] iterators;",43,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/JoinedIterator.java
"// index of current iterator in the wrapped iterators array","private int currentIteratorIndex;",46,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/JoinedIterator.java
"// the current iterator","private Iterator currentIterator;",49,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/JoinedIterator.java
"// the last used iterator","private Iterator lastUsedIterator;",52,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/JoinedIterator.java
"//it was a boolean expression","if ( booleanTests.size() > 0 ) {",314,0.4716981132075472,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// call this before any Iterator method to make sure that the current Iterator // is not exhausted","protected void updateCurrentIterator() {",85,0.8904109589041096,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/JoinedIterator.java
"//doable if needed","throw new UnsupportedOperationException();",113,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/IdentitySet.java
"// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)","lastUsedIterator = currentIterator;",96,0.6451612903225806,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/JoinedIterator.java
"// peek ahead","if ( chars[pos+1] == '{' ) {",264,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/PropertiesHelper.java
"// if we reach the end of the string w/o finding the // matching end, that is an exception","if ( x == chars.length - 1 ) {",271,0.7256637168141593,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/PropertiesHelper.java
"// there were no queued additions // and the role has a cache","None",None,None,None
"// Print page","printEventForm(out);",47,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/web/EventManagerServlet.java
"// and this is not a forced initialization during flush","if ( addToCache ) {",277,0.8440366972477065,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/CollectionLoadContext.java
"// we have a placeholder, spin forward till we find the end","String systemPropertyName = "";",266,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/PropertiesHelper.java
"// make sure spinning forward did not put us past the end of the buffer...","if ( pos >= chars.length ) {",280,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/PropertiesHelper.java
"// First, try to locate this resource through the current // context classloader.","ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();",76,0.8205128205128205,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/ConfigHelper.java
"// Next, try to locate this resource through this class's classloader","url = ConfigHelper.class.getClassLoader().getResource(path);",85,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/ConfigHelper.java
"// Next, try to locate this resource through the system classloader","url = ClassLoader.getSystemClassLoader().getResource(path);",90,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/ConfigHelper.java
"// Anywhere else we should look?","return url;",93,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/ConfigHelper.java
"// would need an IdentitySet for this!","throw new UnsupportedOperationException();",194,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/IdentityMap.java
"//Arrays.asList doesn't do primitive arrays","public static List toList(Object array) {",133,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/ArrayHelper.java
"// aload_0","code.addAload( 0 );",161,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"//faster?","int size = Array.getLength(array);",135,0.21951219512195122,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/ArrayHelper.java
"//pass the entity-name, if not a collection-id","if (rootClass!=null) {",153,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/SimpleValue.java
"// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement","if ( right.getJoinSequence() != null && right.getJoinSequence().isThetaStyle() ) {",306,0.5769230769230769,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/SqlGenerator.java
"// the name of a class","final String discrim = persister.getDiscriminatorSQLValue();",413,0.6296296296296297,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// Its the listener class name","cfg.setListener( type, ( ( String ) value ) );",315,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/ExternalSessionFactoryConfig.java
"//allow 9,8,7,6,5,4,3,2,1","}",272,0.7272727272727273,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/ArrayHelper.java
"// default to element set if no elements() specified","token( ".", q );",42,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/FromPathExpressionParser.java
"// look for the instance by uuid","Object result = SessionFactoryObjectFactory.getInstance(uuid);",768,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"// first, lets determine whether to apply cglib or javassist based instrumentation...","None",None,None,None
"// Make sure we don't override previous set values","if ( !target.keySet().contains( propertyName ) ) {",371,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/ExternalSessionFactoryConfig.java
"//entirely optional!!","tx = s.beginTransaction();",84,0.5555555555555556,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/eg/src/main/java/org/hibernate/auction/Main.java
"// Its the listener instance (or better be)","cfg.setListener( type, value );",319,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/ExternalSessionFactoryConfig.java
"//readResolveObject","private Object readResolve() throws ObjectStreamException {",88,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jmx/SessionFactoryStub.java
"//cfg.setProperty("hibernate.show_sql", "true");",""javax.persistence.validation.group.pre-persist",",62,0.5079365079365079,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/testsuite/src/test/java/org/hibernate/test/annotations/beanvalidation/BeanValidationGroupsTest.java
"// Defensive, convenience methods","protected Set getEvents() {",61,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/domain/Person.java
"// Make sure you log the exception, as it might be swallowed","System.err.println("Initial SessionFactory creation failed." + ex);",15,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/util/HibernateUtil.java
"// Begin unit of work","HibernateUtil.getSessionFactory()",25,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/web/EventManagerServlet.java
"// Write HTML header","PrintWriter out = response.getWriter();",29,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/web/EventManagerServlet.java
"// Handle actions","if ( "store".equals(request.getParameter("action")) ) {",33,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/web/EventManagerServlet.java
"// Start the session to be used for this request","Session session = HibernateUtil.getSessionFactory().openSession();",33,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/web/SessionInterceptor.java
"// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",99,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/LoadContexts.java
"// make the session available to the session factory's "current context"","ManagedSessionContext.bind( session );",37,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/web/SessionInterceptor.java
"// remove session from "current context"","ManagedSessionContext.unbind( HibernateUtil.getSessionFactory() );",45,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/web/SessionInterceptor.java
"// Eager fetch the collection so we can use it detached","Event anEvent = (Event) session.load(Event.class, eventId);",96,0.8490566037735849,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/web/EventManager.java
""/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode(""participants"", FetchMode.JOIN)                .add( Expression.eq(""id"", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */"","assertFalse( s.isDefaultReadOnly() );",953,0.1461187214611872,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/testsuite/src/test/java/org/hibernate/test/readonly/ReadOnlyCriteriaQueryTest.java
"// End of first unit of work","aPerson.addToEvent( anEvent );",110,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/web/EventManager.java
"// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);","// Begin second unit of work",112,0.5436893203883495,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/web/EventManager.java
"// Begin second unit of work","Session session2 = HibernateUtil.getSessionFactory().getCurrentSession();",115,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/web/EventManager.java
"// Reattachment of aPerson","session2.getTransaction().commit();",120,0.647887323943662,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/web/EventManager.java
"// The getEmailAddresses() might trigger a lazy load of the collection","aPerson.getEmailAddresses().add(emailAddress);",132,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/tutorials/web/src/main/java/org/hibernate/tutorial/web/EventManager.java
"// We need our tm, so get it now and avoid doing other work // if there is a problem","TransactionManagerLookup tml = settings.getTransactionManagerLookup();",304,0.8288288288288288,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/builder/MultiplexingCacheInstanceManager.java
"// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened","if (((DefaultDataVersion) dataVersion).getRawVersion() > 1) {",92,0.5111111111111111,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/util/DataVersionAdapter.java
"// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.","private Integer isolation;",62,0.7444444444444445,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these","if ( "true".equals(externalConfig) ) {",110,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",224,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/LoadContexts.java
"// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",149,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/LoadContexts.java
"// the cache of the actual plans...","private final SoftLimitMRUCache planCache = new SoftLimitMRUCache( 128 );",71,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/query/QueryPlanCache.java
"// (AS is always optional, for consistency with SQL/OQL)","// process the "new" HQL style where aliases are assigned",135,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/FromParser.java
"// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction","if ( entityName != null ) {",137,0.6,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/FromParser.java
"// is a primitive type // invokespecial","code.addInvokespecial( BulkAccessor.class.getName(), MethodInfo.nameInit, cons_desc );",163,0.625,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// Start performing the updates","for ( int i = 0; i < updates.length; i++ ) {",159,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/exec/MultiTableUpdateExecutor.java
"// array of primitive type // do nothing","else {",1316,0.5,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// jdbc params are 1-based","while ( whereParams.hasNext() ) {",138,0.8301886792452831,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/exec/MultiTableUpdateExecutor.java
"// don't care...","}",126,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/query/ParamLocationRecognizer.java
"// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.","ois.defaultReadObject();",379,0.5504587155963303,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/context/ThreadLocalSessionContext.java
"// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public void ordinalParameter(int position) {",102,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/query/ParamLocationRecognizer.java
"// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style","Queryable p = q.getEntityPersisterUsingImports( token );",185,0.4578313253012048,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/FromParser.java
"//important: reuse the same event instances for performance!","final PreLoadEvent pre;",964,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// don't care about other param types here, just those explicitly user-defined...","}",128,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/ParameterTranslationsImpl.java
"//handle <=, >=, !=, is not, not between, not in","if ( lastToken == null ) {",118,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PreprocessingParser.java
"// named parameter","int right = StringHelper.firstIndexOfChar( sqlString, ParserHelper.HQL_SEPARATORS, indx + 1 );",87,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/query/ParameterParser.java
"// could be either an ordinal or JPA-positional parameter","if ( indx < stringLength - 1 && Character.isDigit( sqlString.charAt( indx + 1 ) ) ) {",100,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/query/ParameterParser.java
"// strip the " where "","idSelectParameterSpecifications = sqlGenerator.getCollectedParameters();",115,0.4,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/exec/AbstractStatementExecutor.java
"// a peek ahead showed this as an JPA-positional parameter","int right = StringHelper.firstIndexOfChar( sqlString, ParserHelper.HQL_SEPARATORS, indx + 1 );",102,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/query/ParameterParser.java
"// make sure this "name" is an integral","try {",106,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/query/ParameterParser.java
"// at the very least cleanup the data :)","PreparedStatement ps = null;",238,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/exec/AbstractStatementExecutor.java
"//60 seconds","}",128,0.6875,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-infinispan/src/main/java/org/hibernate/cache/infinispan/impl/BaseRegion.java
"//cannot be instantiated","private ConnectionProviderFactory() {",183,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/connection/ConnectionProviderFactory.java
"// transfer an explicitly defined entity name // handle the lazy attribute","Attribute lazyNode = node.attribute( "lazy" );",555,0.7647058823529411,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//keep the behavior consistent even for boundary usages","IntegralDataTypeHolder value = null;",74,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/TableHiLoGenerator.java
"// perform the actual work","None",None,None,None
"//do the failfast put outside the scope of the JTA txn","None",None,None,None
"// get meta's from // <joined-subclass>","// joined subclasses",900,0.7169811320754716,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//ignore!","log.debug("ignoring write lock acquisition failure");",300,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/util/CacheHelper.java
"// parameters on the property mapping should // override parameters in the typedef","Properties allParameters = new Properties();",1222,0.7037037037037037,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many","lazy = false;",2025,0.36363636363636365,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// create the node initially with the param name so that it shows // appropriately in the "original text" attribute","ParameterNode parameter = ( ParameterNode ) astFactory.create( NAMED_PARAM, name );",927,0.7114093959731543,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// DYNAMIC INSERT","Attribute insertNode = node.attribute( "dynamic-insert" );",658,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// so we "clock over" on the first invocation","None",None,None,None
"// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private DatabaseStructure databaseStructure;",122,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/enhanced/SequenceStyleGenerator.java
"// finally handle the exception","None",None,None,None
"// a "detached" collection that belonged to a different entity","throw new HibernateException( "reassociated object has dirty collection reference" );",70,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/OnLockVisitor.java
""//	void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { //		this.componentTuplizerFactory = componentTuplizerFactory; //	}"","void setJdbcSupport(JdbcSupport jdbcSupport) {",514,0.723404255319149,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Settings.java
"//element //index -> id","None",None,None,None
"// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!","return oldValue==null || elemType.isDirty( oldValue, entry, getSession() );",402,0.6178010471204188,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentSet.java
"// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization","private boolean dirty;",69,0.7272727272727273,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/AbstractPersistentCollection.java
"//saveOrUpdateCopy() is deprecated!","private static Map eventInterfaceFromType;",104,0.39285714285714285,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/EventListeners.java
"// Set it!","LT( 2 ).setType( IDENT );",363,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// collectionPersister should not be null, but we don't want to throw // an exception if it is null","String entityName =",90,0.8345323741007195,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/AbstractCollectionEvent.java
"// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.","if ( LA( 2 ) != LITERAL_by ) {",331,0.5733333333333334,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.","return new SQLStateConverter( getViolatedConstraintNameExtracter() );",1382,0.512,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml","protected String getCreateSequenceString(String sequenceName, int initialValue, int incrementSize) {",351,0.4027777777777778,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/PostgreSQLDialect.java
"// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);","getFilterQueryPlan( collection, queryString, null, false ).getParameterMetadata()",1395,0.12359550561797752,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// a "detached" collection that originally belonged to the same entity","if ( persistentCollection.isDirty() ) {",63,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/OnLockVisitor.java
"// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list","None",None,None,None
""//		 You may still have other ResultSets or update counts left to process here  //		 but you can't do it now or the ResultSet you just got will be closed "","return ps.getResultSet();",218,0.6842105263157895,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/AbstractTransactSQLDialect.java
""// Note: For object <-> SQL datatype mappings see: //	 Configuration Manager | Advanced | SQL | System DDL Datatype Mappings // //	TBD	registerColumnType(Types.BINARY,        ""binary($1)""); // changed 08-11-2005, jsl"","//	TBD	registerColumnType(Types.BINARY,        "binary($1)");",223,0.3684210526315789,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// See if the second lookahed token can be an identifier.","HqlToken t = (HqlToken)LT(2);",359,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// Case 2: The current token is after FROM and before '.'.","if (LA(0) == FROM && t != IDENT && LA(2) == DOT) {",341,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );",""bit_length", new SQLFunctionTemplate( Hibernate.INTEGER, "octet_length(cast(?1 as char))*4" )",83,0.14225941422594143,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/TeradataDialect.java
"// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type","return true;",497,0.945054945054945,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"// (EQ NULL b) => (IS_NULL b)","if ( a.getType() == NULL && b.getType() != NULL ) {",259,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// Create nodes that track line and column number.","}",322,0.7058823529411765,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// Add NOT if it's negated.","if ( !negated ) {",296,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// (EQ a NULL) => (IS_NULL a)","else if ( b.getType() == NULL && a.getType() != NULL ) {",263,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// The path AST should be a DotNode, and it should have been evaluated already.","if ( path.getType() != SqlTokenTypes.DOT ) {",357,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"//Force a substitution!","}",111,0.6086956521739131,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/WrapVisitor.java
"// if // if // Otherwise, handle the error normally.","return super.handleIdentifierError( token, ex );",148,0.8974358974358975,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// the database now holds a lock + the object is flushed from the cache, // so release the soft lock","if (assumed!=null) return assumed.booleanValue();",207,0.27956989247311825,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ForeignKeys.java
"// now update the object .. has to be outside the main if block above (because of collections)","if (substitute) persister.setPropertyValues( entity, values, entityMode );",159,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"//Named Queries:","namedQueries = new HashMap( cfg.getNamedQueries() );",355,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed","return;",73,0.7127659574468085,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"//grab its state saved at deletion","values = entry.getDeletedState();",183,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// grab its current state","values = persister.getPropertyValues( entity, entityMode );",192,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// this will throw an error if there's something wrong.","try {",565,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.","for ( int i = collectionRemovals.size() - 1; i >= previousCollectionRemovalSize; i-- ) {",370,0.7051282051282052,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...","int[] props = persister.getNaturalIdentifierProperties();",303,0.7701863354037267,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)","* Add a collection to the cache, creating a new collection entry for it",827,0.6466165413533834,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"//slice, to get the columns for this component //property","return ArrayHelper.slice(",116,0.8863636363636364,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/JoinHelper.java
"// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!","session.getActionQueue().addAction(",311,0.3838383838383838,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// substitutes into values by side-effect","visitor.processEntityPropertyValues(values, types);",217,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object","intercepted = handleInterception( event );",285,0.6839378238341969,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// (NOT (EQ a b) ) => (NE a b)","case NE:",179,0.8235294117647058,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// compare to cached state (ignoring collections unless versioned)","dirtyCheck(event);",229,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// if it was dirtied by a collection only","int[] dirtyProperties = event.getDirtyProperties();",298,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// check nullability but do not perform command execute // we'll use scheduled updates for that.","new Nullability(session).checkNullability( values, persister, true );",308,0.591304347826087,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// This 'dot' expression now refers to the resulting from element.","if ( isSizeProperty ) {",310,0.835820895522388,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// (NOT (LIKE a b) ) => (NOT_LIKE a b)","case NOT_LIKE:",203,0.8656716417910447,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.","if ( ce.isReached() ) {",181,0.6881720430107527,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Collections.java
"// detached collection wrappers that get found + reattached // during flush shouldn't be ignored","ignore = false;",86,0.5486725663716814,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionEntry.java
"// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)","case BETWEEN:",223,0.8860759493670886,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message","if ( key != null && ! Serializable.class.isAssignableFrom( key.getClass() ) ) {",111,0.5714285714285714,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/EntityUniqueKey.java
"// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value","return versionType.isEqual( versionType.seed( null ), defaultValue ) ?",112,0.6797385620915033,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/UnsavedValueFactory.java
"// ie. we never have to null out a reference to // an uninitialized proxy","else {",131,0.7708333333333334,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ForeignKeys.java
"// (NOT (NOT_LIKE a b) ) => (LIKE a b)","case IN:",207,0.8656716417910447,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"//give the Interceptor a chance to modify property values","final Object[] values = event.getPropertyValues();",347,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"//now we might need to recalculate the dirtyProperties array","if ( intercepted && event.isDirtyCheckPossible() && !event.isDirtyCheckHandledByInterceptor() ) {",351,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"//use the current version","Versioning.setVersion(values, nextVersion, persister);",408,0.6984126984126984,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// object loaded by update()","if ( !cannotDirtyCheck ) {",517,0.5783132530120482,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack","log.trace( "collection is already being initialized; ignoring row" );",161,0.672,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/CollectionLoadContext.java
""// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	* currently, not yet used..."","public EntityLoadContext getEntityLoadContext(ResultSet resultSet) {",313,0.8304093567251462,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/LoadContexts.java
"// dirty check against the usual snapshot of the entity","dirtyProperties = persister.findDirty( values, loadedState, entity, session );",519,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility","EntityEntry entry = event.getSession().getPersistenceContext().getEntry( event.getEntity() );",45,0.7209302325581395,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultUpdateEventListener.java
"// wrap up any new collections directly referenced by the object // or its components","// NOTE: we need to do the wrap here even if its not "dirty",",208,0.864,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...","else {",103,0.5742574257425742,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultLoadEventListener.java
"// upgrade the lock if necessary: //lock(result, lockMode);","//PostLoad is needed for EJB3",690,0.7,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultLoadEventListener.java
"// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush","persistenceContext.setFlushing(true);",93,0.5352112676056338,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractFlushingEventListener.java
"// (NOT (NE a b) ) => (EQ a b)","case GT:",183,0.8235294117647058,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in","final Serializable clonedIdentifier = (Serializable) persister.getIdentifierType()",381,0.676923076923077,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"// Sub-insertions should occur before containing insertion so // Try to do the callback now","if ( persister.implementsLifecycle( source.getEntityMode() ) ) {",215,0.8244274809160306,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractSaveEventListener.java
"// (NOT (LE a b) ) => (GT a b)","case LIKE:",199,0.8235294117647058,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// (NOT (GE a b) ) => (LT a b)","case LE:",195,0.8235294117647058,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// (NOT (LT a b) ) => (GE a b)","case GE:",191,0.8235294117647058,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"//the entity is not associated with the session, so //try interceptor and unsaved-value","final boolean registerSynchronization = owner.isAutoCloseSessionEnabled()",96,0.2558139534883721,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/JDBCContext.java
"// ... and the expected token type was an identifier, then:","p.getIdentifierType(),",1025,0.36666666666666664,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"// igndore it...","None",None,None,None
"// [jsd] The fix for HHH-558...","HqlLexer lexer = new HqlLexer( new StringReader( hql ) );",67,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// If the token can tell us if it could be an identifier...","if ( token instanceof HqlToken ) {",125,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// we are now at a new tree level","dotRoot = null;",587,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// dirty check against the database snapshot, if possible/necessary","final Object[] databaseSnapshot = getDatabaseSnapshot(session, persister, id);",544,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// the Interceptor handled the dirty checking","cannotDirtyCheck = false;",554,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// Use the delegate.","}",100,0.5074626865671642,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// get meta's from <subclass>","if ( unionSubclass.getEntityPersisterClass() == null ) {",821,0.5,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",1152,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// get the id from the object","/*if ( persister.isUnsaved(entity, source) ) {",82,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultReplicateEventListener.java
"// do the put outside the scope of the JTA txn","None",None,None,None
"//what is the version on the database?","oldVersion = persister.getCurrentVersion( id, source );",99,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultReplicateEventListener.java
"/// HHH-2378","final Object realOldVersion = persister.isVersioned() ? oldVersion : null;",111,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultReplicateEventListener.java
"//will result in a SQL UPDATE:","performReplication( entity, id, realOldVersion, persister, replicationMode, source );",122,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultReplicateEventListener.java
"//else do nothing (don't even reassociate object!)","log.trace( "no need to replicate" );",126,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultReplicateEventListener.java
"// no existing row - do an insert","if ( log.isTraceEnabled() ) {",133,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultReplicateEventListener.java
"// --- Inner classes (moved here from sql-gen.g) ---","/**",212,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/SqlGenerator.java
"// reference type","int indexOfL = typeName.indexOf('L');",413,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// should be the first, but just to be safe...","final FromElement fromElement = ( FromElement ) itr.next();",502,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"//return a proxy if appropriate","if ( event.getLockMode() == LockMode.NONE ) {",150,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultLoadEventListener.java
"// some filters affecting the collection are enabled on the session, so do not do the put into the cache.","log.debug( "Refusing to add to cache due to enabled filters" );",306,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/CollectionLoadContext.java
"// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.","dot.resolve( true, false, alias == null ? null : alias.getText() );",365,0.8972972972972973,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed","EntityEntry entry = persistenceContext.getEntry( object );",1759,0.5560975609756098,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// ... and the token could be an identifer and the error is // a mismatched token error ...","if ( hqlToken.isPossibleID() && ( ex instanceof MismatchedTokenException ) ) {",128,0.7833333333333333,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...","SqlGenerator sqlGenerator = new SqlGenerator( getFactory() );",110,0.8701298701298701,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/exec/AbstractStatementExecutor.java
"// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.","Type type = getDataType();",61,0.3870967741935484,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/AbstractSelectExpression.java
"// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.","lhs.resolve( true, true, null, this );",173,0.8275862068965517,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.","return;",218,0.6622516556291391,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role","FromElementFactory factory = new FromElementFactory(",293,0.68,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// return new uninitialized proxy","Object proxy = persister.createProxy( event.getEntityId(), event.getSession() );",359,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultLoadEventListener.java
"// this object was already loaded","EntityEntry oldEntry = session.getPersistenceContext().getEntry( old );",536,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultLoadEventListener.java
"// Entity was found in second-level cache...","return assembleCacheEntry(",603,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultLoadEventListener.java
"// intializes result by side-effect","TypeHelper.deepCopy(",650,0.4025974025974026,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultLoadEventListener.java
"// NOTE : ( max - 1 ) because first is zero-based while max is not...","if ( max >= 0 && ( includedCount - first ) >= ( max - 1 ) ) {",387,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// A shallow query is ok (although technically there should be no fetching here...)","if ( isShallowQuery() ) {",488,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// Delegate to the QueryLoader...","errorIfDML();",345,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// Remember the parameters for the compilation.","this.tokenReplacements = replacements;",173,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// -- Package local methods for the QueryLoader delegate --","public boolean isShallowQuery() {",445,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// double","if ( Double.TYPE.equals( javaType ) ) {",127,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/TypeLocatorImpl.java
"//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );","// TODO : perhaps we should additionally require that the incoming entity",459,0.3697478991596639,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"// Use the token as an identifier.","reportWarning( "Keyword  '"",134,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"//some statistics","if ( log.isDebugEnabled() ) {",106,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractFlushingEventListener.java
"//safe from concurrent modification because of how entryList() is implemented on IdentityMap","final int size = list.length;",137,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractFlushingEventListener.java
"// Transform the tree.","w.statement( hqlAst );",253,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// Parse the query string into an HQL AST.","HqlParser parser = HqlParser.getInstance( hql );",267,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes","if ( log.isTraceEnabled() ) {",216,0.7647058823529411,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()","final EventSource source = event.getSession();",200,0.6787878787878788,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractFlushingEventListener.java
"//only needed during compilation phase...","}",232,0.7474747474747475,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// Update the status of the object and if necessary, schedule an update","Map.Entry me = list[i];",209,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractFlushingEventListener.java
"// Schedule updates to collections:","log.trace( "Scheduling collection removes/(re)creates/updates" );",245,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractFlushingEventListener.java
"// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations","session.getActionQueue().prepareActions();",317,0.5306122448979592,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractFlushingEventListener.java
"//the database has changed now, so the subselect results need to be invalidated","if (assumed!=null) return assumed.booleanValue();",207,0.325,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ForeignKeys.java
"//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set","final class ListIteratorProxy implements ListIterator {",585,0.20588235294117646,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/AbstractPersistentCollection.java
"// PHASE 1 : Parse the HQL into an AST.","HqlParser parser = parse( true );",181,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity","// value can be either a copy of the entity or the entity itself",57,0.6526315789473685,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/EventCache.java
"//get a snapshot","Object[] values = persister.getPropertyValues( object, source.getEntityMode() );",77,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractReassociateEventListener.java
""/*public final Currency getCurrency(int col) throws HibernateException {		return (Currency) get(col);	}*/"","return null;",213,0.4065040650406504,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/test/java/org/hibernate/type/BasicTypeRegistryTest.java
"// right represents a joins originating from left...","if ( right.getJoinSequence() != null && right.getJoinSequence().isThetaStyle() ) {",339,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/SqlGenerator.java
"// If the query is already compiled, skip the compilation.","if ( compiled ) {",165,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// remember that ordinal parameters numbers are 1-based!!!","return ordinalParameters[ordinalPosition - 1];",62,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/ParameterTranslationsImpl.java
"// all clear","if ( log.isDebugEnabled() ) {",89,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/ErrorCounter.java
"// Ignore the token class name parameter, and use a specific token class.","super.setTokenObjectClass( HqlToken.class.getName() );",53,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlLexer.java
"//this is a query and we are loading multiple instances of the same collection role","session.getPersistenceContext()",1004,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// EARLY EXIT!!!","return;",601,0.9655172413793104,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
"// before any callbacks, etc, so subdeletions see that this deletion happened first","persistenceContext.setEntryStatus( entityEntry, Status.DELETED );",263,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultDeleteEventListener.java
"// Ensures that containing deletions happen before sub-deletions","session.getActionQueue().addAction(",274,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultDeleteEventListener.java
"// cascade-delete to collections BEFORE the collection owner is deleted","new Cascade( CascadingAction.DELETE, Cascade.AFTER_INSERT_BEFORE_DELETE, session )",327,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultDeleteEventListener.java
"// cascade-delete to many-to-one AFTER the parent was deleted","new Cascade( CascadingAction.DELETE, Cascade.BEFORE_INSERT_AFTER_DELETE, session )",347,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultDeleteEventListener.java
"// if it is an initialized proxy, let cascade // handle it later on","return null;",51,0.8131868131868132,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/ProxyVisitor.java
"//assign the requested id to the proxy, *before* //reassociating the proxy","if ( object instanceof HibernateProxy ) {",75,0.780952380952381,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultSaveOrUpdateEventListener.java
"// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()","else {",132,0.4444444444444444,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ForeignKeys.java
"//initialize properties of the event:","final Object entity = source.getPersistenceContext().unproxyAndReassociate( object );",88,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultSaveOrUpdateEventListener.java
"//return the id in the event object","event.setResultId( performSaveOrUpdate( event ) );",92,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultSaveOrUpdateEventListener.java
"//TRANSIENT or DELETED","return entityIsTransient( event );",116,0.8333333333333334,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultSaveOrUpdateEventListener.java
"// assume this is a newly instantiated transient object // which should be saved rather than updated","throw new TransientObjectException(",270,0.7175572519083969,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultSaveOrUpdateEventListener.java
"// this is a transient object with existing persistent state not loaded by the session","new OnUpdateVisitor( source, event.getRequestedId(), entity ).process( entity, persister );",312,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultSaveOrUpdateEventListener.java
"// check two "adjecent" nodes at the top of the from-clause tree","AST next = a.getNextSibling();",274,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/SqlGenerator.java
"//cachedState,","key,",331,0.8484848484848485,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultSaveOrUpdateEventListener.java
"//a "detached" collection!","if ( !isOwnerUnchanged( wrapper, persister, collectionKey ) ) {",67,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/OnUpdateVisitor.java
"// if the collection belonged to a different entity, // clean up the existing state of the collection","removeCollection( persister, collectionKey, session );",69,0.6875,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/OnUpdateVisitor.java
"//log.debug( "calling onLoad()" );","( ( Lifecycle ) event.getEntity() ).onLoad( event.getSession(), event.getId() );",72,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultPostLoadEventListener.java
"// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session","if ( source.getFactory().getStatistics().isStatisticsEnabled() ) {",66,0.6928104575163399,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultAutoFlushEventListener.java
"//ie. the entity came in from update()","currentState = persister.getPropertyValues( entity, session.getEntityMode() );",245,0.6213592233009708,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultDeleteEventListener.java
"//we need to check even if it was not initialized, because of delayed adds!","dirty=true;",77,0.779874213836478,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DirtyCollectionSearchVisitor.java
"//NOTE: EARLY EXIT!","}",503,0.7555555555555555,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// if template is null we just write the function out as it appears in the hql statement","None",None,None,None
"// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","None",None,None,None
"// find any entities that are still transient after retry","transientCopyCache = getTransientCopyCache(event, copyCache );",93,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"// Initialize SQL nodes here.","if ( t instanceof InitializeableNode ) {",234,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/SqlASTFactory.java
"// Check the persistence context for an entry relating to this // entity to be merged...","EntityEntry entry = source.getPersistenceContext().getEntry( entity );",207,0.832,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"//DELETED","throw new ObjectDeletedException(",242,0.6923076923076923,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"// Set the unresolved path in this node and the parent. // Set the text for the parent.","if ( dotParent != null ) {",577,0.5263157894736842,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// 60 second lock timeout","return Timestamper.ONE_MS * SIXTY_THOUSAND_MS;",224,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-ehcache/src/main/java/org/hibernate/cache/EhCache.java
""/*				 * Property prop = new Property(); prop.setName(""id"");				 * prop.setPropertyAccessorName(""embedded""); prop.setValue(id);				 * entity.setIdentifierProperty(prop);				 */"","bindProperty( idNode, prop, mappings, inheritedMetas );",453,0.2755102040816326,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//before cascade!","cascadeOnMerge(source, persister, entity, copyCache);",264,0.4,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"// continue...; we'll find out if it ends up not getting saved later","}",345,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"// cascade first, so that all unsaved objects get their // copy created before we actually copy","//cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);",302,0.736,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"// check that entity id = requestedId","Serializable entityId = persister.getIdentifier( entity, source );",372,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"// Not a collection? // Return the entity property mapping.","None",None,None,None
"// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...","return queryableCollection;",445,0.5909090909090909,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementType.java
"// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.","public boolean isManyToMany() {",403,0.8,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElement.java
"// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.","String tableAlias = null;",137,0.6007604562737643,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:","// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p",37,0.8214285714285714,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/GroupByParser.java
""//		origin.addDestination(destination); // Add the query spaces."","fromClause.getWalker().addQuerySpaces( entityPersister.getQuerySpaces() );",335,0.78,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.","ast.setType( FROM_FRAGMENT );",502,0.6058394160583942,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
""//explicit = true;	// This is an explict Select. //ArrayList sqlResultTypeList = new ArrayList();"","ArrayList queryReturnTypeList = new ArrayList();",134,0.640625,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"//sqlResultTypeList.add( type ); // Generate the select expression.","// If the data type is not an association type, it could not have been in the FROM clause.",157,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).","if ( ASTUtil.hasExactlyOneChild( exprList ) ) {",65,0.7312775330396476,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/MethodNode.java
"// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...","boolean containsTableAlias = fromClause.containsTableAlias( alias );",133,0.391304347826087,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/JoinProcessor.java
"// cascade first, so that all unsaved objects get their  // copy created before we actually copy","//cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);",302,0.736,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"//copyValues works by reflection, so explicitly mark the entity instance dirty","markInterceptorDirty( entity, target );",425,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.","private LinkedList nots = new LinkedList();           //were an odd or even number of NOTs encountered",187,0.7156862745098039,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// no need to even collect this information if the persister is considered multi-table","AssignmentSpecification specification = new AssignmentSpecification( eq, persister );",1070,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// as soon as we encounter our first letter, return the substring // from that position","if ( Character.isLetter( chars[i] ) ) {",471,0.8571428571428571,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/StringHelper.java
"// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object","Reader charReader = rs.getCharacterStream(name);",50,0.75,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/AbstractLongStringType.java
"//for arrays, replaceElements() may return a different reference, since //the array length might not match","result = replaceElements( original, result, owner, copyCache, session );",573,0.8129032258064516,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/CollectionType.java
"// should not be able to reach last without maxPosition being set // unless there are no results","return false;",202,0.8120300751879699,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/FetchingScrollableResultsImpl.java
"//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!","LazyInitializer li = ( (HibernateProxy) object ).getHibernateLazyInitializer();",1741,0.5151515151515151,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value","return resolve( session.getContextEntityIdentifier(owner), session, owner );",154,0.6242774566473989,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/OneToOneType.java
"// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache","return ignoreNotFound;",91,0.6129032258064516,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/ManyToOneType.java
"// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier","Type type = entityPersister.getPropertyType( uniqueKeyPropertyName );",464,0.509090909090909,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/EntityType.java
"//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch","final Object owner = hasCollectionOwners ?",756,0.6521739130434783,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// PERSISTER","Attribute persisterNode = node.attribute( "persister" );",687,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start","if (jbcEntityCache != null  && entityConfig != null) {",494,0.6329113924050633,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/builder/MultiplexingCacheInstanceManager.java
"// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication","if (CacheHelper.isClusteredReplication(jbcCache)) {",74,0.48484848484848486,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/query/QueryResultsRegionImpl.java
"// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase","if (safeEquals(preInvalidateValue, this.preInval)",328,0.5380116959064327,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/timestamp/ClusteredConcurrentTimestampsRegionImpl.java
"// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer","return (other.previousVersion != null);",114,0.5662650602409639,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/util/DataVersionAdapter.java
"//maintain correct duplication if loaded in a cartesian product","return element;",295,0.7692307692307693,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentIdentifierBag.java
""/*DataSource unpooled = DataSources.unpooledDataSource(				jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS)			);*/"",""hibernate.validator.autoregister_listeners"",961,0.15384615384615385,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/AnnotationConfiguration.java
"// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither","if ( currentElements.size()==0 ) return oldElements; // no new elements, the old list contains only Orphans",900,0.3130434782608696,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/AbstractPersistentCollection.java
"// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array","TypeHelper.deepCopy(",132,0.5865384615384616,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/EntityUpdateAction.java
"// long","if ( Long.TYPE.equals( javaType ) ) {",111,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/TypeLocatorImpl.java
"// Set the existing pool flag to true","existingPool = true;",123,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// Validate that an alias name was provided to determine which pool to use","if ( !StringHelper.isNotEmpty( proxoolAlias ) ) {",114,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// We have created the pool ourselves, so shut it down","try {",202,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"//the load() which takes an entity does not pass an entityName","event.setEntityClassName( event.getInstanceToLoad().getClass().getName() );",88,0.6046511627906976,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultLoadEventListener.java
"// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma","if ( StringHelper.isNotEmpty( customListenersString) ) {",266,0.39705882352941174,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/util/ExternalSessionFactoryConfig.java
"// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...","None",None,None,None
"//it does not refer to an alias of a projection, //look for a property","return getColumns( propertyName, subcriteria );",440,0.8125,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"// do nothing for persistent instances","else {",1316,0.5,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","None",None,None,None
"//assume true, since we don't really know, and it doesn't matter",");",338,0.9642857142857143,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultSaveOrUpdateEventListener.java
"// Show the modified AST.","if ( log.isDebugEnabled() ) {",245,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// NOTE : firstRow is zero-based","int first = !hasLimit || queryParameters.getRowSelection().getFirstRow() == null",367,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.","log.debug("dirty checking collections");",174,0.8050314465408805,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractFlushingEventListener.java
"// Tell the dot node about the join type.","dot.setFetch( fetch );",363,0.6470588235294118,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.","// So this needs to be safe from concurrent modification problems.",196,0.6378378378378379,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractFlushingEventListener.java
"// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private final Map propertyIndexes = new HashMap();",99,0.6065573770491803,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityMetamodel.java
"//otherwise recreate the mapping between the collection and its key","CollectionKey collectionKey = new CollectionKey(",364,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractFlushingEventListener.java
"// Create a parameter specification for the collection filter...","Type collectionFilterKeyType = sessionFactoryHelper.requireQueryableCollection( collectionFilterRole ).getKeyType();",251,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// Attach any mapping-defined "ORDER BY" fragments","Iterator itr = qn.getFromClause().getProjectionList().iterator();",640,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result","final java.util.Set set = new HashSet( extendz );",3103,0.2871287128712871,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// Make sure that the persister is versioned","Queryable persister = fromClause.getFromElement().getQueryable();",1102,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful","return false;",1170,0.11152416356877323,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"// this function has a template -> redirect output and catch the arguments","None",None,None,None
"// use the id assigned to the instance","Serializable id = persister.getIdentifier( entity, session );",267,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultSaveOrUpdateEventListener.java
"// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);","else {",65,0.5155555555555555,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DirtyCollectionSearchVisitor.java
"// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()","removeCollection(persister, collectionKey, session);",76,0.5241379310344828,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/OnUpdateVisitor.java
"// If the data type is not an association type, it could not have been in the FROM clause.","if ( selectExpression.isScalar() ) {",159,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators","IdentifierGenerator generator = persister.getIdentifierGenerator();",720,0.4230769230769231,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"//first look for a reference to a projection alias","final Projection projection = rootCriteria.getProjection();",430,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private int traceDepth = 0;",78,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// If there are no collection fetches, then no further checks are needed","List collectionFetches = query.getFromClause().getCollectionFetches();",482,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();","void throwQueryException() throws QueryException;",40,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/ParseErrorHandler.java
"// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.","oos.defaultWriteObject();",369,0.5612244897959183,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/context/ThreadLocalSessionContext.java
"// Make #@%$^#^&# sure no alias is applied to the table name","fromElement.setText( persister.getTableName() );",673,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// switch","}",207,0.9411764705882353,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/SqlASTFactory.java
"// Use the explicitly declared select expression; determine the // return types indicated by each select token","useSelectClause( select );",630,0.738255033557047,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// select clauses for insert statements should alwasy be treated as shallow","return getStatementType() == INSERT || queryTranslatorImpl.isShallowQuery();",1038,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.","JoinProcessor joinProcessor = new JoinProcessor( this );",635,0.5233644859813084,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","None",None,None,None
"// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...","private final SimpleMRUCache sqlParamMetadataCache = new SimpleMRUCache();",63,0.3109919571045576,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/query/QueryPlanCache.java
"// Alias references and identifiers use the same node class.","case ALIAS_REF:",123,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/SqlASTFactory.java
"// make a new one","initializeSqlNode( t );",218,0.37142857142857144,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/SqlASTFactory.java
"// these are just two unrelated table references","writeCrossJoinSeparator();",316,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/SqlGenerator.java
"// again, both should be FromElements","FromElement left = ( FromElement ) parent;",335,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/SqlGenerator.java
"// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them","if ( d != null && hasText( d ) ) {",331,0.704225352112676,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/SqlGenerator.java
"// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.","HqlSqlWalker w = analyze( parser, collectionRole );",184,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// PHASE 3 : Generate the SQL.","generate( ( QueryNode ) sqlAst );",204,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)","if ( getReturnTypes().length > 1 ) {",493,0.676923076923077,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
""//			paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );"","return paramTranslations;",568,0.9885057471264368,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// we are already processing a dot-structure","if ( ASTUtil.isSubtreeChild( dotRoot, node ) ) {",581,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/QueryTranslatorImpl.java
"// Should mean that no such property was found","}",582,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// Initialize the error handling delegate.","parseErrorHandler = new ErrorCounter();",320,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// Was there an explicit select expression?","boolean explicitSelect = select != null && select.getNumberOfChildren() > 0;",618,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// Resolve everything up to this dot, but don't resolve the placeholders yet.","dotNode.resolveFirstChild();",562,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)","/* This can never happen because this rule will always eliminate the child NOT.",231,0.8860759493670886,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// Just add a 'not' parent.","}",237,0.6111111111111112,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// First, save off the pertinent ids, as the return value","PreparedStatement ps = null;",128,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/exec/MultiTableUpdateExecutor.java
"// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)","boolean isAutocommit = connectionManager.isAutoCommit();",283,0.4375,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/JDBCContext.java
"// First, save off the pertinent ids, saving the number of pertinent ids for return","PreparedStatement ps = null;",104,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/exec/MultiTableDeleteExecutor.java
"// Start performing the deletes","for ( int i = 0; i < deletes.length; i++ ) {",133,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/exec/MultiTableDeleteExecutor.java
"// Don't forget to resolve the argument! // Resolve the collection function now.","None",None,None,None
"// otherwise, everything ok.","}",127,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IntoClause.java
"// Re-arrange the tree so that the collection function is the root and the lhs is the path.","f.setFirstChild( lhs );",554,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"//    protected RegionRootListener listener;","public BasicRegionAdapter(Cache jbcCache, String regionName, String regionPrefix) {",87,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/BasicRegionAdapter.java
"// inject the WHERE after the parent","AST parent = ASTUtil.findTypeInChildren( this, getWhereClauseParentTokenType() );",76,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/AbstractRestrictableStatement.java
"// Never include subclasses for implied from elements.","}",65,0.8785046728971962,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/ImpliedFromElement.java
"// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)","if (!optimistic) {",185,0.6577181208053692,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/BasicRegionAdapter.java
"// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root","// Don't hold a transactional lock for this",193,0.6486486486486487,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/BasicRegionAdapter.java
"// Prepare the left hand side and get the data type.","if ( propertyType!=null && propertyType.isCollectionType() ) {",185,0.717948717948718,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// If this dot has already been resolved, stop now.","if ( isResolved() ) {",206,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// The property is another class..","checkLhsIsNotCollection();",230,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// Otherwise, this is a primitive type.","if ( ! CollectionProperties.isAnyCollectionProperty( propertyName ) ) {",241,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)","boolean isSizeProperty = getNextSibling()!=null &&",272,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// For Timestamps, we default to a separate config","tsConfig = PropertiesHelper.getString(TIMESTAMP_CACHE_RESOURCE_PROP, properties, null);",395,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/builder/MultiplexingCacheInstanceManager.java
"//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time","None",None,None,None
"// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"","String[] propertyColumnNames = getPropertyColumnNames( i );",2002,0.6585365853658537,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)","private final int[] propertyColumnSpans;",155,0.49079754601226994,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.","String selectClause = concretePropertySelectFragment( getRootAlias(), inclusions );",1171,0.5422535211267606,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// NOTE : addDuplicateAlias() already performs nullness checks on the alias.","currentFromClause.addDuplicateAlias( classAlias, elem );",477,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse","None",None,None,None
"// again, null != null here","return !StringHelper.isEmpty( alias1 ) && !StringHelper.isEmpty( alias2 ) && alias1.equals( alias2 );",486,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery","None",None,None,None
"// we know only the lhs-hand type, so use that","return lhType;",127,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/BinaryArithmeticOperatorNode.java
"// the referenced node text is the special 'id'","return owningType.isReferenceToPrimaryKey();",533,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// only the identifier property field name can be a reference to the associated entity's PK...","return propertyName.equals( persister.getIdentifierPropertyName() ) && owningType.isReferenceToPrimaryKey();",525,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// Append the new property name onto the unresolved path.","dotNode.propertyPath = propertyPath;",591,0.6906474820143885,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// Tell the destination fromElement to 'includeSubclasses'.","if ( useThetaStyleImplicitJoins ) {",678,0.7310344827586207,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// If the lhs is a collection, use CollectionPropertyMapping","getFilterQueryPlan( collection, queryString, null, false ).getParameterMetadata()",1395,0.3492063492063492,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// Don't resolve the node again.","}",700,0.7941176470588235,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"//lists, arrays //sets, maps, bags","None",None,None,None
"// we have something like : "? [op] rhs"","if ( isDateTimeType( rhType ) ) {",56,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/BinaryArithmeticOperatorNode.java
"// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching","int count = 0;",181,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/OneToManyPersister.java
"//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another","String[] rowSelectColumnNames = ArrayHelper.join(keyColumnNames, elementColumnNames);",155,0.5538461538461539,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/OneToManyPersister.java
"// Make sure we don't re-release the same cache","if (entityConfig.equals(collectionConfig))",502,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/builder/MultiplexingCacheInstanceManager.java
"// We use a different delegate than the non-optimistic superclass default","super(region, new OptimisticTransactionalAccessDelegate(region, region.getPutFromLoadValidator()));",44,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/collection/OptimisticTransactionalAccess.java
"// we have something like : "lhs [op] ?"","if ( isDateTimeType( lhType ) ) {",72,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/BinaryArithmeticOperatorNode.java
"// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );","// create an index on the key columns??",60,0.34594594594594597,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/IdentifierCollection.java
"//isSet = collection.isSet(); //isSorted = collection.isSorted();","isPrimitiveArray = collection.isPrimitiveArray();",251,0.6206896551724138,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// we know only the rhs-hand type, so use that","return rhType;",121,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/BinaryArithmeticOperatorNode.java
"// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation","localOnly = cacheAdapter.isClusteredInvalidation();",29,0.6122448979591837,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-infinispan/src/main/java/org/hibernate/cache/infinispan/query/QueryResultsRegionImpl.java
"// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit","// prevents reads and other updates",69,0.49473684210526314,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-infinispan/src/main/java/org/hibernate/cache/infinispan/timestamp/TimestampsRegionImpl.java
"// Double check the distributed cache","Object[] vals = (Object[]) suspendAndGet(key, null, false);",102,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/timestamp/ClusteredConcurrentTimestampsRegionImpl.java
"// Get an exclusive right to update JBC for this key from this node.","boolean locked = false;",135,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/timestamp/ClusteredConcurrentTimestampsRegionImpl.java
"// one or the other needs to be a datetime for us to get into this method in the first place...","return lhsIsDateTime ? lhType : rhType;",173,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/BinaryArithmeticOperatorNode.java
"// Add the condition to the join sequence that qualifies the indexed element.","AST selector = collectionNode.getNextSibling();",130,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IndexNode.java
"// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)","String collectionTableAlias = elementTable;",136,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IndexNode.java
"// Now, set the text for this node.  It should be the element columns.","String[] elementColumns = queryableCollection.getElementColumnNames( elementTable );",177,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IndexNode.java
"// Get the function return value type, based on the type of the first argument.","return getSessionFactoryHelper().findFunctionReturnType( getText(), resolveFunction(), getFirstChild() );",66,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/AggregateNode.java
"// This will call initialize(tok)!","}",49,0.8450704225352113,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/Node.java
"// mutation depends on the types of nodes invloved...","None",None,None,None
"// logic operators by definition resolve to booleans","return Hibernate.BOOLEAN;",46,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/UnaryLogicOperatorNode.java
"// Generated select expressions are already resolved, nothing to do.","return;",47,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectExpressionImpl.java
"// The path may be a reference to an alias defined in the parent query.","String classAlias = ( alias == null ) ? null : alias.getText();",89,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromClause.java
"// The HQL class alias refers to the class name.","fromElementByClassAlias.put( classAlias, element );",100,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromClause.java
"// Associate the table alias with the element.","String tableAlias = element.getTableAlias();",103,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromClause.java
"// try the parent FromClause...","isAlias = parentFromClause.isFromElementAlias( possibleAlias );",182,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromClause.java
"// Make sure that all from elements registered with this FROM clause are actually in the AST.","ASTIterator iter = new ASTIterator( this.getFirstChild() );",386,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromClause.java
"// Invoke setScalarColumnText on each constructor argument.","for ( int j = 0; j < selectExpressions.length; j++ ) {",97,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/ConstructorNode.java
"// Collect the select expressions, skip the first child because it is the class name.","return getFirstChild().getNextSibling();",105,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/ConstructorNode.java
"// return an empty Type array","return new Type[]{};",143,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/ConstructorNode.java
"// We ensure ASYNC semantics (JBCACHE-1175)","cacheAdapter.withFlags(FlagAdapter.FORCE_ASYNCHRONOUS).put(key, value);",73,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-infinispan/src/main/java/org/hibernate/cache/infinispan/timestamp/TimestampsRegionImpl.java
"// if there is no order by, make one","if ( orderByClause == null ) {",98,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/QueryNode.java
"// Initial load from JBC","current = newVal;",305,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/timestamp/ClusteredConcurrentTimestampsRegionImpl.java
"// Find the WHERE; if there is no WHERE, find the FROM...","AST prevSibling = ASTUtil.findTypeInChildren( this, SqlTokenTypes.WHERE );",103,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/QueryNode.java
"// Now, inject the newly built ORDER BY into the tree","orderByClause.setNextSibling( prevSibling.getNextSibling() );",109,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/QueryNode.java
"// logic operators by definition resolve to boolean.","return Hibernate.BOOLEAN;",57,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/BetweenOperatorNode.java
"// Render the identifier select fragment using the table alias.","if ( fromElement.getFromClause().isSubQuery() ) {",165,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementType.java
"// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).","if ( persister instanceof Joinable ) {",270,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementType.java
"// will still be issued when it used to be null","if ( st == null ) {",199,0.5967741935483871,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/OneToManyPersister.java
"// Otherwise, use the property mapping.","PropertyMapping mapping = getPropertyMapping( propertyName );",313,0.918918918918919,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementType.java
"// The standard comparator types are not Serializable but are singletons","if (versionComparator instanceof ComparableComparator)",137,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/util/DataVersionAdapter.java
"// ignore!","log.debug("ignoring write lock acquisition failure");",300,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/util/CacheHelper.java
"// Generate implicit joins, only if necessary.","}",867,0.7766990291262136,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// If the property is a special collection property name, return a CollectionPropertyMapping.","if ( CollectionProperties.isCollectionProperty( propertyName ) ) {",436,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementType.java
"// Collection of components.","if ( propertyName.equals( EntityPersister.ENTITY_ID ) ) {",452,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementType.java
"// construct the cache","final OSCache cache = new OSCache(refreshPeriod, cron, region);",76,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-oscache/src/main/java/org/hibernate/cache/OSCacheProvider.java
"//ie. 60 seconds","}",90,0.4745762711864407,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/HashtableCache.java
"// We need to seed the version value as part of this bulk insert","VersionType versionType = persister.getVersionType();",758,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// make sure the lhs is "assignable"...","if ( !lhs.isResolved() ) {",146,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/AssignmentSpecification.java
"// false indicates to not generate parens around the assignment","sqlAssignmentString = sqlGenerator.getSQL();",131,0.7397260273972602,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/AssignmentSpecification.java
"// currently allowed...","}",158,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/AssignmentSpecification.java
"// in non-select queries, the only time we should need to join is if we are in a subquery from clause","joinIsNeeded = getWalker().getCurrentStatementType() == SqlTokenTypes.SELECT && getWalker().isInFrom();",361,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"//return classAlias == null ? className : classAlias;","}",184,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElement.java
"// This is an explicit FROM element.","}",253,0.821917808219178,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElement.java
"//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.","private final static String C3P0_STYLE_INITIAL_POOL_SIZE = "c3p0.initialPoolSize";",65,0.6086956521739131,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-c3p0/src/main/java/org/hibernate/connection/C3P0ConnectionProvider.java
"// Fetch can't be used with scroll() or iterate().","if ( fetch && getWalker().isShallowQuery() ) {",504,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElement.java
"// If it's not implied or it is implied and it's a many to many join where the target wasn't found.","return !isImplied() || this.useFromFragment;",528,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElement.java
"// we need to wrtap the param in a cast()","MethodNode versionMethodNode = ( MethodNode ) getASTFactory().create( HqlSqlTokenTypes.METHOD_CALL, "(" );",779,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// Since this is an explicit FROM element, it can't be implied in the FROM clause.","}",566,0.9115646258503401,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElement.java
"// Do nothing, eplicit from elements are *always* in the projection list.","}",570,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElement.java
"// propertyName refers to something like collection.size...","else {",80,0.36923076923076925,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/OneToOne.java
"// property name is a sub-path of a component...","return;",617,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElement.java
"// Notify the FROM element that it is being referenced by the select.","FromReferenceNode aliasRefNode = ( FromReferenceNode ) node;",882,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// DotNode uses null here...","String columnTableAlias = getFromElement().getTableAlias();",79,0.7384615384615385,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"// We represent a from-clause alias","}",102,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"// we are the RHS of the DOT representing a naked comp-prop-ref","setResolved();",115,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"// we represent a naked (simple) prop-ref","setResolved();",123,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...","return;",127,0.8918918918918919,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"// assume this ident's text does *not* refer to a property on the given persister","return UNKNOWN;",187,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"// just ignore it for now, it'll get resolved later...","if ( rootSession == null ) {",338,0.42105263157894735,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// This is not actually a constant, but a reference to FROM element.","FromElement element = getWalker().getCurrentFromClause().getFromElement(getText());",150,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"// these pieces are needed for usage in select clause","super.setDataType(propertyType);",204,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"// assume we do *not* refer to a property on the given persister","return false;",233,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"// TRUE if the pool is borrowed from the outside, FALSE if we used to create it","private boolean existingPool;",59,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// get a connection from the pool (thru DriverManager, cfr. Proxool doc)","Connection c = DriverManager.getConnection(proxoolAlias);",74,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// set the Transaction Isolation if defined","if (isolation!=null) c.setTransactionIsolation( isolation.intValue() );",77,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// naked property-refs cannot be used with an aliased from element","return null;",278,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"// do *not* over-write the column text, as that has already been // "rendered" during resolve","ColumnHelper.generateSingleScalarColumn(this, i);",299,0.8091603053435115,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"// Look up class name using the first identifier in the path.","String pathAlias = PathHelper.getAlias( path );",103,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// toggle autoCommit to false if set","if ( c.getAutoCommit()!=autocommit ) c.setAutoCommit(autocommit);",80,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// Add to the query spaces.","fromClause.getWalker().addQuerySpaces( entityPersister.getQuerySpaces() );",119,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// return the connection","return c;",83,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// If the from element isn't in the same clause, create a new from element.","if ( fromElement.getFromClause() != fromClause ) {",149,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join","boolean explicitSubqueryFromElement = fromClause.isSubQuery() && !implied;",210,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// Get the configurator files (if available)","String jaxpFile = props.getProperty(Environment.PROXOOL_XML);",102,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// A collection of entities...","elem = createEntityAssociation( role, roleAlias, joinType );",227,0.6046511627906976,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// A collection of components...","JoinSequence joinSequence = createJoinSequence( roleAlias, joinType );",230,0.5833333333333334,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// Default the Proxool alias setting","proxoolAlias = props.getProperty(Environment.PROXOOL_POOL_ALIAS);",107,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// A collection of scalar elements...","JoinSequence joinSequence = createJoinSequence( roleAlias, joinType );",234,0.8,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted","boolean buildCaches = jbcEntityCache == null",309,0.6533333333333333,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/builder/MultiplexingCacheInstanceManager.java
"// Don't include sub-classes for implied collection joins or subquery joins.","if ( implied ) {",241,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// Treat explict from elements in sub-queries properly.","}",247,0.75,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","None",None,None,None
"// Append the stem to the proxool pool alias","proxoolAlias = PROXOOL_JDBC_STEM + proxoolAlias;",120,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// Configured using the JAXP Configurator","}",128,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// Configured using the Properties File Configurator","}",154,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// Remember Isolation level","isolation = PropertiesHelper.getInteger(Environment.ISOLATION, props);",181,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// If the provider was leeching off an existing pool don't close it","if (existingPool) {",197,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/connection-proxool/src/main/java/org/hibernate/connection/ProxoolConnectionProvider.java
"// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )","AST ast = createSubquery( node );",292,0.7793427230046949,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// the "root from-element" in correlated subqueries do need this piece","elem.setType( FROM_FRAGMENT );",289,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// Create the FROM element for the target (the elements of the collection).","destination = createAndAddFromElement(",322,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// If the join is implied, then don't include sub-classes on the element.","if ( implied ) {",330,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// not really a many-to-one association *necessarily*","return manyToOne( clazz.getName() );",103,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/TypeFactory.java
"// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.","None",None,None,None
"//always overwrite nonversioned data","return versionType.getComparator().compare(currentVersion, newVersion) <= 0;",79,0.673469387755102,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/ReplicationMode.java
"// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.","None",None,None,None
"//public Currency getCurrency(int col) throws HibernateException;","/**",200,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/ScrollableResults.java
"// Get the class name of the associated entity.","if ( queryableCollection.isOneToMany() ) {",387,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// default is POJO","rtn = POJO;",67,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/EntityMode.java
"// use setParameter for null values","/**",423,0.5769230769230769,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/Query.java
"//  origin, path, implied, columns, classAlias,","entityPersister,",114,0.4230769230769231,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"/*implied*/","// For implied many-to-many, just add the end join.",433,0.4888888888888889,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// For implied many-to-many, just add the end join.","JoinSequence joinSequence = createJoinSequence( roleAlias, joinType );",434,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"// Interceptor returned null, so do the dirtycheck ourself, if possible","interceptorHandledDirtyCheck = false;",514,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"// Note this!!","}",129,0.5714285714285714,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/QuerySplitter.java
"// Error message constants.","public static final String ERROR_CANNOT_FETCH_WITH_ITERATE = "fetch may not be used with scroll() or iterate()";",48,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/QueryTranslator.java
"// the standard SQL function name is current_timestamp...","return "current_timestamp";",1362,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"//scan for next non-whitespace token","if ( nextIndex <= i ) {",108,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/QuerySplitter.java
"// This causes the factory to instantiate the desired class.","text );",500,0.7445255474452555,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/FromElementFactory.java
"//private Type[] sqlResultTypes;","private Type[] queryReturnTypes;",52,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"//private CacheEntry cacheEntry;","private Serializable generatedId;",45,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/EntityIdentityInsertAction.java
""//		TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );"","previousState,",3380,0.21311475409836064,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...","if ( lockMode==LockMode.PESSIMISTIC_FORCE_INCREMENT) {",104,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/FrontBaseDialect.java
""/*public Type[] getSqlResultTypes() {		return sqlResultTypes;	}*/"","* The types actually being returned from this query at the "object level".",88,0.7010309278350515,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"//sqlResultTypeList.add( type );","// If the data type is not an association type, it could not have been in the FROM clause.",157,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// Always add the type to the return type list.","queryReturnTypeList.add( type );",168,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).","entry.postUpdate( instance, state, nextVersion );",151,0.5481481481481482,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/EntityUpdateAction.java
"// this entity defines proeprty generation, so process those generated // values...","persister.processUpdateGeneratedProperties( id, instance, state, session );",143,0.9172932330827067,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/EntityUpdateAction.java
"// add the fetched entities","List fromElements = fromClause.getProjectionList();",177,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// just especially for the trivial collection filter","ArrayList placeholders = new ArrayList();",84,0.6666666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/QuerySplitter.java
"// need to look it up from the persistence-context","finalKey = session.getPersistenceContext().getEntry( collection.getOwner() ).getId();",115,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/CollectionAction.java
"//sort first by role name","int roleComparison = collectionRole.compareTo( action.collectionRole );",149,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/CollectionAction.java
"// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","protected void registerFunction(String name, SQLFunction function) {",462,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"//update last non-whitespace token, if necessary","if ( !ParserHelper.isWhitespace( tokens[i - 1] ) ) last = tokens[i - 1].toLowerCase();",99,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/QuerySplitter.java
"//then by fk","return persister.getKeyType()",155,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/CollectionAction.java
""// nothing to do		"","* {@inheritDoc}",113,0.8666666666666667,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/property/NoopAccessor.java
"/*ArrayList sqlResultTypeList,*/","None",None,None,None
"// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner","final PersistentCollection collection = getCollection();",52,0.6705882352941176,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/CollectionRecreateAction.java
"//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!","BEFORE_CLASS_TOKENS.add( "," );",56,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/QuerySplitter.java
"// remove initial ", "",".append( " where " )",58,0.4235294117647059,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/CollectionSubqueryFactory.java
"// Generate the select expression.","String text = fromElement.renderIdentifierSelect( size, k );",219,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// now update all changed or added rows fks","try {",246,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/OneToManyPersister.java
""//			boolean put = persister.getCache().insert(ck, cacheEntry);"","None",None,None,None
"// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",1399,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// Skip 'DISTINCT' and 'ALL', so we return the first expression node.","while ( n != null && ( n.getType() == SqlTokenTypes.DISTINCT || n.getType() == SqlTokenTypes.ALL ) ) {",336,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// Generate the property select tokens.","int k = 0;",399,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/SelectClause.java
"// Get the function name node.","AST name = getFirstChild();",61,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/MethodNode.java
"// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...","if (LA(1) == DOT && LA(2) != IDENT) {",356,0.6938775510204082,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// Method expressions in a SELECT should always be considered scalar.","return true;",143,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/MethodNode.java
"// areturn // return the value of the field","code.addOpcode(Opcode.ARETURN);",148,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"//do nothing - we only need to notify the cache...","}",68,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/CollectionUpdateAction.java
"//sort first by entity name","int roleComparison = entityName.compareTo( action.entityName );",147,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/EntityAction.java
"// If this is 'elements' then create a new FROM element.","if ( CollectionPropertyNames.COLLECTION_ELEMENTS.equals( propertyName ) ) {",151,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/MethodNode.java
"//then by id","return persister.getIdentifierType().compare( id, action.id, session.getEntityMode() );",153,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/action/EntityAction.java
"// Not elements(x)","fromElement = collectionNode.getFromElement();",156,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/MethodNode.java
"// Dialect function","ColumnHelper.generateSingleScalarColumn( this, i );",210,0.576271186440678,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/MethodNode.java
"// to be safe...","className = className.replace( '/', '.' );",54,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/AbstractClassTransformerImpl.java
"// Collection 'property function'","ColumnHelper.generateScalarColumns( this, selectColumns, i );",213,0.9090909090909091,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/MethodNode.java
"// If the constant is an IDENT, figure out what it means...","boolean isIdent = ( constant.getType() == IDENT || constant.getType() == WEIRD_IDENT );",100,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/LiteralProcessor.java
"// no transformations took place, so handle it as we would a // non-instrumented class","return getParent().loadClass( name );",66,0.8099173553719008,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/InstrumentedClassLoader.java
"// IDENT is a class alias in the FROM.","IdentNode ident = ( IdentNode ) constant;",102,0.5217391304347826,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/LiteralProcessor.java
"// Resolve to an identity column.","ident.resolve(false, true);",104,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/LiteralProcessor.java
"// see if the entry represents a class file","DataInputStream din = new DataInputStream( new ByteArrayInputStream( byteCode ) );",154,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/buildtime/AbstractInstrumenter.java
"// Otherwise, it's a literal.","else {",112,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/LiteralProcessor.java
"// the name of an entity class","final String discrim = persister.getDiscriminatorSQLValue();",123,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/LiteralProcessor.java
"//the class discriminator value","}",130,0.6436781609195402,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/LiteralProcessor.java
"// Add a space before the display text.","buf.append( " " ).append( displayableNode.getDisplayText() );",205,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/ASTPrinter.java
"// Find or create the WHERE clause","AST where = query.getWhereClause();",132,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SyntheticAndFactory.java
"// child == parent.getFirstChild()","parent.setFirstChild( child.getNextSibling() );",263,0.9253731343283582,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/ASTUtil.java
"// set the name of bulk accessor.","className = className + "_$$_bulkaccess_" + counter++;",110,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// invokespecial","code.addInvokespecial( BulkAccessor.class.getName(), MethodInfo.nameInit, cons_desc );",163,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// aload_1 // load bean","code.addAload( 1 );",182,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().","if ( fragment.getFromElement().isFilter() || fragment.hasFilterCondition() ) {",127,0.4217252396166134,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SyntheticAndFactory.java
"// checkcast // cast bean","code.addCheckcast( this.targetBean.getName() );",184,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// Put the FILTERS node before the HQL condition and theta joins","ASTUtil.insertChild( where, filters );",136,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SyntheticAndFactory.java
"// astore_3 // store bean","code.addAstore( 3 );",186,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// add the current fragment to the FILTERS node","filters.addChild( fragment );",140,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SyntheticAndFactory.java
"// Create a new THETA_JOINS node as a parent of all filters","thetaJoins = create( THETA_JOINS, "{theta joins}" );",147,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SyntheticAndFactory.java
"// aload_2 // args","code.addAload( 2 );",191,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// Put the THETA_JOINS node before the HQL condition, after the filters.","if (filters==null) {",149,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SyntheticAndFactory.java
"// First, try to get the persister using the given name directly.","try {",152,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SessionFactoryHelper.java
"// iconst_i // continue to aastore // growing stack is 1","code.addIconst( i ); // growing stack is 1",193,0.7733333333333333,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// unable to locate it using this name","}",157,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SessionFactoryHelper.java
"// If that didn't work, try using the 'import' name.","String importedClassName = sfi.getImportedClassName( name );",160,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SessionFactoryHelper.java
"// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)","joinSequence.addJoin( associationType, tableAlias, joinType, columns );",275,0.7783783783783784,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SessionFactoryHelper.java
"// locate the registered function by the given name","None",None,None,None
"// determine the type of the first argument...","Type argumentType = null;",396,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/SessionFactoryHelper.java
"// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.","for ( int j = 0; j < sqlColumns.length; j++ ) {",63,0.7058823529411765,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/ColumnHelper.java
"// Append the text of the current node.","buf.append( n.getText() );",282,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/ASTUtil.java
"// If the node has a first child, recurse into the first child.","if ( firstChild != null ) {",278,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/ASTUtil.java
"// new","rd.getFakeBidirectionalRelationMapper().mapToMapFromEntity(sessionImplementor, data,",154,0.3125,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/envers/src/main/java/org/hibernate/envers/synchronization/work/FakeBidirectionalRelationWorkUnit.java
"// If there is a second child (RHS), recurse into that child.","if ( firstChild != null && firstChild.getNextSibling() != null ) {",284,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/ASTUtil.java
"// aload_3 // load the raw bean","code.addAload( 3 );",205,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// invokevirtual","code.addInvokevirtual( target_type_index, getterName, getter_desc );",214,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// aastore // args","code.add( Opcode.AASTORE );",227,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// istore_3 // store i","code.addIstore( 3 );",253,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// aload_1 // load the bean","code.addAload( 1 );",255,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"/* current stack len = 0 */","// start region to handling exception (BulkAccessorException)",261,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.","Iterator iter = fromElements.iterator();",125,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/JoinProcessor.java
"// this is used during SqlGenerator processing","}",172,0.6015037593984962,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/JoinProcessor.java
"// start region to handling exception (BulkAccessorException)","start = code.currentPc();",262,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// If there is a FROM fragment and the FROM element is an explicit, then add the from part.","if ( fromElement.useFromFragment() /*&& StringHelper.isNotEmpty( frag )*/ ) {",175,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/JoinProcessor.java
"/*&& StringHelper.isNotEmpty( frag )*/","String fromFragment = processFromFragment( frag, join ).trim();",176,0.6730769230769231,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/JoinProcessor.java
"// iinc 3, 1","code.addOpcode( Opcode.IINC );",269,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// The FROM fragment will probably begin with ', '.  Remove this if it is present.","if ( fromFragment.startsWith( ", " ) ) {",199,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/util/JoinProcessor.java
"// aload 4 // load the raw bean","code.addAload( 4 );",277,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p","// The reason for this is SQL doesn't let you sort by an expression you are",39,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/OrderByParser.java
"// oracle sql-state code for deadlock","return new LockAcquisitionException( message, sqlException, sql );",111,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/exception/SQLStateConverter.java
"// aload_2 // load the args","code.addAload( 2 );",279,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// Otherwise, try to use the no-arg constructor","return ( SQLExceptionConverter ) converterClass.newInstance();",127,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/exception/SQLExceptionConverterFactory.java
"// iconst_i","code.addIconst( i ); // growing stack is 1",193,0.5128205128205128,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// eat it and try next","}",121,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/exception/SQLExceptionConverterFactory.java
"// aaload","code.addOpcode( Opcode.AALOAD );",283,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// checkcast","code.addCheckcast( this.targetBean.getName() );",184,0.6875,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"//default mode","private boolean useThetaStyleJoin = true;",75,0.37681159420289856,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"// checkcast (case of reference type)","Class[] setterParamTypes = setters[i].getParameterTypes();",285,0.5116279069767442,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"/* current stack len = 2 */","String rawSetterMethod_desc = RuntimeSupport.makeDescriptor( setters[i] );",297,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible","None",None,None,None
"// end region to handling exception (BulkAccessorException)","end = code.currentPc();",318,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// register in exception table","int throwableType_index = cp.addClassInfo( THROWABLE_CLASS_NAME );",323,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// Private constructor - stops checkstyle from complaining.","}",50,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/exception/SQLExceptionConverterFactory.java
"//reset the dotcount (but not the path) //after reset!","None",None,None,None
"//after reset!","currentPropertyMapping = q.getPropertyMapping( currentName );",132,0.5909090909090909,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here","public SoftLock lockItem(Object key, Object version) throws CacheException {",105,0.7662337662337663,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/entity/TransactionalAccess.java
"// dotcount>=2","// Do the corresponding RHS",170,0.8387096774193549,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"/* local variables | target obj | each oldvalue | */","Bytecode code = new Bytecode(cp, 5, 3);",215,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// astore 5 // store exception","code.addAstore( 5 );",326,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// aload 5 // load exception","code.addAload( 5 );",332,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"/* | this | bean | args | raw bean | */","if ( getters.length >= 0 ) {",180,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// iload_3 // i","code.addIload( 3 );",334,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// Do the corresponding RHS","Type propertyType = getPropertyType();",172,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"// invokespecial // BulkAccessorException.<init>","code.addInvokespecial( BulkAccessor.class.getName(), MethodInfo.nameInit, cons_desc );",163,0.5,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// athrow","code.addOpcode( Opcode.ATHROW );",339,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// WARNING: classfile only","classfile = new ClassFile( new DataInputStream( new ByteArrayInputStream( classfileBuffer ) ) );",64,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/JavassistClassTransformer.java
"//if its "id"","boolean isIdShortcut = EntityPersister.ENTITY_ID.equals( propertyName ) &&",201,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"//swallow","log.error( "could not close session during rollback", e );",191,0.32142857142857145,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/transaction/JTATransaction.java
"//or its the id property name","final String idPropertyName;",205,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"//join = q.createJoinFragment(useThetaStyleJoin);","dotcount = 0;",310,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"/* local variable | this | */","Bytecode code = new Bytecode(cp, 2, 1);",139,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"//important!!","continuation = false;",347,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"// an association","QueryableCollection collectionPersister = q.getCollectionPersister( collectionRole );",463,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"// aload_0 // load this","code.addAload(0);",141,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"//allow index() function:","q.decoratePropertyMapping( elementName, collectionPersister );",471,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"// aload_1 // load callback","code.addAload(1);",165,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// case of non-static field","if (filter.handleRead(finfo.getDescriptor(), finfo",195,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// log a message about potential connection leaks","log.debug( "transaction completed on session with on_close connection release mode; be sure to close the session to release JDBC resources!" );",324,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/ConnectionManager.java
"// getfield // get each field","code.addOpcode(Opcode.GETFIELD);",219,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// ifnonnull","code.addOpcode(Opcode.IFNONNULL);",231,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// *return // each type","addTypeDependDataReturn(code, finfo.getDescriptor());",234,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// *store_1 // each type","addTypeDependDataStore(code, finfo.getDescriptor(), 1);",236,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"//many-to-many","addCollection( collectionName, collectionRole );",906,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"// ldc // name of the field","code.addLdc(finfo.getName());",246,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"//opening paren in new Foo ( ... )","ready = true;",116,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/SelectParser.java
"//if we are inside a new Result(), but not inside a nested function","insideNew = false;",129,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/SelectParser.java
"// invokeinterface // invoke Callback.read*() // each type","code.addInvokeinterface( target_type_index, getterName, getter_desc, 1 );",210,0.5,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"//special case","}",260,0.2653061224489796,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/type/EntityType.java
"// the name of an SQL function","if ( !ready ) throw new QueryException( ", expected before aggregate function in SELECT: " + token );",150,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/SelectParser.java
"//this is basically a copy/paste of OrderByParser ... might be worth refactoring","// This uses a PathExpressionParser but notice that compound paths are not valid,",35,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/GroupByParser.java
"// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p","// The reason for this is SQL doesn't let you sort by an expression you are",40,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/GroupByParser.java
"// return aliases not supported in classic translator!","return NO_RETURN_ALIASES;",298,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"//register collection role","addCollection( name, collectionRole );",471,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.","t = create( c );",222,0.6984126984126984,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/SqlASTFactory.java
"// The keyword used to specify an identity column, if identity column key generation is supported.","return "identity";",503,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Cache71Dialect.java
"//following doesn't handle (null, not null) but unnecessary //since this would mean all rows","if ( values.size()>1 ) {",75,0.7938931297709924,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/sql/InFragment.java
"//crossJoins.add(name);","addFrom( name, classPersister.getEntityName(), joinSequence );",486,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"//ie no select clause in HQL","returnedTypes = fromTypes;",567,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"// invokeinterface // enabled.getInterceptFieldCallback()","code.addInvokeinterface( target_type_index, getterName, getter_desc, 1 );",210,0.4788732394366197,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// ifnonnull (label1)","code.addOpcode(Opcode.IFNONNULL);",231,0.7333333333333333,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// we are the LHS of the DOT representing a naked comp-prop-ref","setResolved();",109,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/IdentNode.java
"// *load_1","addTypeDependDataLoad(code, finfo.getDescriptor(), 1);",248,0.6428571428571429,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"//ie. no select clause","int size = returnedTypes.size();",720,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"// putfield","code.addOpcode(Opcode.PUTFIELD);",167,0.3076923076923077,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"//there _was_ a select clause","Iterator iter = scalarSelectTokens.iterator();",739,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"// return ;","code.addOpcode(Opcode.RETURN);",290,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// ldc // field name","code.addLdc(finfo.getName());",302,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// getfield // old value of the field","code.addOpcode(Opcode.GETFIELD);",306,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// return the concrete type, or the underlying type if a concrete type // was not specified","return type == null ? columnType : type;",93,0.8721804511278195,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/function/StandardSQLFunction.java
"// not array","type = typeName.substring(1, typeName.length() - 1);",417,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// array of reference type","type = typeName.replace('/', '.');",425,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"//q.addCollection(collectionName, collectionRole);","QueryableCollection persister = getCollectionPersister( collectionRole );",889,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"// boolean","if ( Boolean.TYPE.equals( javaType ) ) {",71,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/TypeLocatorImpl.java
"// char","if ( Character.TYPE.equals( javaType ) ) {",79,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/TypeLocatorImpl.java
"// short","namedParamsCopy.put( name, new TypedValue( type, vals.iterator().next(), session.getEntityMode() ) );",755,0.358974358974359,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/AbstractQueryImpl.java
"// classic parser does not support bulk manipulation statements","return false;",1161,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"// float","if ( Float.TYPE.equals( javaType ) ) {",119,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/TypeLocatorImpl.java
"// This is called when it's time to fully resolve a path expression.","ResolvableNode r = ( ResolvableNode ) node;",861,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// can't cache this stuff either (per-invocation)","final String result;",1073,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"// This is the legacy behaviour for HQL queries...","if ( getCollectionPersisters() != null ) {",1150,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"// bad type","throw new RuntimeException("bad type: " + typeName);",520,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"// not known!","}",1175,0.7333333333333333,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"// boolean, byte, char, int, short","code.addIload(i);",535,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/FieldTransformer.java
"//Need this, since join condition can appear inside parens!","}",69,0.68,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"//expressionOpeners.add(","); // deliberately excluded","BOOLEAN_OPERATORS.add( "<" );",86,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"//Mainly for OSCache","public String toString() {",71,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/CacheKey.java
"//decrement the lock","lock.unlock( cache.nextTimestamp() );",209,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/ReadWriteCache.java
"//recache the updated state","cache.update( key, new Item( value, version, cache.nextTimestamp() ) );",286,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/ReadWriteCache.java
"// noop","}",333,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/ReadWriteCache.java
"//null clientLock is remotely possible but will never happen in practice","return myLock!=null &&",357,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/ReadWriteCache.java
"//by requiring <, we rely on lock timeout in the case of an unsuccessful update!","}",487,0.7630057803468208,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/ReadWriteCache.java
"// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.","private final ResultTransformer customTransformer;",59,0.8177339901477833,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/QueryKey.java
"// disassemble positional parameters","final int positionalParameterCount = queryParameters.getPositionalParameterTypes().length;",84,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/QueryKey.java
"// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)","// potentialTrimCharacterArgIndex = 1 assumes that a",66,0.29714285714285715,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/function/TrimFunctionTemplate.java
"// this is called from SettingsFactory irregardless; trivial to simply disregard","return false;",77,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/NoCacheProvider.java
"// Do nothing; subclasses may override.","}",51,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/AbstractJndiBoundCacheProvider.java
"// TABLE","Attribute schemaNode = node.attribute( "schema" );",957,0.7777777777777778,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//Inside a BETWEEN ... AND ... expression","private boolean negated = false;",177,0.6422018348623854,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean","None",None,None,None
"//ie. a many-to-many","String entityName = ( ( EntityType ) type ).getAssociatedEntityName();",201,0.6,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"//Cope with [,]","if ( token.equals( "[" ) && !expectingPathContinuation ) {",216,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"//Cope with a continued path expression (ie. ].baz)","if ( expectingPathContinuation ) {",228,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"//Cope with a subselect","if ( !inSubselect && ( lcToken.equals( "select" ) || lcToken.equals( "from" ) ) ) {",234,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// use the id value of a newly instantiated instance as the unsaved-value","Serializable defaultValue = (Serializable) identifierGetter.get( instantiate(constructor) );",66,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/UnsavedValueFactory.java
"//Close extra brackets we opened","if ( !betweenSpecialCase && EXPRESSION_TERMINATORS.contains( lcToken ) ) {",268,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"//take note when this is a boolean expression","if ( BOOLEAN_OPERATORS.contains( lcToken ) ) {",273,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load","settings.getDefaultEntityMode(),",677,0.23076923076923078,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"// no-op; CCS did not have such a concept","return null;",76,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/impl/bridge/EntityAccessStrategyAdapter.java
"// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.","joinFragment.setHasFilterCondition( joinFragment.addCondition( filterCondition ) );",164,0.6183206106870229,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/JoinSequence.java
"//process a token, mapping OO path expressions to SQL expressions","doToken( token, q );",285,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"//Open any extra brackets we might need.","if ( !betweenSpecialCase && EXPRESSION_OPENERS.contains( lcToken ) ) {",288,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"//Cope with special cases of AND, NOT, )","specialCasesAfter( lcToken );",293,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// the next one up must also be","booleanTests.removeLast();",317,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// Add any joins","appendToken( q, ( joins.removeLast() ).toString() );",322,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// get meta's from <hibernate-mapping>","inheritedMetas = getMetas( hmNode, inheritedMetas, true );",149,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// get meta's from <class>","bindRootPersistentClassCommonValues( node, inheritedMetas, mappings, rootClass );",320,0.46808510638297873,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//path expression","doPathExpression( q.unalias( token ), q );",404,0.4507042253521127,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// DB-OBJECTNAME","Attribute schemaNode = node.attribute( "schema" );",328,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// just decrement the lock, don't recache // (we don't know which transaction won)","decrementLock(key, lock);",280,0.6730769230769231,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/ReadWriteCache.java
"// MUTABLE","Attribute mutableNode = node.attribute( "mutable" );",353,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!","private Map unownedCollections;",118,0.7295597484276729,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// WHERE","Parameters rootParameters = qb.getRootParameters();",91,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/envers/src/main/java/org/hibernate/envers/entities/mapper/relation/query/ThreeEntityQueryGenerator.java
"// POLYMORPHISM","Attribute polyNode = node.attribute( "polymorphism" );",365,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// properties that we have tried to load, and not found in the database","createClassProperties( node, subclass, mappings, inheritedMetas );",872,0.34285714285714286,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// the path expression continues after a ]","doPathExpression( getElementName( element, q ) + token, q ); // careful with this!",498,0.7291666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// careful with this!","addToCurrentJoin( element );",500,0.4090909090909091,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// the path expression ends at the ]","if ( element.elementColumns.length != 1 ) {",507,0.9206349206349206,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/WhereParser.java
"// "finish off" the join","token( ".", q );",37,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/FromPathExpressionParser.java
"//NOTICE: no " or . since they are part of (compound) identifiers","public static final String PATH_SEPARATORS = ".";",37,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/ParserHelper.java
"//cannot instantiate","}",45,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/ParserHelper.java
"// start by looking for HQL keywords...","String lcToken = token.toLowerCase();",68,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/FromParser.java
"// inner joins can be abbreviated to 'join'","joinType = JoinFragment.INNER_JOIN;",78,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/FromParser.java
"// 'outer' is optional and is ignored","if ( !afterJoinType ||",96,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/FromParser.java
"// now anything that is not a HQL keyword","if ( afterAs || expectingAs ) {",131,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/FromParser.java
"// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions","if ( alias == null ) throw new QueryException( "alias not specified for: " + token );",155,0.7299270072992701,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/FromParser.java
"// treat it as a classname","Queryable p = q.getEntityPersisterUsingImports( token );",163,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/FromParser.java
"// treat it as a path expression","peParser.setJoinType( JoinFragment.INNER_JOIN );",169,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/FromParser.java
"// starts with a path expression (new style)","// force HQL style: from Person p inner join p.cars c",206,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/FromParser.java
"//allow ODMG OQL style: from Person p, p.cars c","if ( joinType != NONE ) {",211,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/FromParser.java
"//handle quoted strings","if ( quoted ) {",74,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PreprocessingParser.java
"// VERSION / TIMESTAMP","bindVersioningProperty( table, subnode, mappings, name, entity, inheritedMetas );",389,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// Primary key constraint","PrimaryKey pk = new PrimaryKey();",108,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Join.java
"// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag","if ( "version".equals( name ) ) {",503,0.8275862068965517,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity","private ArrayList insertions;",74,0.65625,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/ActionQueue.java
"//ignore whitespace","if ( ParserHelper.isWhitespace( token ) ) return;",89,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PreprocessingParser.java
"//do replacements","String substoken = ( String ) replacements.get( token );",92,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PreprocessingParser.java
"//handle HQL2 collection syntax","if ( currentCollectionProp != null ) {",96,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PreprocessingParser.java
"// uuid.hex is deprecated","register( "hilo", TableHiLoGenerator.class );",72,0.4943820224719101,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/factory/DefaultIdentifierGeneratorFactory.java
"// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","protected String getSelectSQL() {",129,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/SelectGenerator.java
"//hilo params","public static final String MAX_LO = "max_lo";",105,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/MultipleHiLoPerTableGenerator.java
"//sql = query;","None",None,None,None
"//for EJB3","private transient long timestamp;",165,0.35294117647058826,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// performance opt","return 0;",1470,0.6153846153846154,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
"//sql = update;","SQL_STATEMENT_LOGGER.logStatement( sql, FormatStyle.BASIC );",208,0.9166666666666666,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/TableGenerator.java
"//hilo config","maxLo = PropertiesHelper.getInt(MAX_LO, params, Short.MAX_VALUE);",278,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/MultipleHiLoPerTableGenerator.java
"// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(","log.info( "disallowing insert statement comment for select-identity due to Oracle driver bug" );",117,0.7317073170731707,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/SequenceIdentityGenerator.java
"//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");",""attempted to assign id from null one-to-one property [" + getRole() + "]"",102,0.5241379310344828,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/ForeignGenerator.java
"//count++;","}",205,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/BatchFetchQueue.java
"// go ahead and set the lazy here, since pojo.proxy can override it.","persistentClass.setLazy( lazy );",561,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// DYNAMIC UPDATE","Attribute dynamicNode = node.attribute( "dynamic-update" );",652,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// IMPORT","mappings.addImport( entity.getEntityName(), entity.getEntityName() );",664,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// BATCH SIZE","Attribute batchNode = node.attribute( "batch-size" );",673,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// we need to dirty check collections, since they can cause an owner // version number increment","// we need to dirty check many-to-ones with not-found="ignore" in order",145,0.8235294117647058,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/PropertyFactory.java
"// SELECT BEFORE UPDATE","Attribute sbuNode = node.attribute( "select-before-update" );",677,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// OPTIMISTIC LOCK MODE","Attribute olNode = node.attribute( "optimistic-lock" );",681,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//first element of array is reserved for the actual instance we are loading!","int i = 1;",236,0.927536231884058,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/BatchFetchQueue.java
"// do nothing until we hit the rsult set containing the generated id","else {",1316,0.3283582089552239,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// Use the delegate, resolve identifiers as FROM element aliases.","}",960,0.7,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"// Loaded entity instances, by EntityKey","private Map entitiesByKey;",83,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// if the given name is un-qualified we may neen to qualify it","String schemaName = normalizer.normalizeIdentifierQuoting( params.getProperty( SCHEMA ) );",337,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/enhanced/TableGenerator.java
"// the default...","return new NoopOptimizer( returnClass, incrementSize );",112,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/enhanced/OptimizerFactory.java
"// cascade-save to many-to-one BEFORE the parent is saved","source.getPersistenceContext().incrementCascadeLevel();",447,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractSaveEventListener.java
"// properties","createClassProperties( node, subclass, mappings, inheritedMetas );",872,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// joined subclasses","if ( joinedSubclass.getEntityPersisterClass() == null ) {",902,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//even process null collections","return processCollection( value, (CollectionType) type );",121,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractVisitor.java
"//keep the existing version number in the case of replicate!","if ( persister.isVersioned() ) {",421,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractSaveEventListener.java
"//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );","// TODO : perhaps we should additionally require that the incoming entity",459,0.36363636363636365,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"// Identity map of CollectionEntry instances, by the collection wrapper","private Map collectionEntries;",102,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// TABLENAME","Attribute schemaNode = node.attribute( "schema" );",957,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public static final String VALUE_COLUMN_PARAM = "value_column";",117,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/enhanced/SequenceStyleGenerator.java
"// join.getKey().setType( new Type( lazz.getIdentifier() ) );",".getColumnIterator() );",360,0.4507042253521127,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Collection.java
"//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed","public boolean shouldAutoClose() {",333,0.42105263157894735,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/StatelessSessionImpl.java
"// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",340,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/enhanced/SequenceStyleGenerator.java
"// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",350,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/enhanced/SequenceStyleGenerator.java
"// prepare and execute the insert","PreparedStatement insert = session.getBatcher().prepareStatement( insertSQL, false );",53,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/insert/AbstractSelectingDelegate.java
"// COLUMN(S)","Attribute columnAttribute = node.attribute( "column" );",1064,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// if everything went ok, commit the transaction and close the obtained // connection handle...","None",None,None,None
"//fetch the generated id in a separate query","PreparedStatement idSelect = session.getBatcher().prepareStatement( selectSQL );",75,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/id/insert/AbstractSelectingDelegate.java
"// we just hit the last position","maxPosition = new Integer( currentPosition );",109,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/FetchingScrollableResultsImpl.java
"// scroll ahead","for ( int i = 0; i < positions; i++ ) {",158,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/FetchingScrollableResultsImpl.java
"// scroll backward","for ( int i = 0; i < ( 0 - positions ); i++ ) {",167,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/FetchingScrollableResultsImpl.java
"// column index","bindIndex( columnElement.attribute( "index" ), table, column, mappings );",1091,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// we have not yet hit the last result...","return false;",288,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/FetchingScrollableResultsImpl.java
"// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public SessionImplementor getSession() {",113,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/CriteriaImpl.java
"// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public String getAlias() {",153,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/CriteriaImpl.java
"//column unique-key","bindUniqueKey( columnElement.attribute( "unique-key" ), table, column, mappings );",1094,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.","Object[] entitySnapshot = getDatabaseSnapshot( id, persister );",316,0.6057142857142858,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public SessionImplementor getSession() {",113,0.971830985915493,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/CriteriaImpl.java
"// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public String getAlias() {",153,0.9714285714285714,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/CriteriaImpl.java
"// Caches","settings.getRegionFactory().start( settings, properties );",255,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"//Generators:","identifierGenerators = new HashMap();",258,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"// cache region is defined by the root-class in the hierarchy...","EntityRegionAccessStrategy accessStrategy = ( EntityRegionAccessStrategy ) entityAccessStrategies.get( cacheRegionName );",291,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"//JNDI + Serialization:","name = settings.getSessionFactoryName();",375,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"//checking for named queries","if ( settings.isNamedQueryStartupCheckingEnabled() ) {",428,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"//stats","getStatistics().setStatisticsEnabled( settings.isStatisticsEnabled() );",447,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"// Check named HQL queries","log.debug("Checking " + namedQueries.size() + " named HQL queries");",558,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"//prevents this session from adding things to cache","}",664,0.676923076923077,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"//for a dynamic-class","}",850,0.5671641791044776,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"//test this entity to see if we must query it","EntityPersister testPersister = (EntityPersister) iter.next();",856,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"//NOTE EARLY EXIT","}",864,0.5084745762711864,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"// for backward-compatability","if ( impl == null && transactionManager != null ) {",1258,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
"// ignore this error for now","log.trace( "exception trying to cleanup load context : " + ignore.getMessage() );",136,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/AbstractScrollableResults.java
"//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization","if (name==null) {",103,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionFactoryObjectFactory.java
"// look for existing collection as part of the persistence context","PersistentCollection collection = loadContexts.getPersistenceContext().getCollection( collectionKey );",117,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/loading/CollectionLoadContext.java
"// Make sure this is a defined parameter and check the incoming value type","// TODO: what should be the actual exception type here?",94,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/FilterImpl.java
"// for each of the defined parameters, make sure its value // has been set","Iterator itr = definition.getParameterNames().iterator();",163,0.8888888888888888,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/FilterImpl.java
"//we never need to apply locks to the SQL","return null;",265,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SQLQueryImpl.java
"// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public void delete(Object entity) {",122,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/StatelessSessionImpl.java
"// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public void update(Object entity) {",138,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/StatelessSessionImpl.java
"// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public Object get(Class entityClass, Serializable id) {",164,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/StatelessSessionImpl.java
"// select-range is terminated by declaration of "from"","if ( "from".equals( tokens[i].toLowerCase() ) ) isSelectClause = false;",102,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/QuerySplitter.java
"// for an any","if ( typeNode != null ) typeName = typeNode.getValue();",1202,0.273972602739726,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// insertable simply because that is the user did not specify // anything; just override it","property.setInsertable( false );",1285,0.8031496062992126,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// properties generated on update can never be updateable...","createClassProperties( node, subclass, mappings, inheritedMetas );",872,0.375,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// updateable only because the user did not specify  // anything; just override it","property.setInsertable( false );",1286,0.5376344086021505,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// the user specifically supplied update="true", // which constitutes an illegal combo","throw new MappingException(",1291,0.5981308411214953,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// ROLENAME","collection.setRole(path);",1358,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// first, try to load it from the temp PC associated to this SS","Object loaded = temporaryPersistenceContext.getEntity( new EntityKey( id, persister, getEntityMode() ) );",268,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/StatelessSessionImpl.java
"// otherwise immediately materialize it","return get( entityName, id );",280,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/StatelessSessionImpl.java
"// no auto-flushing to support in stateless session","return false;",668,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/StatelessSessionImpl.java
"// FETCH STRATEGY","initOuterJoinFetchSetting( node, collection );",1425,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//after setting values to object, entityMode","session",217,0.8478260869565217,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/TwoPhaseLoad.java
"// SORT","Attribute sortedAtt = node.attribute( "sort" );",1493,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public void saveOrUpdate(Object object) throws HibernateException {",669,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public void update(Object obj) throws HibernateException {",718,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public void lock(String entityName, Object object, LockMode lockMode) throws HibernateException {",746,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public void persist(String entityName, Object object) throws HibernateException {",778,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public void persistOnFlush(String entityName, Object object)",812,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",927,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public void load(Object object, Serializable id) throws HibernateException {",969,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public void refresh(Object object) throws HibernateException {",1094,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// unsorted, natural, comparator.class.name","if ( sortedAtt == null || sortedAtt.getValue().equals( "unsorted" ) ) {",1495,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public void replicate(Object obj, ReplicationMode replicationMode) throws HibernateException {",1131,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// set up second pass","if ( collection instanceof List ) {",1515,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// do not auto-flush while outside a transaction","return false;",1178,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// this is an internal error of some sort...","throw new InternalError( "Unable to locate type for filter parameter" );",153,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/LoadQueryInfluencers.java
"//do not return a proxy! //(this option indicates we are initializing a proxy)","event.setResult( load(event, persister, keyToLoad, loadType) );",145,0.46511627906976744,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultLoadEventListener.java
"// for an any // we will have to use reflection","None",None,None,None
"//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete","if ( e != null && e.getStatus() != Status.DELETED && e.getStatus() != Status.GONE ) {",116,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/Collections.java
"// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query","flush();",1577,0.6878980891719745,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// not for internal use:","public Serializable getIdentifier(Object object) throws HibernateException {",1507,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// otherwise, we only need to flush if there are in-memory changes // to the queried tables","plan = factory.getQueryPlanCache().getFilterQueryPlan( filter, roleBeforeFlush.getRole(), shallow, getEnabledFilters() );",1588,0.8461538461538461,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted","object = li.getImplementation();",1752,0.4810126582278481,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// decode row selection...","final RowSelection selection = queryParameters.getRowSelection();",115,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cache/QueryKey.java
"// basically just an adapted copy of find(CriteriaImpl)","public List listCustomQuery(CustomQuery customQuery, QueryParameters queryParameters)",1824,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// we need to writeObject() on this since interceptor is user defined","oos.writeObject( interceptor );",2196,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// the old-time stand-by...","return entity.getClass().getName();",2325,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// parameter bind values...","private List values = new ArrayList(4);",85,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/AbstractQueryImpl.java
"// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",247,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/AbstractQueryImpl.java
"// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public Object uniqueResult() throws HibernateException {",856,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/AbstractQueryImpl.java
"//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy","// default to join and non-lazy for the "second join"",2025,0.3302752293577982,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// use old (HB 2.1) defaults if outer-join is specified","String eoj = jfNode.getValue();",2043,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// we have a CGLIB enhanced entity","return CGLIBHelper.extractFieldInterceptor( entity );",72,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/intercept/FieldInterceptionHelper.java
"// we have a Javassist enhanced entity","return JavassistHelper.extractFieldInterceptor( entity );",76,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/intercept/FieldInterceptionHelper.java
"// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public final void setSession(SessionImplementor session) {",52,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/intercept/AbstractFieldInterceptor.java
"// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","protected final Object intercept(Object target, String fieldName, Object value) {",79,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/intercept/AbstractFieldInterceptor.java
"// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public boolean readBoolean(Object target, String name, boolean oldValue) {",64,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/intercept/javassist/FieldInterceptorImpl.java
"// should *not* need to grow beyond the size of the total number of columns in the rs","this.columnNameToIndexCache = new HashMap( columnCount + (int)( columnCount * LOAD_FACTOR ) + 1, LOAD_FACTOR );",42,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/jdbc/ColumnNameCache.java
"// should probably no-op commit/rollback here, at least in JTA scenarios","if ( !useable ) {",64,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/BorrowedConnectionProxy.java
"// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public static final Expectation NONE = new Expectation() {",160,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/Expectations.java
"// explicitly perform no checking...","None",None,None,None
"// used from testsuite","return borrowedConnection != null;",173,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/ConnectionManager.java
"// GENERATOR","Element subnode = node.element( "generator" );",2065,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// register synch; stats.connect()","}",456,0.6888888888888889,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/ConnectionManager.java
"// calls executeBatch()","batchUpdateSQL=sql;",244,0.5526315789473685,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
"//no big deal","log.warn( "Could not close a JDBC prepared statement", sqle );",328,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
"// no big deal","log.warn( "Could not close a JDBC prepared statement", sqle );",328,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
"// see explanation above...","log.info( "encountered CME attempting to release batcher; assuming cause is tx-timeout scenario and ignoring" );",372,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
"// If we are in the process of releasing, no sense // checking for aggressive-release possibility.","connectionManager.afterStatement();",570,0.6504065040650406,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
"// EARLY EXIT!!!!","return;",601,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/AbstractBatcher.java
"// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","None",None,None,None
"// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","None",None,None,None
"// ID UNSAVED-VALUE","Attribute nullValueNode = node.attribute( "unsaved-value" );",2099,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// VERSION UNSAVED-VALUE","Attribute nullValueNode = node.attribute( "unsaved-value" );",2116,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// not necessarily a *unique* property reference","if ( propertyRef != null ) {",2276,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// Bind the where","Attribute where = manyToManyNode.attribute( "where" );",2591,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// refer to comment in StatefulPersistenceContext.addCollection()","role,",428,0.3783783783783784,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryReturnProcessor.java
"// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","public void connectionOpened() {",128,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/JDBCContext.java
"// Note : success = false, because we don't know the outcome of the transaction","}",139,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/JDBCContext.java
"// Bind the order-by","Attribute order = manyToManyNode.attribute( "order-by" );",2596,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.","return true;",176,0.42727272727272725,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/JDBCContext.java
"// Bind the filters","Iterator filters = manyToManyNode.elementIterator( "filter" );",2601,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
""// overriding inherited meta attribute. HBX-621 & HBX-793			"","None",None,None,None
"// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.","subclasses[0] = hmNode.elementIterator( "subclass" );",3084,0.5752212389380531,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"//SessionFactory name:","String sessionFactoryName = props.getProperty(Environment.SESSION_FACTORY_NAME);",83,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/SettingsFactory.java
"//JDBC and connection settings:","ConnectionProvider connections = createConnectionProvider(props);",88,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/SettingsFactory.java
"//Interrogate JDBC metadata","boolean metaSupportsScrollable = false;",93,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/SettingsFactory.java
"// user supplied JDBC connections","dialect = DialectFactory.buildDialect( props );",150,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/SettingsFactory.java
"// Transaction settings:","TransactionFactory transactionFactory = createTransactionFactory(properties);",171,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/SettingsFactory.java
"//SQL Generation settings:","String defaultSchema = properties.getProperty(Environment.DEFAULT_SCHEMA);",227,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/SettingsFactory.java
"//Query parser settings:","settings.setQueryTranslatorFactory( createQueryTranslatorFactory(properties) );",255,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/SettingsFactory.java
"// Second-level / query cache:","boolean useSecondLevelCache = PropertiesHelper.getBoolean(Environment.USE_SECOND_LEVEL_CACHE, properties, true);",267,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/SettingsFactory.java
"//SQL Exception converter:","SQLExceptionConverter sqlExceptionConverter;",298,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/SettingsFactory.java
"//Statistics and logging:","boolean showSql = PropertiesHelper.getBoolean(Environment.SHOW_SQL, properties);",310,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/SettingsFactory.java
"//postInitialize() will be called after initialization","}",115,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/CollectionEntry.java
"// cannot handle single quotes","}",137,0.5306122448979592,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/jdbc/util/BasicFormatterImpl.java
"//Schema export:","String autoSchemaExport = properties.getProperty(Environment.HBM2DDL_AUTO);",329,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/SettingsFactory.java
""// todo : for 4.0 //	private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); // this is the legacy logging 'category'..."",".getLogger(DefaultValueComponents.class);",51,0.47126436781609193,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/envers/src/test/java/org/hibernate/envers/test/integration/components/DefaultValueComponents.java
"//if dotted and not load-collection nor return-join //regular property","properties.add(propertyresult);",196,0.43037974683544306,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/ResultSetMappingBinder.java
"// don't even bother trying to read further","return null;",416,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
""//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 //	private BytecodeProvider bytecodeProvider;"","private Interceptor interceptor;",197,0.7867298578199052,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Configuration.java
"// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","//	public boolean isShowSqlEnabled() {",109,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Settings.java
"// generated properties can *never* be insertable...","if ( property.isInsertable() ) {",1282,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","//	void setShowSqlEnabled(boolean b) {",316,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Settings.java
""//	public BytecodeProvider getBytecodeProvider() { //		return bytecodeProvider; //	} // //	void setBytecodeProvider(BytecodeProvider bytecodeProvider) { //		this.bytecodeProvider = bytecodeProvider; //	}"","None",None,None,None
"// using local since the inheritedMetas at this point is not the correct map since it is always the empty map","collection.createAllKeys();",65,0.7807017543859649,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/CollectionSecondPass.java
""//	protected List extendsQueue;"","protected Map extendsQueue;",190,0.9666666666666667,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Configuration.java
""//		extendsQueue = new ArrayList();"","extendsQueue = new HashMap();",248,0.9696969696969697,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Configuration.java
""//		componentTuplizerFactory = new ComponentTuplizerFactory();"","identifierGeneratorFactory = new DefaultIdentifierGeneratorFactory();",261,0.9833333333333333,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Configuration.java
"// if doc is null, then for whatever reason, the cached file cannot be used...","None",None,None,None
"// position cursor to the last row","resultSet.last();",493,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing","boolean firstPass = true;",510,0.45643153526970953,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// Read backwards until we read past the first physical sequential // row with the key we are interested in loading","while ( resultSet.previous() ) {",543,0.7417218543046358,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading","resultSet.next();",559,0.6802721088435374,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// This method may be called many times!!","protected void secondPassCompile() throws MappingException {",1214,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Configuration.java
"// force the proxy to resolve itself","( (HibernateProxy) proxy ).getHibernateLazyInitializer().setImplementation(entity);",630,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// this is equivalent to the old behavior...","}",119,0.8222222222222222,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/EntityEntry.java
"//if null, owner will be retrieved from session","final CollectionPersister collectionPersister = collectionPersisters[i];",761,0.9411764705882353,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
""//			Iterator iterator = extendsQueue.iterator();"","Iterator iterator = extendsQueue.keySet().iterator();",1286,0.9787234042553191,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Configuration.java
""//		Iterator iter = extendsQueue.iterator();"","Iterator iter = extendsQueue.keySet().iterator();",1307,0.9761904761904762,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Configuration.java
"// found","constructor.setAccessible( true );",151,0.1686746987951807,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/tuple/entity/EntityTuplizerFactory.java
"//final String queryString,","collection,",1394,0.6486486486486487,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
""//	private final List extendsQueue;"","None",None,None,None
"//<String, String>","None",None,None,None
"//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227","GLOBAL_PROPERTIES.setProperty( USE_REFLECTION_OPTIMIZER, Boolean.FALSE.toString() );",593,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/Environment.java
"//orphan delete not supported for EntityMode.DOM4J","return CollectionHelper.EMPTY_COLLECTION;",108,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentIndexedElementHolder.java
"//element = XMLHelper.generateDom4jElement( persister.getNodeName() );","final String nodeName = persister.getNodeName();",117,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentIndexedElementHolder.java
"//we can reuse it for each row","if ( log.isTraceEnabled() ) log.trace( "processing result set" );",820,0.5393258426966292,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"//can't reuse in this case","}",843,0.5945945945945946,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"//needed for SOAP libraries, etc","/**",108,0.7,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentList.java
"// any earlier proxy takes precedence","if ( !proxiesByKey.containsKey( key ) ) {",568,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// First we need to suspend any current JTA transaction and obtain // a JDBC connection","None",None,None,None
"//if we only returned one entity, query by key is more efficient","Set[] keySets = transpose(keys);",889,0.8548387096774194,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// the element has been removed from the set","deletes.add(test);",383,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentSet.java
"// the element has changed","deletes.add(oldValue);",392,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentSet.java
"//Careful: these methods do not initialize the collection.","/**",102,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/AbstractPersistentCollection.java
"//needed so that we remove this collection from the second-level cache","}",278,0.916030534351145,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/AbstractPersistentCollection.java
"// override on some subclasses","initializing = true;",331,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/AbstractPersistentCollection.java
"//override on some subclasses","initializing = true;",331,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/AbstractPersistentCollection.java
"//do this bit after setting initialized to true or it will recurse","if (operationQueue!=null) {",345,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/AbstractPersistentCollection.java
"// create the collection holding the Orphans","Collection res = new ArrayList();",906,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/AbstractPersistentCollection.java
"// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access","java.util.Set currentIds = new HashSet();",909,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/AbstractPersistentCollection.java
"// iterate over the *old* list","for ( Iterator it=oldElements.iterator(); it.hasNext(); ) {",926,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/AbstractPersistentCollection.java
"/*(array==null) ? tempList.get(i) :*/","try {",71,0.7010309278350515,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentArrayHolder.java
"// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)","else {",313,0.15789473684210525,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/JoinWalker.java
"//write(); -- doesn't","return set.add(entry);",297,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentMap.java
"// this is the regression style determination which matches the logic of the classic translator","joinIsNeeded = generateJoin && ( !getWalker().isInSelect() || !getWalker().isShallowQuery() );",365,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// handle empty collection","}",1154,0.5054945054945055,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"//handle empty collections","if ( log.isDebugEnabled() ) {",1180,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)","* Read a row of <tt>Key</tt>s from the <tt>ResultSet</tt> into the given array.",1197,0.6740331491712708,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// finally, what it's all about...","public Object setValue(Object value) {",370,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentMap.java
"// here we do not bother with the discriminator.","return persister.whereJoinFragment(alias, true, true);",149,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/AbstractEntityJoinWalker.java
"// validate() instances of Validatable","if ( status == Status.MANAGED && persister.implementsValidatable( entityMode ) ) {",335,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultFlushEntityEventListener.java
"//null version means the object is in the process of being loaded somewhere else in the ResultSet","VersionType versionType = persister.getVersionType();",1261,0.9,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"//problematic for <key-many-to-one>!",");",1230,0.9444444444444444,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"//use the id passed in","}",1237,0.5625,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// The property is a collection...","checkLhsIsNotCollection();",236,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/tree/DotNode.java
"// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!","public Iterator getDeletes(CollectionPersister persister, boolean indexIsFormula) throws HibernateException {",181,0.8,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentBag.java
"//search for it //note that this code is incorrect for other than one-to-many","while ( newiter.hasNext() ) {",201,0.3333333333333333,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentBag.java
"//a composite key","ConditionFragment byId = new ConditionFragment()",937,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/JoinWalker.java
"// if no batch, use "foo = ? and bar = ?"","whereString.append( byId.toFragmentString() );",944,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/JoinWalker.java
"//it must be a collection fetch","collectionPersisters[j] = collPersister;",1016,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/JoinWalker.java
"// needed later for many-to-many/filter application","}",94,0.7244094488188977,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/OuterJoinableAssociation.java
"// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection","private Map collectionsByKey; //key=CollectionKey, value=PersistentCollection",105,0.6290322580645161,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/engine/StatefulPersistenceContext.java
"// it might still need to apply a collection ordering based on a // many-to-many defined order-by...","addCollection( collectionName, collectionRole );",906,0.2857142857142857,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"// belong to other persister // belong to other persister","None",None,None,None
"// we found it","// containing eager fetches via join fetch",271,0.25882352941176473,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/StatelessSessionImpl.java
"//we can use an inner join for the many-to-many","if ( joinType==JoinFragment.LEFT_OUTER_JOIN && path.isRoot() ) {",166,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/collection/BasicCollectionJoinWalker.java
"//disable a join back to this same association","final boolean isSameJoin = oneToManyPersister.getTableName().equals(foreignKeyTable) &&",58,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/collection/OneToManyJoinWalker.java
"//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!","private final CriteriaQueryTranslator translator;",65,0.7387387387387387,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaLoader.java
"//alias may be null //EARLY EXIT","None",None,None,None
"// if it is a compound path","String testAlias = StringHelper.root( path );",190,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"// if its the root criteria, we are done","return path;",208,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"// otherwise, recurse","return getWholeAssociationPath( ( CriteriaImpl.Subcriteria ) parent ) + '.' + path;",212,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"//the criteria instance","getPathEntityName( ( String ) me.getKey() )",223,0.75,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"// the entity name","}",265,0.5172413793103449,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"//not found in inner query , try the outer query","if ( outerQueryTranslator != null ) {",446,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"//it refers to an alias of a projection","return projectionColumns;",456,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"//should never happen, i think","throw new QueryException( "not a single-length projection: " + propertyName );",517,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"// Convert the string value into the proper type.","if ( type instanceof StringRepresentableType ) {",550,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us","parent = ( Criteria ) aliasCriteriaMap.get( testAlias );",193,0.5641025641025641,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"// Otherwise, this is an ordinary value.","return new TypedValue(",565,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
"// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")","private final String sql;",70,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/CustomLoader.java
"// List OPERATIONS:","/**",418,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentBag.java
""//	private final String[] sqlAliases; //	private final String[] sqlAliasSuffixes;"","private final ResultRowProcessor rowProcessor;",86,0.6181818181818182,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/CustomLoader.java
"// this is only needed (afaict) for ResultTransformer processing...","private String[] transformerAliases;",94,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/CustomLoader.java
"// replace {....} with corresponding column aliases","for ( int curr = 0; curr < sqlQuery.length(); curr = right + 1 ) {",94,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryParser.java
"// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop","result.append( sqlQuery.substring( curr ) );",97,0.6944444444444444,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryParser.java
"// apend everything up until the next encountered open brace","result.append( sqlQuery.substring( curr, left ) );",103,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryParser.java
"//pad with nulls from the current last element up to the new index","for ( int i = list.size(); i<=index; i++) {",404,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentList.java
"// it is a simple table alias {foo}","result.append( aliasPath );",151,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryParser.java
"// passing through anything we do not know : to support jdbc escape sequences HB-898","result.append( '{' ).append(aliasPath).append( '}' );",156,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryParser.java
"// The current alias is referencing the collection to be eagerly fetched","String propertyName = aliasPath.substring( firstDot + 1 );",163,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryParser.java
"// it is a property reference {foo.bar}","String propertyName = aliasPath.substring( firstDot + 1 );",169,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryParser.java
""//	private final List scalarTypes = new ArrayList(); //	private final List scalarColumnAliases = new ArrayList();"","private final Map namedParameters = new HashMap();",94,0.593103448275862,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"// Now, process the returns","for ( int i = 0; i < queryReturns.length; i++ ) {",169,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryReturnProcessor.java
"// already been processed...","return;",372,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryReturnProcessor.java
"// Make sure the owner alias is known...","if ( !alias2Return.containsKey( ownerAlias ) ) {",445,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryReturnProcessor.java
""//		scalarColumnAliases.add( typeReturn.getColumnAlias() ); //		scalarTypes.add( typeReturn.getType() );"","getFactory().getTypeResolver().getTypeFactory().manyToOne( persisters[k].getEntityName(), shallowQuery )",724,0.27350427350427353,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/QueryTranslatorImpl.java
"// If this return's alias has not been processed yet, do so b4 further processing of this return","if ( !alias2Persister.containsKey( ownerAlias ) ) {",450,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryReturnProcessor.java
""//			collectionOwnerAliases.add( ownerAlias );"","else if ( returnType.isEntityType() ) {",462,0.9777777777777777,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/custom/sql/SQLQueryReturnProcessor.java
"// from Map","public int size() {",138,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentSortedMap.java
"// from SortedMap","public Comparator comparator() {",179,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/collection/PersistentSortedMap.java
"// cannot be instantiated","private ConnectionProviderFactory() {",183,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/connection/ConnectionProviderFactory.java
"//inject the data","try {",118,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/connection/ConnectionProviderFactory.java
"//default pool size 20","log.info("Using Hibernate built-in connection pool (not for production use!)");",63,0.36893203883495146,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/connection/DriverManagerConnectionProvider.java
"// if debug level is enabled, then log the password, otherwise mask it","if ( log.isDebugEnabled() ) {",104,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/connection/DriverManagerConnectionProvider.java
"// register a cleanup synch","current.getTransaction().registerSynchronization( buildCleanupSynch() );",104,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/context/ThreadLocalSessionContext.java
"// wrap the session in the transaction-protection proxy","if ( needsWrapping( current ) ) {",106,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/context/ThreadLocalSessionContext.java
"// then bind it","doBind( current, factory );",110,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/context/ThreadLocalSessionContext.java
"// limit the methods available if no transaction is active","if ( "beginTransaction".equals( method.getName() )",327,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/context/ThreadLocalSessionContext.java
"// allow these (deprecated) methods to pass through","}",337,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/context/ThreadLocalSessionContext.java
"// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","private void writeObject(ObjectOutputStream oos) throws IOException {",366,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/context/ThreadLocalSessionContext.java
"// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)","TwoPhaseLoad.addUninitializedEntity(",1490,0.5284974093264249,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/Loader.java
"// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)","copiedValues = TypeHelper.replaceAssociations(",518,0.5699481865284974,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultMergeEventListener.java
"// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!","QueryableCollection persister = sessionFactoryHelper.getCollectionPersister( collectionFilterRole );",232,0.5217391304347826,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"//private String propertyName;","private String entityName;",46,0.9629629629629629,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/OneToOne.java
"//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );","table.getQualifiedName( dialect, defaultCatalog, defaultSchema ),",68,0.45161290322580644,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Index.java
"//" collection_ where " +","" where " +",69,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/criterion/SizeExpression.java
"//unsupported","}",94,0.7027027027027027,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/criterion/SQLProjection.java
"// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"","InFragment in = new InFragment().setColumn( alias, columnNames[0] );",930,0.7,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/JoinWalker.java
"// currently only the Hibernate-supplied DbTimestampType is supported here","return DbTimestampType.class.isAssignableFrom( type.getClass() );",831,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlSqlWalker.java
"//implicit polymorphism not supported (would need a union)","alias,",147,0.7391304347826086,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/criterion/SubqueryExpression.java
"//pull off the last ", "","return buf.toString();",89,0.4418604651162791,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/criterion/ProjectionList.java
"//always do an INSERT, and let it fail by constraint violation","oldVersion = null;",95,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultReplicateEventListener.java
"//by default, natural-ids are "immutable" (constant)","boolean mutableId = "true".equals( subnode.attributeValue("mutable") );",2214,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/HbmBinder.java
"// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)","trimSource = ( String ) args.get( 1 );",61,0.6065573770491803,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/function/TrimFunctionTemplate.java
"// astore 4 // store the raw bean","code.addAstore( 4 );",259,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/bytecode/javassist/BulkAccessorFactory.java
"// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...","out( ", " );",348,0.7050359712230215,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/SqlGenerator.java
"// grrr... for differentiation of mysql storage engines","return "";",1611,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"//String[] keyCols = collPersister.getKeyColumnNames();","JoinSequence fromJoins = new JoinSequence( q.getFactory() )",359,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/classic/PathExpressionParser.java
"// Oracle did add support for ANSI CASE statements in 9i","return new ANSICaseFragment();",56,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Oracle9iDialect.java
"//refresh() does not pass an entityName","id = persister.getIdentifier( object, event.getSession() );",94,0.5811965811965812,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/DefaultRefreshEventListener.java
"// Informix doesn't have a bit type","registerColumnType(Types.CHAR, "char($l)");",56,0.5858585858585859,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/InformixDialect.java
"// (NOT (GT a b) ) => (LE a b)","case LT:",187,0.8235294117647058,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"","int i = constraintName.indexOf('.');",214,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/InformixDialect.java
"// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~","private static final Map STANDARD_AGGREGATE_FUNCTIONS = new HashMap();",97,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"//pre H3.2 behavior: super.getReturnType(ct, m);","int[] sqlTypes;",141,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// finally use the sqltype if == on Hibernate types did not find a match.","if ( sqlType == Types.NUMERIC ) {",171,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"//because numeric can be anything","}",173,0.7733333333333333,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","protected Dialect() {",203,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// standard sql92 functions (can be overridden by subclasses)","registerFunction( "substring", new SQLFunctionTemplate( Hibernate.STRING, "substring(?1, ?2, ?3)" ) );",209,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses","registerFunction( "second", new SQLFunctionTemplate(Hibernate.INTEGER, "extract(second from ?1)") );",225,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",316,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",395,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","None",None,None,None
"// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",791,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// by default we report no support","return false;",1081,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"//sqlResultTypes = selectClause.getSqlResultTypes();","queryReturnTypes = selectClause.getQueryReturnTypes();",132,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"// by default we report no support for NOWAIT lock semantics","return false;",1081,0.717948717948718,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",1321,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",1505,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/Dialect.java
"//by default","//      if ( !root.equals( name ) ) {",300,0.5641025641025641,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/cfg/ResultSetMappingBinder.java
"// This is now handled earlier in this method.","}",190,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"// -- Loader implementation --","public final void validateScrollability() throws HibernateException {",206,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"// -- Loader overrides --","protected boolean isSubselectLoadingEnabled() {",275,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)","case IS_NOT_NULL:",219,0.8860759493670886,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/hql/ast/HqlParser.java
"// here assume SQLServer2005 using snapshot isolation, which does not have this problem","}",161,0.9259259259259259,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/SQLServerDialect.java
"// --- Query translator methods ---","public List list(",442,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time","registerColumnType( Types.TIMESTAMP, "date" );",50,0.696969696969697,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/OracleDialect.java
"//" cascade";","None",None,None,None
"// -- Implementation private methods --","private Object[] toResultRow(Object[] row) {",518,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/loader/hql/QueryLoader.java
"//trim off the length/precision/scale","int loc = typeName.indexOf('(');",252,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/PostgreSQLDialect.java
"// CHECK VIOLATION","case 23514: return extractUsingTemplate("violates check constraint \"","\"", sqle.getMessage());",315,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/PostgreSQLDialect.java
"// UNIQUE VIOLATION","case 23505: return extractUsingTemplate("violates unique constraint \"","\"", sqle.getMessage());",317,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/PostgreSQLDialect.java
"// FOREIGN KEY VIOLATION","case 23503: return extractUsingTemplate("violates foreign key constraint \"","\"", sqle.getMessage());",319,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/PostgreSQLDialect.java
"//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user","Iterator it = uniqueKeys.entrySet().iterator();",239,0.5257731958762887,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Table.java
"// to support dialects that have their own identity data type","if ( dialect.hasDataTypeInIdentityColumn() ) {",409,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Table.java
"// NOT NULL VIOLATION","case 23502: return extractUsingTemplate("null value in column \"","\" violates not-null constraint", sqle.getMessage());",321,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/PostgreSQLDialect.java
"// ALL OTHER","default: return null;",325,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/PostgreSQLDialect.java
"// Register the type of the out param - PostgreSQL uses Types.OTHER","statement.registerOutParameter(col, Types.OTHER);",335,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/PostgreSQLDialect.java
"// seems to have spotty LOB suppport","return false;",369,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/PostgreSQLDialect.java
"// HHH-2300","final Class constants = ReflectHelper.classForName( "org.h2.engine.Constants" );",57,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/H2Dialect.java
"// ignore (probably H2 not in the classpath)","}",74,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/H2Dialect.java
"// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","registerFunction( "acos", new StandardSQLFunction( "acos", Hibernate.DOUBLE ) );",108,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/H2Dialect.java
"//used also for generation of FK names!","public int hashCode() {",226,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Column.java
"//usually useless","copy.setCheckConstraint( checkConstraint );",359,0.49230769230769234,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Column.java
"//do not add unique constraint on DB not supporting unique and nullable columns","return !hadNullableColumn || dialect.supportsNotNullUnique() ?",53,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/UniqueKey.java
"//for backward compatibility, disable this:","/*Iterator iter = getElement().getColumnIterator();",43,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Set.java
"//may be final //may be final //may be final","None",None,None,None
"//may be final","private KeyValue identifier; //may be final",46,0.41379310344827586,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/RootClass.java
"// may be final","private KeyValue identifier; //may be final",46,0.41379310344827586,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/RootClass.java
"// Custom SQL","private String customSQLInsert;",49,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Join.java
"//Primary key constraint","PrimaryKey pk = new PrimaryKey();",108,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/Join.java
"// ignore it...","}",409,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/PersistentClass.java
"// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","registerFunction( "curdate", new NoArgSQLFunction( "curdate", Hibernate.DATE ) );",165,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/H2Dialect.java
"// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","registerFunction( "database", new NoArgSQLFunction( "database", Hibernate.STRING ) );",182,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/H2Dialect.java
"// not null is implicit","}",208,0.4367816091954023,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/HSQLDialect.java
"// Display the dialect version.","log.info("RDMSOS2200Dialect version: 1.0");",58,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"// nothing to do in a stateful session","}",2005,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/impl/SessionImpl.java
"// The RDMS concat() function only supports 2 parameters","registerFunction( "concat", new SQLFunctionTemplate(Hibernate.STRING, "concat(?1, ?2)") );",77,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"//flat recursive algorithm","property = ( ( Component ) property.getValue() ).getProperty( element );",418,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/PersistentClass.java
"//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded","checkColumnDuplication( cols, getKey().getColumnIterator() );",714,0.8059701492537313,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/PersistentClass.java
"// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","/**",207,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"// Original Dialect.java returns " for update";","}",233,0.9010989010989011,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"//pass the column name (a generated id almost always has a single column)","String columnName = ( (Column) getColumnIterator().next() ).getQuotedName(dialect);",164,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/SimpleValue.java
"//needed to satisfy KeyValue","return true;",198,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/SimpleValue.java
"// Verify the state of this new method in Hibernate 3.0 Dialect.java","/**",243,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"// Origial Dialect.java returns true;","}",249,0.8461538461538461,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"// index should be last column listed","boolean isFormula = false;",63,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/IndexedCollection.java
"// *** Sequence methods - start. The RDMS dialect needs these","// methods to make it possible to use the Native Id generator",269,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"// methods to make it possible to use the Native Id generator","public boolean supportsSequences() {",271,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"//if it is a formula index, use the element columns in the PK","pk.addColumns( getElement().getColumnIterator() );",70,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/IndexedCollection.java
"// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns","//getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );",60,0.6037735849056604,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/IdentifierCollection.java
"// *** Sequence methods - end","public String getCascadeConstraintsString() {",294,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"// Used with DROP TABLE to delete all records in the table.","return " including contents";",297,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"// no foreign key element of for a one-to-many","}",79,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/OneToMany.java
"//TODO: we could just return all false...","throw new UnsupportedOperationException();",147,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/OneToMany.java
"// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints","if (referencedPropertyName==null && !hasFormula() ) {",61,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/ManyToOne.java
"// the object is persistent","//the entity is associated with the session, so check its status",501,0.7419354838709677,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractSaveEventListener.java
"// RDMS supports the UNION ALL clause.","return true;",330,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/RDMSOS2200Dialect.java
"// Multi-param dialect functions...","registerFunction( "mod", new StandardSQLFunction( "mod", Hibernate.INTEGER ) );",190,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/HSQLDialect.java
"// function templates","registerFunction( "concat", new VarArgsSQLFunction( Hibernate.STRING, "(", "||", ")" ) );",193,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/HSQLDialect.java
"//not null is implicit","}",208,0.4367816091954023,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/HSQLDialect.java
"// this assumes schema support, which is present in 1.8.0 and later...","return "select sequence_name from information_schema.system_sequences";",290,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/HSQLDialect.java
"// HSQLDB only supports READ_UNCOMMITTED transaction isolation","None",None,None,None
"//the entity is associated with the session, so check its status","if ( entry.getStatus() != Status.DELETED ) {",503,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/event/def/AbstractSaveEventListener.java
"// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.","registerColumnType( Types.BLOB, "VARBINARY(4000000)" );",72,0.6744186046511628,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/TimesTenDialect.java
"// new methods in dialect3","/*public boolean supportsForUpdateNowait() {",144,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/TimesTenDialect.java
""/*public boolean supportsForUpdateNowait() {		return false;	}*/"","for (T obj : objects) {",64,0.3287671232876712,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/envers/src/test/java/org/hibernate/envers/test/tools/TestTools.java
"// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...","if ( lockMode==LockMode.PESSIMISTIC_FORCE_INCREMENT) {",217,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/TimesTenDialect.java
"// iterate entries ordered by capacity to find first fit","Iterator entries = map.entrySet().iterator();",95,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/TypeNames.java
"// add new ordered map","map = new TreeMap();",119,0.72,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/TypeNames.java
"// expected type is intrinsic here...","}",72,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/param/VersionTypeSeedParameterSpecification.java
"//return memberPersister.getPropertyType(propertyName);","else {",80,0.36363636363636365,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/OneToOne.java
"//return memberPersister.toColumns(alias, propertyName);","else {",80,0.36363636363636365,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/OneToOne.java
"//return memberPersister.getType();","return memberPersister.getCollectionType();",120,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/CollectionPropertyMapping.java
"/*&& !indexIsFormula*/","insert.addColumns( indexColumnNames, indexColumnIsSettable );",106,0.7636363636363637,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/BasicCollectionPersister.java
""//		return !isOneToMany();"","return true;",182,0.9615384615384616,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/BasicCollectionPersister.java
"//instanceof AssociationType;","}",191,0.6292134831460674,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/BasicCollectionPersister.java
"// we need to determine the best way to know that two joinables // represent a single many-to-many...","if ( rhs != null && isManyToMany() && !rhs.isCollection() ) {",289,0.7555555555555555,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/BasicCollectionPersister.java
"//strip leading ','","}",313,0.7083333333333334,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/BasicCollectionPersister.java
"//public boolean isSubselectLoadable();","public String getNodeName();",256,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/CollectionPersister.java
"//columns","//getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );",62,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/mapping/IdentifierCollection.java
"//SQL statements","private final String sqlDeleteString;",105,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//extra information about the element type","private final Class elementClass;",175,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//types","private final Type keyType;",129,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// custom sql","private final boolean insertCallable;",204,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//private final String unquotedIdentifierColumnName;","protected final String qualifiedTableName;",155,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
""//		return ""select CURRENT_TIMESTAMP from RDB$DATABASE"";"","None",None,None,None
"// dynamic filters specifically for many-to-many inside the collection","private final FilterHelper manyToManyFilterHelper;",195,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// dynamic filters for the collection","private final FilterHelper filterHelper;",192,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//registerColumnType data types","registerColumnType( Types.NUMERIC, "NUMERIC($p,$s)" );",48,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/TeradataDialect.java
"// IBID for current_time and current_date","registerKeyword( "password" );",94,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/TeradataDialect.java
"// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)","if (regionRoot != null && regionRoot.isValid()) {",177,0.39662447257383965,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/BasicRegionAdapter.java
"// Tell hibernate to use getBytes instead of getBinaryStream","getDefaultProperties().setProperty( Environment.USE_STREAMS_FOR_BINARY, "false" );",109,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/TeradataDialect.java
"// No batch statements","getDefaultProperties().setProperty( Environment.STATEMENT_BATCH_SIZE, NO_BATCH );",111,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/TeradataDialect.java
"//ELEMENT","String elemNode = collection.getElementNodeName();",305,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
""/*		 * We might want a special case for 19,2. This is very common for money types		 * and here it is converted to 18,1		 */"","float f = precision > 0 ? ( float ) scale / ( float ) precision : 0;",171,0.7577639751552795,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/TeradataDialect.java
"//no pointbase BIT","registerColumnType( Types.BIGINT, "bigint" );",44,0.4383561643835616,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/PointbaseDialect.java
"//no pointbase TINYINT","registerColumnType( Types.INTEGER, "integer" );",47,0.47058823529411764,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/PointbaseDialect.java
"// NativeSQL: collect element column and auto-aliases","}",314,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// INDEX AND ROW SELECT","hasIndex = collection.isIndexed();",369,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table","return false;",149,0.632183908045977,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/SQLServerDialect.java
"// NativeSQL: collect index column and auto-aliases","IndexedCollection indexedCollection = (IndexedCollection) collection;",373,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
""//		registerColumnType( Types.CLOB, 16777215, ""mediumtext"" ); //		registerColumnType( Types.CLOB, 65535, ""text"" );"","None",None,None,None
""//		registerColumnType( Types.VARCHAR, 16777215, ""mediumtext"" ); //		registerColumnType( Types.VARCHAR, 65535, ""text"" );"","None",None,None,None
"//GENERATE THE SQL:","//sqlSelectString = sqlSelectString();",448,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//not all classpersisters implement PropertyMapping!","elementPropertyMapping = (PropertyMapping) elementPersister;",538,0.676056338028169,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// Handle any filters applied to this collection for many-to-many","filterHelper = new FilterHelper( collection.getFilterMap(), dialect, factory.getSqlFunctionRegistry() );",568,0.845360824742268,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//if there is a user-specified loader, return that //TODO: filters!?","return initializer;",632,0.8431372549019608,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
""// Take care of any entities that might have // been evicted!	"","Iterator iter = subselect.getResult().iterator();",664,0.8089887640449438,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// Run a subquery loader","return createSubselectInitializer( subselect, session );",673,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that","if (!allowNull && cacheTm == null) {",470,0.7086614173228346,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/cache-jbosscache/src/main/java/org/hibernate/cache/jbc/builder/MultiplexingCacheInstanceManager.java
"//Sybase BIT type does not support null values","registerColumnType( Types.BIGINT, "numeric(19,0)" );",54,0.6610169491525424,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/AbstractTransactSQLDialect.java
"// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).","throw new HibernateException( "Current transaction is not in progress" );",91,0.5560538116591929,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/context/JTASessionContext.java
"//needed by arrays","return elementClass;",757,0.5245901639344263,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
""//		 This assumes you will want to ignore any update counts"","while ( !isResultSet && ps.getUpdateCount() != -1 ) {",214,0.98,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/dialect/AbstractTransactSQLDialect.java
"//TODO: something with formulas...","}",1042,0.7126436781609196,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//an assertion","}",804,0.3058823529411765,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"// Remove all the old entries","try {",1076,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//create all the new entries","Iterator entries = collection.entries(this);",1157,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//delete all the deleted entries","Iterator deletes = collection.getDeletes( this, !deleteByIndex );",1273,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
"//insert all the new entries","collection.preInsert( this );",1380,1.0,/Users/yonekuramiki/Desktop/resarch/searchSATD-underCode/clone/core/src/main/java/org/hibernate/persister/collection/AbstractCollectionPersister.java
