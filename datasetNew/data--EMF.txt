// TODO factor up into GenBaseImpl //
// EATM Call the deprecated method which does the same thing  // but might have an override in older code.
// Unused?
// TODO factor up into GenBaseImpl? //
// call workaround
// TODO deprecate (since getPluginClass() is no longer called) //
// Ensure that this race condition is thread safe; it doesn't matter who wins the race. //
// TODO // This assumes we only get a SET notification, which isn't a good assumption. //
//DMS handle this well.
//FB TBD can we come up with a better algorithm for choosing the default label feature?
//DMS should we let this exception out?
//DMS What if Eclipse is running, but an invalid facade has been specified?  We still should format code, use encoding,...
//DMS  Do a better job with specific exceptions? Just use chained RuntimeExceptions?
// If the delegate URI can be handled as a file,  // we'll hope that renaming it will be really efficient. //
//DMS Why not this? //new SubProgressMonitor(progressMonitor, 1));
// Assume that it's an attribute for now. // It will/could become a reference if the type resolves to an EClass. //
// Do nothing for now, and avoid propagating the exception.   // How should builders handle cancel?
// this is a fall-back, however, this should never be called
// TODO fix the space above
// TODO REMOVE THIS BOGUS EMPTY LINE
// TODO handle class cast exception better.
// I don't know if we should be run this deferred  // because we might have to give the editor a chance to process the viewer update events  // and hence to update the views first. //  //
// This is a big festering hack to make the images the right size from the start. //
// EATM Demand create metadata; needs to depend on processing mode...
// TODO This is really quite attrocious since there is code that will assume an iterator that returns strings!
//TBD return (user selected subset?) of referenced packages that contain super classes of classes in this package.
// call the workaround
// //TBD rethink where exactly some of the following methods belong (GenModel or GenPackage) //
// if there are multiple variables in declaration,  // separate this variable fragment into a separate declaration
// EATM this would be wrong.
// REVISIT: Remove this code.
// The label is not used. //
// Motif kludge: we would get something random instead of null. //
// TODO So what should be the eType be now? //
// This runs the operation, and shows progress. // (It appears to be a bad thing to fork this onto another thread.) //
// EATM Kind of hacky.
// This is a kludge to deal with enumerators, which crash the doSwitch. //
// This is copied from ItemProviderAdapterFactory. //
// EATM This might be better written as a single loop for the EObject case? //
// Second alternative should be getModelProject()?
// TODO Hack that should be removed.
// TODO // Specialize this to return a resource locator for messages specific to this validator. // Ensure that you remove @generated or mark it @generated NOT
// TODO // I'm concerned that folders will often return 401 or even 403. // So should we consider something to exist even though access if unauthorized or forbidden? //
// Only file-scheme URIs will be re-encoded. If a URI was decoded in the workaround // above, and Platform.resolve() didn't return a file-scheme URI, then this will return // an decoded URI. //
// This functionality should eventually go away, as it is replaced by model exporters. // We'll just delegate to the deprecated GenPackage method. The monitor isn't used, so we won't pass it. //
// The eAnnotations and eGenericType are possible containment references.  // We'll move them instead of copying //
// Note: Registry based authority is being removed from a // new spec for URI which would obsolete RFC 2396. If the // spec is added to XML errata, processing of reg_name // needs to be removed. - mrglavas.
// temporary structure to hold node's attributes + namespaces in scope
// HACK: reading encoding
// Because of the old factoring approach in the create method,  // it might be the case that the state of the old value has changed by the time we get here, // and in that case, we don't want to duplicate the removals in this code. //
// REVISIT: Remove this code. // Store port value as string instead of integer.
// TODO // This is faster than many charAt() calls. //
//REVISIT: do we really need to support block names as in Unicode 3.1 //         or we can just create all the names in IsBLOCKNAME format (XML Schema REC)? //
// Bubble sort // Why? -- In many cases, //         this.ranges has few elements.
// Per Schema 1.0 it is not clear if the result returned should be a valid URI.  // For the future if we plant to support IRIs then it is better not to massage // the initialValue.  // We should thought consider where would be the best way to validate anyURI values -- EL
// Note that the way they are sorted, the values of index[i++] always increase, // so the objects are added from right to left in the list. // // EATM  TODO // // We could make this more efficient by grouping the adds when indices increment by one, // so that a single grouped notification would result. //
// TODO deprecate (since no longer used by getEditPluginClass(), getEditorPluginClass(), getTestSuiteClass()) //
// if there are multiple variables in declaration,  // separate this variable fragment into a separate declaration
//DMS factor this into a method? Use a non-static subclass?
//DMS this doesn't really produce nice output. //
//FB TBD filter out volatile and other inappropriate links?
// I don't know if this should be run this deferred // because we might have to give the editor a chance to process the viewer update events // and hence to update the views first. // //
// TODO processing instructions are not sent to recordValues
// TODO comments are not sent to recordValues
// TODO Ignore for now.
// TODO handle situation when ASTJNode is removed (compilationUnit is null)
//TBD return super classes of classes in this package that come from a delegate package.
// if current char is comma, insert line break after it // // we should be able to find the comma because the range for enum constants includes all trailing comments up to the separator // if TargetSourceRangeComputer of ASTRewrite changes, this logic should change to skip comments // see org.eclipse.emf.codegen.merge.java.facade.ast.CommentAwareSourceRangeComputer#getEnumConstantSourceRange(ASTNode)
// TODO translation
// TODO Binary incompatibility; an old override must override putAll.
// This runs the options, and shows progress. // (It appears to be a bad thing to fork this onto another thread.) //
// we should be able to find the comma because the range for enum constants includes all preceding comments up to the previous constant // if TargetSourceRangeComputer of ASTRewrite changes, this logic should change to skip comments // see org.eclipse.emf.codegen.merge.java.facade.ast.CommentAwareSourceRangeComputer#getEnumConstantSourceRange(ASTNode)
// TODO we should generate this.
// TODO What about the instance type name and the fact that we should be matching its type argument structure? // If they match so far, we must assume they are okay and then check all the arguments. //
// Set of options that we want to control
// get the end position of the range for the previous node
// adding 'at' allows distinguish annotations from other members // (i.e. inner class verses annotation of a class) //
// Get the adapter from the factory. //
// No methods added.
"/*   * Javadoc copied from interface.   */"
// add trailing comments if necessary
// If the target is read-only, we can ask the platform to release it. //
// If entries don't have the same feature, the feature maps aren't equal. //
// Merge with an existing file. //
// Walk up the superpackages, collecting the package names. // Because empty packages are ommitted from the GenModel, we need to walk up the EPackages. //
// Any features that delegate to features in this package. //
// See java.lang.Class.getName() javadoc for explanation of array encoding.
// Additional useful character classes, including characters valid in certain // URI components and separators used in parsing them out of a string.  // // | ucschar | escaped
"/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */"
// If the target is read-only, we can ask the platform to release it, and it may be updated in the process. //
// find start position of farthest preceding comment
// was the details button pressed?
// Set up the tree viewer. //
// Process the children of the UnitTreeNode recursively. //
// Create a code formatter for this compilation unit, if needed. //
// If the name isn't qualified, it might be a primitive or from java.lang. Otherwise, assume it's in the current // package and use the nsPrefix for the qualified package name. //
// Determine the base URL by looking for the plugin.properties file in the standard way. //
// The notification for this list is being thrown by the // delegating list //
// Make sure our popups work. //
// remove type, insert enum
// We need to screen out duplicates in the unlikely event that we have two //  features with the same class-qualified name. We'll only generate one property //  string in that case and let the user add the second one manually, if necessary. //
// build mapping from classes to list of features that use them
// This runs the options, and shows progress. //
// no paths: keep query only
// Select the root object in the view. //
// else absolute path: keep it and query
// Listen to selection so that we can handle it is a special way. //
// The algorithm for the order of the features in this list should never change. // Also, the fact that a new list is created whenever the contents change  // is something else that should never change. // There are clients who rely on both these behaviors,  // and they will need to agree to any change, // so that they can adjust their own code. //
// This ensures that we handle selections correctly. //
// Create an adapter factory that yields item providers. //
// Get the current time in milliseconds since the epoch  // and adjust it to match the epoch required by the specification. //
// Get the first selected element. //
// Otherwise, the path needs only the remaining segments.
// log the error, ignore the change and continue
// absolute path or no path -> absolute path
// Do a base 64 conversion by turning every 3 bytes into 4 base 64 characters //
// create a composite with standard margins and spacing
// source method return type is array (getExceptions), target is not array (i.e. addException)
// And we need to set it on any cached GenModels holding the special Ecore and XML packages. //
"/**   * Calls <code>validateXXX</code> for the corresponding classifier of the model.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @generated   */"
// This is the page for the tree viewer //
// empty last segment -> trailing separator
// Refresh the necessary state. //
// A set command without a feature sets the value of this wrapper, hence replacing it with a new wrapper. So, // we need a special command wrapper that selects this new wrapper as the affected object. //
// Maintain a (weak hash) set on the type parameter of all referencing generic types. //
// Force the project to be setup properly. //
"/*    * Javadoc copied from interface.   */"
// WizardContainer variables
// return getPrefixedName("EditorPlugin");
//EParameter
// retrieve source node corresponding to target //
// Ignore.
// Create a default .jetsettings file file
// Subclasses may overrride
// Save the resources to the file system. //
// Set the selection to the widget. //
// ETypeParameter
// Save only resources that have actually changed. //
// This is only at avoid needing an @SuppressWarnings("unchecked") on the EMFObservableList
// This is the method that gets invoked when the operation runs. //
// Ignore this since we will throw an exception when all else fails.
// Fill 3 of value (byte) -19
// for enum constants use special range
//ETypedElement
// So if the resolved object is also present... //
//EcorePackage
// Subclasses may override this method
// Create resource
// Something went wrong that shouldn't. //
// Create package meta-data objects
// Fill 68 of value (byte) -19 // Fill 9 of value (byte) 33 // Fill 36 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 30 of value (byte) -19 // Fill 56 of value (byte) 33 // Fill 89 of value (byte) -19 // Fill 18 of value (byte) 33 // Fill 7 of value (byte) -19 // Fill 14 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 46 of value (byte) 33 // Fill 70 of value (byte) -87 // Fill 26 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 36 of value (byte) 33
// getObjectsToDetachGen() should be changed only if required
// If a newline from the previous character data remains, add a generator for it. //
// Obtain or create and register package
// remove the node
// Initialize simple dependencies
// Fill 11 of value (byte) 33
// Obtain other dependent packages
// If the intersection is empty, i.e., no ancestor is in the mapping... //
// Create classes and their features
// Continue with a different approach.
// Initialize created meta-data
// If this mapping isn't a parent, it's children definitely won't be either. //
// Set bounds for type parameters
// Make sure the collections aren't identical... //
// Initialize enums and add enum literals
// Add supertypes to classes
//FB used to check for parent != null. // Need to find the top most model object not including the resource. // parent instanceof Eobject only checks for trees in model object space.
// FeatureMapEntry
// Do the work within an operation because this is a long running activity that modifies the workbench. //
// ResourceChange
// Isolating the new objects
//FeatureChangeImpl
// set features and properties
// cache result
// This is the page for the list viewer //
// insert line break and comment out the first line if needed // note that first line might move backward beyond node start (e.g. if a comma of the previous enum constant has been commented out)
//ResourceChangeImpl
// If we change to pattern defaults, will have to specify plain suffix in no main package case. //
// feature is instance of EAttribute
// Different than the Edit and Editor projects, this method is invoked while  // generating the model plugin xml.
// Make sure that all the old values are cached.
// Include only non-duplicate namespace declarations. //
//EDataType
// Create the command stack that will notify this editor as commands are executed. //
// Try to select the items in the current content viewer of the editor. //
// caches the list value.
// Set the editors selection based on the current viewer's selection. //
//ChangeFactory
// Set of options that we want to copy from the current definition
// Sorting only the genModels
// We need to be careful that we don't end up requiring the no namespace package  // just because the feature is unqualified. //
// Register package validator
// We must have a qualifier for an attribute that needs qualified. //
//System.err.println("DEBUG: fixed-only: "+this.fixedString);
// cached already?
// see if prefix already exists in current context
// Initialize classes and features; add operations and parameters
// default implementation does nothing
// Initialize package
// Walk up the super types until we reach a root. //
//ChangeSwitch
// Try to select the affected objects. //
// Continue with no instanceClass.
// Unwrap collection. //
//case Notification.REMOVE_MANY:
//case Notification.REMOVE:
// Look for a matching element in the classifier's package but don't bother with the XML type package's document root. //
// Create data types
//EGenericTypeImpl
//return eContainer;
"/*   * INTERNAL: this is a specialized method to add attributes for a top/root element   */"
// create containment one.
// it's intentional to keep going
// Initialize data types
// Don't really unset it.
//ETypeParameterImpl
// Stop only on cancel. //
// System bar.
// Continue to try a different approach.
// Produce the supplemental character as an entity
// Keep trying until all else has failed.
// If we can't determine it by reading the file, // look at the preferences instead.
//ETypedElementImpl
// Since we're invoking plugged-in code, we must be defensive against cycles. //
// Subclasses may override
// Combine the two lists. //
//EcoreFactoryImpl
// We not sure the encoding supports this code point, so we write it as a character entity reference.
// Keep trying until all else false.
// no property
"/**   * The switch that delegates to the <code>createXXX</code> methods.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @generated   */"
//EParameterImpl
// Identifies a file-type absolute URI.
// Only handle classifiers from this package. //
// ChangeDescription
// FeatureChange
// If it is an unqualified name, we will assume it refers to a type parameter, since we don't support default package. //
// Mark meta-data to indicate it can't be changed
// We effectively passed null, "" to look up the general-content feature. //
// EGenericType
// insert line break at the first line if there is something before the node start and the beginning of the line
//EcoreFactory
// EATM Leave this disabled for now. //
// Fill 3078 of value (byte) 33 // Fill 156 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 90 of value (byte) -19 // Fill 6 of value (byte) 33 // Fill 22 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 38 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 8 of value (byte) -19
// Give all generator adapters the chance to do setup work. //
//  Remove any non-Java dependencies from being added. //
// clear old values
// We can't update any properties via just a URL connection.
// Trim off the segments corresponding to the package nesting. //
// Ignore any exceptions and assume the class isn't available.
// For an archive URI, check for the plugin.properties in the archive. //
// create the IV for the password generation algorithm
// Opening the detail area
// DocumentRoot
// We do not want to diagnose any errors that have already been diagnosed by a super type. // Although we ignore all the first super's features, there may be mixin classes that still would result in duplicates. //
// loop for all commented out nodes
// We need to be careful that the proxy may be resolved while we are attaching this adapter. // We need to avoid attaching the adapter during the resolve  // and also attaching it again as we walk the eContents() later. // Checking here avoids having to check during addAdapter. //
// Produce different levels of diagnostic depending whether the names are exactly the same or only matching. //
// Switch to the new selection provider. //
// Look for duplicates among the generic super types. //
// Keep trying other member types until all have failed.
// Match against every other operation but this one. //
// Fake a selection changed event to update the menus. //
// The referencing generic type must be contained to be in scope //
// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
// If none of the generic super types are bounded, then we've failed. //
// append extra dimensions since they are not stored in Type object
// Check if the bound specifies a classifier... //
// Trim off the "bin" or "runtime" segment. //
// The classifier of an attribute's generic type must be a data type. //
// Compact the results to remove unmatched objects //
// If neither approach finds a contradiction, we must assume they are okay and then check all the arguments. //
// If we didn't find the plugin.properties in the usual place nor in the archive... //
// The type arguments of a generic super type must not be a wildcard. //
// If we can open  an input stream, then the plugin.properties is in the folder, and we have a good base URL. //
// If we still don't have a good base URL, complain about it. //
// Consider the classifiers in a special way  // to take into account the fact they they often acts as wrappers for instance type names // and that two classifiers that wrap the same instance type name should be considered equal. //
// Create the mapping domain with a special command stack. //
// The content outline is just a tree. //
// If we are still on the root mapping itself... //
// If the type also specifies a classifier... //
// Yield that mapping, create a stack, record it as the next one to prune, and add it to the stack. //
// I.e., the classifiers are considered equal if they wrap the same non-null type. //
// Consider the instance type names they wrap  // to see if they are non-null and equal. //
// Get the top iterator, retrieve it's result, and record it as the one to which remove will be delegated. //
// If the result about to be returned has children... //
// Record the iterator as the next one to prune, and add it to the stack. //
// Then eObject1 must be that match. //
// There will be no iterator to prune. //
// While the current iterator has no next... //
// if the given class is subclass of enum and node is of subclass of type
// Only if the feature kind is unspecified should we return a match. // Otherwise, we might return an attribute feature when an element is required,  // or vice versa. This also can be controlled by XMLResource.OPTION_LAX_FEATURE_PROCESSING. //
// Pop it from the stack. //
// If the stack is empty, we're done. //
// Pop it off the stack. //
// Generate a 48 bit node identifier;  // This is an alternative to the IEEE 802 host address, which is not available in Java. //
// Get the next one down and then test it for has next. //
// If there is an iterator to prune. //
"/*   * Javadoc copied from source.   */"
// You can only prune once. //
// Undo the preparation for previous and continue.
// We don't create an iterator stack until the root mapping itself has been returned by next once. // After that the stack should be non-empty and the top iterator should yield true for hasNext. //
// printAdapters();
// Keys that will be used to record visibility for the accessors. //
// If that iterator is still at the top of the stack... //
// If the referenced EObjects aren't equal, the feature maps aren't equal. //
// Allow for a bit-shift of growth. //
// If eObject2 has been compared already... //
// Keep popping the stack until an iterator that has a next is at the top. //
// The feature maps must be equal. //
// Conditionally create the data. //
// The first case is the most common case. // It is slightly cheaper to call add without an index since an index will be range checked. //
//  ++modCount //
// If we find a match, make this generic type be for this type parameter, // and then stop the whole process.
// clockseq_low
// Guard for no data. //
// The system clock has been rewound so the clock sequence must be incremented  // to ensure that a duplicate UUID is not generated. //
// Suppress default constructor for noninstantiability.
// ++modCount //
// Ensure that anything can be handled, even if it's not recognized. //
"/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.DOMHelper#getValue(org.w3c.dom.Node)   */"
// Strip off the array indices if any. //
// The entity handler is the best place to resolve and deresolve URIs since it can do it there just once to produce the entity. // So most often the entity handler will be a URI handler as well and when used as a URI handler will be an identity handler. //
// Create a page, set the title, and the initial model file name. // //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$
//MappingRootImpl
// Prepare for CreateSibling item addition or removal. // //$NON-NLS-1$ //$NON-NLS-1$
// Fill 3 of value (byte) -87
// Ignore it if we've already set generic versions of these //
// String getPackageID();
// // EMFEdit generation //
// Returns whether this class implements any of the given features.
// ignore rules for nodes of different class
// Remember the static instance. //
//hgd::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getFeature(), substituteOldValue, substituteNewValue, msg.getPosition());
//Class/genFeature.override.javajetinc //for
// Create a command to do parentMapping.getNested().remove(mapping). // //subcommands.appendAndExecute(new RemoveCommand(domain, parentMapping, parentMapping.ePackageMapping().getMapping_Nested(), mapping));
// Path segments cannot contain '[' or ']' since pchar // production was not changed by RFC 2732.
// Fill 5 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 7 of value (byte) -87
// processing unknown feature with xsi:type (xmi:type)
//Class/implementedGenOperation.override.javajetinc //for
// Bidirectional references need to use this less efficient approach because some //  or all of the changes may already have been made from the other end. //
// returns the package in which this enum literal is defined // returns the name of the enum literal get method in the package interface
// If the proxy holder can hold many values, // it may contain a duplicate that resulted when the other end was processed as an IDREF // and hence did both sides of the bidirectional relation. //
// // Data //
"/*     * Javadoc copied from interface.     */"
// Pretend there is an xmlns="" because we really need to ensure that the null prefix  // isn't used to denote something other than the null namespace. //
// do not add a new line if there is one
// Fill 15 of value (byte) 33 // Fill 9 of value (byte) -87 // Fill 17 of value (byte) 33 // Fill 3 of value (byte) -87
// Excise the new root from the document root. //
// Don't hold onto a duplicate reference to the last object. //
// If processSchemaLocations is specified, treat these as XML Schema locations
// Give it all back to the garbage collector. //
// there is only whitespace after enum constant on the same line - do not add line breaks
// Write the capacity. //
// This happens when processing an element with simple content that has elements content even though it shouldn't. //
// Fill 11 of value (byte) 33 // Fill 27 of value (byte) -19 // Fill 5 of value (byte) 33 // Fill 3 of value (byte) -19 // Fill 46 of value (byte) 33 // Fill 26 of value (byte) -19 // Fill 5 of value (byte) 33
// record node's attributes
// Fill 4 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 519 of value (byte) 33 // Fill 3 of value (byte) -87
// There's an EObject on the stack already. //
//FB The following method is copied from com.ibm.etools.b2b.util.StringUtility //FB because the mapping framework cannot have a dependency on b2b. What we really //FB need to do is get methods like this moved to vabase so that everyone can //FB use them. // change all occurrences of oldPat to newPat
// If it is changing... //
// Test for a same document reference that would usually be handled as an IDREF. //
// Check for scheme, which must be before '/', '?' or '#'. Also handle // names with DOS drive letters ('D:'), so 1-character schemes are not // allowed.
// Need not to call setSource() because // a caller can not access this match instance.
// Only creates the other pages if there is something that can be edited //
// Create the listener on demand. //
"/*           * The pattern contains a fixed string.           * The engine checks with Boyer-Moore whether the text contains the fixed string or not.           * If not, it return with false.           */"
// handler.unparsedEntityDecl(name, publicId, systemId, notationName);
// Ignore close since we don't want to let the parser close the stream when it's done.
// We'll try adding a shallow copy of the clipboard contents, instead of a full copy. // Note: we can't just try adding the clipboard contents itself, because the copy may be a //       different type then what's on the clipboard (e.g. EJB Field -> RDB Column). //
"/*           * The pattern has only fixed string.           * The engine uses Boyer-Moore.           */"
// Fill 6 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 3 of value (byte) -87 // Fill 8 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 4 of value (byte) 33 // Fill 2 of value (byte) -19
// handler.notationDecl(name, publicId, systemId);
// EDate is far too often overridden to provide a different mapping, and therefor the default is somewhat obscure. // So, it's best to delegate to the factory. //
// This seems to be a pretty sweet formula that supports good growth. // Adding an object to a list will create a list of capacity 4,  // which is just about the average list size. //
"/*     *  Convert attribute values:     *  & to &amp;     *  < to &lt;     *  "" to &quot;     *  \t to &#x9;     *  \n to &#xA;     *  \r to &#xD;     */"
// caching parser does not parse 2nd file in the same way (javadoc of package for example) // hence, new parser is created every time this method is called
// Fill 7 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 4 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 13 of value (byte) -19 // Fill 5 of value (byte) 33 // Fill 3 of value (byte) -19
// This should be transparent. //
// | ucschar | escaped
// ModifierOp // CharOp  for CHAR, BACKREFERENCE, CAPTURE, ANCHOR,
// Fill 7 of value (byte) -19
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#addChild(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode)   */"
// process eStructuralFeatures for association end(Role) //
// STRING
// xsi:nil // xsi:type // xmlns:xsi // xsi:schemaLocation // xsi:noNamespaceSchemaLocation
// Look for a substitution group feature in the feature's containing class' containing package. //
// It's intentional to keep going.
// Check which directive it is. //
//iri = iri || containsNonASCII(fragment);
// Check if it's an anonymous type. //
// for RANGE or NRANGE
// We only get here if we should do this. //
//reader.reset(start); //return false;
// Write all the entryData; there will be size of them. //
// Fill 2 of value (byte) -19
// Overlapped // src:    o--------o // sub:  o----o // sub:      o----o // sub:          o----o // sub:  o------------o
// Restore the capacity, if there was any. //
// Read all size number of entryData. //
// This just represents going back to the unset state, but that doesn't affect the contents of the list. //
// String-parsing implementation.
// Create a page for the selection tree view. //
// generateColor();
// this.ranges is sorted and compacted.
// Fill 2 of value (byte) 49 // Fill 26 of value (byte) -3 // Fill 2 of value (byte) 33
// Create annotations // http://www.w3.org/XML/1998/namespace
// src1:    o--------o // src2:          o----o // res:           o--o // Reuse src2
//  Interpret the body of a nested ownedComment as a comment-type and assign it as the EAnnotation.source of the parent. //
// X{2,6} -> XX(X(X(XX?)?)?)?
// Internal bootstrap uses Literals constants, so we must force initialization this inner interface first. //
//iri = iri || containsNonASCII(device);
// Open an editor on the new file. //
// Trying to match the following productions: // hexseq = hex4 *( ":" hex4) // hex4   = 1*4HEXDIG
"/*           * Checks whether the expression starts with "".*"".           */"
// Parse the attr-val pairs. //
// Skips ')'
// create field initializer from enum constant's arguments and body
"/*                       * Saves current position to avoid                       * zero-width repeats.                       */"
// off -> next of '}'
// different scheme: need complete, absolute URI
// Apply the change. //
"/*           * Straightforward matching.           */"
// Delete the change information because it is invalid now that the objects have been changed. //
// Static initializer for archiveSchemes.
// Apply the change and reverse the change information. //
// Compute the URL for where the classes for this project will be located. //
//this.iri = iri;
// \ + c // backsolidus // POSIX Character class such as [:alnum:]
"/*      public RegularExpression createRegex(String regex, int options) throws ParseException {          Token tok = this.parse(regex, options);          return new RegularExpression(regex, tok, this.parennumber, this.hasBackReferences, options);      }      */"
// Compute the URLs for all the output folder of all the project dependencies. //
//tok.dumpRanges();
// Define a class loader that will look in the URLs first,  // and if it doesn't find the class there, uses the emitter's loader. //
// Single character // [a-zA-Z] // [^a-zA-Z] // ^ $ ... // literal String  // X* // X*? // X? // X?? // X|Y // ( and ) // \1 \2 ... // (?=...) // (?!...) // (?<=...) // (?<!...) // (?>...) // (?ims-ims:...) // (?(..)yes|no)
// Define a class loader that will look up the class in the bundle, // and if it doesn't find it there, will look in the parent. //
//************************************************************************ //*    class RoseToken                                                   * //************************************************************************
// Strip off the trailing "_" and load that class. //
// Since the granularity of time in Java is only milliseconds,  // add an adjustment so that the time is represented in 100s of nanoseconds. // The version number (1) is multiplexed into the most significant hex digit. //
// Check that the class is actually different from the one that's directly visible to the JETEmitter. //
// Filtered for property keys to remove duplicates.
"/*   * Javadoc copied from base class.   */"
// '|' // '*' // '+' // '?' // '(' // ')' // '.' // '[' // '\' // '^' // '$' // '(?:' // '(?=' // '(?!' // '(?<=' // '(?<!' // '(?>' // '(?[' // '[:' in a character class // '(?#' // '(?' [\-,a-z,A-Z] // '(?(' // '-[' in a character class
// Kick of a Java build if not already in a build. //
// src:    o--------o // sub:  o------------o // res: empty // Reuse sub
// Add the new entries, including source, JRE container, and added variables and classpath containers.  //
// This will deal with all the subcommands to modifying the root mapping tree. //
// Skips ']'
// 32 is the number of bits in `int'.
// Construct a proper URL for relative lookup. //
// src1:    o--------o // src2:      o----o // res:       o----o // Reuse the rest of src1
// Create a proper feature map entry. //
// set original node of annotations (to allow get methods to work correctly)
// Determine all the bundles that this project depends on. //
// This call should get the files checked out from version control if the project is a 'team' project. //
// Like isStringType(), but still returns true even if multiplicity-many. //
// Reverse the objects to attach and detach lists. //
// this.offset points the next of '?'. // modifiers ::= [imsw]* ('-' [imsw]*)? ':'
// Make sure the changed values of bidirectional reference lists are cached before we //  start to apply the change. //
// This case will be handled special during apply //
// If it doesn't correspond to a bundle, then try to process it as a project in the workspace. //
//System.err.println("CLOSURE: "+min+", "+max);
// Must be in 0x0040-0x005f
// for CLOSURE
"/*  public String getImportedInstanceClassName()  {    return getGenModel().getImportedName(""org.eclipse.emf.ecore.EEnumLiteral"");   }*/"
// there is only whitespace on this line - no need for line break
// This handles Rose 2003 format, e.g., // Logical View::JavaException[40722F9D0294] //
// for STRING
// move all children to the type, converting enum constants to fields // // fields that are created by conversion from enum constants must be inserted after // the last final field that is used in constructors for initializers
// ESCAPE U+001B // FORM FEED U+000C // LINE FEED U+000A // CRRIAGE RETURN U+000D // HORIZONTAL TABULATION U+0009 //case 'v':  c = 0x0b;  break; // VERTICAL TABULATION U+000B
// Add JETBuilder //
// Literal char // . // XY // X|Y|Z // X* // [a-zA-Z] etc. // [^a-zA-Z] etc. // (X) or (?:X) // // ^ $ \b \B \< \> \A \Z \z // *? +? // strings // back references // (?=...) // (?!...) // (?<=...) // (?<!...) // (?>...) // (?ims-ims:...) // (?(...)yes|no)
// clone includeStack without cloning contents //
"/*               *  a|b|c -> FC_TERMINAL               *  a|.|c -> FC_ANY               *  a|b|  -> FC_CONTINUE               */"
// Create .jetproperties file //
// Mark the bound as unspecified so that it won't be considered many // but can nevertheless be recognized as being unspecified and perhaps still be treat as many. //
// Store the current state in stack. //
// If all the objects aren't used up by the above, then we can't do the command. //
// Perl extension
// New Template Container Entryfield
// If there's no position, the list is being cleared. //
// Set the new variables. //
// If the template path points at a project with a JET Nature,  // then we will assume that the templates we want to use are already compiled in this plugin Java project. //
// When we attached we have to recompute the erasure of the type parameter. //
//build table of Pf values
// Create a key set that supports add. //
// Suppress default constructor for non-instantiability.
// Get previous state in stack. //
// VAJ kludge //
"/*                  result.addRange(0, RegularExpression.LINE_FEED-1);                  result.addRange(RegularExpression.LINE_FEED+1, RegularExpression.CARRIAGE_RETURN-1);                  result.addRange(RegularExpression.CARRIAGE_RETURN+1,                                  RegularExpression.LINE_SEPARATOR-1);                  result.addRange(RegularExpression.PARAGRAPH_SEPARATOR+1, UTF16_MAX);                  return 1;                  */"
// Make sure we have something to pop. //
// Map to EClass, EEnum or EInerface. // Note that we do not map structure and primitive type class. //
// Register the file, and read its content: //
// The system time hasn't changed so add some increment of 100s of nanoseconds to guarantee uniqueness. //
// Is stack created ? (will happen if the JET file we're looking at is missing. //
// Use an alternate if we can't write to this one. //
// And delegate the call. //
// The method is not a structural feature, so it's modeled as an operation. //
// Continue with the established base URL.
// Consume the open quote: //
// Do allow an existing build.properties to be overwritten, since it may have been created as part of an empty EMF project. // Use the existence of a plugin.xml as a guard against overwriting in a project that has already been generated. //
// Restore parser state: //
// Filter out explicit EObject from super types, except in the Ecore package itself, or if it appears in the @model superTypes. //
// Check for an equal sign: //
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
// Get the attribute value: //
// insert line break if there is non-whitespace before end of the line
//an error  like "3c[Pad]r", "3cdX", "3cXd", "3cXX" where X is non data
// Don't do any of the other normally dynamic JETEmitter project processing. //
"/* (non-Javadoc)   * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#dispose()   */"
// Get the existing classpath and remove the project root if necessary. // Any new non-duplicate entries will be added to this. //
// Schema Rec. {Datatypes} - Punctuation  // Pi - initial quote // Pf - final quote
// note: hierarchical -> authority != null
// End of the useBean tag. //
// '::' represents at least one 16-bit group of zeros.
// // EMF.Editor generation //
// XMLesque Close tags //
// Parse as an attribute=value: //
// We can create the RemoveCommand for an uncontrol, but we must defer creating an AddCommand // to control until run(), when the user specifies a target resource. //
// // Tests generation //
// Reached EOF: //
// Resolve relative URI to base URI - see RFC 2396 Section 5.2 // In some cases, it might make more sense to throw an exception // (when scheme is specified is the string spec and the base URI // is also specified, for example), but we're just following the // RFC specifications
// Create annotations // http:///org/eclipse/emf/ecore/util/ExtendedMetaData
// Map to an eClass. //
// Until the encoding can be specified within the template  // we need to assume an encoding capable of working with any character set.
//FB TBD different objects for ecore model!
// Check end of quote, skip closing quote: //
// note: absolutePath -> hierarchical
// Get the attribute name: //
/*0A00..0A7F;*/
// Attempt to parse authority. If the section is an empty string // this is a valid server based authority, so set the host to this // value.
// Delete the ActionContributionItems with matching action. //
// search backwards starting from character before ':'.
// Don't remove the adapter if the object is in a different resource  // and that resource (and hence all its contents) are being cross referenced. //
/*0D00..0D7F;*/
// If the second character wasn't ':', in order to be valid, // the remainder of the string must match IPv4Address,  // and we must have read exactly 6 16-bit groups.
// Skip derived features. //
// The include succeeded, so if there is an alternative and we're not skipping, we need to start. //
// check for authority - RFC 2396 5.2 #4 // if we found a host, then we've got a network path, so we're done
// Include derived relations only if they won't also come from mixed or a group. //
// 6f - remove ending "<segment>/.." where "<segment>" is a // complete path segment
// If this is just a proxy being resolved... //
// RFC 2396 states that hostnames take the form described in  // RFC 1034 (Section 3) and RFC 1123 (Section 2.1). According // to RFC 1034, hostnames are limited to 255 characters.
// Force the raw type to be resolved so we don't resolve this endlessly. //
// rightmost domain label starting with digit indicates IP address // since top level domain label can only start with an alpha // see RFC 2396 Section 3.2.2
// Update the classifier and hence the raw type as normal. //
// RFC 2732 only allows '[' and ']' to appear in the opaque part.
/*10A0..10FF;*/
// Map to an EClass. //
// Look for an end-of-comment or end-of-tag: //
// We've either reached the end of the string, the address ends in // an IPv4 address, or it is invalid. scanHexSequence has already  // made sure that we have the right number of bits.
// A section is not allowed without a preceding include with alternative. //
// To encode special characters in anyURI, by using %HH to represent // special ASCII characters: 0x00~0x1F, 0x7F, ' ', '<', '>', etc. // and non-ASCII characters (whose value >= 128).
// // XML Schema anyURI specific information //
// An expression with more that 931 "+" will break Sun and IBM javac compilers. //
// If a newline from the previous character data remains, leave it around to be processed as if it appeared in the included file. //
// Fill 58 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 11 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 8 of value (byte) -19
// The include failed, so if there is an alternative, we don't skip it. //
// Fill 8 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 22 of value (byte) -19
// At development time, the real factory may not be available. Just return null. //
// This pop is safe because a section couldn't have been started without an include that pushed. //
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.FacadeHelper#doConvertToNode(java.lang.Object)   */"
/*16A0..16FF;*/
// Cannot start with a '.', '-', or end with a '-'.
// Process this first. //
// Ignore this now //
// Don't overwrite exising file
// Register our directive. //
// Create an import manager for this compilation unit
// Ignore it if there are multiple comments. //
// Three arguments are expected: the .xml jControlModel URI, the source java URI, and the target java URI. //
// Interprets escaped characters according to Java literal rules, with one // exception: a single \ is taken literally, not as an error.
// Fill 81 of value (byte) 33 // Fill 3 of value (byte) -19 // Fill 3714 of value (byte) 33
// protected static final EStructuralFeature CONTAINING_FEATURE = new EReferenceImpl(); // protected static final EStructuralFeature CONTAINER = new EReferenceImpl();
// Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 3 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 8 of value (byte) -19
/*2FF0..2FFF;*/
// Fill 3 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 18 of value (byte) 33 // Fill 2 of value (byte) -87
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getPackage(java.lang.String)   */"
// Fill 21 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 7 of value (byte) -87
// Entry entry = new Entry(eObject, CONTAINER); // return (InternalEObject)map.get(entry);
// Fill 23 of value (byte) -19
// This should never be called. //
// Fill 4 of value (byte) -87 // Fill 7 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 7 of value (byte) 33
// Fill 16 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 6 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 3 of value (byte) -87
// check for valid escape sequence
// If there isn't an executable command we should maybe try a link operation, but only if we're allowed and not doing a link. //
// return a correctly sized result
/* EATM getDecoratedAdapterFactory().*/
// Fill 4 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 8 of value (byte) -19
// Fill 2 of value (byte) -19 // Fill 6 of value (byte) -87
/*A000..A48F;*/
// Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33
"/*   * @deprecated   */"
"/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource.XMLMap#getFeatures(org.eclipse.emf.ecore.EClass)   */"
/*FB50..FDFF;*/
// Fill 5 of value (byte) -87 // Fill 11 of value (byte) 33 // Fill 84 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 90 of value (byte) -19
// eContainer = newContainer; // eContainerFeatureID = newContainerFeatureID;
// Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 7 of value (byte) 33 // Fill 2 of value (byte) -19
// When setting the resource to null we assume that detach has already been called in the resource implementation //
// Fill 10 of value (byte) -19
// Stop listening to the old one. //
"/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource.XMLMap#getInfo(org.eclipse.emf.ecore.ENamedElement)   */"
// Ignore the further-most javadoc //
// Create annotations // http://www.eclipse.org/emf/2002/Ecore
/*FF00..FFEF;*/
// Get what's left of the segments after trimming the prefix.
/*1D400..1D7FF;*/
// added since this encoding only differs w.r.t. presentation
// Fill 3 of value (byte) -87 // Fill 6 of value (byte) 33 // Fill 40 of value (byte) -19 // Fill 7379 of value (byte) 33 // Fill 20902 of value (byte) -19 // Fill 3162 of value (byte) 33 // Fill 11172 of value (byte) -19 // Fill 92 of value (byte) 33 // Fill 8190 of value (byte) 33
// <p>A valid opaque part must be non-null and non-empty. It may contain // any allowed URI characters, but its first character may not be // <code>/</code>
// Start listening to the new one. //
// Add ASCII Letters and ASCII Hex Numbers
// Create the source and target JDOMs. //
"/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)}  * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object  * and proceeding up the inheritance hierarchy * until a non-null result is returned,  * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.edit.tree.TreePackage * @generated */"
//ADD THOSE MANUALLY //F0000..FFFFD; "Private Use", //100000..10FFFD; "Private Use" //FFF0..FFFD; "Specials",
// Neither 'scheme:' or 'scheme:#fragment' are valid URIs.
// Create a pattern dictionary for each. //
// note: segments.length > 0 -> hierarchical
// Compute the offset in the sequence of bit patterns for this feature ID // and then get the bit pattern at that index. //
// check to see if this is the current doc - RFC 2396 5.2 #2 // note that this is slightly different from the RFC spec in that // we don't include the check for query string being null // - this handles cases where the urispec is just a query // string or a fragment (e.g. "?y" or "#s") - // see <http://www.ics.uci.edu/~fielding/url/test1.html> which // identified this as a bug in the RFC
//  We expect this failure when running stand-alone //
// use a stack to accumulate segments
// Compute the index within that bit pattern for this feature ID // and fetch that bit at that index. //
// Initialize classes and features; add operations and parameters //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$
// For isSet, we only need to check the bit and return -1 when the bit is 0. //
// If the value index set, there's no index to return. //
// Empty statement.
//return value != null && value.length() != 0 && //  value.charAt(0) != SEGMENT_SEPARATOR && //  validate(value, URIC_HI, URIC_LO, true, true);
// This just notifies those things that are affected by the selection. //
// no validation needed since all components are from existing URIs
// If the result is not a proxy, cache it. //
// Server based authority.
// can check against path characters because the set // is the same except for '/' which we've already excluded.
// Initialize all the fields from the command parameter. //
// Check that port is well formed if it exists. // REVISIT: There's no restriction on port value ranges, but // perform the same check as in setPort to be consistent. Pass // in a string to this method instead of an integer.
"/*   * (non-Javadoc)   *    * @see org.eclipse.jface.window.Window#close()   */"
// IPv6 addresses are 128-bit, so there can be at most eight sections.
"/*   * All Eclipse-dependent operations are delegated to this class. This pattern avoids any runtime failure due to   * missing dependencies in the stand-alone case.   */"
//return value != null && validate(value, SEGMENT_CHAR_HI, SEGMENT_CHAR_LO, true, true);
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.FacadeHelper#insertSibling(org.eclipse.emf.codegen.merge.java.facade.JNode, org.eclipse.emf.codegen.merge.java.facade.JNode, boolean)   */"
// Count just the bits up to this one. // Note that shifting 32 bits is a no op. //
// This might be invalid or an IPv4address. If it's potentially an IPv4address, // backup to just after the last valid character that matches hexseq.
// Determine the index for the feature and return the value at that index, if an index is assigned. //
// Fill 7 of value (byte) 33 // Fill 38 of value (byte) -19 // Fill 10 of value (byte) 33 // Fill 17 of value (byte) -87
// Determine if an index is assigned. //
// Determine the index. //
"/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)}  * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object  * and proceeding up the inheritance hierarchy * until a non-null result is returned,  * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage * @generated */"
// If it's newly allocated, add a new value, and indicate there was no previous value. //
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJAbstractType#getChildren()   */"
// Don't use 'cotinue' for this loop. // single-range | from-to-range | subtraction
// Initializing the Character Flag Array // Code generated by: XMLCharGenerator.
// Forward the interned value. //
// We'll assume that the copy command can execute and that adding a copy of the clipboard // is the same test as adding the clipboard contents itself. //
// If it's a parameterized type... //
// both prefix (if any) a localpart must be valid NCName
// The instance class name is the erasure. //
// Fill 4 of value (byte) -87 // Fill 9 of value (byte) 33 // Fill 53 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 28 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 8 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 55 of value (byte) 33 // Fill 38 of value (byte) -19 // Fill 2 of value (byte) 33
// If the name isn't a qualified name and isn't a primitive type, it's assumed to denote some arbitrary type parameter. //
// Fill 68 of value (byte) 33
// Be sure to pick up any trailing [] brackets. //
// If the bundle can't be found the normal way, try to find it as the base URL. // If that also doesn't work, rethrow the original exception. //
// Is the first character a special character, i.e., something other than '@'? //
// note: isRelative() -> hierarchical
// Returns null if the specified value is null or would be a valid path // segment array of a URI; otherwise, the value of the first invalid // segment.
// Fill 3 of value (byte) -19 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 2 of value (byte) -19 // Fill 16 of value (byte) 33
// Is it the start of a source URI of an annotation? //
// Recompute the read only state. //
//return value == null || validate(value, SEGMENT_CHAR_HI, SEGMENT_CHAR_LO, true, true);
// Refresh any actions that may become enabled or disabled. //
// Go through class super types to catch constraints from other packages
// Fill 5 of value (byte) -87 // Fill 4 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 3 of value (byte) -87 // Fill 11 of value (byte) 33 // Fill 4 of value (byte) -19
// Empty.
// Fill 3 of value (byte) -87 // Fill 18 of value (byte) 33
// note: authority == null -> hierarchical // (authority == null && device == null && !absolutePath) -> scheme == null
// Fill 4 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19
// if the node is less than 1 line long, but its contents is replaced by multiple lines, // comment out each line in it
// Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19
// Find the closing '%' //
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.BasicExtendedMetaData#isFeatureKindSpecific()   */"
// cause a syntax error
// Fill 8 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 145 of value (byte) 33 // Fill 46 of value (byte) -19
// Decode all encoded characters. //
// If that fails, determine the URL for the class itself. // The URL will be of one of the following forms, // so there are a few good places to consider looking for the plugin.properties. // // For a plugin.xml with runtime="common.jar": // jar:file:/D:/sandbox/unpackage1-3.1M7/eclipse/plugins/org.eclipse.emf.common/common.jar!/org/eclipse/common/CommonPlugin.class // // For a plugin.xml with runtime="runtime/common.jar": // jar:file:/D:/sandbox/unpackage1-3.1M7/eclipse/plugins/org.eclipse.emf.common/runtime/common.jar!/org/eclipse/common/CommonPlugin.class // // For a plugin.xml with runtime="." where the plugin is jarred: // jar:file:/D:/sandbox/unpackage1-3.1M7/eclipse/plugins/org.eclipse.emf.common.jar!/org/eclipse/common/CommonPlugin.class // // For a plugin.xml with runtime="." where the plugin is not jarred. // file:/D:/sandbox/unpackage1-3.1M7/eclipse/plugins/org.eclipse.emf.common/org/eclipse/emf/common/CommonPlugin.class // // Running in PDE with bin on classpath: // file:/D:/sandbox/unpackage1-3.1M7/eclipse/plugins/org.eclipse.emf.common/bin/org/eclipse/emf/common/CommonPlugin.class //
// Fill 2 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 18 of value (byte) 33 // Fill 2 of value (byte) -87
// Check for a count, i.e., a '.' followed by a number. //
// Look for trailing count. //
// Look for a matching named element. //
// return eContainerFeatureID;
// Find the uppermost class loader in the hierarchy that can load the class. //
// Fill 6 of value (byte) -87 // Fill 4 of value (byte) 33 // Fill 6 of value (byte) -87
// JControlModel.class is used with classNames that were not found //
// Fill 33 of value (byte) -19 // Fill 7 of value (byte) 33 // Fill 20 of value (byte) -87
// Register with the upper most class loader that's able to load the class. //
// Fill 3 of value (byte) 33 // Fill 3 of value (byte) -19
// This let's us test whether the string exists as a file. // If not, we try as a URI. //
// ...or if it's a wildcard or group feature.  Also, make it FeatureMap-typed. //
// First try to see if this class has an eInstance  //
// Try and get the resource selection to determine a current directory for the file dialog. //
// Remember the file. //
// Do the work within an operation. //
// no authority: use base's
// Create a resource set //
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getNamespace(org.eclipse.emf.ecore.EPackage)   */"
// Get the URI of the model file. //
// Returns true if the given value is an archive scheme, as defined by // the org.eclipse.emf.common.util.URI.archiveSchemes system property. // By default, "jar", "zip", and "archive" are considered archives.
// If the feature is a bidirectional reference with a multiplicity-many reverse, a composite reverse, // or a multiplicity-1 reverse that is already set (on value), then we'll switch things around and  // execute this command a little differently, because otherwise it's not undoable. //
// Add the initial model object to the contents. //
// If a sibling has been specified, add the best index possible to each CommandParameter. //
// Save the contents of the resource to the file system. //
// There are attributes to handle.
// Make sure the file ends in ".ecore". //
// genPackage can be a broken proxy
// Create a page, set the title, and the initial model file name. //
// We never directly set a multiplicity-many feature to a list directly.  Instead, we remove the old values // values, move the values that remain, and insert the new values.  If all old values are removed, we'll still // set it to an empty list, or unset it, as appropriate.  //
// Get the resource... //
// This gives us a directory... //
// Set this for the container. //
// if the relative path is empty or ends in an empty segment, a parent  // reference, or a self reference, add a trailing separator to a // non-empty path
// This returns a name like employeeNumber formatted like 'Employee Number' // This returns the same as getCapName unless it starts with "is" in which case the "is" is stripped  // This returns the name to be used in accessor method names; it's the same as getCapName, unless this is the key or value of a map entry, for which "Typed" is prepended // This returns the name of the get array-based accessor method for the list feature. // This returns the name of the get accessor method for the feature, i.e., either "is" or "get" is prefixed to getAccessorName
// For a many-to-many association, the command can only be undoable if the value or owner is last in its // respective list, since the undo will include an inverse add.  So, if the value is last, but the owner is // not, we create an undoable compound command that removes from the opposite end and then inserts the new // value. //
// eVirtualIndexBits[offset] = newIndexBits;
// If there is no list to add to, no collection or an empty collection from which to add, or the index is out of range... //
// eVirtualValues = newValues;
// This is package,  // so check the package information if this is in cat file. // If it is, then load the .cat file into the tree thereby traversing it; // otherwise, just traverse the tree. //
// no device: use base's
// Add a listener to set the most recent command's affected objects to be the selection of the viewer with focus. //
// Setting at an index. Make sure the index is valid, the type is valid, and the value isn't already in a // unique feature. Record the old value. //
// since base must be hierarchical, and since a non-hierarchical URI // must have both scheme and opaque part, the complete absolute URI is // needed to resolve to a non-hierarchical URI
// Make sure it's okay. //
// If the other end is a many, then we should remove the owner from the old value's opposite feature so that undo will put it back. //
// Look for a likely plugin name. //
// Create type parameters
//if found "no data" just return null
// If it's a platform plugin URI, include it in the map. //
// Keep track of all the entry features that are already in the feature map and that will be added, excluding // XML text, CDATA, and comments (if we're in a mixed type). //
// else keep authority, device, path, and query
// Determine the values to be added and add them at the right position. //
// note: it's okay for two URIs to share a segments array, since // neither will ever modify it
// Find the fragment root so that we can generate to the right location (by default). //
"/*   * Returns the base portion of the dynamic template path.   */"
"/*   * (non-Javadoc)   *    * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)   */"
// Remember it. //
// Either delegate the call or return nothing. //
// Now we could check that the adapter implements interface ITableItemFontProvider. //
// It's okay for there not be a precompiled template, so fail quietly.
// We don't need to encode here because the only platform resource URIs in the map are for projects // whose names are the same as corresponding plug-in IDs, and hence never need to be encoded // (see EcorePlugin.computePlatformResourceToPlatformPluginMap()). //
// There must be at least one match. //
"/*     * (non-Javadoc) Method declared on Dialog.     */"
// GenTypeParameter
// This implements the following order of preference: //   1. full refresh and update //   2. full refresh (add update if necessary) //   3. refresh element with update //   4. refresh element (if necessary) //   5. update element //
// GenTypedElement
// The try/catch provides backwards compatibility with the old resource // key, "_UI_CreateChild_label", and should be removed at the next // release, when we can expect users to regenerate. //
// EATM Color startColor = display.getSystemColor(SWT.COLOR_LIST_SELECTION);
//GenRuntimeVersion
// These will be the children belonging to this feature. //
//GenModelPackage
// There is no executable command, so we'd better nix the whole deal. //
// this returns either "attribute", "attribute list", "reference", or "reference list"
// Do the encoding. //
// Get the target object from the item widget and the mouse location in it. //
// add variable fragment to new declaration
// Determine if we can create a valid command at the current location. //
// Load the resource through the editing domain. //
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getType(org.eclipse.emf.ecore.EPackage,   *      java.lang.String)   */"
"/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.ecore2xml.Ecore2XMLPackage * @generated */"
// Otherwise, the source should be available now as event.data, and we // can create the command. //
// Either the IEditingDomainItemProvider or ITreeItemContentProvider item provider interface can give us // the children. //
"/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)} * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object * and proceeding up the inheritance hierarchy * until a non-null result is returned, * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.ecore2xml.Ecore2XMLPackage * @generated */"
//GenModelFactory
// current document reference: keep no path or query
// Ignore if there is not substantial change. //
// lower all except the last upper case character if there are // more than one upper case characters in the beginning. // e.g. XSDElementContent -> xsdElementContent // However if the whole string is upper case, the whole string // is turned into lower case. // e.g. CPU -> cpu
// Look for each unwrapped object as a value of a wrapper, replacing it with the first one found. //
// GenAnnotation
// It must be an unsettable feature to be empty and considered set. //
// matching authorities and no device or path removal
// always keep fragment, even if null, and use scheme from base; // no validation needed since all components are from existing URIs
// Check to see if a container is being put into a contained object. //
//(new AddCommand(domain, mapping, mapping.ePackageMapping().getMapping_Nested(), siblingsToReparent));
// // Static initialization //
/* Trick to import java.util.* without warnings */
// Do allow an existing MANIFEST.MF to be overwritten, since it may have been created as part of an empty EMF project. // Use the existence of a plugin.xml as a guard against overwriting in a project that has already been generated. //
// If there isn't an executable command we should maybe try a copy operation, but only if we're allowed and not doing a link. //
"/*     * The type string must be qualified by its package uri, e.g. DTD.xmi:DTDElement.     * The package uri is used to look up the package by calling RefRegister.getPackage(uri).     */"
// This will be the default return value. //
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.mapping.action.AddRootBottomAction#getBottomsToAdd()   */"
// Try again. //
// Otherwise, we could check that the adapter implements interface IItemColorProvider. //
// Now we could check that the adapter implements interface ITableItemColorProvider. //
// This turns a featureless set command into an operation to create a mapping. // This is invoked during drag and drop. //
//GenEnumImpl
// We've switch the operation! //
// Select the new file resource in the current view. //
// If the type isn't Object, we need to cast. If it's a primitive, we need to unbox. //
// use a stack to accumulate segments of base, except for the last // (i.e. skip trailing separator and anything following it), and of // relative path
// Now we want to find all the other objects with this same parent. // So we can collection siblings together and give the parent control over their removal. //
// We can't have a null name, in case we're using EMOF serialization. //
// Determine the object's parent. //
// If it's an interface, then it will be treated as an EClass //
// this returns either "EAttribute" or "EReference"
// Continue to compute the offset.
// Defer the handling of the opposite. //
// this guard is for extra security, but should not be necessary
// Do this first for better error message during setEParameterProperties. //
// set properties
// Index counters into indices1, indices2, and indices.  //
// Just remember it; it's encoded later during execution, which is more efficient. //
// Remove objects from the owner list by index, starting from the end. //
//GenModelFactoryImpl
// We don't want to insert an object before or after itself... //
// add IANA to Java encoding mappings.
// Create a code formatter for this compilation unit, if needed
// This is the feedback we use to indicate drop on; it will only be used if the command is executable. //
// Get the resource parent, if its a file. //
// We'd like the collection of replacements selected after this replace completes. //
// Repeatedly select the lower index and corresponding object, and advance past the selected pair. //
// Wrap any new children and add them to the map. Remove each current child from the set of old children. //
// Ignore this soft dependency when it's not satisfied.
// Simply remove the object from the owner list. //
// Make up a unique new name here. //
// Prepare for CreateChild item addition or removal. //
// Check all the siblings to see which if any should now be nested under this new mapping. // The are accumulated into a list so that they can be removed as a single command with a single notification. //
// J9 2.2 has problems assigning null to a Class variable. //
// always returns original value
// Use the original to do the add, but only if it's of the same type as the copy. // This ensures that if there is conversion being done as part of the copy, // as would be the case for a cross domain copy in the mapping framework, // that we do actually use the converted instance. //
// add added super interfaces to the array
// Special case for a reference to Ecore to ensure that flag settings are respected and are set only for Ecore itself. //
// not supported in JDOM
// only 1 fragment left - revert the changes
// We'll assume that all the CreateCopyCommand's and InitializeCopyCommand's can execute. //
// split is performed
// For RemoveCommand, we will find the owner by calling EditingDomain.getParent() on the object(s) being removed. //
// not supported in JDOM
// setResourceFactoryRegister(new ExtensibleContextResourceFactoryRegister()); //EATM setResourceFactoryRegister(new ContextResourceFactoryRegister());
// name already contains ".*" - unset on demand property
// Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 4 of value (byte) -19 // Fill 2 of value (byte) 33
// Three arguments are expected: the .xml getControlModel() URI, the source java URI, and the target java URI. //
// For lists, maps, and feature maps, the default is many-valued, which can be overridden by an upper-bound declaration. //
// If there is no Ecore representation or it's invalid, e.g., when - is used to omit a specification, then just use the Java representation. //
// Containers are transient by default unless explicitly annotated otherwise. //
// Consider each GenModel location URI for each required plugin. //
// Prepare for CreateSibling item addition or removal. //
// Get extra icon and bounds for first column of ExtendedTableTreeItem. //
// Force an update because Eclipse hides empty menus now. //
// If the notification is an IViewerNotification, it specifies how ViewerRefresh should behave.  Otherwise fall // back to NotifyChangedToViewerRefresh, which determines how to refresh the viewer directly from the model // notification. //
// Remove any menu items for old selection. //
// A SetCommand needs to go through SetCommand.create() to ensure it can execute and undo. //
// Query the new selection for appropriate new child/sibling descriptors //
// Generate actions for selection; populate and redraw the menus. //
// Draw ellipses, offset if down. //
// Empty extension to limit the effect of suppressing the deprecation warning.
"/*  protected Command createSetCommand(EditingDomain domain, Object owner, Object feature, Object value)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, SetCommand.class, new CommandParameter(owner, feature, value));  }  protected Command createCopyCommand(EditingDomain domain, Object owner, CopyCommand.Helper helper)  {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, CopyCommand.class, new CommandParameter(owner, null, helper));  }  protected Command createCreateCopyCommand(EditingDomain domain, Object owner, CopyCommand.Helper helper)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, CreateCopyCommand.class, new CommandParameter(owner, null, helper));  }  protected Command createInitializeCopyCommand(EditingDomain domain, Object owner, CopyCommand.Helper helper)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, InitializeCopyCommand.class, new CommandParameter(owner, null, helper));  }  protected Command createRemoveCommand(EditingDomain domain, Object owner, Object feature, Collection collection)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, RemoveCommand.class, new CommandParameter(owner, feature, collection));  }  protected Command createReplaceCommand(EditingDomain domain, Object owner, Object feature, Object value, Collection collection)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, ReplaceCommand.class, new CommandParameter(owner, feature, value, collection));  }  protected Command createAddCommand(EditingDomain domain, Object owner, Object feature, Collection collection, int index)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, ReplaceCommand.class, new CommandParameter(owner, feature, collection, index));  }  protected Command createMoveCommand(EditingDomain domain, Object owner, Object feature, Object value, int index)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, ReplaceCommand.class, new CommandParameter(owner, feature, value, index));  }  protected Command createDragAndDropCommand    (EditingDomain domain, Object owner, float location, int operations, int operation, Collection collection)  {    DragAndDropCommand.Detail detail = new DragAndDropCommand.Detail(location, operations, operation);    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, DragAndDropCommand.class, new CommandParameter(owner, detail, collection));  }*/"
// Iterate over all the plugin IDs to determine the dependency closure. // The list grows as the plugins are visited. //
// Look into SubContributionItems //
// else keep device, path, and query
// If it's really a contained child, return the feature for it. //
// We'll need to keep track of the information we use to create the // command, so that we can recreate it in drop.
// Changes to the parameters should also update the label. //
// Returns true if the non-relative path includes segments that would be // collapsed when resolving; false otherwise.  If preserveRootParents is // true, collapsible segments include any empty segments, except for the // last segment, as well as and parent and self references.  If // preserveRootsParents is false, parent references are not collapsible if // they are the first segment or preceded only by other parent // references.
//The shared instance.
// Ignore the unset notification for an isMany feature; the value is boolean in this case. //
// If necessary, get a command that replaces unwrapped values by their wrappers in the result and affected objects. //
// InputStream contents = new ByteArrayInputStream(bytes);
// Now we could check that the adapter implements interface ITableItemLabelProvider. //
// If we have children to remove for this feature, create a command for it. //
// Create helpers to cache and supply information for unique naming
//GenAnnotationImpl
// create OK and Cancel buttons by default
// Set the error message text // See https://bugs.eclipse.org/bugs/show_bug.cgi?id=66292
// Walk the fields. //
// index of first segment that is different between endPath and startPath
// If the local transfer supports this data type, switch to that data type //
// Create the options model. //
// drop last segment from base, as in resolving
// treat an empty base path as the root absolute path
// Create enums
// This is for backwards compatibility, since the constructor may have been overridden before it was expected // to set actionDelegate. //
//(eType instanceof EDataType)
//GenModelPackageImpl
// Determine the required plugins. //
// In column 0, the drop-down is indented past the collapse/expand icon. //
// Does nothing
// user rejects a relative path: keep absolute or no path
// Draw the icons. //
// I assume that the editorInput is a file object. //
// matching devices and no path removal
// Clear the import manager
// order genPackages by putting firstGenPackage (if non-null) first
// Remember the viewer and listen to SWT.DragDetect to alert the start of the drag operation. //
//GenFeatureImpl
"/*        text = new Text(composite, SWT.SINGLE | SWT.BORDER);        text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL                | GridData.HORIZONTAL_ALIGN_FILL));*/"
// If the value is null, the key is a referenced object
// keep query and select relative or absolute path based on length
"/*   * Set from {@link #isChildren children} if unset, and return value.   */"
// Handle the creation of the model from the modelFile. //
"/*   * For debugging purposes.  May be removed in the future.   */"
// Go through class super types to catch any from other packages
// For the control case, we need a dialog to ask for the URI and obtain the resource, then we create the command. //
// support for 1047, as proposed to be added to the  // IANA registry in  // http://lists.w3.org/Archives/Public/ietf-charset/2002JulSep/0049.html
// If we aren't getting the domain from the workbench part... // This happens when this action is used for a global popup action. // We try to get the editing domain from one of the objects in the selection. // //DMS editingDomain == null) ?
// scan feature lists for those with multiple elements and return them
// Nothing more to do and we don't want to do the default stuff below. //
//GenTypedElementImpl
//data type
// else keep shorter absolute path
// If we aren't doing an operation... //
// EObject is handled by default case
// Clean up the command if there is one.  If we need it again in drop, // we'll recreate it from dragAndDropCommandInformation. //
// Changes to parameter types should also update the operation's label. //
// Convert to an EReference. //
// escaped unicode form
// If we've found thing with type parameters, search them for a match.
// Filter out types that aren't permitted. //
// We need the wrapper, not the item provider, to handle a DragAndDropCommand; the move, add, remove, etc. commands // that implement it will have their values unwrapped as usual. //
// Restore the persistent command stack, if need be. //
// Create a generic super type with an EClass as the classifier for each super interface in the @model representation //
// An operation is declared via the kind property or, for backwards compatibility, by specifying parameters // (though attribute or reference kind takes precedence). //
// No index specified when removing all elements. //
// Check if the name is qualified //
// Avoid allowing choices that will lead to duplicates. //
// return getPresentationPackageName() + "." + getEditorPluginClassName();
// // EMF.Edit generation //
// Find the modeled package for the import and look up the name there. //
//  Avoid allowing a choice that will lead to duplicates. //
// Just to be helpful, we'll recognize a type of org.eclipse.emf.ecore.util.FeatureMap and convert it to EFeatureMapEntry. // This way a dataType need not be specified. But, we won't do this if recordDemandCreateEDataType is false, so we don't // change the instanceClass of a new EDataType that's implicitly being defined for FeatureMap. //
// Ensure that there are enough type arguments to match the number of type parameters. //
// Wrappers from the old command parameter must be considered in order for cut and paste to work. //
// You cannot add any children for a type parameter. //
// Look for the sibling value or an equivalent in the new child's feature. If it is found, the child should // immediately follow it. //
// <clinit>()
// Otherwise you can't make it a child. //
// Let them choose type parameters as well. //
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$
//TBD
// If it is a list type value... //
//GenPackageImpl
//   protected JETEmitter extendedItemProviderEmitter = null;
// Iterate over all the child references to factor each child to the right reference. //
// Don't care about plugin class; we can generate a model without one.
//subcommands.appendAndExecute(new RemoveCommand(domain, mapping, mapping.ePackageMapping().getMapping_Nested(), nestedMappings)); //subcommands.appendAndExecute(new AddCommand(domain, parentMapping, parentMapping.ePackageMapping().getMapping_Nested(), nestedMappings));
// When the value is changed, the property sheet page doesn't update the property sheet viewer input // before refreshing, and this gets called on the obsolete wrapper. So, we need to read directly from the // model object. // //return value;
//GenModelImpl
// Otherwise, we could check that the adapter implements interface IItemLabelProvider. //
// 6 is the size of (value
// Do not allow an existing MANIFEST.MF to be overwritten, as the tests project is originally generated from scratch. //
// user demands a relative path or the absolute path is longer
// It's definitely a package if expected constants eNAME, eNS_PREFIX, or eNS_URI appear. //
// bottom-label-case
// This ensures that the CreateCopyCommand will be executed by StrictCompoundCommand.prepare(). //
// Do not allow an existing build.properties to be overwritten, as the tests project is originally generated from scratch. //
// Fill 16 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 4 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 10 of value (byte) -19 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 17 of value (byte) 33 // Fill 3 of value (byte) -87
// Handle eOpposite specially. //
// If this owned object is equal to one from the collection... //
// If there is more than one exact match, we must get an index number; //
// Fill 5 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 17 of value (byte) 33 // Fill 3 of value (byte) -87
// Filter out classes that aren't permitted. //
//GenModelValidator
// Read all the values into an array. //
// This can't execute if there is no owner list  // or the owner list doesn't contain the value being replaced or  // there are not replacements. //
"/* (non-Javadoc)   * @see org.eclipse.emf.mapping.ecore2ecore.Ecore2EcoreMapping#getOutputEPackage()   */"
//GenModelSwitch
// Now we'll do recursive MatchMapping. // (We need to iterate over a copy, since we modify the underlying list in the loop.)
// This guard is needed to ensure that clear doesn't make the resource become loaded. //
// This is done to ensure that this new copy is treated as an output by the domain. // The CreateMappingCommand will rely on this setting. //
// If we haven't yet encrypted or decrypted, generate a key. This key will  // only be used for encryption. Decryption keys are always derived from // the header of the input stream itself.
// colorMap.put(CLR_GRAD_START, clr1);
// write the header to the output stream. this has the format  // (delimeters are not written): // PBE IV|ENCRYPTION IV|ENCRYPTED KEY LENGTH|ENCRYPTED KEY
// We'd like the collection of things added to be selected after this command completes. //
// Iterate over the children to find the owner. //
// Handle the same document proxies, which may have problems resulting from the // other end of a bidirectional reference being handled as an IDREF rather than as a proxy. // When we are done with these, we know that funny proxies are now resolved as if they were handled as IDREFs. //
// Merges this URI's relative path with the base non-relative path.  If // base has no path, treat it as the root absolute path, unless this has // no path either.
// Make up a unique new name here. // //$NON-NLS-1$
//removeCommand = RemoveCommand.create(domain, mappingRoot, mappingRoot.ePackageMapping().getMapping_Nested(), mappingRoot.getNested());
// We don't want to move insert an object before or after itself... //
// The CipherOutputStream shoudln't close the underlying stream //
// return getProviderPackageName() + "." + getEditPluginClassName();
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJAbstractType#remove(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode)   */"
// an absolute URI needs no resolving
// note: these assertions imply that neither this nor the base URI has a // relative path; thus, both have either an absolute path or no path
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#insertSibling(org.eclipse.emf.codegen.merge.java.facade.JNode, org.eclipse.emf.codegen.merge.java.facade.JNode, boolean)   */"
// Simply add the collection to the list. //
// note: device != null -> hierarchical
// <p>A valid fragment may be null or contain any allowed URI characters.
"/*   * Returns the dynamic template path, an ordered list of URIs corresponding to locations under which to find   * templates.   */"
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.AbstractJNode#computeQualifiedName()   */"
// Ignore the exception and return false.
// note: query != null -> hierarchical
//return value == null || validate(value, URIC_HI, URIC_LO, true, true);
"/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)}  * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object  * and proceeding up the inheritance hierarchy * until a non-null result is returned,  * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.MappingPackage * @generated */"
//datatype
"/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)} * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object * and proceeding up the inheritance hierarchy * until a non-null result is returned, * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.ecore.change.ChangePackage * @generated */"
"/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)}  * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object  * and proceeding up the inheritance hierarchy * until a non-null result is returned,  * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.ecore.EcorePackage * @generated */"
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getName(org.eclipse.emf.ecore.EClassifier)   */"
// We do not want to diagnose any error that have already been diagnosed by a super type. //
// Creates the model from the editor input //
"/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)} * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object * and proceeding up the inheritance hierarchy * until a non-null result is returned, * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.ecore2ecore.Ecore2EcorePackage * @generated */"
// Tests the non-null string value to see if it contains only ASCII // characters in the set represented by the specified 128-bit bitmask, // as well as, optionally, non-ASCII characters 0xA0 and above, and, // also optionally, escape sequences of % followed by two hex digits. // This method is used for the new, strict URI validation that is not // not currently in place.
// If the workbench part changes... //
/* backward compatibility with old generated overrides */
// For a many-to-1, we use SetCommand.create() to create the command to remove the opposite reference; // a RemoveCommand on its opposite will actually result. //
// add all converted fields after the last final field  // that is used in initializers of the converted fields
"/*   * Char buffer for HTML data   */"
// if endPath is shorter than startPath, the last segment of endPath may // not be compared: because startPath has been collapsed and had its // last segment removed, all preceding segments can be considered non- // empty and followed by a separator, while the last segment of endPath // will either be non-empty and not followed by a separator, or just empty
// Ignore because we'll rethrow the original exception eventually.
// path form demands an absolute path: keep it and query
// Continue processing dynamically as normal.
// Iterate over all the operations but skip all the operations in the first super. //
// For feature maps, test that the entry feature is a valid type, that the entry value is an instance of it, // that there is not already something in a document root, and that there is not already something in a // single-valued entry feature. //
// pure obfuscated genius!
// Match close.
// Take care of the quoting here.
// skip empty segments and self references; push everything else
// For a 1-to-many association, doing the set as a remove and add from the other end will make it undoable. // In particular, if there is an existing non-null value, we first need to remove it from the other end, so // that it will be reinserted at the correct index on undo.  //
// Close NCSA like attributes "->"
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getFeatureKind(org.eclipse.emf.ecore.EStructuralFeature)   */"
// super is called on converted node
// Convert the selection to a collection of the selected objects. //
// assume length will grow by 10% (average line length is 20 characters)
// Ignore the version
// Reached EOF:
// Close variable like attributes "%>"
// XMLesque Close tags
// Command line execution methods
// Compute a map of resource location URIs to logical namespace URIs // so that cross references will be resolved via package registry when deserialized.  //
// For a many-to-1 or 1-to-1 association, if the opposite reference on the new value is already set to // something, we need a compound command that first explicitly removes that reference, so that it will be // restored in the undo. //
/////////////////////////////////  PUSH  /////////////////////////////////////
// check whether the character is in the range 0x30 ~ 0x39
/////////////////////////////////  SWEEP  /////////////////////////////////////
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.AbstractJNode#getChildren()   */"
/////////////////////////////////  PULL  /////////////////////////////////////
// The referencedEPackages list is used to track the packages for // which is necessary to create the stub GenModel.  So if the ePackage // is referenced by an existing GenPackage, it doesn't need to be added to // referencedEPackages.
"/*    // PULL Name    //    targetPackage.setName(sourcePackage.getName());*/"
// If we're not setting a new resource, attach it to the old container's resource.
// apply target parent pattern first
// Include each required plugin of the starting project and the exported ones of all the required projects. //
// do not crash when control model is not set
/////////////////////////////////  CLONE AND MAP  /////////////////////////////////////
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getName(org.eclipse.emf.ecore.EStructuralFeature)   */"
/////////////////////////////////  SORT  /////////////////////////////////////
// We will create an EAttribute, EReference, or an EOperation. //
// Read value until delimiter is found:
// Check whether there are parameters; the special attribute and reference rules only apply for the case of no arguments. //
// System.err.println("Warning: Cannot clone '" + sourceNode.getContents() + "'");
// redo the markup since nodes changed now
// use new node from now on
// Look through the imports of the containing compilation unit. //
//purpose: using charset from 'targetFile' to encode in-memory  //         'newContents' object into bytes //modifer: Wu Zhi Qiang //date:    Aug 25, 2004 //action:  first get the charset from 'targetFile', then use it  //         to encode the 'newContents' object into bytes
// Ignore the exception.
/////////////////////////////////  HEADLESS INVOCATION  /////////////////////////////////////
// For any entry that doesn't correspond to a plugin in the running JVM, compute a URL for the classes. //
// We don't want keyType and valueType on a map type specification in a package interface. // But, we also use qualified model information when defining a feature with suppressed get accessor // on the interface, and we do want to include these properties in that case. //
// Ignore CHAR tokens. // ** // **
// Back up over the whitespace.
// target method is NOT addSuperInterface
// by default nodes are marked up
// if the parent is not in target, there is no point on checking the child
// ;DEVANAGARI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;BENGALI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;GURMUKHI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;GUJARATI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;ORIYA SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;TAMIL SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;TELUGU SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;KANNADA SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;MALAYALAM SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;THAI CHARACTER PHINTHU;Mn;9;ON;;;;;N;THAI VOWEL SIGN PHINTHU;;;; //;TIBETAN MARK HALANTA;Mn;9;ON;;;;;N;TIBETAN VIRAMA;;;;
// If the flag will straddle two fields, bump it to the next one. //
// Fill 2 of value (byte) -87
// Update the containing map, if necessary. //
// We expect there to be at least one archive path. //
// Characters to use in escaping.
// If there is a provider base class from outside this class that has already been generated, get the create // child references from it. We'll check for any type-compatible classes introduced in this package. //
// Private constructor for use of static factory methods.
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#addChild(org.eclipse.emf.codegen.merge.java.facade.JNode)   */"
// for all nodes but some use default extended range
//iri = iri || containsNonASCII(authority);
// if there are multiple variables in the same field declaration, create declaration with only 1 variable
// Private constructor for use of platform factory methods.
//iri = iri || containsNonASCII(query);
// Debugging method: converts the given long to a string of binary digits.
// replace or append
// Returns the upper half bitmask for the given ACSII character.
// skip whitespace, up to the end of the line
// && uri.charAt(i) == FRAGMENT_SEPARATOR (implied)
// enable tracking for nodes that have string content
// apply header
// enable tracking for commented out nodes
// Fill 4 of value (byte) -87 // Fill 7 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 9 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 18 of value (byte) 33 // Fill 2 of value (byte) -87
// Returns the lower half bitmask for the given ASCII character.
// return the line number of the start of the node
//MappingPackageImpl
// revert all current edits for this node
// this line has been commented out, return next line number
// Find the appropriate parent mapping, which at the very least, should be the mapping root itself. //
// if there is anything after the node on the same line, insert line break
// Separators for parsing a URI string.
// comment out all lines of the node itself, from firstLine to last line
// This is tricky and is done for each object here rather than once for the owner of the addCommnd. // We want to make sure the object is really part of the conceptual tree induced by the domain. //
// next position is checked as well
// We can't blindly cache the genModel, since we need to support moving the GenPackage to another container, // but the cast is expensive, so we'd like to do it no more than absolutely necessary. //
// handle the case when there is a replace edit that covers these lines
// If it's the selection viewer, then we want it to select the same selection as this selection. //
// if there is any content after the node on the same line, insert line break (to prevent commenting out extra content)
// skip all lines that replace edit covers
// should not happen, re-throw exception
// make sure that dummy edit is not in the tree
// char at currentPos is copied as well
// It belongs to this package if the delegate feature is from this package, // or the class is from this package and either there is no delegate feature or the delegate feature is from some used package. //
// lastPos, currentPos points at the next chars that will be copied later
// if there is anything before the node on the same line, create line break and comment out the first line of the node
// copy last piece if any
// Set URIs of EPackage-containing resources: output resource to desired target URI, and others to package // namespace URIs (so cross-references will be resolved via package registry when deserialized).  //
// if comma is on a line by itself, comment it out but do not insert the line break
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJAbstractType#insertSibling(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode, org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode, boolean)   */"
// if previous node is not commented out, but all the following nodes are, comment out a comma (constant separator)
// We need to filer out duplicates in the unlikely event that we have two // features with the same class-qualified name. We'll only generate one property // string in that case and let the user add the second one manually, if necessary. //
// if previous node is not commented out, but all following are
// Since we will do the processing recursively, we need to ensure we don't stack overflow if there is a circular super type. //
// Fill 18 of value (byte) -19 // Fill 13 of value (byte) 33 // Fill 12 of value (byte) -19
// delete variable fragment from old declaration
// cat(unit) file referenced by mdl file
// Ignore features from the first super type. //
//volatile
//listRewrite.remove((ASTNode)modifier, null);
// Uses a cache to speed up creation of a URI from a string.  The cache // is consulted to see if the URI, less any fragment, has already been // created.  If needed, the fragment is re-appended to the cached URI, // which is considerably more efficient than creating the whole URI from // scratch.  If the URI wasn't found in the cache, it is created using // parseIntoURI() and then cached.  This method should always be used // by string-parsing factory methods, instead of parseIntoURI() directly.
// Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19
// super.collectNewChildDescriptors(newChildDescriptors, object);
// this could be method body, for example
// A primitive type can only be used as the generic type of a typed element. //
// range to look for comments
// Discard the old editing domain. //
// Skip an archive accessor to be handled by delegation to the scheme in nested URL. //
// userinfo can contain alphanumerics, mark characters, escaped // and ';',':','&','=','+','$',','
// return eProperties;
// set javadoc
// add Java to IANA encoding mappings //fJava2IANAMap.put("8859_1",    "US-ASCII"); // ?
// Returns the int value of the given hex digit.
// the for loop's condition finds the separator
// Parse to count the archive paths that must will be delegated to the nested URL based on the number of schemes at the start. //
// Fill 25 of value (byte) 33 // Fill 9 of value (byte) -19 // Fill 6 of value (byte) -87
// Assume that we aren't running.
// assume that the node is being moved (to allow insertion after)
//MappingPackage ePackage = ((MappingRoot)object).ePackageMapping();
// And even if it is contained, it must not be a forward reference. // eTypeParameterIndex == index is allowed when the type parameter is  // the type argument of the bound, though //
// remove all existing modifiers
// append extra dimensions if any
// create new modifiers and add to rewrite
// We can also optimize single valued reverse.  //
"/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.ecore.EcorePackage * @generated */"
// Create a proxy in the correct way and pop it. //
// null -> relative URI reference
// If eCore, set the ENamedElement name //
//If it was not a warning or an diagnostic then return the diagnostic image
// Maintain a list of classifiers for looking up conflicts. //
//Only one example per wizard
//Ecore2XMLFactory
// XMLMap
// append [] if it is variable arity parameter (@see JLS3 8.4.1, http://java.sun.com/docs/books/jls/third_edition/html/classes.html#300870)
//XMLInfoImpl
// Fill 6 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 62 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 6 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 11 of value (byte) 33
// AnyType
// No image is a good default. //
// Applicable only to a hierarchical URI.
// Apply a redirection pattern, if specified. //
// create new node and replace it all by original contents
// make all enum constants to be on separate lines
// Avoid unnecessary out.write("") statements...
// set comment and initializer as strings
"/*   * (non-Javadoc)   *    * @see org.eclipse.ui.IActionDelegate#selectionChanged(org.eclipse.jface.action.IAction,   *      org.eclipse.jface.viewers.ISelection)   */"
// set annotation contents
// reg_name = 1*( unreserved | escaped | "$" | "," |  //            ";" | ":" | "@" | "&" | "=" | "+" )
"/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLLoad#load(org.eclipse.emf.ecore.xmi.XMLResource, org.w3c.dom.Node, java.util.Map)   */"
// update the wrapped object map
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.FacadeHelper#getContext(org.eclipse.emf.codegen.merge.java.facade.JNode)   */"
// skip nodes in hierarchy that can not be converted to JNode (i.e. VariableDeclarationFragment)
// If there is no root object, we're dealing with an EAttribute feature instead of an EReference feature. // So create an instance of simple any type and prepare it to handle the text content. //
// get rewriter
// path - everything up to query string or fragment
// insert new declaration before this one
// if there is an element with end position <= rangeEndPos
"/*   * Computes the default path for the given GenModel. This was previously the implementation of getTemplatePath().   */"
// extend range backward
// We can't want to do encoding of platform resource URIs by default yet.    //
// create map of field names to fields
// Create the output stream to the temporary file and the input stream for the delegate URL. //
//boolean iri = false;
// extend to include the comment at the same line as the position
// else - there is a comment that ends exactly at rangeEndPos
// handle field declarations separately
// the previous element must have end position <= rangeEndPos
//last 2 bits should be zero
// else - there is a comment that starts exactly at rangeStartPos
// && commandParameter instanceof MappingCommandParameter)
// extend range forward
// increments the position to add the white spaces
// add trailing whitespace
// set source
//Create a label if there are no children to force a smaller layout
// Returning null here causes RemoveCommand.create(domain, mappedObjectItemProvider) to be delegated //  to MappedObjectItemProvider.createCommand() and there we return a command to remove mappedObject instead. // // return null;
// mark the node as moved if node has been removed
// enable commenting out
// Initialization is deferred until adapters are attached to all the objects of interest and we're // about to ask them to generate. //
// Counter for the number of 16-bit sections read in the address.
// disable commenting out
// Determine the inverse map from plugin IDs to their registered GenModel locations. //
// A cache of URIs, keyed by the strings from which they were created. // The fragment of any URI is removed before caching it here, to minimize // the size of the cache in the usual case where most URIs only differ by // the fragment.
// mark the node to be removed
// We'll rethrow the original exception, not this one.
// if are dealing with original, not cloned node
// CellEditor.setValue() calls isCorrect() to validate the value that is about to be set. We are doing conversion // between the value and a corresponding string, and we would usually like to validate the string. Because // setValue() is final, we cannot do that conversion there, so we need to record what we're trying to validate and // work around the problem in isCorrect(). //
// stringValue not null, nodeValue is null
"/*   * If this is an {@link #isIRI IRI}, converts it to a strict ASCII URI,   * using the procedure described in Section 3.1 of the   * <a href=""http://www.w3.org/International/iri-edit/draft-duerst-iri-09.txt"">IRI   * Draft RFC</a>.  Otherwise, this URI, itself, is returned.   *   * This unused code is included for possible future use...   */"
// insert new values
// convert only fields of the same type as parent
// move all children to the enum, converting some fields to constants
// set the type to create
// include line comments following end of the nodes into the range
// move annotations
// set arguments and body
// update the wrapped object
// unable to set arguments or body
// check if there is just whitespace between position and start of the comment
// create field declaration with 1 variable declaration fragment
//DEBUG //System.err.println("isRegisterNonXS: "+name);
// Record the part. //
// replace type by enum
// insert nodeToInsert after targetNode
// convert enum constants and add to list of converted constants
// move the node
// set initializer
// set arguments
// set the whole initializer
// set the body
// update last field that is used
// set the arguments to the constructor
// perform split if there is more than 1 fragment
// return the whole declaration contents (not just variableDeclarationFragment)
// set rewritten node to be the original
// Not overlapped // src1: o-----o // src2:         o-----o // res:  empty // Reuse src2
// check number of fragments
"/* * This class provides encode/decode for RFC 2045 Base64 as * defined by RFC 2045, N. Freed and N. Borenstein. * RFC 2045: Multipurpose Internet Mail Extensions (MIME) * Part One: Format of Internet Message Bodies. Reference * 1996 Available at: http://www.ietf.org/rfc/rfc2045.txt * This class is used by XML Schema binary format validation * * This implementation does not encode/decode streaming * data. You need the data that you will encode/decode * already on a byte array. * * @author Jeffrey Rodriguez * @author Sandy Gao */"
// create a copy of declaration
// set annotations contents
// Create a temporary file where the existing contents of the archive can be written  // before the new contents are added. //
// System.err.println("Logged throwable: --------------------"); // throwable.printStackTrace();
// Ensure correct indentation for a top level attribute. // // elementNames.add("mark");
// New Template Container Label
// container specification group
"/*   * @since 2.4   */"
// xmlns="" declaration // Example #1: <a><q-name>q</q-name><b xmlns="abc"/></a> // Example #2: <a xmlns="abc"><b xmlns=""/><c xmlns="abc2"/></a> // Example #3: <a xmlns:a="abc"><b xmlns:a="abc2"/></a>
"/*     *  Convert element values:     *  & to &amp;     *  < to &lt;     *  "" to &quot;     *  \n to line separator     *  \r should be escaped to &xD;     */"
// will point at the character after 0 to 3 octal digits
"/*   * Create an XML processor that is aware of XML Schema specified.   * @param schemaURIs - a URI {@link org.eclipse.common.util.URI} which point to an XML Schema   */"
// Return the original URI.
// Just print an error message.
// Title.
// Ignore the exception and return the original URI.
// Assume the class is not available.
// Just return the default.
// do not insert line break if there is only whitespace after comma
// This is just a marker interface.
// This case happens when the IDE is brought up with the editor already open //
// For an archive URI, check for the path in the archive. //
// Continue processing if the file doesn't exist so that we try create a new empty one.
// set lexical handler
// If we didn't find the path in the usual place nor in the archive... //
// The loop resolves the cross references by visiting them.
// If they don't have the same class, they can't be equal. //
// This may be called directly on an EObject for the case of a containment. //
// Assume that it's not available.
// Preload.
// No new methods.
// Listen to title changes. // getViewPart().addPropertyListener(this);
//ListChangeImpl
// Wrap the current input as a zip stream, and record it for loop-based recursion. //
// return getPrefixedName("EditPlugin");
//ChangePackage
// If the generic type is a different wildcard, it doesn't match. //
// turn the password into an AES key
//   public String getExtendedItemProviderClassName() //   { //     return getPrefixedName("ItemProviderAdapter"); //   }
// process documentation info and create eEnumLiteral for each line //
// EAnnotation
// Create a new or replaced entry and continue processing the remaining archives. //
//getList(entry).clear();
// Subclasses MUST override this function
// return eVirtualIndexBits[offset];
// return minimumCapacity;
// return eVirtualValues;
"/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource#load(org.w3c.dom.Node, java.util.Map)   */"
// Continue and return null.
//ChangePackageImpl
// Ignore exceptions.
//ChangeFactoryImpl
// Ensure that cached ePackage is forgotten.
//EAnnotationImpl
// ListChange
// If the attribute is set, record it's old value. //
// Force this to be initialized as well.
// Ignore the exception since we will throw one when all else fails.
//EcoreValidator
// If we didn't detach it from an old resource already, detach it from the old container's resource. //
// Fill 230 of value (byte) 33 // Fill 38 of value (byte) -19 // Fill 10 of value (byte) 33 // Fill 39 of value (byte) -19 // Fill 9 of value (byte) 33
//EOperation
// Create a page for the parent tree view. //
// Check to make sure that every object in the collection has an ancestor that is contained in this mapping. //
// generate the key
// Record them as generic streams to record state during the loop that emulates recursion. //
// If we can open  an input stream, then the path is there, and we have a good URL. //
// Continue and try to close.
"/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.ecore2ecore.Ecore2EcorePackage * @generated */"
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJAbstractType#addChild(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode)   */"
// Decrypt the key bytes
// now create the encryption cipher
"/* (non-Javadoc)   * @see org.eclipse.emf.mapping.MappingRoot#canCreateMapping(java.util.Collection, java.util.Collection, org.eclipse.emf.mapping.Mapping)   */"
"// Read the header of the encrypted file.				"
"/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.ecore.change.ChangePackage * @generated */"
// add leading hanging comments to the previous node, // hence, only comments immediately preceding the node will be in the range for removal
// just make a copy of the base if spec is empty
// generate the IV for encryption
"/*    * @see org.eclipse.emf.ecore.InternalEObject#eSetProxyURI(org.eclipse.emf.common.util.URI)   */"
// this is the key we will use to encrypt the data
"/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.edit.tree.TreePackage * @generated */"
// Create a title bar.
"/* (non-Javadoc)   * @see org.eclipse.ui.IActionDelegate#selectionChanged(org.eclipse.jface.action.IAction, org.eclipse.jface.viewers.ISelection)   */"
// now create the decrypt cipher
// Only do this once.
// If we haven't yet generated a key, just use this one
// ECLIPSE-DEPEND-BEGIN
"/* (non-Javadoc)   * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#init(org.eclipse.ui.IWorkbenchWindow)   */"
// Ignore the bound if the value is too big.
// ECLIPSE-DEPEND-END
"/*    * @see org.eclipse.emf.ecore.EObject#eIsProxy()   */"
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.FacadeHelper#createCompilationUnit(java.lang.String, java.lang.String)   */"
// Invoke generator adapters for each object. //
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.FacadeHelper#addChild(org.eclipse.emf.codegen.merge.java.facade.JNode, org.eclipse.emf.codegen.merge.java.facade.JNode)   */"
"/*     * (non-Javadoc)     *      * @see org.eclipse.jface.dialogs.Dialog#createButtonsForButtonBar(org.eclipse.swt.widgets.Composite)     */"
// Ignore it if it isn't a class. Not being a class is diagnosed for the generic type itself. //
// Ensure that the class loader for this class will be used downstream. //
// Two slashes means we may have authority, but definitely means we're either // matching net_path or abs_path. These two productions are ambiguous in that // every net_path (except those containing an IPv6Reference) is an abs_path.  // RFC 2396 resolves this ambiguity by applying a greedy left most matching rule.  // Try matching net_path first, and if that fails we don't have authority so  // then attempt to match abs_path. // // net_path = "//" authority [ abs_path ] // abs_path = "/"  path_segments
// Don't bother complaining about things with no name, // since there are constraints for that problem. //
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#insertSibling(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode, org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode, boolean)   */"
//EcoreSwitch
// A document root can have multiple ID attributes because there can be multiple global element or attribute declarations of type ID  // and these will be the ID in the complex types that reference them, // i.e., they aren't really the ID of the document root. //
// For performance, skip matching all the features of the first super type. //
// Action bar.
// note that the copied tree should not be modified by wrapped ASTJField // // the copied tree will have source ranges for all nodes in the source file, // hence, the get methods in the new ASTJField will not return the right contents
// Checks whether the string contains any more segments after the one that // starts at position i.
"/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource.XMLMap#add(org.eclipse.emf.ecore.ENamedElement, org.eclipse.emf.ecore.xmi.XMLResource.XMLInfo)   */"
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#remove(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode)   */"
// if we get to this point, we need to resolve relative path // RFC 2396 5.2 #6
// Create the key from the key bytes
"/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage * @generated */"
// List subList(EStructuralFeature feature, int from, int to); // EList list(EStructuralFeature feature);
// This must have no fewer segments than the prefix.  Since the prefix // is not the root absolute path, its last segment is empty; all others // must match.
// create new field and replace it all by original contents
// Fill 31 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 53 of value (byte) -19
// If this is a hierarchical URI reference and prefix is a prefix of it, // returns the portion of the path remaining after that prefix has been // trimmed; null otherwise.
// Encodes a complete URI, optionally leaving % characters unescaped when // beginning a valid three-character escape sequence.  We can either treat // the first or # as a fragment separator, or encode them all.
// Returns the character encoded by % followed by the two given hex digits, // which is always 0xFF or less, so can safely be casted to a byte.  If // either character is not a hex digit, a bogus result will be returned.
// check for scheme - RFC 2396 5.2 #3 // if we found a scheme, it means absolute URI, so we're done
// If the scheme specific part is opaque, it can contain '[' // and ']'. uric_no_slash wasn't modified by RFC 2732, which // I've interpreted as an error in the spec, since the  // production should be equivalent to (uric - '/'), and uric // contains '[' and ']'. - mrglavas
// Returns the shortest relative path between the the non-relative path of // the given base and this absolute path.  If the base has no path, it is // treated as the root absolute path.
// Validates all of the URI components.  Factory methods should call this // before using the constructor, though they must ensure that the // inter-component requirements described in their own Javadocs are all // satisfied, themselves.  If a new URI is being constructed out of // an existing URI, this need not be called.  Instead, just the new // components may be validated individually.
// There is no match if the types are different // and they don't each specify the same non-null instance class name. //
// Interpret it as part of the name. //
// The string must contain inappropriate whitespace, so find the index for the first difference. //
// When used as a generic super type, there must be a classifier that refers to a class. //
// Don't complain about the literals if they are the same as the names and the names collide. //
"/* * EncodingMap is a convenience class which handles conversions between  * IANA encoding names and Java encoding names, and vice versa. The * encoding names used in XML instance documents <strong>must</strong> * be the IANA encoding names specified or one of the aliases for those names * which IANA defines. * <p> * <TABLE BORDER=""0"" WIDTH=""100%""> *  <TR> *      <TD WIDTH=""33%""> *          <P ALIGN=""CENTER""><B>Common Name</B> *      </TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER""><B>Use this name in XML files</B> *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER""><B>Name Type</B> *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER""><B>Xerces converts to this Java Encoder Name</B> *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">8 bit Unicode</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">UTF-8 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">UTF8 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin 1</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-1 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-1 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin 2</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-2 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-2 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin 3</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-3 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-3 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin 4</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-4 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-4 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin Cyrillic</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-5 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-5 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin Arabic</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-6 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-6 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin Greek</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-7 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-7 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin Hebrew</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-8 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-8 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin 5</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-9 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-9 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: US</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-us *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp037 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Canada</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-ca *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp037 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Netherlands</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-nl *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp037 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Denmark</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-dk *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp277 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Norway</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-no *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp277 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Finland</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-fi *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp278 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Sweden</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-se *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp278 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Italy</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-it *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp280 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Spain, Latin America</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-es *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp284 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Great Britain</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-gb *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp285 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: France</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-fr *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp297 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Arabic</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-ar1 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp420 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Hebrew</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-he *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp424 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Switzerland</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-ch *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp500 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Roece</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-roece *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp870 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Yugoslavia</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-yu *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp870 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Iceland</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-is *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp871 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Urdu</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-ar2 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp918 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">Chinese for PRC, mixed 1/2 byte</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">gb2312 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">GB2312 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">Extended Unix Code, packed for Japanese</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">euc-jp *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">eucjis *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">Japanese: iso-2022-jp</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">iso-2020-jp *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">JIS *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">Japanese: Shift JIS</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">Shift_JIS *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">SJIS *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">Chinese: Big5</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">Big5 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">Big5 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">Extended Unix Code, packed for Korean</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">euc-kr *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">iso2022kr *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">Cyrillic</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">koi8-r *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">koi8-r *      </TD> *  </TR> * </TABLE> *  * @author TAMURA Kent, IBM * @author Andy Clark, IBM */"
// Can't have both a classifier and a type parameter. //
// Add Userinfo Characters
// The type parameter must be in scope and must not be a forward reference. //
// Ignore trailing whitespace
// Incorrect number of type arguments. //
// Have no arguments when they are allowed is only a warning. //
// Can't have both an upper and lower bound. //
"/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource.XMLMap#getClassifier(java.lang.String, java.lang.String)   */"
// Wildcards are only allowed in type arguments. //
"/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource.XMLMap#getFeature(org.eclipse.emf.ecore.EClass, java.lang.String, java.lang.String)   */"
// Can't have type arguments unless there is a classifier //
// Can't have a classifier or a type parameter as well as bounds. //
// Can only have bounds when used as a type argument. //
// remove/add the action bar from the view so to avoid // having an empty action bar participating in the view's // layout calculation (and maybe causing an empty bar to appear)
//MappingPackage ePackage = ((ComplexTypeConverter)msg.getNotifier()).ePackageMapping();
// We test their relationship either via them both being classes... //
// When the pane or any child gains focus, notify the workbench.
// If the are the same then it is bounded properly... //
// namespace context
// This is for the topDown feature. //
// The arguments, type parameters, lower bounds and upper bounds must be equal type arguments. //
// Set up the substitutions of any type parameters this class has with respect to the type arguments for them. //
// Ignore leading whitespace
// Determine if there is a bounding generic super type. //
// If there is a upper bound, the bound must bound it. //
// Create a new array. //
// Test if there are type parameters that might require substitution. //
// new declaration will not have fragments until performSplit() is called
// If there is a type parameter, one of its bounds must be bounded by the bound. //
// add leading comments
// If the generic type is a wildcard, it can't be bounded by another wildcard. //
// Failing all those cases, there must be an lower bound that bounds it. //
// If there is an lower bound, the type argument must bound it. //
// starting traverse file and build unit tree and table info
// If one is null (but the other is not) then they can't be equal. //
// If they both aren't null... //
// create OK and Details buttons
// If they are the same classifier, they are of course equal. //
// If one is null (but the other is not) then they are not equal. //
// If they are the same instance they are equal. //
// Go through the commands of the list. //
// Index should be -1.
// Define a class loader that looks up classes using the URLs or the parent class loader, // and failing those, tries to look up the class in each bundle in the running JVM. //
//EcoreAdapterFactory
// add the key/value pairs to the output string
"/*    public List subList(int from, int to)    {      return featureMap.subList(getEStructuralFeature(), from, to);    }*/"
// For the extended meta data to be created. //
// Reverse the test. //
// Iterate over the mappings in the tree. //
// --entryCursor;
// Don't cache this one as it will cause leaks because to dynamic demand created document roots and demand created EClasses. //
"/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.MappingPackage * @generated */"
// reset text edits; since this node is processed successfully, there is no need to revert these changes
// EEnumImpl overrides this to do nothing. // The only case that is special is when a more specific instance of AbstractEnumerator is generated/reused. //
// This forces the feature ids to be assigned. //
// Interprets escaped characters within the string according to Java // literal rules, with two exceptions: an unescaped " does not terminate // the string, and a \ not followed by b, t, n, f, r, ", ', u, or an octal // digit is taken literally, not as an error
// We can use == for EObjects and EnumLiterals. //
// A standalone base is a valid URI according to spec
// This is needed for internal bootstrapping of EGenericType's default value for eRawType. // It's simply not available before Ecore is constructed so we make it available and then patch what's missing. //
// replace some arguments by another field names (constants)
//  Public
// Continue with the unresolved URI.
// all implementations of Java 1.5 should support AES
// for enum constants, insert line break after the comma if there is anything after the comma
//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// insert new line at the end of previous constant
// if needed, comment out a comma of the previous enum constant
// make sure that 1) we see only digits and dot separators, 2) that // any dot separator is preceded and followed by a digit and // 3) that we find 3 dots // // RFC 2732 amended RFC 2396 by replacing the definition  // of IPv4address with the one defined by RFC 2373. - mrglavas // // IPv4address = 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT // // One to three digits must be in each segment.
// create map of public static final field initializers to fields
// This should be the same as the logic in ResourceImpl.getEObject(String). //
// query - starts with ? and up to fragment or end
// if there is a comment with start position > rangeStartPos
// Prepare for CreateChild item addition or removal. // //$NON-NLS-1$ //$NON-NLS-1$
// Iterate over the owner list twice, first matching objects from the collection by identity (==), then matching // objects by value equality (.equals()). The positions of matched objects in the owner list are recorded, and // the objects are stored in the same order. The lists are then merged to form a final, in-order list of objects // and corresponding indices in ownerList. This is very important for undo to interpret the indices correctly. // Also, this yields exactly one object removed for each object in the collection, with preference given to // identity over value equality. //
// The next line leaves objectsBeforeApply with all the objects that were // added during the last recording.
// Closing the detail area
// Define gradient (blue to widget background color)
//lastCursor = -1; //prepared = 0;
// callers that plan to use this name without appending a suffix should call f.safeName(f.getName()) to make sure its not a keyword // this is a safe guaranteed uncapitalized form of the name // the safe name and cast to EObject, if necessary.
// Create the editing domain with a special command stack. //
// Validate now since the call we make after will skip validating.
// Count up the objects that will be removed. // The objects are exchanged to produce this list's order //
// for field declarations use variable declaration fragments instead
// convert only public static final fields
// The container class must be null for the open content features of the document root // to ensure that they are looked up in the actual eClass()  // rather than assumed to be a feature with a feature ID relative to the actual class. // Otherwise, it's good to have this optimization. //
// If the plugin.properties isn't within the root of the archive, // create a new URI for the folder location of the archive, // so we can look in the folder that contains it. //
// We don't create an iterator stack until the root mapping itself has been returned by next once. // After that the stack should be non-empty and the top iterator should yield true for hasNext.
// For demand created created packages we allow the list of classifiers to grow  // so this should handle those additional instances. //
// Ensure that this is a touch notification so to resource aren't marked as dirty. //
// menuManager.insertBefore("additions", new Separator("schema-actions")); // menuManager.insertAfter("schema-actions", generateSchemaAction);
"/*  public List subList(EStructuralFeature feature, int from, int to)  {    return null;  }*/"
// Undo the preparation for next and continue.
// If we can't create one, too bad.
//  /** //   * Simpler implementation that sets the range of any node to be the node and all preceding comments //   */ //  public SourceRange computeSourceRange(ASTNode node) //  { //    SourceRange range = new SourceRange(node.getStartPosition(), node.getLength()); // //    range = extendRangeBackward(findLeadingComment(node, getPreviousNode(node), false), range); // //    return range; //  }
// Handle the last byte at the end. //
// create JNode and set properties
// If the first object is null, the second object must be null. //
//   // Suppress default constructor for noninstantiability. //   private EcoreUtil() //   { //   }
"/*  List theList = new java.util.ArrayList();  protected List delegateList()  {    return theList;  }*/"
// Method created to increase the performance of regular expressions // by reducing the length of the string that is matched. //
// Failure to resolve is ignored.
// Depending on the action and the current state, we'll toggle the state. // i.e., for unset, we need to turn it off if it's on,  // and for set we need to turn it on if it's off. //
// Skip the dummy null object and test again. //
// If we are on the special resource set iterator, and there isn't really a next object at this point... //
// Finds the next occurrence of one of the characters in the set represented // by the given bitmask in the given string, beginning at index i. The index // of the first found character, or s.length() if there is none, is // returned.  Before searching, i is limited to the range [0, s.length()]. //
// Then eObject2 must be that previous match. //
// Create move commands for all the objects in the collection. //
// We know the first object isn't null, so if the second one is, it can't be equal. //
// Some character classes, as defined in RFC 2396's BNF for URI. // These are 128-bit bitmasks, stored as two longs, where the Nth bit is set // iff the ASCII character with value N is included in the set.  These are // created with the highBitmask() and lowBitmask() methods defined below, // and a character is tested against them using matches(). //
// If eObject1 and eObject2 are the same instance... //
// Look for the first non-XMI element. //
// Check all the values. //
// Assume from now on that they match. //
// Match them and return true. //
// If they don't have the same size, the feature maps aren't equal. //
// Value used to suppress visibility. //
// The values must be Java equal. //
// If this is a feature map... //
// If the first value is null, the second value must be null. //
// Neither eObject1 nor eObject2 have been compared yet.
// Since the first value isn't null, if the second one is, they aren't equal. //
// If it is in a resource, form the URI relative to that resource. //
// There is no reason they aren't equals. //
// Compare entries in order. //
// If the values aren't Java equal, the feature maps aren't equal. //
// EqualityHelper
// clockseq_hi
// The node identifier is already in network byte order,  // so there is no need to do any byte order reversing. //
// Set the most significant bit of the first octet to 1 so as to distinguish it from IEEE node addresses //
// If it's a proxy, use that. //
// We just woke up.
// Wait so that the clock can catch up and the time adjustment won't overflow.
// time_hi //
// time_mid //
// Ignore if we can't freeze.
// This case can only happen if we are reset to a mark and we've got lots of XMLNS attributes to write. //
// throws SAXException
// This is the cheapest and most common case. //
//fall through...
// If there is a temporary file... //
// System.err.println("add = ["+newString+"]");
// Deresolve all the URI against the current base URI. //
"/*   * Javadoc copied from interface   */"
// external schema locations should only be processed once, i.e. in the subsequent parse // there is no need to process those again.
// EMOF.isReadOnly = !Ecore.changeable
// SAXXMIHandler
// Ecore.changeable = !EMOF.isReadOnly
// Ignore whatever was set before. //
// handler.ignorableWhitespace(ch, start, length);
// Try to resolve the proxy locally. //
// If we are pessimistic, then we need to undo all the commands that we have executed so far. //
// And find the one that holds this proxy. //
// // Implement EntityResolver methods //
// // Implement DTDHandler methods //
// // Overwrite DefaultHandler methods //
// If the resolved object doesn't contain a reference to the proxy holder as it should. //
// We won't need to process this again later. //
// Compute the holder of the proxy //
// Move the resolved object to the right place, remove the proxy, and we're done. //
// EATM temporary for debug purposes only. //
// The proxy needs to be replaced in a way that updates both ends of the reference. //
// // Implement LexicalHandler methods //
// At least set the references that we were able to resolve, if any. //
// We won't need to process this again later.
// Set up a deferred extent so the document root we create definitely will not be added to the resource. //
// EATM Demand create metadata.
// check for simple feature
// Process the new root object if any. //
// Remove the document root's information from the top of the stacks. //
// If externalSchemaLocations are specified, process these ones as well
// Place the time into the byte array in network byte order. //
// time_low //
// If the command is executable, record and execute it. //
// The new root object is the actual new object since all sign of the document root will now have disappeared. //
// Handle namespaces
// This check is redundant -- see handleFeature method (EL)
// Ignore a whitespace only text entry at the beginning. //
// Try to get a general-content feature. // Use a pattern that's not possible any other way. //
// This handles the case of a substitution group. //
// This is for the case for a local unqualified element that has been bound. //
// We use null here instead of "" because an attribute without a prefix is considered to have the null target namespace...
// This only works for old globally registered things.
// Ignore it if we can't find it since we'll fail anyway.
// extend the array, if necessary
// Ignore since we expect this to fail because of early termination // and if there is some other kind of failure, then we'll simply not be able to match the content type.
// Entry entry = new Entry(eObject, CONTAINING_FEATURE); // return (EStructuralFeature)map.get(entry);
// Index of writing point // Index of processing point
// class AttributesProxy
// use the pool to retrieve the parser
// traverse element node
// record duplicate declaration for a given prefix (#3)
// release parser back to the pool
// record namespaces in scope //
// Don't read encoding - rely on XML parser to provide one via Locator2
// Create an simple any type wrapper for the attribute value and use that with the EReference. //
// true if seen xmlns="" declaration
// handler.resolveEntity(publicId, systemId);
// XMLLoad
// SAXXMLHandler
// If we are substituting an EAttribute for an EReference... //
// Once we see a lookup of an element in the null namespace, we should behave as if there has been an explicit xmlns="" //
// There really must be a package. //
// for any content prefix to URI mapping could be in namespace context
// Sort and eliminate duplicates caused by having both a regular package and a demanded package for the same nsURI. //
// recording a first declaration for a given prefix
// Make sure that the list will appear to be set to be empty. //
// record default ns declaration as duplicate if seen QName (#1) or seen xmlns="" (#2)
// since xmlns="" is default declaration, remove ""->empty_URI mapping
// push context
// resize array, if needed
// find uri in current context
// bind prefix to uri in current context
// prefix not found
// set parser features and properties
// uri not found
// caching turned on by the user
// DOM serialization
// Look for a matching element in the specified packages if there are any. //
// Look for a substitution group feature in the classifier's containing package. //
// set serialization options
// XMIHandler
// Look for a substitution group feature in the additional packages. //
// Process the super types if that's been specified. //
// Entities aren't supported for DOM.
// If there is no field, then we can't do this.
// value[outputPos];
// Process XML attributes
// Since the cycle is detected by checking if we hit "this" again, after many iterations we'll call this method recursively  // in case we started with something that wasn't part of a cycle but later traversed up to a cycle. //
// this is a root element
// for performance reasons saveNil and saveElement are not used
// Process XML elements
// Every codepoint is supported!
// Normal (BMP) unicode code point. See if we know for a fact that the encoding supports it:
// We will use an xmi:Extension element for these
// ownedProperty???
// First try to see if this package's implementation class has an eInstance. //
// Go back and add all the XMLNS stuff. //
// The helper part assumes that the summary is likely based on the helper and will change when the helper is set. //
// create dummy documentElement
// Avoid a function call... //
// write doctype
"/*     *  Convert:     *  \n to line separator     */"
// Assume the class isn't available.
//System.err.println("Do sorting: "+this.ranges.length);
// boolean not
// register default options
// no property // no property
// EAnnotations denoting specific EMOF elements are serialized as their EMOF elements.  // Other EAnnotations are serialized as xmi:Extensions. //
// xmi:id // xmi:XMI // xmi:type // xmi:version // xmlns:xmi
// Token.CLOSURE
//XMLNamespaceFactory
// convert the target node to a compatible node //
//XMLTypePackage
// SimpleAnyType
// ret.next is null.
// Don't create anything.
//XMLTypeFactoryImpl
// do not validate on load. Check validity using Diagnostician.
//XMLTypePackageImpl
// Other escaped character.
//System.err.println("Starts at "+index);
//DocumentRootImpl
// Skips characters between '#' and a line end.
// Skips a white space.
// switch anchor type
//System.err.println("DEBUG: matchEnd="+matchEnd);
//System.err.println("Non-match in fixed-string search.");
// Internal use only. // The @ always matches line beginnings.
"/*           * Optimization against the first character.           */"
//System.err.println("DEBUG: with firstchar-matching: "+this.firstChar);
//case 0x0b:  ret = "\\v";  break;
// for CLOSURE, QUESTION
// Op.CHAR
"/**   * Performs escape encoding on the given string so that it can be represented using 1-byte characters.   * Any characters higher than 0xFF are replaced with an escape of the form \\uXXXX, where XXXX is the   * four-digit hex representation of the Unicode code point.   */"
//+this.fixedString
// This pattern has a fixed string of which length is more than one.
// ModifierOp
"/*    public ParseException(String mes) {        this(mes, -1);    }    */"
//System.err.println("Creates UnionOp");
// Legacy word characters
// RANGE, NRANGE
// Not overlapped // src: o-----o // sub:         o-----o // res: o-----o // Reuse sub
/*0B80..0BFF;*/
// This is the page for the table viewer. //
//System.err.println("Token#substractRanges(): Entry: "+this.ranges.length+", "+tok.ranges.length);
// Overlapped // src1:    o--------o // src2:  o----o // src2:      o----o // src2:          o----o // src2:  o------------o
// src:    o--------o // sub:  o----o // res:       o-----o // Reuse src(=res)
//System.err.println("Token#addRange(): "+start+" "+end);
// src:    o--------o // sub:          o----o // res:    o-----o // Reuse sub
// Not overlapped // src1:          o-----o // src2: o----o
// for UNIoN
// src1:    o--------o // src2:  o----o // res:     o--o // Reuse the rest of src1
// src1:    o--------o // src2:  o------------o // res:     o--------o // Reuse src2
// Not overlapped // src:          o-----o // sub: o----o
// s&0x1f : 0-31
// for UNION
// Count all the bits in the bit patterns up to this one in the sequence of bit patterns. //
// In a character class, this.chardata has one character, that is to say, // a pair of surrogates is composed and stored to this.chardata.
// Load the resource through the editing domain. // This will create a context and associate it with the resource set. //
// handle category escape
//this.setLocale(locale);
// Skips '.'
// Through down
// The one object in the resource's extent should be the root object. //
// conditional // this.offsets points the next of '('.
// Options
//tok = Token.createConcat(tok, this.parseFactor());
// Parses yes/no-patterns.
// this.offset points the next of '('
// Parses a condition.
// '(?:' // '(?(' // (?modifiers ... )
// such as (?-i)
// {min,max}
// separate fields with an empty line
// this.offset -> next of '{'
// Save the resource to the file system. //
// Set the value at the previously allocated index and return the previous value there. //
/*0B00..0B7F;*/
// If there is a cached result, return it. // We expect that if the package is set to be a proxy,  // the code in EPackageImpl.eSetProxyURI override will have cleared this value. //
// ***** Really?
// If we turn the package into a proxy, ensure that the child classifiers clear their cached container. //
// if not shorthands... // Here is no '-'.
// *** It is not a bug.
// Update the workbench's knowledge of the file's contents. //
/*20D0..20FF;*/
// **** We can not optimize.
// infinity
// When this.child.getMaxLength() < 0, // this returns minus value
//blockNames in UNICODE 3.1 that supported by XML Schema REC
// This is the page for the table tree viewer. //
// Skip if there's an equality filter and the values aren't equal. //
// The methods were matched by a process that doesn't consider the // parameters
/*02B0..02FF;*/
// Look for the annotation with the matching source. //
// We can't find the class, so we don't want this class loader, // but instead want the last result that was able to load the class. //
// Don't push method annotations into redirected methods. //
// Create a resource for this file. //
// This just notifies those things that are affected by the section. //
/*0C80..0CFF;*/
/*0C00..0C7F;*/
// Ensures that this editor will only display the page's tab // area if there are more than one page //
/*0E80..0EFF;*/
/*0D80..0DFF;*/
/*0E00..0E7F;*/
/*0F00..0FFF;*/
/*13A0..13FF;*/
/*20A0..20CF;*/
/*1F00..1FFF;*/
/*1E00..1EFF;*/
/*2E80..2EFF;*/
// Search the local scope for a resolution of the type parameter name. //
// Create the source and target JCompilationUnit. //
// Set the instance type name instead, since that will also set the instance class name  // but this way will make undo restore the current instance type name correctly //
/*25A0..25FF;*/
// You can only add type arguments if there are type parameters not yet used up. //
// Only if you are contained by a generic type can you have bounds, // and only if there is no classifier or type parameter // and in that case the lower bound is returned only if that's the one that's set. //
// apply changes using ASTRewrite //
// Don't use the normal reference copying for eOpposite. //
// Write a signature that will be obviously corrupt // if the binary contents end up being UTF-8 encoded // or altered by line feed or carriage return changes. //
// If the list is empty, we need to add all the objects, // otherwise, the reference is bidirectional and the list is at least partially populated. //
// If an input stream can't be created, ensure that the resource is still considered loaded after the failure, // and do all the same processing we'd do if we actually were able to create a valid input stream. //
// apply additional edits like replacing or commenting out nodes //
/*2F00..2FDF;*/
// Build a list of the keys //
// Do the extent processing that should have been done for the root but was actualljy done for the document root. //
/*31A0..31BF;*/
// replace existing InsertEdit at this position // (case when previous node ends at the same position that current node starts at)
/*30A0..30FF;*/
/*FEFF..FEFF;*/
/*AC00..D7A3;*/
// Reserve a place to insert xmlns declarations after we know what they all are. //
/*FE50..FE6F;*/
/*A490..A4CF;*/
/*4E00..9FFF;*/
/*FE30..FE4F;*/
// create and try to add dummy edit to find the ReplaceEdit // this should be faster than lookup since underneath of addChild() binary search is used
/*F900..FAFF;*/
/*E000..F8FF;*/
/*FE20..FE2F;*/
/*FB00..FB4F;*/
/*2F800..2FA1F;*/
/*1D100..1D1FF;*/
/*1D000..1D0FF;*/
/*E0000..E007F;*/
// for all characters
// If we're creating a child under an object in a feature map, the selection will be the feature map entry. // We want to replace it with the model object. //
//missing 2 private use add manually
// Exit this loop
// [{ASSIGNED}]-[{M},{C}]
// Add it to the list and remove it from the other list. //
// Doing this just makes focus go to the default control, not the control that last has focus. // // super.setFocus();
// Commands should operate on the values, not their wrappers.  If the command's values needed to be unwrapped, // we'll back get a new CommandParameter. //
// synchronized // if null
// Subraction
// hangul_medial and hangul_final // extras
// This is CONCAT, and new child is CONCAT.
// base_char?
// Replace previous token by STRING
//System.err.println("Merge '"+previous+"' and '"+tok+"'.");
// CRRIAGE RETURN U+000D
// \ + c // backsolidus
// LINE FEED U+000A
// if not shorthands...
// if - is at the last position of the group
// Here is no '-'.
// c '-' ']' -> '-' is a single-range.
// return actucal char
// HORIZONTAL TABULATION U+0009
// Recursion
// Found '-' // Is this '-' is a from-to token?? // Skips '-'
// Add the binding to the provided hash table: //
// Create the copy //
// If we didn't find authority we need to back up. Attempt to // match against abs_path next.
// Check if we found a resolution for it. //
// Otherwise, recursively call ourselves to substitute it in context if necessary. //
// Unassigned
// Add back in the array indices if there are any. //
//One PAD  e.g. 3cQ[Pad]
// Just import the name or use it directly. //
//build table of Pi values
/*FE70..FEFE;*/
// Check if the host is a valid IPv6reference.
/*0A80..0AFF;*/
// Load the model and if it's not one already considered, e.g., a local version in the workspace, process its GenPackages. //
//Check if they are PAD characters //Two PAD e.g. 3c[Pad][Pad] //last 4 bits should be zero
// IViewPart view = getViewPart(); // titleLabel.setText(view.getTitle()); // titleLabel.setImage(view.getTitleImage());
// If we don't already have it, try to get the source early. We can't give // feedback if it's not available yet (this is platform-dependent). //
// Adding new aliases as proposed in // http://lists.w3.org/Archives/Public/ietf-charset/2002JulSep/0058.html
// form integral number of 6-bit groups
// This implementation was changed to not introduce multi line content.
//should be divisible by four
// remove white spaces
// Add support for Cp1252 and its friends
// This came from trial and error, yielding decent results on all // platforms.  It should be consistent with activate(). //
// count characters that's not whitespace
//No PAD e.g 3cQl
// proposed addition (see above for details):
"/* * format validation * * This class encodes/decodes hexadecimal data * @author Jeffrey Rodriguez */"
// give up if we couldn't create the command; otherwise, use a // CommandActionDelegate to set the action's text, tool-tip, icon, // etc. or just use the default icon
//titleLabel.setBackground(null, null); // titleLabel.setForeground(null);
// Add ASCII Letters
// presence of the host (whether valid or empty) means // double-slashes which means generic uri
// Add ASCII Digits and ASCII Hex Numbers
//RFC 2732 added '[' and ']' as reserved characters
// REVISIT: //   j:CNS11643 -> EUC-TW? //   ISO-2022-CN? ISO-2022-CN-EXT?
// class EncodingMap
// // Public static methods //
// set rewriter on the new node
// Add Path Characters
// Add Scheme Characters
// Add Reserved Characters
// Add Mark Characters
// Just use null.
// Authority will be everything up to path, query or fragment
// find insertion point from returned result (-(insertion point) - 1) // commentIndex is the index of the first element with end position > rangeEndPos
// 6a - get all but the last segment of the base URI path
// check for absolute path - RFC 2396 5.2 #5
// assume {min,}
// userinfo is everything up to @
// 6c - remove all "./" where "." is a complete path segment
// through down
// 6b - append the relative URI path
// port
// 6d - remove "." if path ends with "." as a complete path segment
// host is everything up to last ':', or up to  // and including ']' if followed by ':'.
// Userinfo can contain alphanumerics, mark characters, escaped // and ';',':','&','=','+','$',','
// Check if the host is well formed.
// Check that userinfo is well formed if it exists.
// Points '('.
// Scan path. // abs_path = "/"  path_segments // rel_path = rel_segment [ abs_path ]
// Scan opaque part. // opaque_part = uric_no_slash *uric
// fragment - starts with #
// Check that that there are no more than three digits // in this segment.
// hostname      = *( domainlabel "." ) toplabel [ "." ] // domainlabel   = alphanum | alphanum *( alphanum | "-" ) alphanum // toplabel      = alpha | alpha *( alphanum | "-" ) alphanum
// // Constants //
// RFC 1034: Labels must be 63 characters or less.
// domain labels can contain alphanumerics and '-" // but must start and end with an alphanumeric
// Registry based authority.
// Check if string is a potential match for IPv6reference.
// Fill 3 of value (byte) 49
// Check that this segment is not greater than 255.
// Address must contain 128-bits of information.
// Fill 15 of value (byte) -19
// Scan hex sequence before possible '::' or IPv4 address.
// HGD::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
// Trailing zeros will fill out the rest of the address.
// 3. Scan hex sequence after '::'.
// This could be '::'.
// which ASCII characters need to be escaped
// There can be at most 4 hex digits per group.
// If encoding happened, create a new string; // otherwise, return the orginal one.
// Paint over the selected padding spaces with the // background colour.  On GTK, the whole item, not just // the text, is selected, so we don't do this. //
// for each character in the anyURI
// Fill 6 of value (byte) 49 // Fill 2 of value (byte) -71
// Fill 71 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 5 of value (byte) -19
// Fill 53 of value (byte) -19
// Fill 8 of value (byte) 33 // Fill 23 of value (byte) -19
// Fill 26 of value (byte) -3 // Fill 60 of value (byte) 33
//hgd::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getStructuralFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
//MappingPackage ePackage = ((FunctionNamePair)msg.getNotifier()).ePackageMapping();
// Fill 20 of value (byte) -19
// Fill 10 of value (byte) -71
// Fill 44 of value (byte) -19
// for Ecore or something that explicitly extends it, we need to exclude // EObject, which is already handled by the default case
// Fill 10 of value (byte) -19 // Fill 8 of value (byte) -87 // Fill 13 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 6 of value (byte) 33
// Fill 7 of value (byte) -19 // Fill 3 of value (byte) 33
// We assume that the rootExtendsClass already implements it. //
// Fill 12 of value (byte) -19
// There needs to be another URL protocol right after the archive protocol, and not a "/". //
// Fill 66 of value (byte) -19
// Fill 31 of value (byte) -19
// Fill 36 of value (byte) -19
// there is anything else but comma after constant - insert line break
// Fill 23 of value (byte) -87
// When an object is controlled, the only change will be in the new resource's contents, so it must // refresh the whole viewer to hit the object's label. //
// Fill 15 of value (byte) -87 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) -87
// since enum constants are separated by commas, they should always have the default range // we can not extend their range or reduce it
// Fill 4 of value (byte) -19
// Fill 53 of value (byte) -19 // Fill 2 of value (byte) 33
// HGD::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getStructuralFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
//HGD::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getStructuralFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
// Stop if the next item will be out the event bounds. // The event bounds values are also misaligned on GTK. //
// check if given node should use the default range (i.e. node removed), // or extended range (i.e. surrounding nodes removed)
// Fill 3 of value (byte) 33 // Fill 4 of value (byte) -19 // Fill 2 of value (byte) 33
//hgd::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
// Fill 7 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 3 of value (byte) -87 // Fill 9 of value (byte) 33
// Fill 8 of value (byte) -87
// Fill 2 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 22 of value (byte) -19
// Fill 4 of value (byte) 33 // Fill 2 of value (byte) -19
// Fill 5 of value (byte) -19 // Fill 2 of value (byte) 33
// Fill 22 of value (byte) -19
// Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33
// Fill 7 of value (byte) 33 // Fill 12 of value (byte) -87 // Fill 3 of value (byte) -19 // Fill 12 of value (byte) 33 // Fill 3 of value (byte) -87
// Fill 6 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 3 of value (byte) -19
// Fill 3 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 5 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 3 of value (byte) -87
// Fill 4 of value (byte) -87 // Fill 9 of value (byte) 33
// Fill 8 of value (byte) -19
// Go directly to the right entry in the zip file,  // get the stream,  // and wrap it so that closing it closes the zip file. //
// Fill 2 of value (byte) -19 // Fill 7 of value (byte) -87 // Fill 5 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 9 of value (byte) -87
// Build list of wrapped children from the appropriate adapters. //
// Parse as an attribute=value:
// Fill 5 of value (byte) 33 // Fill 3 of value (byte) -19
//fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
// If this entry isn't the end marker  // and isn't the matching one that we are replacing... //
// Fill 10 of value (byte) -87 // Fill 39 of value (byte) 33 // Fill 2 of value (byte) -19
// Simple cases: no mix-ins for no inheritance or for a single base class. //
// Fill 2 of value (byte) 33
// Mix-ins are everything after the base class. //
// This is for the in2out feature. //
// Strips an escaped white space.
// Try to transfer it by reading the contents of the temporary file  // and writing them to the output stream of the delegate. //
// If this is class has mixed content, the mixed feature should always be included, even if inherited, and come first. //
// Fill 6 of value (byte) 33 // Fill 4 of value (byte) -19
// Add all other create child features that this item provider is responsible for. //
// Fill 2 of value (byte) 33 // Fill 5 of value (byte) -19
// Either execute or redo the command, as appropriate. //
// Fill 8 of value (byte) 33
// isSpace(int):boolean
// Fill 4 of value (byte) 33
// Fill 40 of value (byte) 33
// Fill 7 of value (byte) -19 // Fill 40 of value (byte) 33
// Fill 9 of value (byte) 33
// Skip over the command that threw the exception. //
// This is for the out2in feature. //
// isMarkup(int):boolean
// Only return the feedback for an executable command. //
// isContent(int):boolean
// This is kind of tricky. // If the saveIndex was in the redo part of the command list which has now been wiped out, // then we can never reach a point where a save is not necessary, not even if we undo all the way back to the beginning. //
// Fill 7 of value (byte) -19 // Fill 211 of value (byte) 33 // Fill 13 of value (byte) -87 // Fill 4 of value (byte) 33
// isInvalid(int):boolean
// Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33
// isValid(int):boolean
// Return whether there is a list, the value is in the list, and index is in range... //
// isName(int):boolean
// replace arguments that match the name of the fields with the initializer value of the field //
// isNCName(int):boolean
// encodings
"/*      * [5] Name ::= (Letter | '_' | ':') (NameChar)*      */"
// isPubid(int):boolean
"/*      * [7] Nmtoken ::= (NameChar)+      */"
"/*      * from the namespace rec      * [4] NCName ::= (Letter | '_') (NCNameChar)*      */"
// Set the range so that we re-check when we get into the other half. //
//order constants
// class XMLChar
// interface TypeValidator
// If this looks like a feature getter, a kind property will allow it to be recognized properly. //
// indicate that initializer has been changed // (required to not overwrite initializer if variables are split later)
// Remove from by position in reverse order. //
// keep comments between nodes when removing or moving nodes
// Type parameter casts can't be checked. //
// Break the cycle. //
// This ensures that we are dealing with actual MOF objects. //
// if the character is in the range 0x30 ~ 0x39, return its int value (0~9), // otherwise, return -1
//Ecore2XMLSwitch
// Check whether there is an opposite that needs attention. //
// 6e - remove all "<segment>/../" where "<segment>" is a complete // path segment not equal to ".."
// The byte is automatically widened into an int, with sign extension, // for shifting.  This can introduce 1's to the left of the byte, which // must be cleared by masking before looking up the hex digit. //
// buttonComposite has to be the first child of composite because subclasses are expecting this.
// This is to handle a genmodel produced by rose2genmodel. //
// If the object is an input or output object, then use it. //
// Process the children recursively. //
// Fill 5 of value (byte) -19 // Fill 41 of value (byte) 33
// Common to all URI types.
// Remove variables since the plugin.xml should provide the complete path information. //
// Look for a single-char work delimiter: //
//SimpleAnyTypeImpl
// oldWidth = table.getClientArea().width;
// The lower-cased schemes that will be used to identify archive URIs.
// Special segment values interpreted at resolve and resolve time.
// Consult the generator option for backwards compatibility. //
// Optimize the performance of applying the import regular  // expressions locating the last import line //
// Don't do replacement if we just did one, or if previous line // ended with a semicolon. //
// Don't do replacement if previous line ended with a comment. //
// Returns the upper half bitmask for all the ASCII characters in the given // string.
// We can't undo it, so we'd better give up. //
// If the path isn't within the root of the archive,  // create a new URI for the folder location of the archive,  // so we can look in the folder that contains it. //
// Platform.resolve() doesn't work if the project is encoded. //
// There must be at least one archive path. //
// There should be at least one archive separator per scheme. //
// Parse to extract the archives that will be delegated to the nested URL based on the number of schemes at the start. //
// Skip a scheme for the archive accessor to be handled directly here. //
// Create the delegate URL. //
// The cutoff point to the next archive. //
//missing Specials add manually // 84
// Construct the input stream in a special efficient way for case of a file scheme. //
// Just get the stream from the URL. //
// The name to be used for the entry. //
// Skip over this archive path to the next one, since we are handling this one special. //
// Loop over the archive paths. //
// The entry name to be matched. //
// Wrap the input stream as a zip stream to scan it's contents for a match. //
// Skip to the next archive path and continue the loop. //
// Create the delegate URL //
// Record the input and output streams for closing in case of failure so that handles are not left open. //
// The most deeply nested output stream that will be returned wrapped as the result. //
// A buffer for transferring archive contents. //
// The name that will be used as the archive entry. //
// Wrap the current result as a zip stream, and record it for loop-based recursion. //
// Loop over the entries in the zip stream. //
// Transfer the entry and its contents. //
// Find the next archive path and continue "recursively" if there is one. //
// Get the Java literal expression for the value. //
// Create no entry since we are deleting and return immediately. //
// Ensure that it won't be closed in the finally block. //
// result = new XMLResource.XMLInfoImpl(); // result.setXMLRepresentation(XMLResource.XMLInfo.UNSPECIFIED);
// Wrap the deepest result so that on close, the results are finally transferred. //
// Make sure we close only once. //
// Close for real so that the temporary file is ready to be read. //
// Make sure they are closed no matter what bad thing happens. //
// Close in case of failure to complete. //
// Close if we created this. //
// If there are some... //
// The termination guard is in the body. //
// Otherwise, produce an expression that uses the appropriate factory to create a value from the literal. //
// src:    o--------o // sub:      o----o // res:    o-o    o-o // Reuse src(=right res)
// If the location indicates after, add one more. //
// Now is the best time to record isUndoable because later we would have to do all the executes again! // This makes canUndo very simple! //
// If we can't execute this one, we just can't do it at all. //
// The most recently processed command will never have been executed. //
// We want to unroll all the effects of the previous commands. //
// Iterate back over the executed commands to undo them. //
// Clear the list past the top. //
// If this owned object is one from the collection... //
// oldValue = owner.eGet(feature);
// Record the successfully executed command. //
// extend to include the comment at the same line as the position  // if there is nothing between the position and the comment
// note that string place holder adjusts indentation // to correct this trackAndReplace method is used below
// This forces isSaveNeded to always be true. //
// Only if we are at the remembered index do we NOT need to save. // //return top != saveIndex;
// Clear the list. //
//iri = iri || containsNonASCII(segments[i]);
//  Remember where we are now. //
// This is the default return value. //
// <p>A valid query may be null or contain any allowed URI characters.
// Compute the GeneratorData for the given object and its children, then for the parents of the given object. //
// If the base package isn't set but there is a parent package, us it's information instead. //
//XMLTypeValidator
//MappingPackage ePackage = ((ComplexTypeConverter)object).ePackageMapping();
//XMLTypeResourceImpl
// Ensure that the map for Ecore is not repeatedly populated and that Property maps to EReference rather than EAttribute. //
// Iterate forward over the undone commands to redo them. //
// This ensures that these useless state variables at least reflect the right value. //
// Copy to a list and allocate positions. //
// Give all generator adapters the chance to do tear down. //
// Ignore derived features. //
// end setting whole list
// If we aren't simply removing all the old values... //
// Determine the values that will remain and move them into the right order, if necessary. //
// If there are values to remove, append a command for them. //
// Look through all the references... //
// Is the feature an attribute of the owner... //
// Don't set the type if it's already set. //
// ((value != null)
// Add the collection //
// Get the owner's meta object. //
// (value == null) && (oldValue != null) // Remove owner from the old value and unset if necessary. //
// The classifier of an references's generic type must be a class. //
// (value == null) && (oldValue == null) // A simple set/unset will suffice. //
// specify the exact parent of annotations
// If there is an owner. //
// ((value != null) && (oldValue != null)) // Need a compound command to remove owner from old value and add it to new value. //
// (value != null) && (oldValue == null) // Add owner to new value. //
// For consistency, we always set 1-1 container relations from the container end. //
// For a 1-to-1, we can directly create a SetCommand. //
// Make sure the container is not being put into a contained object. //
// We can try to do a drop on instead. //
// current document reference: use base path and query
// If must be of this type then. //
// String getCapPackageID(); // Includes features in other packages that delegate to those in this one.
// If the other end is single, then we should unset the owner from the old value's opposite feature so that undo will put it back. //
// If any objects are matched. //
// returns the package in which this feature is defined // returns the name of the feature get method in the package interface (e.g. Company_Name) // returns the name of the feature get method in the package interface (e.g. Xyz.eINSTANCE.getCompany_Name)
// Either set or unset the feature. //
// It must be an unsettable feature to be null and considered set. //
// Set the bounds so that we re-check when we are closer to the middle. //
// If it's a feature map, we'll need to validate the entry feature and enforce its multiplicity restraints. //
// Either set or unset the old value. //
// We'd like the owner selected after this undo completes. //
// Check that the object isn't already in a unique list. //
// Check type of object. //
// Check each object...  //
// Remove the collection from the list by index. //
// If we could do a drop insert operation... //
// if one is null, they'll all be null
// Possible scope for the ChangeRecorder
// If the location is near the boundary, we'll start by trying to do a drop insert. //
// boolean isGenerateEditPlugin(); // boolean isGenerateEditorPlugin();
// If there isn't something obviously wrong with the arguments... //
// We'll default to this. //
// Create commands to create copies of the children. //
// Prepare the right type of operation. //
// The feedback is set based on which half we are in. // If the command isn't executable, these values won't be used. //
// We'll always be wrong for these arguments, so don't bother re-checking. //
// We are near the middle, so we'll start by trying to do a drop on. //
// We can reset and try a drop insert instead. //
// If we can do a drop on operation. //
// Try to create a specific command based on the current desired operation. //
// When we match the owner, we're done. //
// If we can't determine the parent. //
// If the dragged objects share a parent... //
// This is the name of the model. //
// And add the copy. //
// Copy the collection //
// We don't want to copy insert an object before or after itself... //
// Just remove the objects and add them. //
// if optimize // if collection
// This can execute if there is an owner list and a collection and the owner list contains all the objects of the collection. //
// If we can't set the collection, try setting use the single value of the collection. //
// Add the value back in the right place. //
// Determine if the operation is executable. //
// Clean it up. //
// Set the range so that we re-check when we get aren't in the middle. //
// If the operation has changed significantly... //
// Reset as in the constructor. //
// Thread.dumpStack();
// Remove the collection of replacements. //
// Only return the operation for an executable command. //
// Just return the cached result. //
// Insert the collection at the right place. //
// Make sure each object conforms to the type of the feature. //
// An extent allows anything to be added. //
// Record the position of the value in the owner list. //
// Set the bounds so that we re-check when we get near the other end. //
// We'd like the replaced selected after this undo replace completes. //
// Set the arguments again. //
// Create a strict compound command to do a copy and then add the result //
// We need to check canExecute() here in case prepare() went down the "optimize" path. //
// This will actually execute the copy command in order to check if the add can execute. //
// Create a command to copy the clipboard. //
// This will determine canExecute as efficiently as possible. //
// Create a proxy that will create an add command. //
// Record the index. //
// Remove the object from the collection and add it to the equality list.  //
// always include fragment, even if null; // no validation needed since all components are from existing URIs
// Remove the object from the collection and add it to the identity list. //
// If either list is empty, the result is simply the other. //
// We'd like the owner selected after this remove completes. //
// Merge the lists. //
// Object iterators. //
// Allocate list and array for objects and indices. //
// Second pass: match by value equality. //
// Create view form.     //control = new ViewForm(parent, getStyle());
// This will execute the CreateCopyCommand's and then call canExecute on the InitializeCopyCommand's. //
// Create commands to create the copy object(s). //
// Record it for execution. //
// Create an initialize copy command for each of the created objects. //
// If there is a column object, just convert it to a string. //
// This will call prepare() which will partially execute the command. //
// Create a command to create a copy of the object. //
// If command has no owner specified //
// If the owner parameter is set, we delegate to the owner's adapter //
// If there is an adapter of the correct type... //
// Does this part provide an editing domain? //
//MappingFactoryImpl
// Remove and dispose any wrappers for remaining old children. //
//MappingHelperImpl
// Set the mapper to build an XSD2EcoreMappingRoot, if available. //
// We will iterate over the whole collection, removing some as we go. //
//MappingStrategyImpl
//TreeSwitch
// Take the first object, and remove it. //
// Get the next object and check if it has the same parent. //
// The parent is null, which implies a top-level removal, so create a self-removing command. //
// We will now create a command with this implied parent //
// Remove the object and add it as a sibling. //
// protected Object labelProvider;
// If no object is specified, but an existing sibling is, the object is // its parent. //
//return getDefaultValue(attribute.getEType());
// If any children were added or removed, reset the indices.
// This URI handler redirect the URI based on the mapping. //
// This handles IStructuredSelection. //
// We need to check canExecute() in case optimize is true. //
// Add in additional wrappers to search. //
// Computes a three-character escape sequence for the byte, appending // it to the StringBuffer.  Only characters up to 0xFF should be escaped; // all but the least significant byte will be ignored.
// If there are objects to populate... //
// Fill in the result array with labels and re-populate the original list in order. //
// No color is a good default. //
// No font is a good default. //
// Otherwise, we could check that the adapter implements interface IItemFontProvider. //
"/*   * Returns <code>true</code> if this URI contains non-ASCII characters;   * <code>false</code> otherwise.   *   * This unused code is included for possible future use...    */"
//public String getUpdateableText(Object object)
// Iterate over all the set feature to factor each child to the right reference. //
// Check that the value is type compatible with the entry feature. //
//FunctionPairImpl
// When the value is changed, the property sheet page doesn't update the property sheet viewer input // before refreshing, and this gets called on the obsolete wrapper. So, we need to read directly from the // model object. // //return needsEncoding(feature) ? encode((String)getEntryValue()) : getEntryValue();
//MappingPackage ePackage = ((MappingRoot)msg.getNotifier()).ePackageMapping();
// If the last object was deleted and the selection was in the property sheet view, the obsolete wrapper will // reference past the end of the list. //
// Fill in the array with labels. //
"/*      ResourceSet resourceSet = (ResourceSet)object;      childrenFeatures.add(ResourcePackage.eINSTANCE.getResourceSet_Resources());*/"
// First, try an existing implementation of getChildReference().  This provides backwards compatibility if that // method, now deprecated, was overridden. //
// Use an existing getReferenceValue() override. //
// If this object is compatible with this reference... //
// Get the index into the list via this call to super. //
// Find the index of a feature containing the sibling, or an equivalent value, in the collection of children // features. //
//MappingPackage ePackage = ((FunctionNamePair)object).ePackageMapping();
//XMLTypeFactory
// Add child descriptors contributed by extenders. //
// Set the index of the object value in the list via this call to super. //
// Build the collection of new child descriptors. //
// If we can open  an input stream, then the plugin.properties is there, and we have a good base URL. //
// For each CommandParameter with a non-null, multi-valued structural feature... //
// Ensure there are no extraneous style bits. //
//AnyTypeImpl
// Assign default style bits, if necessary, and ensure none conflict. //
//SpaceType
// find insertion point from returned result (-(insertion point) - 1) // commentIndex is an index of the first element that has start position > rangeStartPos
// Otherwise, if a sibling feature was found, iterate through the children features to find the index of // the child feature...  //
// Iterator over all the child references to factor each child to the right reference. //
// If the child feature follows the sibling feature, the child should be first in its feature. //
// Subclasses may override to add descriptors.
// if there are no groups defined or matched, but the whole pattern matches, // then markup nodes with pattern name //
// Is this child in this feature... //
// On Motif, selection color may be set as background. //
// Is this object in this feature... //
"/*   * Returns the help context id for this property.   */"
// Restore original resource URI values. //
// If all the objects are used up by the above, then we can't do the command. //
// Create a command to set this to null and remove the object from the other list. //
// It's just a single value //
// Consume the rest of the appropriate children. //
// The "suffix" can actually be a substitution pattern for the package name. //
// Correct the index, if necessary. //
// Create a command for this feature, //
// Compute the relative index as best as possible. //
// Create a command for this feature,  //
// continue to next case
// Dispose the child wrappers. //
// All this logic is so that we only create a list if the adapter is set to more than one target. //
//XMLNamespacePackage
// We can enable the action as indicated by the command, // and we can set all the other values from the command. //
// If we have resolved to an EClass but we have an EAttribute, we can change it to be an EReference. //
//TreeAdapterFactory
// Unwrap value. //
// If the adapter factory is composeable, we'll adapt using the root. //
// If a new collection was allocated, continue to populate it. //
// create rewriter to record changes
// TreeNode
// Delegate the action for this object to the editing domain. //
// Draw the extra first-column image. //
// If the table is indenting, draw tree lines. //
//private final boolean iri; //private URI cachedASCIIURI;
// Is this the label feature? //
// case Resource.RESOURCE__IS_MODIFIED: // case Resource.RESOURCE__IS_LOADED: // case Resource.RESOURCE__IS_TRACKING_MODIFICATION: // case Resource.RESOURCE__RESOURCE_SET:
// Is this a containment reference child? //
// This ensure that this package itself is traversed even if the reference type is EObject... //
// Or a feature map child? //
// Overlay if the resource is the target for any controlled objects.  //
// Don't include controlled children here, they'll show up under their container. //
// Resource resource = (Resource)object; // childrenFeatures.add(ResourcePackage.eINSTANCE.getResource_Contents());
//TreeFactoryImpl
//TreePackage
//TreeNodeImpl
// If we have a good editing domain... //
//TreePackageImpl
// This guard is for extra security, but should not be necessary. //
// We will only deal with structured selections. //
// If there is a new one... //
"/*    super.collectNewChildDescriptors(newChildDescriptors, object);*/"
// Use up the command. // Note that notification will cause a new command to be created. //
//TreeFactory
// No point in keeping garbage. //
// We just can't do it. //
// Fill with background. //
// only handle structured selections
// Add the edit menu actions. //
// try to get editing domain from workbench part
// Show the colourless image. //
// if we found an editing domain, create command
// convert the selection to a collection of the selected objects
// Allocate the new collection, and populate it up to this point. //
// if the editing domain wasn't given by the workbench part, try to get // it from the selection
// Add our standard marker. //
// If the first wrapped value is found... //
// use up the command
//MappingPackage ePackage = ((FunctionPair)object).ePackageMapping();
// We use multi even for a single line because we want to respond to the enter key. //
// Remember the requested operation.
// If there are delegated features, add only those that aren't already in this package to the end of the list. //
// grabHorizontal = true;
//MappingPackage ePackage = ((FunctionPair)msg.getNotifier()).ePackageMapping();
// Add our other standard marker. //
// Clear the source data.  We won't need this again, since, if it was // available, it's already in the command. //
// Ensure that all proxies are resolved so that references into the controlled object will be saved to reference the new resource. //
// Cache the tree path for each object. //
// dropDown.addListener(SWT.Paint, dropDownListener);
// This is here only to support deprecated adapt(object) rather than adapt(object, Interface.class). // // supportedTypes.add(null);
// setEditor(null, null, -1);
// event is null when featureTableViewer is double clicked
// event is null when choiceTableViewer is double clicked
// This should be consistent with paintControl(). //
// Draw 3D effect on right-side button. //
// Draw outline. //
// Draw down arrow, offset if dropped. //
// Draw background of right-side button. //
"/*     * (non-Javadoc)     *      * @see org.eclipse.jface.window.Window#configureShell(org.eclipse.swt.widgets.Shell)     */"
// This is for the helper feature. //
// Execute it. //
// If so, revalidate the command. //
// Draw the text. //
// If the command can execute... //
// A command was created if the source was available early, and the // information used to create it was cached... //
// If we can't do anything else, we'll provide the default select feedback // and enable auto-scroll and auto-expand effects.
// This is for the typeMapping feature. //
// Clean up the state. //
// Otherwise, let's call the whole thing off. //
// Clear out any old information from a previous drag. //
// Recreate the command. //
// Check if the cached command can provide DND feedback/revalidation. //
//FIX:::
// create composite
// Remember the target; create the command and test if it is executable. //
// Keep track of any changes to the command information.
//We are not generating the manifest file if the plugin.xml exists. //
// If we don't have a previous cached command... //
// If this command can provide detailed drag and drop feedback... //
//do this here because setting the text will set enablement on the OK // button
// If not, dispose the current command and create a new one. //
// Use it for the operation and drag under effect. //
// FunctionPair
// Transfer the data and convert the structured selection to a collection of objects. //
// Check whether the current data type can be transfered locally. //
// Transfer the data and, if non-null, extract it. //
// Iterate over the data types to see if there is a data type that supports a local transfer. //
// If there was no old input, then we must be providing content for this part for the first time... //
// Walk the project looking for .java files to analyze. //
//    case Notification.TOUCH:
// Set the input to the widget. //
// n2.isLabelUpdate()
// Previously, we never updated the viewer on a resolve.  Now we post and merge it as appropriate. //
// We ignore non-changes for now. //
// If the index was previously assigned, return it. // Otherwise, return a negative result that encodes the newly assigned index. //
// Add a dummy GenModel for referenced packages. //
// Escape a string that will terminate the comment in which this will all be nested. //
// We set it and get back the interned string. // This way, when instanceClassName == instanceTypeName we know we should serialize only the class name. //
// We also need to set it on any GenModels holding any used or static packages that may be refered to. //
//  private static final long SCHEME_CHAR_HI = ALPHANUM_HI | highBitmask("+-."); //  private static final long SCHEME_CHAR_LO = ALPHANUM_LO | lowBitmask("+-.");
// Create the model project. //
// Determine which projects will need to be referenced. //
// no property // no property // no property
// Create resources for all the root EPackages. //
// The class is not available.
// Nested GenAnnotations
// removing the first space
// Subclasses may overwrite
// Handle application genmodel stub //
// Create resources for all the referenced EPackages // The referencedEPackage is a "local" instance of the realEPackage.  We  // will add the former to a resource that has the same URI of the later.
// Initialize the GenModel with all the computed data. //
// Now we should sort. //
// Compute the closure. //
// For arrays, consider the element type. //
// Convert reference to attribute if its type is an EDataType...  //
// Clean up the temporary container annotations for holding map entry classes until they are for sure needed. //
// Now we need to hook up opposites by finding the named feature in the type. //
// Restore all configured settings from the original. //
// Now we need to hook up keys by finding the named feature in the type. //
// Copy the children references  //
// Keep only the plugins that have GenModels for consideration. //
// Iterate over all projects to look at the manifests. //
// Also add each required plugin for consideration in the loop. //
// Create the EPackage on demand. //
// Check whether this has @model annotation contents. //
// Match them and accumulate the appropriate result. //
// use no encoding
// Create a generic super type with an EClass as the classifier for each super interface in the Java representation. //
// The class address was not equal, so we don't want this class loader, // but instead want the last result that was able to load the class. //
// Check whether this has @model annotation contents. // If not, it might be a package interface, for backwards compatibility. //
// Get the package name and see if there's an EPackage for it. //
// It's definitely a package if it was declared as such. //
// Additional attributes and references may be defined directly on the interface in order to allow the // get accessor method to have suppressed visibility. //
// Walk the methods. //
// This will catch inherited features, or additional things we don't want to worry about.
// Find Packages and Factories
// Otherwise it's treated as an EEnum //
// Handle the type, multiplicity and other ETypedElement attributes. //
// Each token in parameters will specify a dataType for the corresponding parameter, but can be overridden by a // parameter-name-prefixed dataType property. //
// The name is extracted and lower cased. //
// 7 is the size of (object
// The feature name is extracted lower cased. //
// Map to an EEnum.
// Drop the _ separators and normalize the case. //
// Set the EAttribute attributes. //
// Each token in exceptions will specify a data type for the corresponding exception. //
// We'll create one of these. //
// Set the EReference attributes. //
// If any of these attributes appear, this must be a reference. //
// Set the visibility annotations for the EstructuralFeature. //
// Process the annotations. //
// Set the EStructuralFeature attributes. //
// Check if it is exactly the name of a type parameter that's in scope. //
// Allow a distinct literal value to be provided, too. //
// The type can be augmented by specifying the it explicitly in the annotation. // This mostly makes sense only for many-valued typed elements, where the Java // type is a list and the item type needs to be specified. //
// continue with default processing
// Allow the value to be defined by an annotation or by the field's initializer //
// We want to resolve to this. //
// Returns the lower half bitmask for all ASCII characters between the two // given characters, inclusive.
// But, if name doesn't expand into field name, ignore it. //
// Returns the upper half bitmask for all AsCII characters between the two // given characters, inclusive.
// Allow a mixed case version of the name to be provided. //
// Returns the lower half bitmask for all the ASCII characters in the given // string.
// If we can't find it, try the simple name in the package... //
// This could potentially map every created model element to its corresponding Rose node. // However, for now we're only using it as needed. //
// Find an explicit import or the first wildcard import. //
//no caching
// If we still don't have one, we'll have to settle for an EDataType or EClass with an instance class name. //
// Find the modeled package for the name and look up the name there. //
// Create a resource set and load the model file into it. //
// The package not in a .cat file. //
// See if we already have the EDataType. //
// The package is in a .cat file. //
// It's okay for there not be a precompiled template, so fail quietly. // exception.printStackTrace();
// Returns whether the given character is in the set specified by the given // bitmask.
// If we still don't have one, we'll have to settle for a demand created EDataType or EClass, // so create a new EClassifier with a nice unique name. //
// If we don't have one yet, maybe it's one of the special types... //
// Converts null to length-zero array, and clones array to ensure // immutability.
// If there are any warnings other than raw type warnings, include all the warnings. //
// For the model information. //
// Avoid classifier name collisions. //
// Make array names legal. //
// Get the parent object. //
// Even primitives should be represented by a data type with a conventional (i.e. capitalized) name. //
// Add to package. //
// Map to an EPackage. //
// node is not marked up by now, but keep checking other rules
// Map to an EDataType. //
// Map to EAttribute, or EEnumLiteral. //
// Map to an EParameter as input parameter for operation. //
// Add to an EClass //
// Map to an EOperation.
// If not we'll erase it to java.lang.Object. //
// Alternate, stricter implementations of the following validation methods // are provided, commented out, for possible future use...
// We will need to check the containment if we have to convert the EAttribute to an EReference later.  //
// <p>A valid scheme may be null, or consist of a single letter followed // by any number of letters, numbers, and the following characters: // <code>+ - .</code>
// 5 is the size of (list
// Load the schema and packages that were used to load the instance into this resource set. //
// try to retrieve the fully qualified name of the specified type...
// qualify type name if not already qualified...
// remove garbage characters...
// convert to dot-separated format if necessary...
// Store the base name for relative .cat file references. //
// Order first by number of features (descending) and then alphabetically (ascending) //
// Iterate over the whole tree to do this. //
// default value //
// We treat the feature as volatile if it is volatile itself or if it is  // a reference whose opposite end is volatile,  // unless that opposite volatile reference delegates to a feature map, // in which case, a full implementation of the references can be generated. //
//MappingFactory
// Remove zero width non-breaking space, which may be used as a byte order marker,  // and may be ignored according to the Unicode FAQ: http://www.unicode.org/unicode/faq/utf_bom.html#38 //
// A container must be transient. //
// Temporary WAS/WSAD migration option. //
// It was not found in the model class so check if primitive type. //
// setup attribute and parameter type //
// Convert attributes of with EClass type to references. //
// read mdl file...
// file is a mdl file // // get model name
// special case, traverse cat file or mdl file //
// could this happen?
// map properties even when isTreeOnly == true
//directoryName.length() > 0 && directoryName.charAt(0) == '$')
// size should be 1
// Create a resource for this file. Don't specify a content type, as it could be Ecore or EMOF. //
//    top++;
// No additional features // MappingStrategy
// Record the records for the executed commands on the stack. //
// map to EReference when is navigable //
// Process the contents of the extent //
// This will not add duplicates. //
// This sets the parent so that the nodes can traverse to the root to find default eCore settings. //
// Load the Rose .mdl or .cat file, and create mappings for the objects. //
// Only one open quote. //
// Start second traverse to create mapping objects in memory. //
// Put all static package in the package registry. //
// This is the path of the target directory. //
//MappingPackage
// No additional features // TypeConverter
// MappingHelper
// FunctionNamePair
// Do we also have some non-input objects to copy? //
// For each mapping being removed... //
// MappingRoot
// Since input objects are read-only, we don't need to make a copy of them for the clipboard. // We can just put a pointer to the original object(s) on the clipboard. //
// Make sure the back pointers to this mapping from the mapped objects is set. //
// A valid authority may be null or contain any allowed URI characters except // for the following: <code>/ ?</code>
// Copy the name //
// Add any remaining object-index pairs from either set. //
//Resource resource = EcoreUtil.getURI(refObject).; FIX:::
// <p>A valid path segment must be non-null and may contain any allowed URI // characters except for the following: <code>/ ?</code>
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.mapping.action.AddRootTopAction#getTopsToAdd()   */"
// Searches the specified string for any characters in the set represented // by the 128-bit bitmask.  Returns true if any occur, or false otherwise.
//return;
// Create commands to do mapping.getNested().addAll(siblingsToReparent). //
// For each mapping being added... //
// note: (absolutePath || authority == null) -> hierarchical // (authority == null && device == null && !absolutePath) -> scheme == null
// this will create the mapping as well
// If there are siblings that need to be reparented. //
//(new RemoveCommand(domain, parentMapping, parentMapping.ePackageMapping().getMapping_Nested(), siblingsToReparent));
// Create commands to do parentMapping.getNested().removeAll(siblingsToReparent). //
// If we can't create a temp file then we have to ignore the option.
// find prefix in current context
//(RemoveCommand.create(mappingDomain, mapping, mapping.ePackageMapping().getMapping_Outputs(), object)));
// return false if iteration should continue.
//commandList.add(RemoveCommand.create(mappingDomain, mapping, mapping.ePackageMapping().getMapping_Outputs(), object));
// Get the corresponding type. //
// Type matching never matches inputs that are already mapped
// Create the copy from this corresponding type. //
// Remove all the mappings from the root. //
// We have done our preparation. Now ask the super to validate. //
// Copy the type //
// Skips '-'
// This is the tricky part where we set the encoding  // that we'd like to have decoded as a series of commands to execute after this command has completed. //
// If eCore, return the ENamedElement name //
// top-label-separator
// Tests whether this URI's path segment array is equal to that of the // given uri.
// If the owner and the copy are of the same type, we can proceed with the command, i.e. no override. // If not, we will skip this command by returning a do-nothing override. //
// If there is an adapter of the correct type, return the item label //
// If this is a RemoveCommand for a root input object, direct it to the MappingRoot. //
// remove all sourceSeparator characters
// Tests two objects for equality, tolerating nulls; null is considered // to be a valid value that is only equal to itself.
// type-mappings
// add a targetSeparator in front of every upper case character
// Tests two strings for equality, tolerating nulls and optionally // ignoring case.
// sourceSeparator == LABEL_NO_SEPARATOR
// top-label-forms
// relative path: merge with base and keep query (note: if the // base has no path and this a non-empty relative path, there is // an implied root in the resulting path)
// top-label-case
//Ecore2EcoreFactory
// bottom-label-forms
//Ecore2EcorePackage
//MappingSwitch
// encrypt the input
// we don't want to include the line comments immediately before an import in the  // returned range
"/* (non-Javadoc)   * @see org.eclipse.emf.mapping.ecore2ecore.Ecore2EcoreMapping#getInputEPackage()   */"
//if // for // for
// An interface should be abstract, but this makes sure of that fact. //
//Ecore2EcoreSwitch
// Adds a segment to a stack, skipping empty segments and self references, // and interpreting parent references.
// For CreateChildCommand, we will find the owner by calling EditingDomain.getParent() on the first selected object
// special care must be taken for a root's parent reference: it is // either ignored or the symbolic reference itself is pushed
// unless we're already accumulating root parent references, // parent references simply pop the last segment descended
// If extending an interface, its mix-ins must be included, since there is no implementation to handle them. //
// If we've found thing with type parameters, search them for a match. //
// XMLInfo
//Ecore2XMLPackage
// missing attribute
// this is the case that starting process rose file by passing cat file name // this is a special case. // normally, user should pass mdl file instead of cat file //  // file is a cat file // modelTree did contain quid info
//XMLMapImpl
// invalid element
//Ecore2XMLFactoryImpl
//Ecore2XMLPackageImpl
// We either remove the root mapping or we use the iterator that returned the most recent next mapping. //
// Set the editor's selection based on the current viewer's selection. //
// Many inherited methods must be overridden to handle this case. //
// Since we only use this right on an operation, we always want to include the keyType and valueType, and we never // want to qualify the property names. //
// If there are any arguments and they are not unbounded wildcards, casts can't be checked. //
// We need to be conservative and diagnose a problem only if we are quite sure that type is built-in  // and hence that the lack of a default value really represents a problem with being unable to convert the literal to a value. //
// Or we test their relationship via their instance classes, if they have them. //
// Some XML types declare nebulous Object mappings. // They actually map to internal types that shouldn't be generated into code. //
// This guards the switch. //
// If there is a base XML or Ecore type, use one of the two corresponding built-in factories to create a value from the literal string. //
// Clean up any old project information. //
//MappingImpl
// The bound is a wildcard with no constraints. //
// See if a GenModel is registered for the package's URI, and if so, try to load it. //
// If that didn't work, just synthesize one. //
// EATM  // Foreign Model
// Any features from one package that delegate to features in another. //
// If there are features delegating across packages, add only those that aren't already being generated. //
// a single separator, possibly preceded by some parent reference // segments, is redundant
// an empty path needs to be replaced by a single "." if there is no // query, to distinguish it from a current document reference
// Collapses non-ending empty segments, parent references, and self // references in a non-relative path, returning the same path that would // be produced from the base hierarchical URI as part of a resolve.
// if the path is non-empty and originally ended in an empty segment, a // parent reference, or a self reference, add a trailing separator
//TypeConverterImpl
// Returns a string representation of this URI for debugging, explicitly // showing each of the components.
// If the new prefix has segments, it is not the root absolute path, // and we need to drop the trailing empty segment and append the tail // segments.
"/*        featureMap.add(eStructuralFeature, cursor++, o);        expectedModCount = featureMap.getModCount();        ++entryCursor;        ++lastCursor;        // lastCursor = -1;        // prepared = 0;*/"
// Add all classes from this package first, to guarantee they get the // simple names
// Don't even consider it unless this is hierarchical and has scheme, // authority, device and path absoluteness equal to those of the prefix.
// If the prefix has no segments, then it is the root absolute path, and // we know this is an absolute path, too.
// Barring a better result, this will be the result. //
// The prefix really is a prefix of this.  If this has just one more, // empty segment, the paths are the same.
// Do this here because getExtendedMetaData() is used during initialization  // and the mappings are are populated the first time it's fetched // which will miss the packages we add as we initialize the tree. //
// rewriter is required for set methods
// If we can't add it, it must already be in the list so find it and move it to the end. //
// Both eObject1 and eObject2 are not null. // If eObject1 has been compared already... //
// Encodes the given string, replacing each ASCII character that is not in // the set specified by the 128-bit bitmask and each non-ASCII character // below 0xA0 by an escape sequence of % followed by two hex digits.  If // % is not in the set but ignoreEscaped is true, then % will not be encoded // iff it already begins a valid escape sequence.
// Tests whether an escape occurs in the given string, starting at index i. // An escape sequence is a % followed by two hex digits.
// Multiple jet directives.
// There's no reason they aren't equal, so they are. //
// If the set states are the same, and the values of the feature are the structurally equal, they are equal. //
