"/** XXX I really don't like this - the XML processor is still             * too 'involved' in the processing. A better solution (IMO)             * would be to create UE for Project and Target too, and             * then process the tree and have Project/Target deal with             * its attributes ( similar with Description ).             *             * If we eventually switch to ( or add support for ) DOM,             * things will work smoothly - UE can be avoided almost completely             * ( it could still be created on demand, for backward compatibility )             */"
// JUnit 4 wraps solo tests this way. We can extract // the original test name with a little hack.
// XXX ignore attributes in a different NS ( maybe store them ? )
//borrowed from TokenFilterTest
// XXX Move to Project ( so it is shared by all helpers )
// What is the property supposed to be?
// PR: Hack for ant-type value //  an ant-type is a component name which can // be namespaced, need to extract the name // and convert from qualified name to uri/name
// there's a convenient xsltc class version but data are // private so use package information
// stolen from org.apache.xerces.impl.XMLEntityManager#getUserDir() // of the Xerces-J team // which ASCII characters need to be escaped
// bingo append it. (this should normally not be done here)
// This is faintly ridiculous:
//cannot remove underscores due to protected visibility >:(
// TODO not read, yet in a public setter
//  PR: I do not know what to do if the object class //      has multiple defines //      but this is for logging only...
// not sure what could be the need of this...
// XXX: (Jon Skeet) Any reason for writing a message and then using a bare // RuntimeException rather than just using a BuildException here? Is it // in case the message could end up being written to no loggers (as the // loggers could have failed to be created due to this failure)?
// Experimental/Testing, will be removed
// XXX should instead make a new ProtectionDomain with a CodeSource // corresponding to container.toURI().toURL() and the same // PermissionCollection as Project.class.protectionDomain had
//this is really irritating; we need a way to set stuff
//XXX // All this to convert source to destination directory according // to weblogic standards Can be written better... this is too hacky!
//silly hack to avoid stack overflow...
// -------------------- Access to property tables  -------------------- // This is used to support ant call and similar tasks. It should be // deprecated, it is possible to use a better (more efficient) // mechanism to preserve the context.
// XXX - should throw an exception instead?
// Temporary - until we figure a better API
// There is a better way to save the context. This shouldn't // delegate to next, it's for backward compatibility only.
// quick fix for Ant.java use of property before // initializing the project
// XXX: we should use JCVS (www.ice.com/JCVS) instead of // command line execution so that we don't rely on having // native CVS stuff around (SM)
"/*             * two reasons are mentioned in the API docs for File.list             * (1) dir is not a directory. This is impossible as             *     we wouldn't get here in this case.             * (2) an IO error occurred (why doesn't it throw an exception             *     then???)             */"
"/** * Jakarta Commons Logging listener. * Note: do not use the SimpleLog as your logger implementation as it * causes an infinite loop since it writes to System.err, which Ant traps * and reroutes to the logger/listener layer. * * The following names are used for the log: *  org.apache.tools.ant.Project.PROJECT_NAME  - for project events *  org.apache.tools.ant.Target.TARGET_NAME - for target events *  TASK_CLASS_NAME.TARGET_NAME - for events in individual targets. * * In all target and project names we replace ""."" and "" "" with ""-"". * * TODO: we should use the advanced context logging features (and expose them * in c-l first :-) * TODO: this is _very_ inefficient. Switching the out and tracking the logs * can be optimized a lot - but may require few more changes to the core. * * @since Ant 1.5 */"
//     * @TODO using taskName here is brittle, as a user could override it. //     *       this should probably be modified to use the classname instead.
//these are pathological cases, but retained in case somebody //subclassed us.
"/*                 * This is a rather hairy case.                 *                 * One of our subclasses knows that we need to update the                 * archive, but at the same time, there are no resources                 * known to us that would need to be added.  Only the                 * subclass seems to know what's going on.                 *                 * This happens if <jar> detects that the manifest has changed,                 * for example.  The manifest is not part of any resources                 * because of our support for inline <manifest>s.                 *                 * If we invoke createEmptyZip like Ant 1.5.2 did,                 * we'll loose all stuff that has been in the original                 * archive (bugzilla report 17780).                 */"
// This is deprecated - use classespath in the future
//XXX  this array stuff is a remnant of prev trials.. gotta remove.
"/**     * Set the number of milliseconds leeway to give before deciding a     * target is out of date.     * TODO: This is not yet used.     * @param granularity the granularity used to decide if a target is out of     *                    date.     */"
// This may change, if we add advanced parsing capabilities.
// We assume, that every output, jikes does, stands for an error/warning // XXX // Is this correct?
// The line below is a hack: the system id must an URI, but it is not // cleat to get the URI of an resource, so just set the name of the // resource as a system id
// XXX what is the following doing? //     should it run if !javadoc4 && executable != null?
// MAC OS 9 and previous //TODO: I have no idea how to get it, someone must fix it
//TODO: nothing appears to read this but is set using a public setter.
// XXX - we are committing CombiningChar and Extender here
"/*                 * XXX - failed to load the class properly.                 *                 * should we print a warning here?                 */"
// XXX could perhaps also call thread.stop(); not sure if anyone cares
"/**         * XXX         * Perhaps we shouldn't use properties for these         * three options (emacs mode, warnings and pedantic),         * but include it in the javac directive?         */"
// XXX maybe use reflection to addPathElement (other patterns ?)
// TODO there is a problem with the constructor for the RBC. // you have to provide the rules in the constructors - no setters // available.
// probably not the best choice, but it solves the problem of // relative paths in CLASSPATH
// Fix for invalid characters. If you think of more add to the list.
"/*             * fallback in case we have trouble loading the class or             * don't know how to handle it (there is no easy way to             * know what IDL mode would generate.             *             * This is supposed to make Ant always recompile the             * class, as a file of that name should not exist.             */"
// Check it out; also ugly.
//I can't get my head around this; is encoding treatment needed here?
//quick & dirty, to make nested mapped p-sets work:
// XXX is this code still necessary? is there any 1.2+ port? // Pull in *.zip from packages directory
// only: the developer knows what (s)he is doing
// XXX Unfortunately JDK1.2 adds entrySet(), keySet(), values() - // implementing this requires a small hack, we can add it later.
// first: developer could use a little help
// XXX     should we silently catch possible exceptions and try to //         load a different implementation?
// since Java 1.4 //return normalizedPath.split("/"); // workaround for Java 1.2-1.3
// HAMMER // end inline mainGTU
"/**     * This array really shouldn't be here.     * Again, for historical purposes it is.     *     * <p>FIXME: This array should be in a private or package private     * location, since it could be modified by malicious code.</p>     */"
// Should move to a separate public class - and have API to add // listeners, etc.
// "" should become a single empty argument, same for '' // PR 5906
// not very nice but will do the job
// provide public visibility
// not used, but public so theoretically must remain for BC?
// super.validateAttributes(); // don't want to call this method
// XXX what is this for?
// We keep this, so we have something to delete in later tests :-)
// *************  copied from ConcatTest  *************
// not sure whether this is clean, but this method is // declared not to throw exceptions.
// We just set the prefix for this fileset, and pass it up. // Do we need to do this? LH
//why do we do nothing?
// // We have to deal with assembly!!! // The programmer can be writing little 32 byte chunks for all // we know, and we must assemble complete records for writing. // REVIEW Maybe this should be in TarBuffer? Could that help to // eliminate some of the buffer copying. //
// This is the new, better way - use classespath instead // of sourcespath.  The code is currently the same - you // need class files in a directory to use this or jar files.
// XXX - why not simply new File(dir, filename)?
// This is ugly; checking for the root folder.
//TODO: Parameterise ?? //Call compiler as class... dont want to fork again //Use classic compiler -- can be parameterised?
//XXX // All this to get package according to weblogic standards // Can be written better... this is too hacky! // Careful.. similar code in scanDir , but slightly different!!
//stolen from writeManifest
"/* If the jarfile already exists then whack it and recreate it.             * Should probably think of a more elegant way to handle this             * so that in case of errors we don't leave people worse off             * than when we started =)             */"
// XXX is the following really necessary? it is in the same thread group...
// we have to find a cleaner way to put this output
// This is the old way and is deprecated - classespath is // the right way to do this and is above
// For Script example that modifies id'ed tasks in other // targets to work. *very* Ugly // The reference is replaced by RuntimeConfigurable
// don't call super.close() because that reader is used // on other places ...
// report error if something weird happens...this is diagnostic.
// sorry - otherwise we will get a ClassCastException because the MockCache // is loaded by two different classloader ...
// ***HACK*** We ask the VM to create an instance // by voluntarily providing illegal arguments to force // the VM to run the class' static initializer, while // at the same time not running a valid constructor.
// Singleton for now, it may change ( per/classloader )
// XXX - shouldn't this always return false in isolated mode?
//TO DO : delete the file if it is not a valid file.
"/** * TODO: * comment field doesn't include all options yet */"
"/**     * This method checks the timestamp on each file listed in the <code>     * ejbFiles</code> and compares them to the timestamp on the <code>jarFile     * </code>.  If the <code>jarFile</code>'s timestamp is more recent than     * each EJB file, <code>true</code> is returned.  Otherwise, <code>false     * </code> is returned.     * TODO: find a way to check the manifest-file, that is found by naming convention     *     * @param ejbFiles Hashtable of EJB classes (and other) files that will be     *                 added to the completed JAR file     * @param jarFile  JAR file which will contain all of the EJB classes (and     *                 other) files     * @return         boolean indicating whether or not the <code>jarFile</code>     *                 is up to date     */"
// Have to think about lazy initialization here...  JHM // comparator = new java.text.RuleBasedCollator();
//TODO no methods yet for getClassname //TODO no method for newInstance using a reverse-classloader
"/*     * The displayName variable stores the value of the ""display-name"" element     * from the standard EJB descriptor.  As a future enhancement to this task,     * we may determine the name of the EJB JAR file using this display-name,     * but this has not be implemented yet.     */"
"/** * An output stream that compresses into the BZip2 format (without the file * header chars) into another stream. * <p>The compression requires large amounts of memory. Thus you * should call the {@link #close() close()} method as soon as * possible, to force <tt>CBZip2OutputStream</tt> to release the * allocated memory.</p> * * <p>You can shrink the amount of allocated memory and maybe raise * the compression speed by choosing a lower blocksize, which in turn * may cause a lower compression ratio.  You can avoid unnecessary * memory allocation by avoiding using a blocksize which is bigger * than the size of the input. </p> * * <p>You can compute the memory usage for compressing by the * following formula:</p> * <pre> * <code>400k + (9 * blocksize)</code>. * </pre> *  * <p>To get the memory required for decompression by {@link * CBZip2InputStream CBZip2InputStream} use</p> * <pre> * <code>65k + (5 * blocksize)</code>. * </pre> * * <table width=""100%"" border=""1""> *  <colgroup> *    <col width=""33%"" /> *    <col width=""33%"" /> *    <col width=""33%"" /> *  </colgroup> *  <tr> *    <th colspan=""3"">Memory usage by blocksize</th> *  </tr><tr> *    <th align=""right"">Blocksize</th> *    <th align=""right"">Compression<br>memory usage</th> *    <th align=""right"">Decompression<br>memory usage</th> *  </tr><tr> *    <td align=""right"">100k</td> *    <td align=""right"">1300k</td> *    <td align=""right""> 565k</td> *  </tr><tr> *    <td align=""right"">200k</td> *    <td align=""right"">2200k</td> *    <td align=""right"">1065k</td> *  </tr><tr> *    <td align=""right"">300k</td> *    <td align=""right"">3100k</td> *    <td align=""right"">1565k</td> *  </tr><tr> *    <td align=""right"">400k</td> *    <td align=""right"">4000k</td> *    <td align=""right"">2065k</td> *  </tr><tr> *    <td align=""right"">500k</td> *    <td align=""right"">4900k</td> *    <td align=""right"">2565k</td> *  </tr><tr> *    <td align=""right"">600k</td> *    <td align=""right"">5800k</td> *    <td align=""right"">3065k</td> *  </tr><tr> *    <td align=""right"">700k</td> *    <td align=""right"">6700k</td> *    <td align=""right"">3565k</td> *  </tr><tr> *    <td align=""right"">800k</td> *    <td align=""right"">7600k</td> *    <td align=""right"">4065k</td> *  </tr><tr> *    <td align=""right"">900k</td> *    <td align=""right"">8500k</td> *    <td align=""right"">4565k</td> *  </tr> * </table> * * <p>For decompression <tt>CBZip2InputStream</tt> allocates less * memory if the bzipped input is smaller than one block.</p> * * <p>Instances of this class are not threadsafe.</p> * * <p> * TODO:    Update to BZip2 1.0.1 * </p> * */"
// XXX - log an error?  throw an exception?
// TODO: allow user to request the system or no parent
//if there was any text before this, add it as a fragment //TODO, this check could be modified to go if pos>prev; //seems like this current version could stick empty strings //into the list
// XXX add exceptions
// test a process that runs and failed
// ignore
// process should abort
// user:password@host:/path notation
"/*          * @param event the build event that is being logged.         */"
// only track progress for files larger than 100kb in verbose mode
// Element doesn't handle text content
// send "C0644 filesize filename", where filename should not include '/'
// ClearCase items
/* Assign actual codes for the tables. */
// -reserved
/* size of the central directory   */
// gcj doesn't support an extension dir (-extdir) // so we'll emulate it for compatibility and convenience.
// At this point we are probably in failure mode, but // try to use the bare URI as a last gasp
// -unreserved
// DataType can have a "no arg" constructor or take a single // Project argument.
// -out
// b may be 0 for success, //          1 for error, //          2 for fatal error,
// Not whitespace - fail
// Fall tru
// -ndata
// C0644 filesize filename - header for a regular file // T time 0 time 0\n - present if perserve time. // D directory - this is the header for a directory.
// -version
//wince isn't really 9x, but crippled enough to //be a muchness. Ant doesnt run on CE, anyway.
// -nwarn
// if a label has been supplied and it is a revision label, use the raw // the view as the snapshot
// Class doesn't have a String constructor but a decent factory method
/* total number of entries in      */
// Check for \r, \r\n and \r\r\n // Regard \r\r not followed by \n as two lines
// // Success!  The xml-commons resolver library is // available, so use it. //
// it is a new file // set the revision but not the prevrevision
//catch script/ant mismatch with a meaningful message //we could ignore it, but there are likely to be other //version problems, so we stamp down on the configuration now
// don't know the type, should throw exception instead?
// char and Character get special treatment - take the first character
// do nothing
// scan base dirs to build up compile lists only if a // specific classname is not given
// write a Properties file in each directory:
// **   simple name specified   == parent dir + name
// requires version 2 as we are going to store length info // in the data descriptor
// the test runner that wrap the dummy formatter that interests us
// CheckStyle:VisibilityModifier OFF - bc
// First try with Project.
// // The ResourceLocation may specify a relative path for its // location attribute.  This is resolved using the appropriate // base. //
// Can return null to represent the bootstrap class loader. // see API docs of Class.getClassLoader.
/* start of the central directory  */
//private static final int GET_ENTRY = 0;
// file comment
//There were no revisions in this changelog //entry so lets move onto next file
//same date if dest timestamp is within granularity of the srcfile
// must be "add"
// ---------------------------------------------------------- // somewhat arbitrary choices that are quite common for shared // installations // -----------------------------------------------------------
// EnumeratedAttributes have their own helper class
// selectors are implicitly ANDed in DirectoryScanner.  To // revert their logic we wrap them into a <none> selector // instead.
// first off, make sure that we've got a srcdir and destdir
// ZIPs store time with a granularity of 2 seconds, round up
// viewpath
// ------------------------------------------------------ //   Helper methods - should be in BuildFileTest // -----------------------------------------------------
// build the command line from what we got the format is // cleartool lsco [options...] [viewpath ...] // as specified in the CLEARTOOL.EXE help
// Check if list of files to check has been specified
// testNoCrash is the test invoked by the captureToSummary's junit task
// if the two substrings are longer than the original, then name // contains address - so reset the name to null
//default
// log options used
// dummy formatter just to catch the error
// we don't expect to find this
// resolve relative paths through Project
//patch file into the fileset
// type value
// bit3 set to signal, we use a data descriptor
//underscores go in front of invalid start chars
// use to scan own archive
"/** * Tests the {@link XSLTProcess} task. * XXX merge with {@link StyleTest}? * @since Ant 1.5 */"
// it is a modified file // set the revision and the prevrevision
"/*             * throw in drive letters             */"
//set our parent dir
"/*             * promised to eliminate consecutive slashes after drive letter.             */"
// -cfile
// avoid multiple configurations
/** Version to use for addXXX and addConfiguredXXX */
// Compare the destination with the temp file
// SMTP auth only allowed with MIME mail
// All three specified and all three exist -> true
// an address to send from is required
// File is not found in specified filepath
// set the character set if not done already (and required)
// 2 is != 0 and even, so it is considered // failure on any platform currently supported // by Execute#isFailure.
// Eof has been reached
//decide whether to copy the existing arg set, or //build a new one from the list of all args excluding the special //operations that only we handle
// type
// wait for TIME_OUT/2, there should be about TIME_OUT/2 ms remaining before timeout
"/*                fragments.addElement(value.substring(pos + 1, pos + 2));                prev = pos + 2;                */"
// Well, no matching constructor.
//check that dir and src are incompatible
// OK, try without.
// Set up a VSSHistory task
// -ptime
// Throws EjbcException if unsuccessful
// tests one the file object
// Make a limited attempt to extract a sanitized name and email address // Algorithm based on the one found in Ant's MailMessage.java
// If the file being added is META-INF/application.xml, we // warn if it's not the one specified in the "appxml" // attribute - or if it's being added twice, meaning the same // file is specified by the "appxml" attribute and in a // <fileset> element.
// if at eolcount == 0 and trailing characters of string // are CTRL-Zs, set eofStr
// We have extra elements
// -keep
// keep searching for the first ^Z
// -identical
// conversion to URL via FileUtils like in XMLResultAggregator, not as suggested in the bug report
// Trailing characters are ^Zs // Construct new line and eofStr
// Check for required attributes
// DO NOTHING
// permissible values for compression attribute
// build the command line from what we got. the format is // cleartool mkattr [options...] [viewpath ...] // as specified in the CLEARTOOL help
// ================  testcases for the cache implementations  ================
// does the selection
// -replace
// should be full moon
// ADD or ADD_CONFIGURED
// 60s // a further 30s
// For directories:
// -recurse
// Renamed version of original file, if it exists
// order of headers cannot be guaranteed
// now stop the watchdog.
// the method called to set the attribute
// Add the files found in groupfileset to fileset
// can also handle empty archives
// maintain a sorted list of targets
// quick exit if the target is up to date
// Choosing character set of the mail message // First: looking it from MimeType
// Next: looking if charset having explicit definition
// Scanner to find our inputs // list of files to process
// if src and dest dirs are the same, require the extension // to be set, so we don't stomp every file.  One could still // include a file with the same extension, but ....
// Ignore
// CheckStyle:VisibilityModifier OFF - bc // CheckStyle:MemberNameCheck OFF - bc
//couldnt use the xerces or jaxp calls
//enable schema //setFeature(XmlConstants.FEATURE_VALIDATION, false);
// first CR in this line
//if this is our context we assume there must be something here:
// wait for the thread to die, should be the end of the process
// we are recreating the archive, need all resources
// Windows quoting of the value
// Mac-style linebreak or EOF (or both)
// build the command line from what we got. the format is // cleartool mkelem [options...] [viewpath ...] // as specified in the CLEARTOOL.EXE help
// variables to hold arguments
// impossible as getMethods should only return public methods
// copy the source and support files
// boolean and Boolean get special treatment because we // have a nice method in Project
// create an array of strings for input to the compiler: one array // comes from the compile options, the other from the compileList
"/*         * Should choose either -ci or -nco.         */"
// -nco
// 'sync' is needed - otherwise 2 threads can load the same class // twice, resulting in LinkageError: duplicated class definition. // findLoadedClass avoids that, but without sync it won't work.
// make sure we aren't going to get the path separator next
// error level logging for compiler errors
// Execute the top-level target
// need to reset java.class.path property // since the NetRexx compiler has no option for the classpath
// The current character is always emitted.
// Check the command line options
// if at EOF with no characters in the buffer, return EOF
// ant task properties // defaults // CheckStyle:VisibilityModifier OFF - bc
// set in/excludes to reasonable defaults if needed:
// delete a bogus ZIP file (but only if it's not the original one)
// if parent is null, then we are at the root of the fs, // complain that we can't find the build file.
/*<URL>*/
// object selector
// ignore path elements which are invalid // relative to the project
// In this case using java.util.zip will not work // because it does not permit a zero-entry archive. // Must create it manually.
// record data about the last scanned resource
// build the command line from what we got the format is // cleartool uncheckout [options...] [viewpath ...] // as specified in the CLEARTOOL.EXE help
// Not significant for the class loader.
// Cf. PKZIP specification.
//ignore
// -master
// Initialize the globalFileSet's project
"/*     * I'm not fond of this pattern: ""sub-method expected to throw     * task-cancelling exceptions"".  It feels too much like programming     * for side-effects to me...     */"
// don't have to check for public, since // getMethod finds public method only. // don't have to check for abstract, since then // taskClass would be abstract too.
// overriding target from imported buildfile is allowed
// end of try-catch
// sorted by newest Kaffe version first
// remainder zeros
// first build exception
// -eltype
// Not been visited
// Create the stream pumpers to forward listcab's stdout and stderr to the log // note: listcab is an interactive program, and issues prompts for every new line. //       Therefore, make it show only with verbose logging turned on.
// Create.
// Attributes
// the buildfile to use
//not included, do nothing
// process should be dead and well finished
// Mac
// Already present
//empty
// initialResources is not empty
// avoid double scanning of directories, can only happen in fast mode
// Default to string type // which means do nothing
// higher derived
// ----------------------------------------- //  Predefined filters // -----------------------------------------
// If only value is specified, the property is set to it // regardless of its previous value.
// -------------------- Common properties  -------------------- // The following properties are required by import ( and other tasks // that read build files using ProjectHelper ).
// If value and default are both specified and the property // did not exist in the property file, the property is set // to default.
// collect filesets to pass them to getResourcesToAdd
// check to what is in the classname
"/*             * Bad luck.             *             * There are resources in the filesets that make the             * archive out of date, but not in the non-fileset             * resources. We need to rescan the non-FileSets to grab             * all of them now.             */"
// no emptyBehavior handling since the FileSet version // will take care of it.
// may be altered in validate
//calculate our destination directory; it is either the destDir //attribute, or the base dir of the fileset (for in situ updates)
// we will return initialResources anyway, no reason // to scan further.
// Error messages
//not a known type
//no point in setting a message
// If filename does not match the To attribute of the mapper // then filter it out of the files we are considering
// WARN: Don't use the StreamSource(File) ctor. It won't work with // xalan prior to 2.2 because of systemid bugs.
/* disk number start               */
// -rmall -force
// byte - byte compare
// specify output in UTF8 otherwise accented characters will blow // up everything
"/* Had to make two separate commands here because if a space is               inserted between the flag and the value, it is treated as a               Windows filename with a space and it is enclosed in double               quotes (""). This breaks clearcase.            */"
// print the stacktrace in the build file it is always useful... // better have too much info than not enough.
// may be on a case insensitive file system.  We want // the results to show what's really on the disk, so // we need to double check.
// build the command line from what we got. the format is // cleartool checkin [options...] [viewpath ...] // as specified in the CLEARTOOL.EXE help
// put back the original security manager //The following will never eval to true. (PD)
// all the names are the same: check if the class path of the loader // is the same
"/* For debugging purposes uncomment:        org.w3c.dom.Comment s = doc.createComment(""stack="" + threadStack);        buildElement.element.appendChild(s);         */"
// find the line breaks and pass other chars through in blocks
// don't add directories we've already added. // no warning if we try, it is harmless in and of itself
// -------------------------------------------------- BuildLogger interface
// <path> swallows the basedir, it seems //assertTrue(!getProject().resolveFile("A").exists());
// Use a stream so that you can close it yourself quickly // and avoid keeping the handle until the object is garbaged. // (always keep control), otherwise you won't be able to delete // the file quickly on windows.
// Returns list of EJBs for processing
// A "refid" attribute for a node within a Path object.
// Ignore Exception
// type-kind:type-name
// -ignore
// JUnit 4 does not distinguish between errors and failures // even in the JUnit 3 adapter. // So we need to help it a bit to retain compatibility for JUnit 3 tests.
// get the fileset and its basedir
// Shouldn't happen
// Return the type-selector
"/*          Now another magic 48-bit number, 0x177245385090, to          indicate the end of the last block.  (sqrt(pi), if          you want to know.  I did want to use e, but it contains          too much repetition -- 27 18 28 18 28 46 -- for me          to feel statistically comfortable.  Call me paranoid.)        */"
// LF is always end of line (i.e. CRLF or single LF)
// -full
//sort the list. Makes SCM and manual diffs easier.
// create XML document
// -incremental
// CR without LF - send buffer then add char
// -nlabel
// implementation of org.apache.tools.ant.taskdefs.ExecuteStreamHandler interface
// baseline_root_name
// add into buffer
"/*         * If configured to not care about whether the element is         * already checked out to the current view.         * Then check to see if it is checked out.         */"
// info text // list of files // expected result // result
// call a target
// just append beginToken and search further
// java.home is bogus
// Set up a SOSGet task
// Try a silly case
// either end of buffer or a line separator char
"/*              Now ftab contains the first loc of every small bucket.              Calculate the running order, from smallest to largest              big bucket.        */"
//  =====================  helper methods and classes  ====================
// =====================  scenario tests  =====================
// ==============  testcases for the algorithm implementations  ==============
//$NON-NLS-1$
// nearly all times v is zero, 4 in most other cases
// check adapter
// finally create the Huffman tables
// Pattern and string do not have the same size
// '**/**' situation, so skip one
// build the command line from what we got the format is // ss Label VSS items [-C] [-H] [-I-] [-Llabel] [-N] [-O] [-V] [-Y] [-?] // as specified in the SS.EXE help
// build the command line from what we got the format is // cleartool lock [options...] // as specified in the CLEARTOOL.EXE help
/////////////////////////////////////////////////////////////// // GET/SET methods. // Setters, of course are where ant user passes in values. ///////////////////////////////////////////////////////////////
//now we instantiate
///////////////////////////////////////////////////////// // GET/SET methods. // Setters, of course are where ant user passes in values. /////////////////////////////////////////////////////////
// either use default path or root local mapping, // which is now embedded in the root folder
// Write the contents to our master list of links // This method assumes that all links are defined in // terms of absolute paths, or paths relative to the // working directory:
// Mac does \n\r, but that's tough to distinguish from Windows \r\n\r\n. // Don't tackle that problem right now.
// ss.exe exits with '100', when files have been skipped // so we have to ignore the failure
// -ordinary
// For debugging
//set up project references.
// -log logname
// once we find a folder that isn't in the repository, // we know we can add it.
// If the file doesn't pass the include/exclude tests, skip it.
// -graphical
// -overwrite
/* crc-32                          */
// Set up a SOSCheckin task
// The readers return -1 if they end. So simply read the "prepend" // after that the "content" and at the end the "append" file.
/** Our current message output status. Follows Project.MSG_XXX. */
// duplicate equal to add, so we continue
"/*                     if the permission was not explicitly granted or revoked                     the original security manager will do its work                    */"
// -global
// -rename
// initializes extra data to an empty byte array
// -obsolete
// Fall Through
// -noverwrite
// we look through the source path elements. If the element is a dir // we look for the file. If it is a zip, we look for the zip entry. // This isn't normal for source paths but we get it for free
/* null */
/* local file header signature     */
// set user-defined properties
// set Java built-in properties separately, // b/c we won't inherit them.
// -ctime
"/*               If verbosity is MSG_VERBOSE, that mean we are doing               regular logging (backwards as that sounds).  In that               case, we want to print one message about deleting the               top of the directory tree.  Otherwise, the removeDir               method will handle messages for _all_ directories.             */"
/* Methods below all add specific selectors */
// expect the worst
// set all properties from calling project
//now any inner assertions
// -pbranch
//append the ... suffix if not there already
// File[] filesInDir = directory.listFiles();
//convert to lower case in the English locale,
// has been set explicitly
// Strip off drive letters! // REVIEW Would a better check be "(File.separator == '\')"?
// -shared
// class found but restricted name; this is // actually the case we're looking for in JDK 1.3+, // so catch the exception and return
//this is the list of lu
// change this to get the objects from the other reference
// help the gc
// may be null if a system property has been added // after the project instance has been initialized
// we have a file. create a stream for it
// remove duplicate properties - last property wins // Needed for backward compatibility
// Set up a SOSCheckout task
//ignored
// Set up a sosCheckout task
// no-op
// cycle through given args
// basedir of subant/subant-test2/subant.xml is .. // therefore we expect here the subant subdirectory
// Now add all references that are not defined in the // subproject, if inheritRefs is true
// not Clonable
// wait 1 second extra to allow for java to start ... // this time was OK on a Win NT machine and on nagoya
// set the flag to display the targets and quit
// keep track of what operating systems are supported here.
// basedir and ant.file get special treatment in execute()
// when the test is started by the build.xml of ant // if the property tests.and.ant.share.classloader is not set in the build.xml // a sysproperty with name tests.and.ant.share.classloader and value // ${tests.and.ant.share.classloader} will be set // we are trying to catch this here.
// don't re-set user properties, avoid the warning message
//--- NULL JDBC driver just for simple test since there are no db driver // available as a default in Ant :)
// default directory to the project's base directory
// eat up next arg if present, default to build.xml
// private static final int BG_BLACK = 40; // private static final int BG_RED = 41; // private static final int BG_GREEN = 42; // private static final int BG_YELLOW = 44; // private static final int BG_BLUE = 44; // private static final int BG_MAGENTA = 45; // private static final int BG_CYAN = 46; // private static final int BG_WHITE = 47;
// no user property
// assume the worst
// file doesn't exist -> property 'test' == null
"/*     * Get the (sub)-Project instance currently in use.     * @return Project     * @since Ant 1.7     */"
//         expectBuildExceptionContaining("testNoTld", //                 "Jasper found an error in a file", //                 "Java returned: 9");
// create a data input stream from the jar // input stream
// this iterator is exhausted. Can we pop one off the stack
// if buildFile was not specified on the command line,
// check to make sure that the given dir isn't a symlink // the comparison of absolute path and canonical path // catches this
// \ doesn't have a special meaning anymore - this is different from // what the Unix sh does but causes a lot of problems on DOS // based platforms otherwise
// now recover all the dependencies collected and add to the list.
// pick up the last round of dependencies that were determined
//validation logic
// right we have a good looking class file.
/* int minorVersion = */
// but -find then search for it
"/*                        If the argument is not a String or Location,                        and if there                        is an overloaded form of this method already defined,                        we just override that with the new one.                        This mechanism does not guarantee any specific order                        in which the methods will be selected: so any code                        that depends on the order in which ""set"" methods have                        been defined, is not guaranteed to be selected in any                        particular order.                    */"
//this isnt strictly needed, but by being fussy now, //we can change implementation details later
/* int majorVersion = */
/* int accessFlags = */
"/* Interestingly enough, we get to here when a user                 * uses -Dname=value. However, in some cases, the OS                 * goes ahead and parses this out to args                 *   {""-Dname"", ""value""}                 * so instead of parsing on ""="", we just make the ""-D""                 * characters go away and skip one argument forward.                 *                 * I don't know how to predict when the JDK is going                 * to help or not, so we simply look for the equals sign.                 */"
//special case single jar handling with signedjar attribute set
// read the dependency cache from the disk
// not cached - so need to read directly from the class file
// convert the replyTo string into a vector of emailaddresses
// make sure buildfile exists
// should always be the case...
// single jar processing
// -------------------- Optional methods   -------------------- // You can override those methods if you want to optimize or // do advanced things (like support a special syntax). // The methods do not chain - you should use them when embedding ant // (by replacing the main helper)
// This class depends on each class in the dependency list. For each // one of those, add this class into their affected classes list
// The captureToSummary test writes to stdout and stderr, good for // verifying that the TestListener support doesn't break anything.
// now determine which jars each class depends upon
// Usually the initialized is set to true. But here it must not. // Because the prepend and append readers have to be instantiated // on runtime //newFilter.setInitialized(true);
//return here.
// Also check for properly formed URIs. Ant formerly recommended using // nonsense URIs such as "file:./foo.xml" in XML includes. You shouldn't // do that (just "foo.xml" is correct) but for compatibility we special-case // things when the path is not absolute, and fall back to the old parsing behavior.
// write the dependency cache to the disk
// -------------------------------------------- // //      Filter classes // // --------------------------------------------
// need to delete the main class
// We just set the prefix for this fileset, and pass it up.
// Set up a VSSGet task
// // Instance //
//set up our mapping policy
// Default the viewpath to basedir if it is not specified
// now check classpath file dependencies
////////////////////////////////////////////////////////////////////// // CONSTRUCTORS / INITIALIZERS
//no mapper? use the identity policy
// Parse the attribute(s) and text of this node, adding // properties for each. // if the "path" attribute is specified, then return the created path // which will be passed to the children of this node.
// break the classLocations into its components.
// Return the Path we added or the ID of this node for // children to reference if needed.  Path objects are // definitely used by child path elements, and ID may be used // for a child text node.
// search the various source path entries
// An arbitrary attribute.
// create a data input stream from the jar input stream
// If we're on windows, then do the comparison ignoring case // and treat the two directory characters the same
// end execute
//in verbose mode we always log stuff
// for NetWare and OS/2, piggy-back on Windows, since in the // validateSetup code, the same assumptions can be made as // with windows - that ; is the path separator
//the simple action is to send the command line in as is
//the Exec OS check is different from Os.isOs(), which //probes for a specific OS. Instead it searches the os field //for the current os.name
// This path should contain the class files for these testcases:
//value and property are mutually exclusive attributes
// Set up a VSSLabel task
//int logLevel = filesetManifestConfig == null ? //    Project.MSG_WARN : Project.MSG_VERBOSE; //log("File " + file //    + " includes a META-INF/MANIFEST.MF which will be ignored. " //    + "To include this file, set filesetManifest to a value other " //    + "than 'skip'.", logLevel);
//determine the destination filename via the mapper
// Check if we can contact the URL
// Throws EjbcException
// If the archive is built for the first time and it is // matched by a resource collection, then it hasn't been // found in check (it hasn't been there) but will be // included now. // // for some strange reason the old code would simply skip // the entry and not fail, do the same now for backwards // compatibility reasons.  Without this, the which4j build // fails in Gump
//we only like simple mappers.
"/*             * Precedence: manifestFile wins over inline manifest,             * over manifests read from the filesets over the original             * manifest.             *             * merge with null argument is a no-op             */"
//add -tsa operations if declared
// filesets are separate from the rest for performance // reasons.  If we use the code for union below, we'll always // scan all filesets, even if we know the target is out of // date after the first test.
// VSS items
//On VMS platform, we need to create a special java options file //containing the arguments and classpath for the java command. //The special file is supported by the "-V" switch on the VMS JVM.
//JAR source is required
// preserveInTarget would find all files we want to keep, // but we need to find all that we want to delete - so the // meaning of all patterns and selectors must be inverted
// The zero index is never present in the constant pool itself so // we add a null entry for it
// If the destination directory didn't already exist, // or was empty, then no previous file removal is necessary!
//start at 1 because element 0 is the executable name
//alias is required for signing
// Similar to a fileset, but doesn't allow dir attribute to be set
//add to the list
//fill in args
// Windows has a 32k limit on total arg size, so // create a temporary file to store all the arguments
//at this point there is one trailing space to remove, if the list is not empty.
// restore the lastModified attribute
// Do nothing if no resources (including nested text)
//we normally compare destination with source
// filesets has been protected so we need to keep that even after // switching to resource collections.  In fact, they will still // get a different treatment form the other resource collections // even in execute since we have some subtle special features like // switching type to "dir" when we encounter a DirSet that would // be more difficult to achieve otherwise.
"/*             * if we get here, in and out have not been specified, we are             * in batch processing mode.             */"
//set source and rebuild options
// need to reset the stream handler to restart // reading of pipes; // go ahead and do it always w/ nested redirectors
//rebuild unless the dest file is newer than the source file
// Since we "look ahead" before adding, there's one last env var.
//mark for a rebuild if the dest file is newer
// Chunk part of previous env var (UNIX env vars can // contain embedded new lines).
//but if no dest is specified, compare source to source
// On OpenVMS Runtime#exec() doesn't support the environment array, // so we only return the new values which then will be set in // the generated DCL script, inheriting the parent process environment
// Mono 1.0's wsdl doesn't deal with absolute paths
// If this TransformOperation has DrawOperation children // then Rotate the first child and return.
//add in any extra files. //this is an error in mono, but we do not warn on it as they may fix that outside //the ant build cycle.
//noop default encoding used
//if, by any means, the destfile and source match,
"/*         * Writes the command into a temporary DCL script and returns the         * corresponding File object.  The script will be deleted on exit.         * @param cmd the command line to execute as an array of strings.         * @param env the environment to set as an array of strings.         * @return the command File.         * @throws IOException if errors are encountered creating the file.         */"
//mark for a rebuild if we are newer
// add the single group arguments // Javadoc 1.2 rules: //   Multiple -group args allowed. //   Each arg includes 3 strings: -group [name] [packagelist]. //   Elements in [packagelist] are colon-delimited. //   An element in [packagelist] may end with the * wildcard.
//conditionally compile
// ensure that parent dir of dest file exists!
// Set up a Timestamp
// for each sourcePath entry, add a directoryset with includes // taken from packagenames attribute and nested package // elements and excludes taken from excludepackages attribute // and nested excludepackage elements
//we check the presence of signatures on lazy signing
// if it's a non source file, copy it if a later date than the // dest // if it's a source file, see if the destination class file // needs to be recreated via compilation
// Errors
// ------------------------------------------------------ //   Helper methods // -----------------------------------------------------
//bail on no references
"/*         * In Ant 1.1, <chmod dir=""foo"" /> means, change the permissions         * of directory foo, not anything inside of it.  This is the case the         * second branch of the if statement below catches for backwards         * compatibility.         */"
//if they are different, the timestamps are used
// For -sourcepath, use the "sourcepath" value if present. // Otherwise default to the "srcdir" value.
//demand create pathlist
// SQL defines "--" as a comment to EOL // and in Oracle it may contain a hint // so we cannot just remove it, instead we must end it
//bail on no references listed
// create intermediary directories - sometimes zip don't add them
// Load the property files specified by -propertyfile
//hand down
//just log this
"/* for historical and performance reasons we have to do               things in a rather complex way.               (1) Move is optimized to move directories if a fileset               has been included completely, therefore FileSets need a               special treatment.  This is also required to support               the failOnError semantice (skip filesets with broken               basedir but handle the remaining collections).               (2) We carry around a few protected methods that work               on basedirs and arrays of names.  To optimize stuff, all               resources with the same basedir get collected in               separate lists and then each list is handled in one go.            */"
//loop through all definitions
// we have started to (over)write dest, but failed. // Try to delete the garbage we'd otherwise leave // behind.
//set up response file options
//not modified so no file download. just return //instead and trace out something so the user //doesn't think that the download happened when it //didn't
// fileutils
// Ignore exception
//if the refs are out of date, force a build.
// we have already started reading this section // this line is the first attribute. set it and then // let the normal read handle the rest
// classpath attributes go into a vector
// Get today's date
// scan source and dest dirs to build up both copy lists and // compile lists //        scanDir(srcDir, destDir);
// ensure that -D properties take precedence
// --- Fields --
"/*             * Many system have been reported to get into trouble with             * long command lines - no, not only Windows ;-).             *             * POSIX seems to define a lower limit of 4k, so use a temporary             * file if the total length of the command line exceeds this limit.             */"
//add the source file
// Setup the apt executable
//now run
// Create an instance of the compiler, redirecting output to // the project log
// Error generated during parsing
// start() would throw IllegalThreadStateException from // ThreadGroup.add if it were destroyed
//forcibly delete the output file in case of trouble
// kjc-1.5A doesn't support -encoding option now. // but it will be supported near the feature.
//then rethrow the exception
// add dest dir to classpath so that previously compiled and // untouched classes are on classpath
// check if the target file exists in the current directory
//On VMS platform, we need to create a special java options file //containing the arguments and classpath for the javac command. //The special file is supported by the "-V" switch on the VMS JVM.
// Parser with specified options can't be built
//must keep for subclass BC, though unused: // CheckStyle:ConstantNameCheck OFF - bc
// I/O error
// Set up a VSSCheckIn task
// Set the prefix for this node to include its tag name.
// there is a bootclasspath stated.  By default, the // includeJavaRuntime is false.  If the user has stated a // bootclasspath and said to include the java runtime, it's on // their head!
// Pass the container to the processing of this node,
// change to parent directory
// The date format is using a - format since 1.12.9 so we have: // 1.12.9-: 'date: YYYY/mm/dd HH:mm:ss;  author: name;' // 1.12.9+: 'date: YYYY-mm-dd HH:mm:ss Z;  author: name'
// now, iterate through children.
// hasCR is still true (for the second one)
// CheckStyle:ConstantNameCheck OFF - bc
// convert from ascii back to native // encoding to convert to/from // Where to find input files // Where to put output files // Extension of output files if different
// -branch
// Specified class is "" -> can not exist
// refresh our file handle
// CheckStyle:MethodNameCheck OFF - bc
// We need character encoding aware printing here. // So, using PrintWriter over OutputStreamWriter instead of PrintStream
// The value of an id attribute of this node.
// entries are of the form: //CVS 1.11 // File module/filename is new; current revision 1.1 //CVS 1.11.9 // File module/filename is new; cvstag_2003_11_03_2  revision 1.1 // or // File module/filename changed from revision 1.4 to 1.6 // or // File module/filename is removed; not included in // release tag SKINLF_12 //CVS 1.11.9 // File testantoine/antoine.bat is removed; TESTANTOINE_1 revision 1.1.1.1 // // get rid of 'File module/"
// CheckStyle:MemberNameCheck OFF - bc
// Set up a VSSCheckOut task
//error if both are empty, or both are set
// set the thread priorities
// we are forced to fork ANTLR since there is a call // to System.exit() and there is nothing we can do // right now to avoid this. :-( (SBa) // I'm not removing this method to keep backward compatibility
// Is there an id attribute?
//The following is data used while processing stdout of CVS command
// Now, iterate through the attributes adding them.
// swallow
"/* ========================================================================    *    * Instance variables.    */"
//we cannot set the priority here.
"/*                     * The main conditional logic -- if the attribute                     * is somehow ""special"" (i.e., it has known                     * semantic meaning) then deal with it                     * appropriately.                     */"
//determine directory: resourceDir if set, //the dir of the destFile if not
//scan for an implicit fileset if there was a srcdir set //or there was no srcDir set but there was no contained classes
// ID has already been found above.
// build the command line from what we got the format // as specified in the CCM.EXE help
//if there is no src dir here, set it
// depending on implementation, XMLReader can yield hips of warning, // only output then if user explicitly asked for it
//get dependencies list.
// If only default is specified and the property previously // existed in the property file, it is unchanged.
// Set up a VSSAdd task
// make sure to close all handles, otherwise the garbage // collector will close them...whenever possible and // Windows may complain about not being able to delete files.
// set user-define properties
// A "path" attribute for a node within a Path object.
//get any included source directories
//add the files to the command
"/*         * pre Ant 1.6 this method used to call getClass().getResource         * while Ant 1.6 will call ClassLoader.getResource().         *         * The difference is that Class.getResource expects a leading         * slash for ""absolute"" resources and will strip it before         * delegating to ClassLoader.getResource - so we now have to         * emulate Class's behavior.         */"
"/*         *  space for more argumentativeness         *  command.addArgument();         *  command.addArgument();         */"
//proxy setup if enabled
// ends with '.' or null
/* Constants used for the "beantype" attribute */
/* Classpath used when the iAS ejbc is called */
/* Options passed to the iAS ejbc */
// this is guaranteed by FileUtils#createTempFile
// Set up a VSSCp task
// Count the number of empty strings
// make sure that we have a target to execute
// Core class that exists in system classpath is ignored, but found in specified classpath
/* iAS installation directory (used if ejbc isn't on user's PATH) */
/* Parser and handler used to process both EJB descriptor files */
/* If the -classpath flag isn't specified, use the system classpath */
// first off, make sure that we've got a command and a vssdir and a label ...
/* Construct a SAXParser used to process the descriptors */
// Add the default listener
// SAXException or ParserConfigurationException may be thrown
/* Build and populate an instance of the ejbc utility */
// A node identifying a new path
/* Execute the ejbc utility -- stubs/skeletons are rebuilt, if needed */
// // The ResourceLocation may specify a relative url for its // location attribute.  This is resolved using the appropriate // base. //
// find the target with the longest name
// For the text node, add a property.
// Add one for the "\"
// If the containing object was a String, then use it as the ID.
/* Concatenate all of the command line arguments into a single String */
/* If an iAS home directory is specified, prepend it to the commmand */
// build the command line from what we got. the format is // cleartool rmtype [options...] type-selector... // as specified in the CLEARTOOL help
// split the targets in top-level and sub-targets depending // on the presence of a description
// Never include the "refid" attribute as part of the // attribute name.
/* OPTIONAL COMMAND LINE PARAMETERS */
/* No beantype flag is needed for an entity bean */
// Otherwise, return it appended unless property to hide it is set.
/* REQUIRED COMMAND LINE PARAMETERS */
/* Convert the List into an Array and return it */
// ran Ant tests with -ea and this would fail spuriously
// shouldn't need to check but...
// use the directory containing the target as the output directory
/* Expose members for extensibility */
/* Inner classes follow */
// End of EjbcException inner class
// delegate this way around to support subclasses that // overwrite getFile
// Tracks current element // Tracks current text data // "session" or "entity"
/* Search the resource Map and (if not found) file Map */
// now, start printing the targets and their descriptions
//we arent fully defined yet. this is an error unless //we are in an antlib, in which case the resource name is determined //automatically. //NB: URIs in the ant core package will be "" at this point.
/* A new element has started, so reset the text being captured */
// worst case. look for a public String constructor and use it // also supports new Whatever(Project, String) as for Path or Reference // This is used (deliberately) for all primitives/wrappers other than // char and boolean
// build the command line from what we got the format is // cleartool update [options...] [viewpath ...] // as specified in the CLEARTOOL.EXE help
// build the command line from what we got. the format is // cleartool mklbtype [options...] type-selector... // as specified in the CLEARTOOL help
// type-name@vob
// we get the root classes and build up a set of // classes upon which they depend
// skip version info and general purpose byte
/* int superClassIndex = */
// try to read the dependency info from the map if it is // not out of date
// depFile exists and is newer than the class file // need to get dependency list from the map.
//convert the URI to a resource
// End of EjbcHandler inner class
// we need to add this jar to the list for this class.
/* Check that the specified instance variables are valid */
"/*         * Use the Runtime object to execute an external command.  Use the         * RedirectOutput inner class to direct the standard and error output         * from the command to the JRE's standard output         */"
// now to the expected failures
// got a bit annoyed that I couldn't find a pad function
//handle new style full paths to an antlib, in which //all but the forward slashes are allowed.
/* Check that the EJB "source" classes all exist */
//downgrade warnings on RMI stublike classes, as they are generated //by rmic, so there is no need to tell the user that their source is //missing.
// if we have no info about the class - it may have been deleted already and we // are using cached info.
// there was no class file. add this class to the list
//if we haven't already named an XML file, it gets antlib.xml
/*<String,String>*/
//convert from a package to a path
// Here if there is an error
// add null entries for any additional slots required.
// iterator through all the files and process them.
// let's be nice with the next generation of developers
// make the spawned process run 4 seconds
"/*         * Two Maps are used to track local DTDs that will be used in case the         * remote copies of these DTDs cannot be accessed.  The key for the Map         * is the DTDs public ID and the value is the local location for the DTD         */"
// catalog1 --> catalog2 --> catalog3 --> catalog1
//always trigger file mode if commands are big enough
// is the zip file in the cache
// without closure we may delete an inner class but not the // top level class which would not trigger a recompile.
//iterate through the ref list & generate an entry for each //or just rely on the fact that the toString operator does this, but //noting that the separator is ';' on windows, ':' on unix
// log at a lower level
// read the constant pool in and resolve it
//but for big operations, we save all the params to a temp file //and set @tmpfile as the command -then we remember to delete the tempfile //afterwards
//now run the command of exe + settings + files
//add those that are set, and a delimiter
// store the token just read for next time
"/*     * This Hashtable maintains a list of EJB class files processed by the ejbc     * utility (both ""source"" class files as well as stubs and skeletons). The     * key for the Hashtable is a String representing the path to the class file     * (relative to the destination directory).  The value for the Hashtable is     * a File object which reference the actual class file.     */"
// Ignore the problem
"/*     * Directory where ""source"" EJB files are stored and where stubs and     * skeletons will also be written.     */"
//trick to evoke "basedir not set" if null:
// catalog2 --> catalog1 --> catalog
// EJB's display name // EJB's home interface name // EJB's remote interface name // EJB's implementation class // EJB's primary key class // or "stateful" or "stateless" // Does this EJB support CMP? // Does this EJB support IIOP? // Does this EJB require failover? // CMP descriptor list
//no sources = nothing to compare; no targets = nothing to delete:
"/*     * Validates URL     */"
/* Check the timestamp on the remote interface */
// Since the descriptor read properly, everything should be o.k.
/* Check the timestamp on the home interface */
//client jar file
// Members
// If an explicit securityPolicy file was specified, it maybe an // absolute path.  Use the project to resolve it.
/* Check the timestamp of the primary key class */
// descriptorName = <path><basename><basenameterminator><remainder> // examples = /org/objectweb/fooAppli/foo/Foo-ejb-jar.xml // examples = /org/objectweb/fooAppli/foo/Foo.xml (JOnAS convention)
//bail out early if there were no files
//now scan the hashtable and add the files
// Have to catch this because of the semantics of calling main()
// List of all stubs & skels // Earliest mod time // Has each been found?
// additionalargs
// ejb jar file
//Public //Private //Family //Assembly //Family and Assembly //Family or Assembly //Private Scope
// class name (search in the classpath provided for the ejbjar element)
"/*             * Loop through each stub/skeleton class that must be generated, and             * determine (if all exist) which file has the most recent timestamp             */"
// the new value, this needs to be here // because it is required to calculate the next position to // search from at the end of the loop
"/*                 * Add each stub/skeleton class to the list of EJB files.  Note                 * that each class is added even if it doesn't exist now.                 */"
// empty
// If we are a reference, create a Path from the reference
// Lastly create File object for the Jar files. If we are using // a flat destination dir, then we need to redefine baseName!
/* Keep track of the oldest modification timestamp */
// RFC 822 s4.1: //   "Header fields are NOT required to occur in any particular order, //    except that the message body MUST occur AFTER the headers" // (the same section specifies a reccommended order, which we ignore)
// End of EjbInfo inner class
// need to close files and perhaps rename output
// CheckStyle:VisibilityModifier OFF - bc // CheckStyle:ConstantNameCheck OFF - bc
"/*                         * stub is derived from implementation,                         * tie from interface name.                         */"
/* Filenames of the standard EJB descriptor and the iAS-specific descriptor */
// Update with changed Bean class
// this loop runs parallel to the build
// Get the filename of vendor specific descriptor
// now that we have the weblogic descriptor, we parse the file // to find other descriptors needed to deploy the bean. // this could be the weblogic-cmp-rdbms.xml or any other O/R // mapping tool descriptors.
// End of Classname inner class
// Available specification version must be >= required
// Stream to read and redirect to standard output
// are any of the above out of date. // we find the implementation classes and see if they are older than any // of the above or the .ser file itself.
// End of RedirectOutput inner class
/* Value of the display-name element read from the standard EJB descriptor */
"/*         * Parse the classpath into it's individual elements and store the         * results in the ""classpathElements"" instance variable.         */"
"/*     * Filenames of the standard EJB descriptor (which is passed to this class     * from the parent ""ejbjar"" task) and the iAS-specific EJB descriptor     * (whose name is determined by this class).  Both filenames are relative     * to the directory specified by the ""srcdir"" attribute in the ejbjar task.     */"
//can throw the same exception, if there is no this(Project) ctor.
//WARNING: We trim the values of all the attributes because //Some extension declarations are badly defined (ie have spaces //after version or vendorID)
"/*         * If the -d flag isn't specified, use the working directory as the         * destination directory         */"
// Implementation version must be >= required
// check that reference zipfilesets cannot have specific attributes
"/*         * The EJB information is gathered from the standard XML EJB descriptor         * and the iAS-specific XML EJB descriptor using a SAX parser.         */"
// Simplest constructor, uses default encryption algorithm and compression level.
"/*             * If this is a standard EJB 1.1 descriptor, we are looking for one             * set of data, while if this is an iAS-specific descriptor, we're             * looking for different set of data.  Hand the processing off to             * the appropriate method.             */"
//the trick to integrating test output to the formatter, is to //create a special test class that asserts an error //and tell the formatter that it raised.
// we don't have any more args to recognize!
// this comment extract from JUnit Task may also apply here // "in VM is not very nice since it could probably hang the // whole build. IMHO this method should be avoided and it would be best // to remove it in future versions. TBD. (SBa)"
// if it's no other arg, it may be the target
//remove the .class
// keys to optional attributes
// A special parent loader which is not the system class loader:
// check that a reference zipfileset gets the same attributes as the original
// null watchdog means no timeout, you'd better not check with null
//class-BFT
//do nothing
"/*         * Below are getter's and setter's for each of the instance variables.         * Note that (in addition to supporting setters with the same type as         * the instance variable) a setter is provided with takes a String         * argument -- this are provided so the XML document handler can set         * the EJB values using the Strings it parses.         */"
//-- XSLTProcess
// add -file xxxxx to the commandline
// Create an instance of the rmic
//clientname = ejbjarfile+client.jar
// not necessary as JDepend would fail, but why loose // some time?
// end of else
// Self-describing as of JUnit 4 (#38811). But trim "(ClassName)".
// The timestamp of the "newest" class // Timestamp for a given class // File for the remote interface class // File for the home interface class // File for the EJB implementation class // File for the EJB primary key class
// Fully qualified name of the Java class // Name of the package for this class // Name of the class without the package
// ignored.
// if there is a suite method available, then try // to extract the suite from it. If there is an error // here it will be caught below and reported.
// NumberFormatException or ArrayOutOfBondsException could happen here
// ignore it
// make sure it's not a directory (this falls into the ultra // paranoid lets check everything category
// to remove directories, start by the end of the list // the trunk does not let itself be removed before the leaves
// use a system manager that prevents from System.exit()
//Throw exception on errors (except up-to-date) // //When a server is down, the code expects : //Perforce client error: //Connect to server failed; check $P4PORT. //TCP connect to localhost:1666 failed. //connect: localhost:1666: Connection refused //Some forms producing commands (p4 -s change -o) do tag the output //others don't..... //Others mark errors as info, for example edit a file //which is already open for edit..... //Just look for error: - catches most things....
//we mark the file to be deleted on exit. //the alternative would be to cache the filename and delete //after execution finished, which is much better for long-lived runtimes //though spawning complicates things...
// If the element starts with the configured prefix, then // convert the prefix to the configured 'to' value.
// We try to update the status once to give StarTeam // another chance.
// Currently, we deal with only two path formats: Unix and Windows // And Unix is everything that is not Windows
//classpath
// If we find a "file" attribute then act on a file otherwise act on a project
// If we displayed the project, view, item type, or folder, // then show the list of relevant item properties.
// Create a variable dir that contains the name of // the StarTeam folder that is the root folder in this view. // Get the default path to the current view.
/* GenIC options */
// path containing one or more elements
// We want to display the folder the same way you would // enter it on the command line ... so we remove the // View name (which is also the name of the root folder, // and therefore shows up at the start of the path).
// may be altered in validateSetup // may be altered in validateSetup
// Catch everything - some of the above return nulls, // throw exceptions or generally misbehave // in the event of a problem etc
// Path to the SourceOffSite home directory /home/user/.sos
/* other options */
// Special setters for the sub-classes
// Login info is required
// validate our setup
/* GenIC options setter */
"/*             *  There is a bug in JavaSound 0.90 (jdk1.3beta).             *  It prevents correct termination of the VM.             *  So we have to exit ourselves.             */"
// Check if source is a directory
// Get the list of path components in canonical form
// -I- // ignore all errors // -Vd
// JOnAS-specific descriptor deployment
// Apply the path prefix map
// note, it's important to scan the items BEFORE we make the // UnmatchedFileMap because that creates a bunch of NEW // folders and files (unattached to repository) and we // don't want to include those in our traversal.
// Now convert the path and file separator characters from the // current os to the target os.
//SecurityManager can not be installed here for backwards //compatibility reasons (PD). Needs to be loaded prior to //ant class if we are going to implement it. //System.setSecurityManager(new NoExitSecurityManager());
// since filesize keeps on decreasing we have to store the // initial filesize
// security
// JDK usage command line says that -jar must be the first option, as there is // a bug in JDK < 1.4 that forces the jvm type to be specified as the first // option, it is appended here as specified in the docs even though there is // in fact no order.
// Nothing specified -> Fail
// default behavior is to fail on an error // default behavior is to not overwrite // default behavior is make a single link
// note, it's important to scan the items BEFORE we make the // Unmatched file map because that creates a bunch of NEW // folders and files (unattached to repository) and we // don't want to include those in our traversal.
// Note I'm using "!=" to see if we got a new object back from // the apply method.
/////////////////////////////////////////////////////////////// // default values for attributes. ///////////////////////////////////////////////////////////////
// JOnAS-specific DD // true if the JOnAS convention is used for the DD // Directory path of the EJB descriptor // EJB descriptor file name // Filename appearing before name terminator // Filename appearing after the name terminator
// once we find a folder that isn't in the repository, // anything below it can be deleted.
// input file to process by GenIC
// RFC 822 s4.1: "From:" header must be sent // We rely on error checking by the MTA
// Place the result into the specified property, // unless setonempty == false
// build the command line from what we got the format is // ss Checkout VSS items [-G] [-C] [-H] [-I-] [-N] [-O] [-R] [-V] [-Y] [-?] // as specified in the SS.EXE help
// We applied one, so we're done
// Not a .class file or the one we'd generate
// baseNameTerminator not found: the descriptor use the // JOnAS naming convention, ie [Foo.xml,jonas-Foo.xml] and // not [Foo<baseNameTerminator>-ejb-jar.xml, // Foo<baseNameTerminator>-jonas-ejb-jar.xml].
// We have the loader which is being used to load the // CatalogResolver. Can it see the ApacheResolver? The // base resolver will only be able to create the ApacheResolver // if it can see it - doesn't use the context loader.
// Following block contains unrolled code which could be shortened by // coding it in additional loops.
// Determine the separator strings.  The dirsep and pathsep attributes // override the targetOS settings.
// override with pathsep=
// override with dirsep=
"/**     * When using this as a custom selector, this method will be called.     * It translates each parameter into the appropriate setXXX() call.     *     * @param parameters the complete set of parameters for this selector     */"
//At least one constructor is guaranteed to be there, but check anyway.
// Get the value of the <ejb-name> tag.  Only the first occurrence.
// Quick return: directories cannot be signed
"/* now check each Resource in case the child only           lets through files from any children IT may have: */"
/* other options setter */
// write namespace declarations
/* other methods */
// Check if used by attributes
//find the out-of-date targets:
// the method deleteOnExit() do not work because the directory is not empty
// create the generic jar first
//no need to synchronize, as Vector is always synchronized
// ? is there an xml api for this ?
// NotReached
// GenIC call on generic jar
// fall through
// create the real jar
// Extrapolating from: // "NetWare may have a "java" in that directory, but 99% of // the time, you don't want to execute it" -- Jeff Tulley // <JTULLEY@novell.com>
// Only property specified -> Fail
// treat non-matching groups as empty matches
////////////////////////////////////////////////////////////////////// // ATTRIBUTES
// record destdir for later use in getResource
// extract path info
//if it does not, then the file is not up to date.
// check that something which is not a testcase generates no errors // at first even though this is incorrect.
// descriptorName is just a file without path
// Eliminate consecutive slashes after the drive spec:
/* Attributes set by the Ant build file */
// Check to see if it's an inner class 'com.company.Class$Inner'
// Create the zip entry and add it to the jar file
"/*          A 6-byte block header, the value chosen arbitrarily          as 0x314159265359 :-).  A 32 bit value does not really          give a strong enough guarantee that the value will not          appear by chance in the compressed datastream.  Worst-case          probability of this event, for a 900k block, is about          2.0e-3 for 32 bits, 1.0e-5 for 40 bits and 4.0e-8 for 48 bits.          For a compressed file of size 100Gb -- about 100000 blocks --          only a 48-bit marker will do.  NB: normal compression/          decompression do *not* rely on these statistical properties.          They are only important when trying to recover blocks from          damaged files.        */"
// How to handle non-file-Resources? I copy temporarily the // resource to a file and use the file-implementation.
"/*         * Check for the odd case where the terminator and/or filename         * extension aren't found.  These will ensure ""jonas-"" appears at the         * end of the name and before the '.' (if present).         */"
// bsBuffShadow |= 0 << (32 - bsLiveShadow - 1);
// no . found
////////////////////////////////////////////////////////////////////// // ACCESSOR METHODS
// The clean way would be to throw an exception. //throw new IOException("crc error");
// try to find JOnAS specific convention name
//  900021 byte // 3600000 byte // 3600000 byte // ------------ // 8433529 byte // ============
// else get standard baseName
// make sure the cache is cleared.
//Validate mandatory attributes
// Step 2: // Now scan this big bucket so as to synthesise the // sorted order for small buckets [t, ss] for all t != ss.
// jonasroot
"/*                  Complete the big bucket [ss] by quicksorting                  any unsorted small buckets [ss, j].  Hopefully                  previous pointer-scanning phases have already                  completed many of the small buckets [ss, j], so                  we don't have to sort them at all.            */"
// Translate periods into path separators, add .class to the // name, create the File object and add it to the Hashtable.
"/*          Setting up the unzftab entries here is not strictly          necessary, but it does save having to do it later          in a separate pass, and so saves a block's worth of          cache misses.        */"
// Retrive the files to be added to JAR from EJB descriptor
// java policy file
//check that fullpath and prefix are incompatible
// add the types of the parent project
//the property attribute must have access to a property file
// outputdir
//if either of them is missing, they are different
// work around a bug of GenIC 2.5
//Make sure property exists in property file
// All characters in the string are used. Check if only '*'s are // left in the pattern. If so, we succeeded. Otherwise failure.
// classpath
// if we followed the symlink we just made we should // bypass the excludes.
// Check to see if we need a build and start doing the work!
// after loading the cache is up to date with the file
"/* Parse the ejb deployment descriptor.  While it may not             * look like much, we use a SAXParser and an inner class to             * get hold of all the classfile names for the descriptor.             */"
"/**     * Invoked by IntrospectionHelper for <code>setXXX(Path p)</code>     * attribute setters.     * @param p the <code>Project</code> for this path.     * @param path the <code>String</code> path definition.     */"
// try to create the classpath for the correct ORB
//now any assertions are added
// Avoid runtime problem on pre 1.4 when compiling post 1.4
// Creation is done here rather than in isSelected() because some // containers may do a validation pass before running isSelected(), // but we need to check for the existence of the created class.
// keepgenerated
// process pattern between stars. padIdxStart and patIdxEnd point // always to a '*'.
// nocompil
// The EnumeratedAttributes for the three interface implementations. // Name-Classname mapping is done in the configure() method.
// end of finally
// ----- BuildListener interface methods -----
// novalidation
// // -----  Set the special attributes, pattern '*.*'  ----- //
// javac
// use Cache defined via name
// tell the build it is finished
// Get the values and do the comparison
// An AntClassLoader which is supposed to delegate to // the parent and then to the disk path:
// should the following two be switched?  If r1 and r2 refer to the same file, // isn't their content equal regardless of whether that file is a directory?
// Only file specified -> Fail
// -----  additional  -----
// resource doesn't exist -> property 'test' == null
// Because the content is only read the file will not be damaged. I tested // with JPG, ZIP and PDF as binary files.
// try a netware-volume length path, see how it is handled
//log uptodateness of all targets:
// Expecting an exception to be thrown by this call: // IllegalArgumentException: wrong number of Arguments
// // Cannot return a null source, because we have to call // setEntityResolver (see setEntityResolver javadoc comment) //
// javacopts
// Determine the Java version by looking at available classes // java.net.Proxy was introduced in JDK 1.5 // java.lang.CharSequence was introduced in JDK 1.4 // java.lang.StrictMath was introduced in JDK 1.3 // java.lang.ThreadLocal was introduced in JDK 1.2 // java.lang.Void was introduced in JDK 1.1 // Count up version until a NoClassDefFoundError ends the try
// rmicopts
//last character isn't a digit
//look for and print warnings
// fall back to JRE bin directory, also catches JDK 1.0 and 1.1 // where java.home points to the root of the JDK and Mac OS X where // the whole directory layout is different from Sun's
// check that an exception in the constructor is noticed
// now wait until the spawned process is finished
// use the classloader that loaded this class otherwise // it will not be able to run inner classes if this test // is ran in non-forked mode.
// ignore expected
// secpropag
//at this point the paths are set up with lists of files, //and the mapper is ready to map from source dirs to dest files //now we iterate through every JAR giving source and dest names // deal with the paths
// verbose
"/*             * ZipOutputStream.putNextEntry expects the ZipEntry to             * know its size and the CRC sum before you start writing             * the data when using STORED mode - unless it is seekable.             *             * This forces us to process the data twice.             */"
// depending on the implementation the actual RE won't // get instantiated in the constructor.
// we need to search the components of the path to see if we can // find the class we want.
// Reflection problems? Should not happen, debug.
// calling GenIC task
// make sure we are dealing with an absolute path
// The the weblogic cmp deployment descriptor
// magic property
// try to use the compiler specified by build.compiler. // Right now we are just going to allow Jikes
// extra field
// check that reference tarfilesets cannot have specific attributes
//and add any files if also defined
//Object class Changed   update it.
// add an extra slash for filesystems with drive-specifiers
//use fle from original weblogic jar
// build the command line from what we got // the format is: // ss Create VSS items [-C] [-H] [-I-] [-N] [-O] [-S] [-Y] [-?] // as specified in the SS.EXE help
// first off, make sure that we've got a command and a vssdir...
// we need to search the components of the path to see if // we can find the class we want.
// version needed to extract // general purpose bit flag
// Use getShortLabel() so labels longer then 30 char are truncated // and the user is warned
// -V Label an existing file or project version
//make sure m_LocalDir exists, create it if it doesn't
// try a multi-part netware-volume length path w/forward slash, see how it is handled
// do nothing by default
// try and load from this loader if the parent either didn't find // it or wasn't consulted.
// this is the classname to run as well as its arguments. // in case of 'executeJar', the executable is a jar file.
// GenIC task // GenIC class (3 are supported for various // versions
// bootclasspath is "-Xbootclasspath:<classpath>" -> 1 arg
// // If you don't do this, you get all sorts of annoying // warnings about a missing properties file.  However, it // seems to work just fine with default values.  Ultimately, // we should probably include a "CatalogManager.properties" // file in the ant jarfile with some default property // settings.  See CatalogManager.java for more details. //
"/*                  This loop is hammered during decompression,                  hence avoid native method call overhead of                  System.arraycopy for very small ranges to copy.                */"
// Do nothing
// Is the ser file or any of the source files newer then the class files. // firstly find the oldest of the two class files.
"/*     * Regardless of the name of the iAS-specific EJB descriptor file, it will     * written in the completed JAR file as ""ias-ejb-jar.xml"".  This is the     * naming convention implemented by iAS.     */"
// build the list of sources which are out of date with // respect to the target
// this loader was first but it didn't find it - try the parent
// push the current iterator onto the stack and then // iterate through this directory.
// add the generated files to the ejbFiles
// not before the filesystem root and not after it, since root // already contains one
// orb
// can safely use '/' because Windows understands '/' as separator
// get index of parts which are equal
/* utilitary methods */
// different size =>different files
"/*             * Check for the odd case where the terminator and/or filename             * extension aren't found.  These will ensure ""ias-"" appears at the             * end of the name and before the '.' (if present).             */"
// Add the class in dotted notation 'com.company.Class'
// dummy1 --> dummy2 --> dummy3 --> dummy1
// For all Files in this folder, we need to check // if there have been modifications.
"/**     * When using this as a custom selector, this method will be called.     * It translates each parameter into the appropriate setXXX() call.     *     * @param parameters the complete set of parameters for this selector.     */"
// line separators in values and tokens are "\n" // in order to compare with the file contents, replace them // as needed
// this method has severe consequences on performance. We cannot rely // on the super.hashCode() method since super.getName() always return // the empty string in the current implemention (there's no setter) // so it is basically draining the performance of a hashmap lookup
// Create the parser using whatever parser the system dictates
//  262148 byte // ------------ //  333408 byte
// Loop through the files. Each file represents one deployment // descriptor, and hence one bean in our model.
/* compressed size                 */
// process the deployment descriptor in each tool
//-- Methods ---------------------------------------------------------------
// end of execute()
// read in the descriptor. Under weblogic, the descriptor is a weblogic // specific subclass which has references to the implementation classes. // These classes must, therefore, be in the classpath when the deployment // descriptor is loaded from the .ser file
/* last mod file time              */
/* external file attributes        */
// resolve relative to project basedir
/* number of the disk with the     */
// Get the filename into a String object
// empty path return empty string
// no errors so far
// swallow, throw the original exception instead
// Then the toplink deployment descriptor
// Setup a naming standard here?.
//do not use a FileResource b/c it pulls File info from the filesystem:
// resource does exist -> property 'test' == 'true'
// try a netware-volume length path w/forward slash, see how it is handled
// // We didn't match a ResourceLocation, but since we // only support PUBLIC and URI entry types internally, // it is still possible that there is another entry in // an external catalog that will match.  We call // Apache resolver's resolveEntity method to cover // this possibility. //
//preserve order-encountered using a list; enforce set logic manually:
// plain impossible
// get all the files in the descriptor directory
//log security exceptions and continue; it aint that //important and may be quite common running Ant embedded.
// If we still can't find it, complain
// tt.length should always be >= length, but theoretically // it can happen, if the compressor mixed small and large // blocks.  Normally only the last block will be smaller // than others.
// deprecated, but email is byte-oriented
// We must check if the process was not stopped // before being here
// // NOTE // We have fit EOF, and the block is not full! // // This is a broken archive. It does not follow the standard // blocking algorithm. However, because we are generous, and // it requires little effort, we will simply ignore the error // and continue as if the entire block were read. This does // not appear to break anything upstream. We used to return // false in this case. // // Thanks to 'Yohann.Roussel@alcatel.fr' for this fix. //
// OK, properties file may be absolute
// do we need to regenerate the file
// write 8-bit
// make next blocks readable without error // (repair feature, not yet documented, not tested)
// Delegate to the parent:
// // inlined: bsW(len_selCtr[sfmap_i] & 0xff, //              code_selCtr[sfmap_i]); //
// the process is not terminated, if this is really // a timeout and not a manual stop then kill it.
// // -----  Set default values  ----- //
// there was an exception - run with no exit to get proper error
// nothing specified - use default
////////////////////////////////////////////////////////////////////// // CORE / MAIN BODY
// END class ManifestClassPathTest
// Check for bsf first then javax // This version does not check if the scriptManager // supports the language.
// ClassLoader.this.parent is already delegated to from // ClassLoader.getResources, no need:
// get the recorder entry
// I assume that starting this takes less than TIME_OUT/2 ms...
//File other then class changed   rebuild
// create the -generic.jar, if required
//create the command to run Java, including user specified options
//Cycle Through generic and make sure its in websphere
// // Get Method instances for each of the methods we need to // call on the resolverImpl using reflection.  We can't // call them directly, because they require on the // xml-commons resolver library which may not be available // in the classpath. //
// // Use the passed in base in preference to the base // from matchingEntry, which is either null or the // directory in which the external catalog file from // which it was obtained is located.  We make a copy // so matchingEntry's original base is untouched. // // This is the standard behavior as per my reading of // the JAXP and XML Catalog specs.  CKS 11/7/2002 //
// This available optional package satisfies the requirements
// build the command line from what we got the format is // ss Add VSS items [-B] [-C] [-D-] [-H] [-I-] [-K] [-N] [-O] [-R] [-W] [-Y] [-?] // as specified in the SS.EXE help
//add it to list of files in jar
// Because of the way I create the full target path, there // must be NO slash at the end of targetFolder and folderName // However, if the slash or backslash is the only character, leave it alone
// set the values on the recorder
// Connect to the StarTeam server, and log on.
// ignore path elements which are not valid relative to the // project
// okay we have a copy of the child, now the child becomes the parent // and we are iterating recursively over its children.
//getProject().log("listing files in directory " + directory, Project.MSG_DEBUG);
//Load default locale bundle files //using default file encoding scheme.
// See wrapListener for reason:
// Normal case.
// Quick return - no output do nothing.
////////////////////////////////////////////////////////////////////// // INNER CLASSES
//If we get here, it could be because we are trying to put a //directory entry that already exists. //For example, we're trying to write "com", but a previous //entry from another mergefile was called "com". //In that case, just ignore the error and go on to the //next entry.
// If it's a primitive wrapper then we shouldn't try and put // it into the jar, so ignore it.
"/*          First, some notes.          On MRJ 2.2.2, getting the size, compressed size, and CRC32 from the          ZipInputStream does not work for compressed (deflated) files.  Those calls return -1.          For uncompressed (stored) files, those calls do work.          However, using ZipFile.getEntries() works for both compressed and          uncompressed files.          Now, from some simple testing I did, it seems that the value of CRC-32 is          independent of the compression setting. So, it should be easy to pass this          information on to the output entry.        */"
// create a recorder entry
// Weblogic will throw an error if the deployment descriptor does // not match the class files.
// create the output .jar, if required
//if all resource files associated with this bundle //have been scanned for and still not able to //find a single resrouce file, throw exception
"/*         * For the GenericDeploymentTool, do nothing.  Vendor specific         * subclasses should throw a BuildException if the configuration is         * invalid for their server.         */"
// we found a starttoken, is there an endtoken following? // start at token+tokenlength because start and end // token may be indentical
//classpath //add at the end of the classpath //the system classpath in order to find the tools.jar file
// Create the file input stream, and buffer everything over // to the jar output stream
"/* Check the timestamp on the EJB implementation class.             *             * Note that if ONLY the implementation class has changed, it's not             * necessary to rebuild the EJB stubs and skeletons.  For this             * reason, we ensure the file exists (using lastModified above), but             * we DON'T compare it's timestamp with the timestamps of the home             * and remote interfaces (because it's irrelevant in determining if             * ejbc must be run)             */"
// class doesn't exist -> property 'test' == null
// Inverted.
// Read the checksum from disk.
// Close up the file input stream for the class file
// register any DTDs supplied by the user
// A separate directory was explicitly declared
// none to register for generic
// give it some time to display
// constructs the "-url <url> -debug <action> <password>" portion // of the commmand line
/////////////////////////////////////////////////////////////////////////// // // Set/get methods // ///////////////////////////////////////////////////////////////////////////
//we create a fileset with the source file. //this lets us combine our logic for handling output directories, //mapping etc.
// Add any support classes specified in the build file
// if input files are specified, inputString and inputStream are ignored; // classes that work with redirector attributes can enforce // whatever warnings are needed
// already defined
// Empty statement
// // Override the logging of output in order to filter out Generating // messages.  Generating messages are set to a priority of VERBOSE // unless they appear after what could be an informational message. //
// Determine the JAR filename (without filename extension)
// Locate the auxiliary script
// default to the global setting and then see // if this class belongs to a package which has been // designated to use a specific loader first // (this one or the parent one)
//************************************************************************ //  protected and private methods //************************************************************************
// load command line with optional attributes
// Build the command
// First the regular deployment descriptor
// preserve permissions
// Ignore and keep trying
//can either be a property name string or a file
// override permissions if set explicitly
// now the vendor specific files, if any
// Create the directory, as it might not exist.
// add any dependent files
// Calculate the total checksum // Convert the keys (source files) into a sorted array.
// must not use getEntry as "well behaving" applications // must accept the manifest in any capitalization
// define the package now
// END static class TemplateElement
// file is on wrong format, swallow
// Log that we are going to build...
// If we're in this finally clause because of an // exception, we don't really care if there's an // exception when closing the stream. E.g. if it // throws "ZIP file must have at least one entry", // because an exception happened before we added // any files, then we must swallow this // exception. Otherwise, the error that's reported // will be the close() error, which is not the // real cause of the problem.
//private CommandlineJava commandline = new CommandlineJava();
// Works like clone() but doesn't show up in the Javadocs
// if there is an error/failure and that it should halt, stop // everything otherwise just log a statement
// don't have to check for public, since // getConstructor finds public constructors only.
// Use helper method to write the jarfile
// 'reasonable' default, if the component is used without // a Project ( for example as a standalone Bean ). // Most ant components can be used this way.
// try to be smart, not to be fooled by a weird directory name
// create a new Vector to avoid ConcurrentModificationExc when // the listeners get added/removed while we are in fire
// Log that the file is up to date...
// Ignore - we are interested only in the side // effect - that of getting the static initializers // invoked.  As we do not want to call a valid // constructor to get this side effect, an // attempt is made to call a hopefully // invalid constructor - come on, nobody // would have a constructor that takes in // 256 String arguments ;-) // (In fact, they can't - according to JVM spec // section 4.10, the number of method parameters is limited // to 255 by the definition of a method descriptor. // Constructors count as methods here.)
// add in support classes if any
// ioe.printStackTrace();
// Work out what the base name is
// nothing to add for generic tool.
// Note: could cause overlaps in case ClassLoader.this.parent has matches.
"/*                            Ignore method m, as there is an overloaded                            form of this method that takes in a                            non-string argument, which gains higher                            priority.                        */"
// clean the addedfiles set
// If you felt daring, you could cache the basedir absolute path
// Create the streams necessary to write the jarfile
// following could be done in a loop, but // unrolled it for performance:
// class does exist -> property 'test' == 'true'
// dummy1 --> dummy2 --> dummy3 (with Path "/a")
//get and clean up innerclass name
"/*          In the various block-sized structures, live data runs          from 0 to last+NUM_OVERSHOOT_BYTES inclusive.  First,          set up the overshoot area for block.        */"
// See if there are any inner classes for this class and add them in if there are
// Loop through all the class files found and add them to the jar
//assertions take up space too
"/*                  Calculate the cost of this group as coded                  by each of the coding tables.                */"
// link the file
// JL: comment extracted from JUnitTask (and slightly modified)
"/*              Recompute the tables based on the accumulated frequencies.            */"
// dummy1 --> dummy2 --> dummy3 // (which has the Project's basedir as root).
// ignored
// {tasks, types}
// having a space between the file and its path causes commandline // to add quotes around the argument thus making JDepend not taking // it into account. Thus we split it in two
"/*     * Actually performs the merging of f into the output.     * f should be a zip or jar file.     */"
// add the parsed namespaces of the parent project
//Weblogic jspc does not seem to work unless u explicitly set this... // Does not take the classpath from the env.... // Am i missing something about the Java task??
// should be the default, as it integrates better in ant.
//trim the META_INF\ off of the file name
// build the command line from what we got the format is // cleartool checkout [options...] [viewpath ...] // as specified in the CLEARTOOL.EXE help
// Specified property-name is "" -> true
"/*     * Used when sorting.  If too many long comparisons     * happen, we stop sorting, randomise the block     * slightly, and try again.     */"
// Close the output stream.
// end of writeJar
// only generate a new ClassLoader if we have a classpath
// simple test to ensure that the caching does work...
// register all the known DTDs
// File is Comparable, so sorting is trivial
// try to determine it from publicId
//Ignore manifest entries.  They're bound to cause conflicts between //files that are being merged.  User should supply their own //manifest file when doing the merge.
// BSF uses a hashtable to store values // so cannot declareBean with a null value // So need to remove any bean of this name as // that bean should not be visible
// see if the file is in fact a .class file, and determine its actual name.
// need to create a generic jar first.
// Loop over the checksums and generate a total hash.
// relative offset of LFH
// Only go forward if the generic and the weblogic file both exist
//open jar files
// Set up a VSSCreate task
// dummy1 --> dummy2 --> dummy3 // (which holds patterns "include" and "exclude")
"/* Write `magic' bytes h indicating file-format == huffmanised,           followed by a digit indicating blockSize100k.        */"
// Add the digest for the file content
//get the list of generic jar entries
// catalog <--> catalog
//get the list of weblogic jar entries
// Add the file path
//Cycle Through generic and make sure its in weblogic
// File name/path match
// Check files see if same
"/*     * A convenience method that several other methods might call.     */"
//File are different see if its an object or an interface
//Interface changed   rebuild jar.
// is it the manifest. If so ignore it
// override allowed on <available>
// check that a reference tarfileset gets the same attributes as the original
// if we haven't got the manifest yet, attempt to // get it now and have manifest be the final merge
// time to write the manifest
// a file doesnt exist rebuild
//Copy files from old weblogic jar
// Use the entry from the generic jar
// encoding must be UTF8 as specified in the specs.
// version-info blankline
// if the implementation classes don;t exist regenerate
"/*     * A method that does the work on a given entry in a mergefile.     * The big deal is to set the right parameters in the ZipEntry     * on the output stream.     */"
// any problems - just regenerate
// was expected
// header newline
// create a Java task to do the rebuild
//must have same validity; then if they are valid they must also be the same:
// we add this to our group of fileset manifests
// Hide warning also as it makes no sense since // the filesetmanifest attribute itself has been // hidden
// need to handle manifest as a special check
// Specified file is "" -> invalid files do not exist
// Specified file is "" actually a directory, so it should pass
// Was expected, test passes
// if it doesn't exist, it will get created anyway, don't // bother with any up-to-date checks.
//running under an IDE that doesn't set ANT_HOME
//success: proceed with more steps
// no existing archive
// run with no exit for better reporting
// Ignore close exception
// we want to save this info if we are going to make another pass
/* Add CMP descriptors to the list of EJB files */
/* Only calculate the descriptor name once */
// couldn't find it - must be on path
// Directory path of the EJB descriptor // Filename appearing before name terminator // Filename appearing after the name terminator
/* Find the end of the standard descriptor's relative path */
// only the first build exception is reported
//no more $ signs found //if there is any tail to the file, append it
/* Check to see if the standard name is used (there's no basename) */
//choose the right vendor DD
// ejb jar file to verify
//debug ?
//set the classpath
//end class
// ignore event
//list file
//no TIE classes
//root dir
//compiling order
//add the home class
//build the home classes list.
//remove .class extension
//add the gen files to the collection
//        assertEquals("with classpath", "java", s[0]);
// Get the Extensions document
//Weblogic.jspc calls System.exit() ... have to fork // Therefore, takes loads of time // Can pass directories at a time (*.jsp) but easily runs out of // memory on hefty dirs (even on  a Sun)
// We attempt to put in the MAP and Schema files of CMP beans
// Add the Map file
// We first run a DFS based sort using each root as a starting node. // This creates the minimum sequence of Targets to the root node(s). // We then do a sort on any remaining unVISITED targets. // This is unnecessary for doing our build, but it catches // circular dependencies or missing Targets on the entire // dependency tree, not just on the Targets that depend on the // build Target.
// set default value, can be changed by the user
// Theres nothing else to see here...keep moving sonny
// Set the options
// Set the JvmArgs
// Set the Environment variable
"/*     * returns non null IBM JDK 1.3 Linux     */"
// only the second iteration would pass because of PR 27218
//too bad
// compile the source files
//add path URLs
// -------------------- Default implementation  -------------------- // Methods used to support the default behavior and provide backward // compatibility. Some will be deprecated, you should avoid calling them.
// namespace that does not contain antlib
// We have to compare the decompressed content instead:
//if we are a webapp, hand off to the compiler, which had better handle it
// Specified dir is "" -> this is the current directory and should // always exist
// Already processed
// scan source directories and dest directory to build up both copy // lists and compile lists
// If the first char is not a start of Java identifier or is _ // prepend a '_'.
// name newline
// for all other possibilities
//mix element types
//there to stop error messages being "null"
// longest match comes first
// register all the DTDs, both the ones that are known and // any supplied by the user
// META-INF would be skipped anyway, avoid index for // manifest-only jars.
// Set the working directory
// Set the Java class name
// 2nd run..
// Specified dir is "../this_dir_should_never_exist" -> null
//implicit composite
//if this is left out, bad things happen. like all build files break //on the first element encountered.
// a file, not in the root // since the jar may be one without directory // entries, add the parent dir of this file as // well.
// create the "undeployed" output .jar, if required
// Only go forward if the generic and the websphere file both exist
/*protected*/
//get the list of websphere jar entries
// File name/path match // Check files see if same
// a fishing expedition :- ignore errors if antlib not present
// if the target file is not there, then it can't be up-to-date
// a file doesn't exist rebuild
//Copy files from old websphere jar
// append the err and output streams to the log
// -------------------- Property parsing  -------------------- // Moved from ProjectHelper. You can override the static method - // this is used for backward compatibility (for code that calls // the parse method in ProjectHelper).
// if the source file isn't there, throw an exception
//use fle from original websphere jar
// Specification Name must match
//class of problem
// by default, messages are always displayed
// Implementation Vendor ID must match
// we must keep two lists since other classes may modify the // filesets Vector (it is package private) without us noticing
//look up the name
// add the main fileset to the list of filesets to process.
//Reset list of sections
// must be plain, ensured by TypeAttribute
// Extension Name must match
// check if tar is out of date with respect to each // fileset
//Add all the dependency data to manifest for dependencies
// The children are added to after this cloning
// Invalid type specified
//we are defined, so it is an instantiation problem
// warn or GNU
// A project helper may process multiple files. We'll keep track // of them - to avoid loops and to allow caching. The caching will // probably accelerate things like <antCall>. // The key is the absolute file, the value is a processed tree. // Since the tree is composed of UE and RC - it can be reused ! // protected Hashtable processedFiles=new Hashtable();
// can be null if an error occurred in setUp
// Output properties
// '/' is appended for compatibility with the zip task.
//start with instantiating the class.
// we would end up adding "" to the archive
//Add all the dependency data to manifest for "optional" //dependencies
//add in something like //"Extension-List: javahelp java3d"
//here we successfully loaded the class or failed.
//all methods static
"/*     * Gets the destination file     */"
//So long as the line isn't empty and isn't a comment...
//hey, there is nothing wrong with us
//Legal Key-Value separators are :, = and white space.
//Only if we do have a key is there going to be a value
//Handle line continuations, if any
//Has key already been loaded into resourceMap?
// // These shenanigans are necessary b/c Norm Walsh's resolver // has a different idea of how file URLs are created on windoze // ie file://c:/foo instead of file:///c:/foo //
// the driver must still be cached.
// Core class that exists in system classpath is ignored
// a --> b --> c --- def //               \-- ghi
/*<Thread,Task>*/
//Make sure parent dirs exist, else, create them.
//Check to see if dest file has to be recreated
// reflect these into the target
// is there a startToken // and there is still stuff following the startToken
// grab the token
/*<ThreadGroup,Task>*/
// If there is a white space or = or :, then // it isn't to be treated as a valid key.
// find the replace string
// generate the new line
// forceLoadClass is not convenient here since it would not // properly deal with inner classes of these classes.
// execute the test and get the return code
// set start position for next search
// If the listeners already has this listener, do nothing
// only override permissions if set explicitly
// find next starttoken
// deal with specified srcDir
// deal with the filesets
// remove any files that shouldn't be overwritten.
// we need to build the hashtable dynamically
// non-file resources
// check that the password has been set
// check for missing application on deploy & update
// check for missing source on deploy & update
// check for missing application on delete & undeploy
// Core class that exists in system classpath is not ignored with ignoresystemclass="false"
// // Ensure that an external entity resolves as expected Using an // XMLCatalog: // // Transform an XML file that refers to the entity into a text // file, entity is listed in the XMLCatalog pointing to a // different file.  Stuff result into property: val2 //
// sanity check
//extend Comparison; retain for BC only
// actually tests constructor as well as setPath
//when writing to the log, we'll see what's happening:
//try the current classloader
// close the output file if required
/////////////////////////////////////////////////////////////////////////// // // Place vendor specific tool creations here. // ///////////////////////////////////////////////////////////////////////////
//only set if successful to this point:
/////////////////////////////////////////////////////////////////////////// // // Execute method // ///////////////////////////////////////////////////////////////////////////
// throw further
// deal with the resource collections
// convert backslashes to slashes, otherwise jjtree will // put this as comments and this seems to confuse javacc
// deal with filesets in a special way since the task // originally also used the directories and Union won't return // them.
// required attributes
// Make sure we exist
// use this to create file and deal with non-writable files
// start any daemon threads
// look for the driver path...
// Class is found in specified classpath
// // Ensure that an external entity resolves as expected with NO // XMLCatalog involvement: // // Transform an XML file that refers to the entity into a text // file, stuff result into property: val1 //
// Currently visiting this node, so have a cycle
// now run main threads in limited numbers... // start initial batch of threads
// used by jpackage for JavaCC 3.x
// check the target is a file
// start the timeout thread
// determine if the generated java file is up-to-date
// Extract file's base-name
// in VM is not very nice since it could probably hang the // whole build. IMHO this method should be avoided and it would be best // to remove it in future versions. TBD. (SBa)
// will cause trouble in JDK 1.1 if omitted
// now find available running slots for the remaining threads
// Replace the file's extension with '.java'
// Change the directory
// continue on outer while loop to get another // available slot
// This default has been good enough until Ant 1.6.3, so stick // with it
// first search for the "old" javah class in 1.4.2 tools.jar
// this actually relies on the first manifest being found on // the classpath (probably rt.jar's) being valid
// if we got here all slots in use, so sleep until // something happens
// assume older than 1.4.2 tools.jar
// required attributes // Deprecated! // Use this going forward
// are all threads finished
// optional attributes
// who would interrupt me at a time like this?
// now did any of the threads throw an exception
// // Ensure that an external entity resolves as expected Using an // XMLCatalog: // // Transform an XML file that contains a reference to a _second_ XML file // via the document() function.  The _second_ XML file refers to an entity. // The entity is listed in the XMLCatalog pointing to a different file. // Stuff result into the property: val4 //
// return a bogus number
// Should be safe to parse
// sanity check ourselves, if we've been asked to build nothing // then we should complain
// Check name is "antlib"
//include locally for screening purposes
// The following will be used as types and tasks
// Sort and run the dependency tree. // Sorting checks if all the targets (and dependencies) // exist, and if there is any cycle in the dependency // graph.
// try to find the executable
// now try to resolve against the dir if given
// What's the difference between id and name ?
// no warning, this is not changing anything
// This bit turns <exclude> child tags into patters to ignore
// if not set, auto-create the ClassPath from the project
// This is the new way - use classespath - code is the // same for now
// The intended result URLs:
// JDK 1.4: return Collections.list(e);
//file time checks for java1.2+
// test when file begins with basedir twice
// Check for old id behaviour
// read in all constant pool entries.
// verify this is a valid class file.
/* int version = */
// read the constant pool.
// this one is here because the changes to support ResourceCollections // have broken Magic's JUnitTestTask. // // The task adds a FileSet to a BatchTest instance using the // Java API and without telling the FileSet about its project // instance.  The original code would pass in project on the // call to getDirectoryScanner - which is now hidden deep into // Resources.iterator() and not reachable.
// Inform IH to clear the cache
// read access flags and class index.
// try a multi-part netware-volume length path, see how it is handled
//Be sure everything has been set.
//Do the merge
// check for a static suite method first, even when using // JUnit 4
// Check for JDK 5 first. Will *not* help on JDK 1.4 // if only junit-4.0.jar in CP because in that case // linkage of whole task will already have failed! But // will help if CP has junit-3.8.2.jar:junit-4.0.jar.
//Add this file to the addfiles Vector and add it //later at the top level of the output file.
// Add/overlay system properties on the properties from the Ant project
// share the setup for testing the depend task
// register this as the current task on the current thread.
// jlink output input1 ... inputN
// To maintain compatibility with the command-line version, // we will only add files to be merged.
//Check to see that the file with name "name" exists.
// Test for path relative to project base directory
//META-INF not found in the name of the entry. Go ahead and process it.
// Make sure that
// test for searching parents
//class-MockCache
// ignore this if the object does not have // a set project method or the method // is private/protected.
// mustSearchPath is false, or no PATH or not found - keep our // fingers crossed.
// Quick fail if this is not a valid OS for the command
"/*     * Necessary in the case where you add a entry that     * is not compressed.     */"
//override facility for subclasses to put custom hashtables in
//hand osfamily off to Os class, if set
//It was the duplicate entry.
// this command will be executed only on the specified OS
"/*     * Adds contents of a directory to the output.     */"
"/*     * Gets the name of an entry in the file.  This is the real name     * which for a class is the name of the package with the class     * name appended.     */"
//  =====================  attributes  =====================
// --------------------  Hook management  --------------------
// time of the build in milli seconds
"/*     * Adds a file to the output stream.     */"
//test for and handle a forced process death
//Make sure file exists
//This entry already exists. So, go with the first one.
// --------------------  Methods to override  --------------------
// show the command
//Note, don't need to specify size or crc for compressed files.
// Not strictly necessary but probably desirable. // JUnit 4-specific test GUIs will show just "failures". // But Ant's output shows "failures" vs. "errors". // We would prefer to show "failure" for things that logically are.
//use the systemclasspath as well, to include the ant jar
//Finally set the property
//TODO Test on other versions of weblogic //TODO add more attributes to the task, to take care of all jspc options //TODO Test on Unix
//only test on java1.5+
// test for not searching parents
// If next has handled the property
// Override Task#init
//private String compilerPath; //fully qualified name for the compiler executable
// get all the files in the sourceDirectory
// Instantiate it
// try to get it from the project or keys // Backward compatibility
// Override Task#execute
// apply transformation
// we are going to scan everything anyway
// The destination of the files to copy
// evaluate correctness
// user (CLI) properties take precedence
// The complete list of files to copy
// Copy all the necessary out-of-date files
// -------------------- Getting properties  --------------------
// nope ;-)
// Get rid of all files not listed in the source filesets.
// Output the default excludes
//search for the next instance of $ from the 'prev' position
// Get rid of empty directories on the destination side
// Test here again to avoid method call for non-directories!
// put in the newroots vector the include patterns without // wildcard tokens
// we are already in the right path, so the second parameter // is false
//if we are at the end of the string, we tack on a $ //then move past it
// must match the default value of Ant#inheritAll
// must match the default value of Ant#inheritRefs
// now we need to populate the compiler adapter
// finally, lets execute the compiler!!
// check if dir exists by trying to change into it.
//peek ahead to see if the next char is a property or not //not a property: insert the char as a literal
/*<TargetElement>*/
//demand create vector of filesets
// try a multi-part netware-volume length path with UNIX // separator (this testcase if from an actual bug that was // found, in AvailableTest, which uses PathTokenizer)
// check if one of the builds failed in keep going mode
// make sure that we've got a destdir
//bind to a compiler
//     REVISIT: Defaults to the target name that contains this task if not specified.
// make sure that we've got a srcdir
// if the compiler does its own dependency stuff, we just call it right now
// END class SubAnt
//the remainder of this method is only for compilers that need their dependency work done
//        String srcFileDir=srcFile.getParent();
// adding something to the excludes'
//  =====================  constructors, factories  =====================
// Child elements.
//end inner class
// since we don't mangle extensions like the servlet does, // we need to check for keywords as class names
// If we are sending files, then assume out of date. // If we are getting files, then throw an error
// first char is more restrictive than the rest
// this is the rest
//we are forking here to be sure that if JspC calls //System.exit() it doesn't halt the build
//tomcat4.0 gets the old mangler
//tomcat4.1 gets the new one
// project reference is set in super.setUp()
// acrobatic cast.
// set the destination directory relative from the project if needed.
// If an initial command was configured then send it. // Some FTP servers offer different modes of operation, // E.G. switching between a UNIX file system mode and // a legacy file system.
// This class acts as a custom Ant task also // and uses these variables/methods in that mode
//CVS missing
// init the testclasses path object
// If style dir is not specified we have to retrieve // the stylesheet from the classloader
// If we are here, then the style dir is here and we // should read the stylesheet from the filesystem
// xalan 2
// =======  testcases for the attributes and nested elements of the selector  =====
// xalan xsltc
// jdk 1.5 xsltc
// pre JUnit 3.7
// file does exist -> property 'test' == 'true'
// Empty
// Snapshot of the system properties
//add the timestamp
// Grant extra permissions to read and write the user.* properties and read to the // java.home property
// no-op: not a real business error
// do the actions
//backwards compatibility two $ map to one mode
//and the hostname.
// Revoke permission to write user.home (granted above via user.*), still able to read though. // and the default granted permission to read os.name.
// a TestSuite can contain Tests from multiple classes, // even tests with the same name - disambiguate them.
// Do we send output to the formatters ?
//new behaviour: $X maps to $X for all values of X!='$'
//   Attributes for basetest
//property found, extract its name or bail on a typo
// // Various copy attributes/subelements of <copy> passed thru to <mycopy> //
// getConstants is a static method, no need to // pass in the object
// Try parsing the line into an integer.
// Make sure the dependency is not empty string
// Should work whether or not redirector.inputStream == null:
// test if os match
// set the default values if not specified //@todo should be moved to the test class instead.
"/*         * After changing CommandlineJava to search for the java         * executable, I don't know, how to tests the value returned         * here without using the same logic as applied in the class         * itself.         *         * assertTrue(""no classpath"", ""java"", s[0]);         */"
// exec command on system runtime
// Create a temporary file to pass the test cases to run to // the runner (one test case per line)
// CheckStyle:VisibilityModifier OFF - bc //ToDo: If dealing with default cl need to parse out <enter description here>
// copy input and error to the output stream
// make sure the test will be accepted as a TestCase
// Make sure that depends attribute does not // end in a ,
// starts pumping away the generated output/error
// make sure the test annotation are accepted
// NOTE kirk@radik.com 04-April-2001 -- If you put in the -s, you // have to start running through regular expressions here. Much easier // to just not include the scripting information than to try to add it // and strip it later.
// local copy since LogOutputStream.task is private
// Wait for everything to finish
// dummy output for the framed report // it's all done by extension...
// configure attributes of the object and it's children. If it is // a task container, defer the configuration till the task container // attempts to use the task
//    public Hashtable getProcessedFiles() { //        return processedFiles; //    }
// check its exit value
// conforming to NodeList interface
//do some writing to it
// this should never happen
// The size of buffers to be used
// write the document
// ensure <tstamp>'s new prefix attribute is working
// Check it's a read-only map.
//dont look for much text here as it is vendor and version dependent
// --------------------  Parse method  --------------------
// Identify the class loader we will be using. Ant may be // in a webapp or embedded in a different app
// Attributes.
// Attribute setters.
// Nested element creators.
// treat empty nested text as no text
// First, try the system property
// if binary check if incompatible attributes are used
// Sanity check our inputs.
//----- from now, the methods are all related to DOM tree manipulation
// A JDK1.3 'service' ( like in JAXP ). That will plug a helper // automatically if in CLASSPATH, with the right META-INF/services.
// no need to do anything
// writers do not throw exceptions, so check for them.
// create the dom tree
// Log using WARN so it displays in 'quiet' mode.
// get all files and add them to the document
// make sure that this is REALLY a testsuite.
// This code is needed by EBCDIC and other strange systems. // It's a fix for bugs reported in xerces
// try next method
// non-existing files are not allowed
//wrong root element name // issue a warning.
// a testcase might have failed and write a zero-length document, // It has already failed, but hey.... mm. just put a warning
// a missing . might imply no package at all. Don't get fooled.
// modify the name attribute and set the package
// don't filter AssertionFailure
// JUnit 4 support:
// Most likely an UnknownElement
// check if there is a suite method
// no appropriate suite method found. We don't report any // error here since it might be perfectly normal.
// -------------------- Static utils, used by most helpers ----------------
// In that case first C.fN will fail with CNFE and we // will avoid UnsupportedClassVersionError.
// OK, fall back to JUnit 3.
// Let's use it!
//when running labelsync, if view elements are in sync, //Perforce produces a line of output //looking like this one : //error: //depot/file2 - label in sync.
// Use JUnit 3.
// id attribute must be set externally
// try to extract a test suite automatically this // will generate warnings if the class is no // suitable Test
// had an exception constructing suite
// a task container - anything could happen - just add the // child to the container
// on Windows and Unix, we can ignore delimiters and still have // enough information to tokenize correctly.
// return the stack unfiltered
"/*     * Constant for the PCLI listversionedfiles recursive i a format ""get"" understands     */"
// Extract the name of the directory from the filename
// To compile on pre-JDK 4 (even though this should always succeed):
// Check to see if the target directory exists.
// needed since project properties are not accessible
/*<UnknownElement>*/
// Create a ZipFileSet for this file, and pass it up.
// pre-3.4
// JUnitTestRunner
//rethrow
//wrap
// implicit else: ignore the ':' since we have either a // UNIX or a relative path
//skip abs. paths not under basedir, if set:
// pre Kaffe 1.1.5
// Logon using specified user name and password.
// Initialize to the size of the first text fragment, with // the hopes that it's the only one.
// If using resources, disallow inline text. This is similar to // using GNU 'cat' with file arguments -- stdin is simply // ignored.
/*package*/
//by default, we add the file.
// only scan directories that can include matched files or // directories
//file length checks rely on touch generating a zero byte file
// Rats. // should not happen
//a second web.xml file, so skip it
// otherwise ExecuteJava has thrown an exception
// No includes supplied, so set it to 'matches all'
//check to see if we warn or not
//no added file, yet
// always start from the current ftp working dir
// construct it
// cool case, //we do not need to scan all the subdirs in the relative path
//this should not happen, except if parent has been deleted by another process
//and remember that we did
// hit a hidden file assume not a symlink
// will be caught and redirected to Ant's logging system
// getRelativePath also finds about symlinks
// Add the explicit resource collections to the archive.
//validation
// warn that selectors are not supported
// If we are doing a listing, we need the output stream created now.
// father and child pattern test
//discard most of really big resources
//open up the resource
// get files from filesets
// find first non cached dir
// could not change to it - try to create it
// create a local temporary file
// impossible since *our* processLine doesn't throw an IOException
// see if we should issue a chmod command
// don't have to check for interface, since then // taskClass would be abstract too.
//if we have a RedirectorElement, return a decoy
// ignore this if the class being used as a task does not have // a set location method.
// 0 --> srcIndex
// srcIndex --> targetIndex
// targets are already absolute file names
// put in the newroots map the include patterns without // wildcard tokens
// targetIndex --> end
// do the checks - the buildfile stores the fileset as property
// delegate the deletion of the local temp file to the delete task // because of race conditions occuring on Windows
// For Microsoft's Ftp-Service an Array with length 0 is // returned if configured to return listings in "MS-DOS"-Format
// 0 --> targetIndex
// codes 521, 550 and 553 can be produced by FTP Servers //  to indicate that an attempt to create a directory has //  failed because the directory already exists.
// For a unix ftp server you can set the default mask for all files // created.
// If the action is MK_DIR, then the specified remote // directory is the directory to create.
// in this case we want to find how much time span there is between local // and remote
//socks
//this may be a java1.4 thingy only
// simple one-shot execution
// need nested read/write elements
// Mask, block from being edited, all characters in constants.
// target must be specified
// must be empty according to the Mock* implementations
// contains AbstractFileSet // (both DirSet and FileSet)
//We have to create a unlocked label first
// All three specified but class missing -> null
// Specified resource is "" -> can such a thing exist?
// Specified dir is "../taskdefs" -> should exist since it's the // location of the buildfile used...
// Core class that exists in system classpath is not ignored with default ignoresystemclasses value
// removing something from the defaults
// don't catch the JUnit exceptions
// targetIndex --> srcIndex
// srcIndex --> end
// readable form of parameter kind
// no targetFilePos
// fill in source file names
// If source at EOF and lookAhead is ctrl-z, return EOF (NOT ctrl-z)
//here we'd parse the output from change -o into submit -i //in order to support default change.
/* this is skipEmpty == false */
//Remove any non-numerical chars - should leave the change number
//if there is a new priority, and it is different, change it
// this type of output might happen // Change 18 renamed change 20 and submitted.
//Match "//" for begining of depot filespec
// setup the "Ant project"
//catch permissions denial and keep going
// we need to escape the description in case there are /
//EoF
//-- XSLTLiaison
// CheckStyle:VisibilityModifier OFF - bc //Input //Output //Error // CheckStyle:VisibilityModifier ON
"/* Here we can either revert any unchanged files in a changelist         * or         * any files regardless of whether they have been changed or not         *         *         * The whole process also accepts a p4 filespec         */"
// Write the properties file back out
"/*                     * shouldn't throw out deprecation warnings before we know,                     * the wrong version has been used.                     */"
// addConfigured(Hashtable) should come before addConfigured(Map)
// setup the selector
// if we have an in file and out then process them
//-- make sure destination directory exists...
// Process all the directories marked for styling
// only resource collections, there better be some
// get the cache, so we can check our things
//anything else is a classname
// Massage PCLI lvf output transforming '\' to '/' so get command works appropriately
//Read back the label spec from perforce, //Replace Options //Submit back to Perforce
//-- processXML
//sync says "error:" when a file is up-to-date
//sometimes there's "info1:
// Param
//P4 runtime directives
// Perforce task directives
//P4 g-opts and cmd opts (rtfm)
//Setters called by Ant
// check that both arrays have the same size
// the test
//Get default P4 settings from environment - Mark would have done something cool with //introspection here.....:-)
// reset error flags before executing the command
//Check API for these - it's how CVS does it...
// private static final String PCLI_LVF_ARGS = "lvf -z -aw";
// Check workspace exists // Launch PCLI listversionedfiles -z -aw // Capture output // build the command line from what we got the format is
// default pvcs project is "/"
// Create folders in workspace
// add the test classes to its classpath
// plain impossible to get here, maybeConfigure should // have thrown an exception.
// Launch get on output captured from PCLI lvf
// Change these through their GET and SET methods.
// These fields deal with includes and excludes
// Check all of the properties that are required.
// Finished executing the task, null it to allow // GC do its job // If this UE is used again, a new "realthing" will be made
// Search the items on this server.
// Disconnect from the server.
// Tell how many files were checked out.
// Optional; logOn() connects if necessary.
//instance variable to allow cleanup
// let the selector do its checks
// Do the runtime
// We always display the ItemID (OBJECT_ID) and primary descriptor.
//If a working directory was specified then add it to the command line
// UnknownElement always has an associated target
// If failed to process document, must delete target document, // or it will not attempt to process it the second time
// Checking for "\ // or           "/ // or           "X:\...
// if processor wasn't specified, see if TraX is available.  If not, // default it to xalan, depending on which is in the classpath
// For performance reasons, it is important to pre-fetch all the // properties we'll need for all the items we'll be searching.
// extract the algorithm name (and config) from the selectors output
//return elementName;
// If we are here we can set the stylesheet as a // resource
// We'll need this item type's primary descriptor.
// Does this item type have a secondary descriptor? // If so, we'll need it.
// If we are here we cannot set the stylesheet as // a resource, but we can set it as a file. So, // we make an attempt to get it as a file
// Now, build an array of the property names.
// Pre-fetch the item properties and cache them.
// Are the names the same ?
// only 'name' and 'value' exist.
// Now, search for items in the selected folder.
// convert whatever separator char is in starteam to that of the target system.
// a value must be of a given type // say boolean|integer|string that are mostly used.
// If it ends with separator then strip it off
// Return copy so that the caller must call setTab() to change the state // of fixCRLF.
// Change all EOL characters to match the calculated EOL string. If // configured to do so, append a trailing EOL so that the file ends on // a EOL.
// only want to do this the first time
// return the clean value
// Are attributes the same ?
// -- class Attribute
// Process all items in this folder.
// Process all subfolders recursively if recursion is on.
// -- class Factory
// Get descriptors for this item type.
// // Ensure that an external entity resolves as expected with NO // XMLCatalog involvement: // // Transform an XML file that contains a reference to a _second_ XML file // via the document() function.  The _second_ XML file refers to an entity. // Stuff result into the property: val3 //
// VERBOSE MODE ONLY
// Are the sub elements the same ?
// error message strings
// Show folder only if changed.
// Show if the file is locked.
// END VERBOSE ONLY
// initialize test environment (called "bed")
// hidden constructor
//now exit here if the property is already set
// add -command CheckOutFile to the commandline
//create the file
//Use the VM launcher instead of shell launcher on VMS
"/*     * Builds a command launcher for the OS and JVM we are running under.     */"
// Show the primary descriptor. // There should always be one.
// ensure <tstamp> follows the immutability rule
// INVALID extension point
// Set a property on the project to make sure that loading // a property with the same name from an xml file will // *not* change it.
//calendar stuff.
// Try using a JDK 1.3 launcher
// Show the secondary descriptor, if there is one. // Some item types have one, some don't.
// Change the item to be checked out to a StarTeam File.
// Begin SET and GET methods
// Begin filter getters and setters
//this field will hold unnnn right after reading a non latin character //afterwards it will be truncated of one char every call to read
// ----------------------------------------- //  Predefined tokenizers // -----------------------------------------
// Check if need to set the loader
// Now create the scriptRunner
// Windows XP/2000/NT
// find the script repository - it is stored in the project
"/*            // try the context classloader            ClassLoader loader                = Thread.currentThread().getContextClassLoader();            */"
// Configure the selector
// not included, to nothing
// Windows 98/95 - need to use an auxiliary script
// add -command CheckInFile to the commandline
// OpenVMS
// -------------------------------------------- // //      Tokenizer Classes (impls moved to oata.util) // // --------------------------------------------
// Set the location of the implicit target associated with the project tag
// Check if this target is in the current build file
/*<RuntimeConfigurable>*/
// Generic
// add -command CheckInProject to the commandline
// look for a recursive option
// Make sure we do not recurse forever
// Look for a comment
// Just try to use what we got
// soscmd Command options
// soscmd Option flags
/*<String>*/
// add -command GetFile to the commandline
// look for a version attribute
// Configure the object
// add -command GetProject to the commandline
// look for a label option
// make sure localDir exists, create it if it doesn't
// This is the exit status
// Children (this is a shadow of UnknownElement#children)
// Get the path to the soscmd(.exe)
// SOS server address is required
// VSS Info is required
// VSS project is required
// Task included in a target ( including the default one ).
// poly type
// -verbose
// Disable Compression
// Every key identified by the Properties must have been loaded.
// Text
//ATTRIBUTES settable from ant.
// Just try to see how much we got
// Determine if we're running under XP/2000/NT or 98/95
// Windows 98/95
// same logic as on algorithm, no testcases created
// Windows XP/2000/NT/2003
// add -command CheckOutProject to the commandline
// add -command AddLabel to the commandline
// On most systems one could use: /bin/sh -c env
// a label is required
// get the list of files in the dir
// rely on PATH
// set the source to the file at that location
// Empty block
//System.exit(0);
// build successfull!
// Substitute .xml with .properties
// cache must return a stored value
/*AbstractSshMessage*/
// dir does not exist.
// get I/O streams for remote scp
// this indicates an error.
// add the process to the list of those to destroy if the VM exits //
// appears that the next token is not used and it's zero.
// read a content of lfile
// #31928: forcibly kill it before continuing.
// Ignored
// do nothing;
// test the iterator
// remove the process to the list of those to destroy if // the VM exits //
// didn't receive any response
// execute the command
// Get key including "="
// wait for it to finish
// ran out of time
// Nb: using default locale as key is a env name
// completed successfully
// no password, will require passphrase
// Find the key in the current enviroment copy // and remove it.
// skip
// send a content of lfile
// basedir of subant/subant-test1/subant.xml is .. // therefore we expect here the subant/subant-test1 subdirectory
// clear the cache
// further equivalence name of previous logical
// new logical?
// already got this logical from a higher order table
// if a label has been supplied and it is a view label, use it // to configure the view
/* the arguments: */
// swallow if there was an error before so that // original error will be passed up
// must not be a directory
// IllegalAccess, IllegalArgument, ClassCast
// like <exec> // like <exec> // like <exec>
// add the environment as logicals to the DCL script
//log(message, Project.MSG_DEBUG);
// we want this to have a false default, unlike for Checkin.
// Output an empty String
// get the Hashvalues
// if a label has been supplied, use it to configure the view // otherwise use current view
// if a date has been supplied use a view configured to the date.
// otherwise, use this view configured as the tip.
// Now we recursively call this method on all sub folders in this // folder unless recursive attribute is off.
// handle the files so they appear first
// now do it again for the directories so they appear last.
// Assert !=null and equality
// Is the text the same? //   Need to use equals on the string and not //   on the stringbuffer as equals on the string buffer //   does not compare the contents.
// Create the new label and update the repository
// Create an instance of the rmic, redirecting output to // the project log
// Assume that this is an not supported attribute type // thrown for example by a dymanic attribute task // Do nothing
//  =====================  JUnit stuff  =====================
// Use cmd.exe to change to the specified drive and // directory before running the command
// Output 'OUTPUT OF ECHO'
//if-isFile //for
// we are on a dos style system so this path could be a drive // spec. We look at the next token
// Use cmd.exe to change to the specified directory before running // the command
// need to set the project on unknown element
// we know we are on a DOS style platform and the next path // starts with a slash or backslash, so we know this is a // drive spec
//Attempt complete directory renames, if any, first.
// We try to delete the directory created in CopydirTest
// files to move
// prune away any files not belonging to the revision label // this is one ugly API from Starteam SDK
//not yet supported see note in selector
//Is this file still available to be moved?
// PR 31965 says that it can return null
// no root local mapping has been specified.
// implicit target must be first on dependency list
// if this is the last time through the loop then // move will not occur, but that's what we want
// Inspect everything in the root folder and then recursively
// Tell user what he is doing
// ignore ";" and get the next token
// maybe io error?
// set the local folder.
// found a file
// ATTRIBUTES
// create a hashtable to group them by parent directory:
"/*          * @param message         */"
//new File("src/etc/testcases/types/resources/selectors/cache.properties").delete();
// this path could be a drive spec, so look at the next token
// on an io error list() can return null
// else lnk exists, do nothing
// get an Iterator of file objects representing links (canonical):
// task can contain other tasks - no other nested elements possible
// the first hex character if a character needs to be escaped
// Whether *this VM* is 1.4+ (but also check executable != null).
//iterate through the names, get the matching values
// it indeed is a drive spec, get the next bit
// ---------------------------- javadoc2 arguments for default doclet
// add the links arguments
// really "2"
// Miscellaneous typical temporary files
// should be impossible
// is the href a valid URL
// CVS
// ok - just skip
//return
/* BuildListener stuff */
// ensure <condition> follows the immutability rule
// Configure the selector - only defaults are used
// SCCS
/////////////////////////////////////////////////////////////// // INCLUDE-EXCLUDE processing ///////////////////////////////////////////////////////////////
// find the starteam folder specified to be the root of the // operation.  Throw if it can't be found.
// Visual SourceSafe
// Valid extension point
// make sure that the parsing does not break
// fill up a Properties object with link and resource names:
// Subversion
// find the resource of the existing link:
// rename the resource, thus breaking the link:
// delete the (now) broken link:
// return the resource to its original name:
// loop through the supplied file sets:
// load included files as properties files:
// where the name contains <>
// if no basedir and no includes, nothing to do:
// Ignore malformed exception
// we saw some non-ascii character
//skip non-abs. paths if basedir == null:
// firstly check if the tools jar is already in the classpath
// now update the class.path property
// private static final int ATTR_NORMAL = 0; // private static final int ATTR_BRIGHT = 1;
// -GWS or -GWR
//set to empty str if no local path return
// Use the OS launcher so we get environment variables
// where only an address is supplied
//removing base from path yields no change; path not child of base
// createArgument(true) is necessary to make sure -locale // is the first argument (required in 1.3+).
// -L Specify the new label on the command line (instead of being prompted)
// first off, make sure that we've got a command and a vssdir ...
// Ant javadoc task rules for group attribute: //   Args are comma-delimited. //   Each arg is 2 space-delimited strings. //   E.g., group="XSLT_Packages org.apache.xalan.xslt*, //                XPath_Packages org.apache.xalan.xpath*"
/* package-private */
// add the group arguments
// private static final int ATTR_UNDERLINE = 3; // private static final int ATTR_BLINK = 5; // private static final int ATTR_REVERSE = 7; // private static final int ATTR_HIDDEN = 8;
// Javadoc 1.4 parameters
// do the "singleton" initialization
// The tag element is not used as a fileset, // but specifies the tag directly.
// Not 1.4+.
// build the command line from what we got the format is // ss Get VSS items [-G] [-H] [-I-] [-N] [-O] [-R] [-V] [-W] [-Y] [-?] // as specified in the SS.EXE help
// Whether or not an actual update is required - // we don't need to update if the original file doesn't exist
// should get no output at all
// Tests property element, using XML schema properties as an example.
// If using an external file, write the command line options to it
// Javadoc 1.2/1.3 parameters:
// are there any java files in this directory?
// If location of ss.ini is specified we need to set the // environment-variable SSDIR to this value
// We don't need to care for duplicates here, // Path.list does it for us.
// build the command line from what we got the format is // ss Checkin VSS items [-H] [-C] [-I-] [-N] [-O] [-R] [-W] [-Y] [-?] // as specified in the SS.EXE help
//convert a class name into a resource
// ensure <exec> follows the immutability rule
// Valid extension point, more derived than Map above, but *after* it!
//set the property
// line feed
// first off, make sure that we've got a command and a localPath ...
// pre Kaffe 1.1.2
// by default, remove matching empty dirs
// only supported since Kaffe 1.1.2
// don't know how to handle that - a IDL file doesn't // have a corresponding Java source for example.
//handle the many different stub options.
// delete the single file
//default is compatibility
//anything else
// delete the directory
//do nothing with the value? or go -v+stubVersion??
//set the non-null stubOption
//add the files from the default fileset:
// we know that name.endsWith(".class")
// **   full-pathname specified == parent dir of path in list
//patch the redirector to save output to a file
// Combine the build classpath with the system classpath, in an // order determined by the value of build.sysclasspath
//verify special operations
//JAR  is required
// build the command line from what we got the format is // ss CP VSS items [-H] [-I-] [-Y] [-?] // as specified in the SS.EXE help
//for java1.5+, we generate compatible stubs, that is, unless //the caller asked for IDL or IIOP support.
//deal with jdk1.4.2 bug:
// JRMP with simple naming convention
"/*                 * I know, this is not necessary, but I prefer it explicit (SB)                 */"
// no package
// EOL was "\r\n"
// only stub, no tie
//rely on RMIC being on the path
//set up the args
//handle default specially by choosing the sun or kaffe compiler
//no match? ask for the non-lower-cased type
//do the system assertions
// // *****  Second Run  ***** // the second call should get no files, because no content // has changed //
//catch invalidness
//see if it is a package or a class
//packages get a ... prefix
//classes just get the classname
//-- Fields ----------------------------------------------------------------
// don't reposition when we've reached the end // of the stream
// Add all nested elements to our catalog
// // *****  make some files dirty  ***** //
// nonexistent resources could only occur if we already // deleted something from a fileset:
// ignore this if the class being used as a task does not have // a set project method.
//cache
"/* * /    // for test only - ignore tests where we arent work at the moment    public static junit.framework.Test suite() {        junit.framework.TestSuite suite= new junit.framework.TestSuite();        suite.addTest(new ModifiedSelectorTest(""testValidateWrongCache""));        return suite;    }    /* */"
// no check for 1<=kind<=3 - only internal use therefore check it // while development
//Do not process this file
// shadow of the above if the value is altered in execute
// these files are made dirty --> 3+4 with different content
// make sure facade knows about magic properties and fork setting
// deal with the resources
// New behavior for delayed task creation. Description // will be evaluated in Project.getDescription()
// Append the classpath of the nested catalog
// adapt currentelement to the case we've // actually found
// Make a transaction for each resource
// Append the catalog path of the nested catalog
// The Apache resolver is present - Need to check if it can // be seen by the catalog resolver class. Start by getting // the actual loader
// Make a transaction group for the outer command
// load the base class through this loader.
// and find its actual loader
// AccessObject to the test-Ant-environment
// I am the only one so I have to close the reader
// Process all transactions
// // The xml-commons resolver library is not // available, so we can't use it. //
// the following line seems to be necessary on Windows under JDK 1.2
// Catch any statements not followed by ;
// // for classpath lookup we ignore the base directory //
// Check and ignore empty statements
// MockCache doesnt create a file - therefore no cleanup needed
// '<' and '>' are only used if the algorithm has properties
// dreaded backwards compatibility
// call the target for making the files dirty
// get parameters
/*Throw an exception if cvs exited with error. (Iulian)*/
// re-implement legacy behaviour:
// Check if not real cvsroot => set it to null
// Check if not real cvsrsh => set it to null
// // *****  Check the result  ***** //
// Calculate the EOL string per the current config
// Check if not real tag => set it to null
// // Use the passed in base in preference to the base // from matchingEntry, which is either null or the // directory in which the external catalog file from // which it was obtained is located.  We make a copy // so matchingEntry's original base is untouched.  Of // course, if there is no base, no need to make a // copy... // // This is the standard behavior as per my reading of // the JAXP and XML Catalog specs.  CKS 11/7/2002 //
// Parse each catalog listed in nested <catalogpath> elements
// assume (eol == CrLf.LF || eol == CrLf.UNIX)
//-- XMLCatalog
// execute
// Mark all files which should be selected as (T)rue and all others // as (F)alse. Directories are always selected so they always are // (T)rue.
// Add/Remove tabs
// Add missing EOF character
// f2name shouldn't be selected: only timestamp has changed!
// given cache must be empty
//this call should succeed as unless overrides if
// override some of the code so we can test the handling of the // return code only.
//req // req
// scan source directories and dest directory to build up // compile lists
// cleanup the environment
//there is no need to expand properties here as that happens when Transaction.addText is //called; to do so here would be an error.
// We can't do it ourselves as jCVS is GPLed, a third party task // outside of jakarta repositories would be possible though (SB).
/* package-private for now */
// we are chmodding the given directory
// special case in ZIPs, we do not want this thing included
// ask ant to update the properties...
// EOL
// may be altered in validateAttributes
// first check if the archive needs to be scanned again
// spare scanning again and again
// will be removed in validateAttributes
/* cached DirectoryScanner instance for our own Project only */
// SelectorContainer methods
// EOL was "\n"
// make sure we don't have an illegal set of options
// WIN9x uses a bat file for executing commands
//no command? no string
// deal with the single file
// parse with a simple finite state machine
//inherit doc
// RuleBasedCollator not yet supported - see Selector:375 note
// EOL was "\r\r\n"
// deal with the ResourceCollections
//can't have zero-length token
// we have another token, let's parse it.
// Step (1) - beware of the ZipFileSet
// EOL was "\r"
// not a fileset or contains non-file resources
// a not-directory file resource // needs special treatment
// add conditions and more commands as soon as the need arises
// make sure we do not get a NPE
// test that the watchdog ends the process
// to override
// make dirty
// if source is EOF but last character was NOT ctrl-z, return ctrl-z
// do all the copy operations now...
// ==============  testcases for the comparator implementations  ==============
/* ============ ResourceFactory interface ====================== */
// restrict to out-of-date resources
// Return current look-ahead
// clean up again, so this instance can be used a second // time
// reuse the array created by the mapper
// third run
//now patch in all system properties
// is the keystore a file
// must be a URL - just pass as is
// ignore: don't trust anyone
// Gump friendly - don't mess with the core loader if only classpath
// last: don't trust the developer
// newer versions of Kaffe (1.1.1+) won't have this, // but this will be sorted by FileSet anyway.
// just to be sure
// the directories to check
// EOL was "\r\r" - handle as two consecutive "\r" and // "\r"
// Construct a new class loader
// in this case all files from origin map to // the fullPath attribute of the zipfileset at // destination
// JDK 1.2+ seems to set java.home to the JRE directory.
// The param is "parentFirst"
// Just keep the old version as well and let addExisting // sort it out.
// Sun's and Apple's 1.4 have JCE and JSSE in separate jars.
// Instance initializer: Executes just after the super() call in this // class's constructor.
/*public*/
// IBM's 1.4 has rt.jar split into 4 smaller jars and a combined // JCE/JSSE in security.jar.
// Added for MacOS X
//shield it from being closed by a filtering StreamPumper
//remove any null elements
//create the list
// do the checks
// Return copy so that the call must call setEof() to change the state // of fixCRLF
//fill it
//convert to an array
"/*         * Backwards compatibility forces us to repeat the logic of         * getResourcesToAdd(FileSet[], ...) here once again.         */"
// properties are part of the vm options...
//boot classpath
// Return copy so that the call must call setEol() to change the state // of fixCRLF
//main classpath
// cloned system properties
// classpath is "-classpath <classpath>" -> 2 args
// If I'm removing an EOF character, do so first so that the other // filters don't see that character.
// jar execution requires an additional -jar option
/*<? extends EnumeratedAttribute>*/
// Store data into a byte[]
//end nested class
// Add this PropertySet's nested PropertySets' property names.
// If filtering Java source, prevent changes to whitespace in // character and string literals.
// set read-only properties // CheckStyle:VisibilityModifier ON
//make a copy...
// // *****  First Run  ***** // the first call should get all files, because nothing is in // the cache //
// give some values (via property file) to that environment
// // *****  Third Run  ***** // third call should get only those files, which CONTENT changed // (no timestamp changes required!)
// The core loader must be reverse //reverse=true;
// First read in zero bytes
// This allows the core loader to load optional tasks // without delegating
// Are we trying to call the target in which we are defined (or // the build file if this is a top level task)?
// ignore this if the class being referenced does not have // a set project method.
// @note: it is a string and not a file to handle relative/absolute // otherwise a relative file will be resolved based on the current // basedir.
//wait for the StreamPumpers to finish
// Normalize the reference directory (containing the jar)
// Gotta atleast put in the proper spelling :-P
// read in the file
// Now read in the string
// Normalize the current file
// No match, so bail out!
// try to find a MAX_LINE_LENGTH byte section
// continuation line
//DO NOT SET THE -signedjar OPTION if source==dest //unless you like fielding hotspot crash reports
// CheckStyle:VisibilityModifier OFF
//unsigned or non-lazy self signings are always false
// Keep a hashtable of attributes added by this task. // This task is allow to override its own properties // but not other properties.  So we need to keep track // of which properties we've added.
// Make sure that the counts are the same
// the merge file always wins
// Add this PropertySet's property names.
//map the names
// the merge file *always* wins, even for Class-Path
// Create one NameEntry in the appropriate pattern list for each // line in the file.
// Get a FileReader
//replace the last 0s by the chars contained in s
// add in the warnings
//Ignore exception
//-- ResourceLocation
// For each child, pass the object added by // processNode to its children -- in other word, each // object can pass information along to its children.
// This should be the manifest version
// Add base set of permissions
// use Algorithm specified by classname
// ensure <pathconvert> follows the immutability rule
// and a little shorter
// else
// line started with comment
// add it back
// None of the actions revoked, so all allowed.
//default true:
// shouldn't happen - ignore
//default false:
// write everything up to the from
// create a vector and add in the warnings for all the sections
// The regular expression factory
// temporary variable
//off by default
// This is included
//s.addParam(createParam("algorithm.provider","---")); // i don't know any valid
// first and second run
//class-MockProject
// make sure that elapsed time in set via date works
// make sure that elapsed time in ms works
// write the replacement to
//set up logging
//dont do any progress, unless asked
// search again
//set up the URL connection
// If this attribute was added by this task, then // we append this value to the existing value. // We use the setProperty method which will // forcibly override the property if it already exists. // We need to put these properties into the project // when we read them, though (instead of keeping them // outside of the project and batch adding them at the end) // to allow other properties to reference them.
// should be new moon
// write the remaining characters
//- ApacheCatalog
// // Make sure CatalogResolver instantiates ApacheCatalog, // rather than a plain Catalog //
// debug // CatalogManager.getStaticManager().setVerbosity(4);
// Pass in reference to ourselves so we can be called back.
// Use the original casiness of the key
//sorted bag impl. borrowed from commons-collections TreeBag:
//not using the accessor in this case to avoid side effects
/*package-private*/
//new oata.util.ReaderInputStream(new InputStreamReader(
//, encoding), encoding);
//first the easy way, if all children are filesystem-only, return true:
// for NetWare and OS/2, piggy-back on Windows, since here and // in the apply code, the same assumptions can be made as with // windows - that \\ is an OK separator, and do comparisons // case-insensitive.
/* cached DirectoryScanner instance */
//if no nested, natural order:
// use an anonymous subclass since ProjectComponent is abstract
// ReplaceRegExpTest
// and a little longer
//dummy
//implement ResourceSelector; inherit doc
// First, check that all elements are correctly configured
// different dates => different files
//here do a bulk comparison
// At this point, we know we have a tie.
// Currently, we deal with only two path formats: Unix and Windows // And Unix is everything that is not Windows // (with the exception for NetWare and OS/2 below)
// Iterate over the map entries and apply each one. // Stop when one of the entries actually changes the element.
// throw BuildException on error
/* ============ FileNameMapper interface ======================= */
//Default is empty string
// test for 10 consecutives transform
// Create as many directory prefixes as parent levels to traverse, // in addition to the reference directory itself
// Sanity check. Ditch it if you want faster performance
// Determine file whose out-of-dateness is to be checked
// Sanity check
// Find the longest prefix shared by the current file // and the reference directory.
// We have a match! Add as many ../ as parent // directory traversed to get the relative path
// Determine file whose existence is to be checked
// Directory size never selected for
/* You wish! */
// check millis and only set it once.
// a continuation on the first line is a // continuation of the name - concatenate this // line and the name
// When str starts with a File.separator, pattern has to start with a // File.separator. // When pattern starts with a File.separator, str has to start with a // File.separator.
// up to first '**'
// required // required
// String is exhausted
//java keywords are not special
//modify the headers //NB: things like user authentication could go in here too.
// prepare Java 1.1 style credentials
// String not exhausted, but pattern is. Failure.
//connect to the remote site (may take some time)
// up to last '**'
//next test for a 304 result (HTTP only)
// No '*'s, so we make a shortcut
// Character mismatch
// test for 401 result (HTTP only)
//this three attempt trick is to get round quirks in different //Java implementations. Some of them take a few goes to bind //property; we ignore the first couple of such failures.
// String matches against pattern
//successful download
// this happens if the projecthelper was not registered with the project.
// Find the pattern between padIdxStart & padIdxTmp in str between // strIdxStart & strIdxEnd
"/* I wrote the testcases in one java file because I want also to test the * combined behaviour (see end of the class).*/"
// methods to register and unregister shutdown hooks
// check to see if the shutdown hook methods exists // (support pre-JDK 1.3 VMs)
// wait to add shutdown hook as needed
// Pattern contains only '*', which matches anything
// Process characters before first star
// it just won't be added as a shutdown hook... :(
"/*         * Sleep for some time to make sure a touched file would get a         * more recent timestamp according to the file system's         * granularity (should be > 2s to account for Windows FAT).         */"
// Process characters after last star
"/*         * I would love to compare this with 123456, but depending on         * the filesystems granularity it can take an arbitrary value.         *         * Just assert the time has changed.         */"
// Expected exception caught
//underscores at the front get an underscore too
// shutdown already is in progress
// Two stars next to each other, skip the first one.
// All characters in the string are used. Check if only '*'s are left // in the pattern. If so, we succeeded. Otherwise failure.
// We know that dynselector must be non-null if no error message
// -------------------------------------------------------- //  static utility methods - could be placed somewhere else // --------------------------------------------------------
// Deal with if and unless properties first
// -----  attributes  -----
// ----- internal member variables -----
// -----  constructors  -----
//non java char at start => underscore then the the _hex value
//Remove start and end quotes if field is a String
// ----- configuration  -----
// normal use inside Ant
// set self as a BuildListener to delay cachefile saves
// no reference to project - e.g. during normal JUnit tests
// default buffer size
// this is a *.* parameter for later use
// specify the algorithm classname
//preserve case on Cygwin when using 1.4 toURI:
// use Algorithm defined via name
"/*        assertTrue(""same timestamp is up to date"",                fu.isUpToDate(firstTime, firstTime));                */"
// state engine: false=envelope, true=message
/* Stateless */
// else nothing to do
// singletons - since all state is in the context
// // -----  Set the main attributes, pattern '*'  ----- //
//and paths are stripped
// we are in an imported file.
// specify the cache classname
// use Cache specified by classname
// after you are all of the properties are ok, do your thing // with StarTeam.  If there are any kind of exceptions then // send the message to the project log.
// top level file
// specify the comparator classname
// load the specified class
// -----  the selection work  -----
// We have a 'resourced' file, so reconvert it and use // the 'old' implementation.
// If we don't know the type of the line // and we are in emacs mode, it will be // an error, because in this mode, jikes won't // always print "error", but sometimes other // keywords like "Syntax". We should look for // all those keywords.
// Use '/' to calculate digest based on file name. // This is required in order to get the same result // on different platforms.
// You can not compute a value for a directory
// Maybe update the cache
// this happens if ant is used with a project // helper that doesn't set the import.
// -----  attribute and nested element support  -----
// the usual classloader
// use default if not file or file not found
// Paths are relative to the build file they're imported from, // *not* the current directory (same as entity includes).
// additional use the provided classpath
// whether or not this ProcessDestroyer is currently running as // shutdown hook
// ----- 'beautiful' output -----
// -----  member variables  -----
// redo the test, but the 2 include patterns are inverted
// check defaults
//Now lock if required
"/*             * Start with simple absolute file names.             */"
// Ignore attributes from unknown uris
// this should return quickly, since it basically is a NO-OP.
// the thread didn't die in time // it should not kill any processes unexpectedly
// -----  Logic  -----
// if this list is empty, register the shutdown hook
// implementation adapted from ...taskdefs.Checksum, thanks to Magesh for hint
// generate classpath, because kjc doesn't support sourcepath.
// Read the file
// -----  member variables - configuration  -----
// two characters form the hex value.
// generate the clsspath
// -----  member variables - internal use  -----
// -----  Constructors  -----
// kjc don't have bootclasspath option.
// -----  Cache-Configuration  -----
// -----  Data Access
// Process the factory class
// swallow as this simply doesn't seem to be Kaffe
// no further processing
// Process the factory path
// avoid endless loop
"/*         * Now test some relative file name magic.         */"
// set explicitly before starting ?
//set up the javac options
// Check if the service is configured correctly
//then add the Apt options
// Default for baseDir is the location of the build file.
//finally invoke APT // Use reflection to be able to build on all JDKs:
//rethrow build exceptions
// check whether the user has specified an absolute path
//cast everything else to a build exception
// don't need the opposite check as the Dictionaries have the // same size, so we've also covered all keys of d2 already.
// CheckStyle:ParameterNumberCheck OFF - bc
// Call the compile() method
// this should not happen, because the lines are // returned with the end of line delimiter
// If the name has not already been defined define it
// jvc doesn't support an extension dir (-extdir) // so we'll emulate it for compatibility and convenience.
// two not existing files are equal
// don't want to compare directory contents for now
// jvc has no option for source-path so we // will add it to classpath.
//as far as we know
//ignore release of an already-closed funnel
// those would fail because of the way BuildFileTest captures output
// implies lastModified == 0
// Add the Classpath before the "internal" one.
// Enable MS-Extensions and ...
// Write child elements and text
// Write indent characters
// Write element
// Free up the memory used by the cached items.
// Replace the projectName in the file's absolute path to the viewName. // This makes the root target of a checkout operation equal to: // targetFolder + dirName
// steal default namespace
// ... do not display a Message about this.
// Write attributes
// Write element close
// Do not display Logo
// relative path
//add the files
//run
// does the modern compiler exist?
// What's the working directory?  If local, then its the // folder of the input file.  Otherwise, its the "current" dir..
//To change body of implemented methods use File | Settings | File Templates.
// Windows adds the drive letter in uppercase, unless you run Cygwin
// If this is the same name specified in 'manifest', this // is the manifest to use
// assuming 'skip' otherwise // don't warn if skip has been requested explicitly, warn if user // didn't set the attribute
// parse the output of the command
// swallow as we've hit the max class version that // we have
// number of milliseconds in a day
// On IBM's JDK 1.2 the directory layout is different, 1.3 follows // Sun's layout.
// Unfortunately on Windows java.home doesn't always refer // to the correct location, so we need to fall back to // assuming java is somewhere on the PATH.
// can't access the booleans in MyPrinter here (even if they // were static) since the MyPrinter instance that was used in // the test has likely been loaded via a different classloader // than this class.  Therefore we make the printer assert its // state and only check for the tail invocation.
// This is the most common extension case - exe for windows and OS/2, // nothing for *nix.
//In Java1.5, the apache stuff moved.
// Finally, show the Item properties ... // Always show the ItemID.
//fall through.
// give ourselves some time for the system call // to execute... tweak if you have a really over // loaded system.
// in a previous version, the date of the file was set to 123456 // milliseconds since 01.01.1970 // it did not work on a computer running JDK 1.4.1_02 + Windows 2000
// Just add "sourcepath" to classpath ( for JDK1.1 ) // as well as "bootclasspath" and "extdirs"
// If the buildfile specifies sourcepath="", then don't // output any sourcepath.
// are there any here that we forgot? // fall through
//things like sun.reflection, sun.misc, sun.net
// support for -source 1.1 and -source 1.2 has been // added with JDK 1.4.2 - and isn't present in 1.5.0 either
//Strip '.' token
// 1.5.0 doesn't support -source 1.1
//If it ended in a dot, throw an exception
// Exact match
"/*             * throw in NetWare volume names             */"
//Use the VM launcher instead of shell launcher on VMS //for java
// gcj doesn't support bootclasspath dir (-bootclasspath) // so we'll emulate it for compatibility and convenience.
// might read too much
// would be imprecise
// Gcj has no option for source-path so we // will add it to classpath.
// write out the number of characters encoded in this line.
// set the padding defaults
//throw new IllegalStateException("Command unrecognized: " //    + response);
// Use reflection to be able to build on all JDKs >= 1.1:
// get the next 3 bytes (if we have them)
// In an impored file (and not completely // ignoring the project tag)
// no bootclasspath, therefore, get one from the java runtime
// if the user has set JIKESPATH we should add the contents as well
//reflection to avoid bootstrap/build problems
// OK, Java 1.3.
//now verify that the class has an implementation
"/*             * drive letters must be considered just normal filenames.             */"
"/* UnknownElement is used for tasks and data types - with               delayed eval */"
//windows probing logic relies on the word 'windows' in //the OS
//there are only four 9x platforms that we look for
// #8031: first try Java 1.4.
// Nested element
// millis per second
//get the host of a url
// terminate with a linefeed alone
// Filter out messages based on priority
// Passed test
// container.addTask(task); // This is a nop in UE: task.init();
//Java1.5: reachable = address.isReachable(timeout * 1000);
// store the octets
//utterly implausible, but catered for anyway
// **   simple name specified   == path in list + name
// load the parser class
// padding
//only text nodes that are non null after property expansion are added
// do not close the stream
//Empty
//get some non-crypto-grade randomness from various places.
// if the suffix does not starts with a '.' and the // char preceding the suffix is a '.', we assume the user // wants to remove the '.' as well (see docs)
// Cannot resolve it, so skip it.
// plain component
//remove the initial separator; the root has it.
// UNC drive
// null parent dir
// format: "DEVICE:[DIR.SUBDIR]FILE"
// treat directories specified using .DIR syntax as files
// not really user settable properties on tasks/project components
//do a check for the destination file existing
// execute the script
// support for -source 1.1 and -source 1.2 has been // added with JDK 1.4.2, Jikes doesn't like it
//assume this is an IOexception about un readability
//any kind of fault: not reachable.
//java1.4 or earlier
// check build.compiler provides defaults
//get a time
//add some time. We assume no OS has a granularity this bad
//pick a value that is good for everything
//initial state is false.
// on cygwin, our current directory can be a UNC; // assume user.dir is absolute or all hell breaks loose...
// ensure that l ends with a / // so we never think /foo was a parent directory of /foobar
// looks like nothing from META-INF should be added // and the check is not case insensitive. // see sun.misc.JarIndex
// need to keep the package private version for backwards compatibility
//every condition is xored against the previous one
// build the path stack info to compare
// not the same device (would be "" on Linux/Unix)
//validate
// no comparison possible
// if "from" part is longer, fill it up with ".." // to reach path which is equal to both paths
// Fall through
//#now match the files
// fill it up path with parts which were not equal
// base directory of the fileset
// Intentionally left blank
// code from Magesh moved from DefaultLogger and slightly modified
//if you cannot read it, you won't be able to write it either
// don't add "" to the archive
// make sure attributes are reset when // working on a 'new' file.
// must be a zip of some sort
// does the class have a package structure
"/*         * The initial version used DateFormat.SHORT for the         * time format, which ignores seconds.  If we want         * seconds as well, we need DateFormat.MEDIUM, which         * in turn would break all old build files.         *         * First try to parse with DateFormat.SHORT and if         * that fails with MEDIUM - throw an exception if both         * fail.         */"
// check if the package structure is more than 1 level deep
// class name has more than 1 package level 'com.company.Class'
// When we leave this block we can be sure all data is really // stored in main memory before the new threads start, the new // threads will for sure load the data from main memory. // // This probably is slightly paranoid.
// doesn't java know interruptions are rude? // just pretend it didn't happen and go about out business. // sheesh!
//check that older is up to date with a newer dest
//We have ended changelog for that particular file //so we can save it
//was -1
// class name has only 1 package level 'package.Class'
// possibly altered in prepareExec
// Add a class with no package 'Class'
// force BCEL classes to load now
//Reset comment to empty here as we can accumulate multiple lines //in the processComment method
// Same as regular <copy> task... see at end-of-file!
// We want something of the form: -d ">=YYYY-MM-dd"
//for now skip entries which are missing a date
//Skip dates that are too early
// we look through the classpath elements. If the element is a dir // we look for the file. IF it is a zip, we look for the zip entry
// first letter of the previous segment of the class name 'Class' // is upper case ascii. so according to the spec it's an inner class
// Default config of <mycopy> for our purposes.
// Do we need to perform further processing?
//Skip dates that are too late
// Register Groovy ourselves, since BSF did not // natively support it in versions previous to 1.2.4.
// want to keep toDir itself
// This just tests that the function does not blow up
// validate the input parameters
// build the rdiff command
// translate \1 to $1 so that the Perl5Substitution will work
// no permission here
// compute the compiler options based on the input options first
// be strict about line separator
// translate \1 to $(1) so that the Matcher will work
// ds returns the directories in lexicographic order. // iterating through the array backwards means we are deleting // leaves before their parent nodes - thus making sure (well, // more likely) that the directories are empty when we try to // delete them.
// Do the substitution
// replace \1 with the corresponding group
"/*          Nodes and heap entries run from 1.  Entry 0          for both the heap and nodes is a sentinel.        */"
//        blockNo++;
// // When we get here we have EITHER: // o An empty "assemble" buffer. // o No bytes to write (numToWrite == 0) //
// This directory may have become empty... // We need to re-query its children list!
// List of files that must be copied, irrelevant from the // fact that they are newer or not than the destination.
// #24918: send standard input to the process by default.
// Inner class for continually pumping the input stream during // Process's runtime.
/* 20 is just a paranoia constant */
// Nothing to concatenate!
// ensure that the parent dir of dest file exists
// could still be OS/2
// empty block at end of file
// Append the fragment -- we defer property replacement until // later just in case we get a partial property in a fragment.
/* sort the block and establish posn of original string */
// 27224 = magic (a random port which is unlikely to be in use)
// support multiple packages
/* Now the block's CRC, so it is in a known place. */
/* Now a single bit indicating randomisation. */
// force command not to be null
/* Finally, block's contents proper. */
// run the cvs command
// parse the rdiff
// followLinks should be true by default, but if this ever // changes we will need this line.
"/*             * drive letters are not used, just to be considered as normal             * part of a name             */"
// Should fail since a recursion will occur...
// write the tag diff
// it is a removed file
// If the file being added is WEB-INF/web.xml, we warn if it's // not the one specified in the "webxml" attribute - or if // it's being added twice, meaning the same file is specified // by the "webxml" attribute and in a <fileset> element.
//a web.xml file was found. See if it is a duplicate or not
//there is no web.xml file, so add it
// There have been reports that 300 files could be compiled // so 250 is a conservative approach
/* special headers */
/* Decide how many coding tables to use */
/* Generate an initial set of coding tables */
// prepare for the auto select mechanism
"/*          Iterate up to N_ITERS times to improve the tables.        */"
/* Compute MTF values for the selectors. */
// try MIME format
// SSL only allowed with MIME mail
/* Transmit the mapping table. */
/* Now the selectors. */
/* Now the coding tables. */
/* And finally, the block data proper */
// try UU format
/* Set group start & end marks. */
// unrolled version of the else-block
// try plain format
"/*                  Find the coding table which is best for this group,                  and record its identity in the selector table.                */"
"/*                  Increment the symbol frequencies for the selected table.                */"
// a valid mailer must be present by now
// a valid message is required
// inlined: bsW(1, inUse[i16 + j] ? 1 : 0);
// inlined: bsW(1, 1);
// inlined: bsW(1, 0);
// at least one address to send to/cc/bcc is required
//bsBuffShadow |= 0 << (32 - bsLiveShadow - 1);
// inlined: bsW(5, curr);
// set the mimetype if not done already (and required)
// inlined: bsW(2, 2);
// identify which files should be attached
// let the user know what's going to happen
// inlined: bsW(2, 3);
// pass the params to the mailer
// send the email
// setUserProperty to override system properties
// let the user know what happened
// Read message from a file
// copy
// start inline mainGTU
// We assume, that everything jikes writes goes to // standard output, not to standard error. The option // -Xstdout that is given to Jikes in Javac.doJikesCompile() // should guarantee this. At least I hope so. :)
// while x > 0
// Set up the 2-byte frequency table
// shortcut for "<address>"
/* Undo the MTF values for the selectors. */
// Complete the initial radix sort:
// support "address (name)"
"/*              The main sorting loop.        */"
"/*                  Process big buckets, starting with the least full.            */"
// support "(name) address"
// Step 1:
// Step 3:
// handle 16 bit signed numbers
// make maps
/* directory with respect to       */
// a rather convoluted equals() test
// check if liaison wants to log errors using us as logger
// If we enter here, it means that the stylesheet is supplied // via style attribute
// Process all the files marked for styling
// New env var...append the previous one if we have it.
// Start handling SAX events
// Let parent resume handling SAX events
// with blockSize 900k //     256 byte //     256 byte //    1032 byte //   18002 byte //   18002 byte
//     256 byte //    1548 byte //    6192 byte //      24 byte //      12 byte //    6192 byte //       6 byte //      16 byte
// check attribute overrides build.compiler
// allow this as imported in targets are only tested when a target is run
// take care of dependencies
// swallow here, will be thrown again in // UnknownElement.maybeConfigure if the problem persists.
// To work properly with national charsets we have to use // implementation of interface javax.activation.DataSource
//    4000 byte //    4000 byte //    4000 byte
//    1024 byte //    1024 byte //     256 byte
// Must be like "text/plain; charset=windows-1251"
//    1040 byte //    2064 byte //    2064 byte
// Just print a message, like the previous versions of this class did
// Aside, the JDK is clearly unaware of the Scottish // 'session', which involves excessive quantities of // alcohol :-)
// Variables used by setup* methods exclusively
// We call liason.configure() and then liaison.setStylesheet() // so that the internal variables of liaison can be set up
// Give always a slash as file separator, so the stylesheet could be sure about that // Use '.' so a dir+"/"+name would not result in an absolute path
// currBlockNo++;
// SMTP provider
// A bad CRC is considered a fatal error.
/* Receive the mapping table */
//XXX task.setTaskType(tag);
//create the message
/* Now the selectors */
/* Now the coding tables */
//set the sender
// taskcontainer nested element can contain other tasks - no other // nested elements possible
// set the reply to addresses
//create the URL //ant equivalent of  fileToConvert.toURI().toURL().toExternalForm();
// Assign/reassign message charset from MimeType
// make sure there are no issues concerning line separator interpretation // a line separator for regex (perl) is always a unix line (ie \n)
// Should not happen
// Using default
// Using javax.activation.DataSource paradigm
// Assuming mime type in form "text/XXXX; charset=XXXXXX"
// Skip 'charset='
// sb.append( response + "\r\n" );
// default srcDir to basedir
// Require destDir
// the second hex character if a character needs to be escaped
// File to convert // where to put the results
// end of file // '1' // ')' // 'Y' // '&' // 'S' // 'Y'
// Build the full file names
// Inlined: // int zvec = bsR(zn);
// deactivate this test as imports within targets are not allowed
// initialize the above 3 arrays
// Make sure we're not about to clobber something
/* not a char and not EOF */
// if we run into a timeout, the run-away thread shall not // make the VM run forever - if no timeout occurs, Ant's // main thread will still be there to let the new thread // finish
// (with blockSize 900k) //      256 byte
// Make intermediate directories if needed // XXX JDK 1.1 doesn't have File.getParentFile,
//     1024 byte
//this.fork = s;
// No need to keep track of Bcc'd addresses
// Blindly trust the user doesn't set any invalid headers
//TODO: use ANTLR to parse the grammar file to do this.
// RFC 822 s4.1: "Reply-To:" header is optional
// Fine, Java 1.3 or earlier, do it by hand.
// if no output directory is specified, used the target's directory
// first off, make sure that we've got a from and to extension
// extra field length
// Error strings
//Ignore - We do not want this to stop the build.
//validating
//set the schema source for the doc
// OS/2 - use same mechanism as Windows 2000
"/*         * JUnit 3.7 adds a getName method to TestCase - so we now         * have a name attribute in IntrospectionHelperTest if we run         * under JUnit 3.7 but not in earlier versions.         *         * Simply add it here and remove it after the tests.         */"
//enable XSD
//validate the parser type
//enable schema checking
// Some systems have /bin/env, others /usr/bin/env, just try
//By default, use the shell launcher for VMS //
//turn off DTDs if desired
//schema declarations go in next
// Running on Windows or something, so skip it.
// wait for connection
//      256 byte //    18002 byte //    18002 byte
//     6192 byte //     6192 byte //     6192 byte //       24 byte
//     1028 byte //      512 byte //     3096 byte //        6 byte //--------------- //    60798 byte
//on openvms even exit value signals failure; // for other platforms nonzero exit value signals failure
//  3600000 byte //   900000 byte //--------------- //  4560782 byte //===============
// Make a limited attempt to extract a sanitized email address // Prefer text in <brackets>, ignore anything in (parentheses)
// * * * * * Raw protocol methods below here * * * * *
// make sure dot is on new line
// raw supports <CRLF>.<CRLF>
// Check that the response is one of the valid codes
// ensure always \r\n
// Add the key to the enviromnent copy
//this is almost implausible, but required handling
// file name
// add extra dot
//SchemaLocation
// while
//private Path extdirs;
// first off, make sure that we've got a srcdir
// UNDONE
// create a TarEntry for the LongLink, the contents // of which are the entry's name
// parse the VMS logicals into required format ("VAR=VAL[,VAL2]")
// Keep jdk 1.1 compliant so others can use this
// second CR -> EOL + possibly empty line
// CRC manually calculated, sorry // CRC // mode // link length // uid, gid
// LF -> EOL
// any other char
// No absolute pathnames // Windows (and Posix?) paths can start with "\\NetworkDrive\", // so we loop on starting /'s.
// Locate method Runtime.exec(String[] cmdarray, //                            String[] envp, File dir)
// Bad URI, pass this on.
// REVIEW // This is horribly inefficient, but it ensures that we // properly skip over bytes via the TarBuffer... //
// read in the name
// remove trailing null terminator
// Unexpected EOF!
// remove log file from testSpawn
// Unexpected target exception? Should not happen.
// ?? Should this be the default for ant?
/* method is STORED and we used RandomAccessFile */
// If random access output, write the local file header containing // the correct CRC and compressed/uncompressed sizes
// constants for the messages to suppress by flags and their corresponding properties
// not specified
// ------------------------------------------ general Javadoc arguments
// other implementation variables
// Size/CRC not required if RandomAccessFile is used
"/*     * Various ZIP constants     */"
// classpath makes no sense
//store method in local variable to prevent multiple method calls
// CRC // mode // link length // uid, gid
// Fallback method for Java 1.3 or earlier.
// destDir
// compression method
// srcDir
// last mod. time and date
// file name length
// version made by
"/*                         *  Ignore this method as there is an addConfigured                         *  form of this method that has a higher                         *  priority                         */"
// Only try to move if this is the last mapped file // and one of the mappings isn't to itself
// create a single array of arguments for the compiler
// if it's not an ASCII character, break here, and use UTF-8 encoding
// print nice output about what we are doing for the log
// need to set java.class.path property and restore it later // since the NetRexx compiler has no option for the classpath
// record the fact that it's escaped
// path is mentioned in the message
// verbose level logging for suppressed messages
// CRC // mode // link // uid, gid
// get UTF-8 bytes for the remaining sub-string
// warning for all warning messages
// CRC // compressed length // uncompressed length
// info level for the rest.
// Go through the tokens one at a time, updating the // elements array and issuing warnings where appropriate.
// The tag element is used as a // fileset. Parse all the files and create // -tag arguments.
// for each byte
// add our classpath to the mix
// file comment length
// add the system classpath // addExistingToClasspath(classpath,System.getProperty("java.class.path"));
// disk number start
// internal file attributes
// some database keys, see #getProperties(int)
// bad CRC // mode // link // uid, gid
// for non-ascii character: make it positive, then escape
// XMLReader used to validation process
// external file attributes
// disk numbers
// turn validation on
// number of entries
// length and location of CD
// just check whether this throws an exception
// set the feature from the attribute list
// ZIP file comment
"/*         * No reason to change the working directory as all filenames and         * path components have been resolved already.         *         * Avoid problems with command line length in some environments.         */"
// array not exhausted
// Sets properties
/* version made by                 */
/* version needed to extract       */
//if we got here, all was well
// couldn't find compiler - try to find tools.jar // based on java.home setting
/* general purpose bit flag        */
/* compression method              */
/* last mod file date              */
// sort first to files, then dirs
// Found in java.home as given
/* uncompressed size               */
/* filename length                 */
// Only whitespace - ignore
/* extra field length              */
/* file comment length             */
// add any jars in the directory
/* internal file attributes        */
/* relative offset of local header */
// disk number
// LFH offset,
// overlay specified properties file (if any), which overrides project // settings
// data offset will be filled later
/* end of central dir signature    */
/* number of this disk             */
// ignore because properties file is not required
// to report sax parsing errors // CheckStyle:VisibilityModifier ON
/* the central dir on this disk    */
/* the central dir                 */
// then check it implements XMLReader
/* offset of start of central      */
"/*                 * Plain impossible with UTF8, see                 * http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html                 *                 * fallback to platform specific anyway.                 */"
// no include pattern implicitly means includes="**"
// private static final int FG_BLACK = 30;
// see if it is a SAX1 Parser
"/*     * Closes an unused connection after an error and doesn't rethrow     * a possible SQLException     * @since Ant 1.7     */"
// Validates property
// wait 2 second extras // the test failed with 100 ms of margin on cvs.apache.org on August 1st, 2003
// Print out the name of the task if we're in one
// private static final int FG_YELLOW = 33;
//for every file, we have a new instance of the validator
// dummy1 --> dummy2 --> dummy3 // (which holds a glob mapper from "*.java" to "*.class"
// // *****  initialize test environment (called "bed")  ***** //
// if this is not a valid file: just use the uri
// THIS WILL FAIL. //compareBytes("abc", "utf-16");
//if there were no main targets, we list all subtargets //as it means nothing has a description
// private static final int FG_WHITE = 37;
// Property
// For NetWare, use the boolean=true mode, so we can use delimiter // information to make a better decision later.
// we are on NetWare, tokenizing is handled a little differently, // due to the fact that NetWare has multiple-character volume names.
// add ant properties
// NB: this makes use of Project#setProperty rather than Project#setNewProperty //     due to backwards compatiblity reasons
// If we've been successful on an update, delete the // temporary file
// shouldn't be possible
//Ignore - we will use the defaults.
// CheckStyle - magic numbers // checking for "X:\ 0=dquote,1=letter,2=:,3=\
// get files from old methods - includes and nested include
// Pump streams asynchronously
// A wild default for when the thread is interrupted
// On junit3 this is a FAILURE, on junit4 this is an ERROR
// Set up PRIMITIVE_TYPE_MAP
// Wait for the process to finish
// Wait for the end of output and error streams
// Informative summary message in case of errors
// die if cabarc fails
/* the starting disk number        */
// check of add[Configured](Class) pattern
// Use this to prepend a message to the properties file
/* zipfile comment length          */
"/*     * Converts DOS time to Java time (number of milliseconds since epoch).     */"
"/* ========================================================================    *    * Constructors    */"
// CRC will be added later
/*<ZipExtraField>*/
// The local file name is simply the local target path (tgt) which has // been passed recursively down from the top of the tree, with the item's name appended.
"/* ========================================================================    *    * Methods    */"
//add -revision xxxxx to the commandline
// Use the OS VM launcher so we get environment variables
// If -soshome was not specified then we can look for nocache
// MS-DOS read-only attribute
// MS-DOS directory flag
// Create the PropertyFile
// A "location" attribute for a node within a // Path object.
//testing drive letter search from root:
// fail, because buildfile contains two targets with the same name
//executeTarget("setup"); //commented out for performance while target is empty
// ensure <checksum> follows the immutability rule
// hide addTask for TaskContainers
// type may be null because it wasn't set
// Just use the same directory as the file itself. // This directory will exist
// JarIndex is sorting the directories by ascending order. // it has no value but cosmetic since it will be read into a // hashtable by the classloader, but we'll do so anyway.
// Insert as a string by default
// // Static //
// Protected first so if any GUI tool offers a default // based on enum #0, it will be right.
// CheckStyle:VisibilityModifier OFF - bc // the source file // the destination file // the destination directory
// configure the transformer...
// build the command line from what we got. the format is // cleartool mklabel [options...] [viewpath ...] // as specified in the CLEARTOOL help
// List of EJBs found in XML // One item within the Map // Is doc iAS or EJB descriptor
// Loop through the files seeing if any has been touched // more recently than the destination jar.
//WARNING: We trim the values of all the attributes because //Some extension declarations are badly defined (ie have spaces //after version or vendor)
// 2003-02-21 new replace algorithm by tbee (tbee@tbee.org) // because it wasn't able to replace something like "@aaa;@bbb;"
//although this code appears to duplicate that of ClasspathUtils.newInstance, //we cannot use that because this formatter may run in a forked process, //without that class.
// build the command line from what we got the format is // ss History elements [-H] [-L] [-N] [-O] [-V] [-Y] [-#] [-?] // as specified in the SS.EXE help
//there are places (in this file, and perhaps elsewhere, where it is assumed //that null is an acceptable parameter.
// // Just call the getExecuteStreamHandler() and let it handle //     the semantics of instantiation or retrieval. //
// converted from sun internal classes to // new Base64Converter // utility class extracted from Get task
// No further methods necessary. This is just an amalgamation of two other // interfaces.
// copying of dirs is trivial and can be done // for non-file resources as well as for real // files.
// // -----  The "Singleton"  ----- //
// simplest case - setAttribute expects String
// Use the logger config
// If only default is specified and the property did not // exist in the property file, the property is set to default.
// If we had child elements, we need to indent before we close // the element, otherwise we're on the same line and don't need // to indent
// The key is in the dictionary but cannot be retrieved // This is usually due references that refer to tasks // that have not been taskdefed in the current run. // Ignore
// If value and default are both specified and the property // previously existed in the property file, the property // is set to value.
// write magic: done by caller who created this stream //this.out.write('B'); //this.out.write('Z');
// Since task log category includes target, we don't really // need this message
// Property type operations
// CRC // Mode // SizDev // UID // GID
// Property types
// keys used in properties.
// target // file // exptected string
// mandatory constructor
// resetting the stylesheet - reset transformer
// do we need to reset templates as well
// Driver doesn't understand the URL
// It's a task - append the target
// set parameters on each transformation, maybe something has changed //(e.g. value of file name parameter)
// Doesn't make sense for c-l. Use the logger config
// check that a suite generates no errors
// Could not get the required information
// Are any other references held ? Can we 'close' the loader // so it removes the locks on jars ? // a new one will be created.
// Finally assign the property with the manifest classpath
// refresh attribute in case of multivalued attributes.
//execute the get
//set the timestamp to the file date.
// If no webxml file is specified, it's an error.
//neither
// check that having no suite generates no errors
// use wrappers for primitive classes, e.g. int and // Integer are treated identically
// One cannot RMIC an interface for "classic" RMI (JRMP)
// Manifest's ClassPath: attribute always uses forward // slashes '/', and is space-separated. Ant will properly // format it on 72 columns with proper line continuation
//we do not use the sun impl for portability, //and always use our own implementation for consistent //testing
// otherwise perform a timestamp comparison - at least
"/*             * Move the generated source file to the base directory.  If             * base directory and sourcebase are the same, the generated             * sources are already in place.             */"
//REVISIT: at this point even non HTTP connections may //support the if-modified-since behaviour -we just check //the date of the content and skip the write if it is not //newer. Some protocols (FTP) don't include dates, of //course.
// no source file generated, nothing to move
// The property is the name of a file.  We are testing // a location attribute, so we need to resolve the given // file name in the provided folder.
// the method called to add/create the nested element
// check that an invalid suite generates an error.
// Check if a create of this property is already present // add takes preference over create for CB purposes
// not the requested type
// I don't think we can use File - different rules // for relative paths.
// **   full-pathname specified == path in list // **   simple name specified   == path in list
// If a helper cannot be found, or if the helper is for another // classloader, create a new IH
// we only get here if an exception has been thrown
// whether or not this ProcessDestroyer has been registered as a // shutdown hook
//      assertTrue("return code is invalid: " + retCode, retCode!=0);
// JUnit3 test //assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
// Ignore attribute from unknown uri's
// not initialized yet, so create the factory
// specific attributes for the transformer
// need to load Task via system classloader or the new // task we want to define will never be a Task but always // be wrapped into a TaskAdapter.
// kept for backwards compatibility
// configure factory attributes
//the rest of the method treats single jar like //a nested path with one file
// use XMLCatalog as the entity resolver and URI resolver
// configure output properties
// Process the processor options
// jvc doesn't support bootclasspath dir (-bootclasspath) // so we'll emulate it for compatibility and convenience.
//as new versions of java come out, add them to this test
//copy the properties file
"/* load properties from file if specified, otherwise        use Ant's properties */"
// add configured replaces the add method
// should print "panic: Cannot find importVocab file 'JavaTokenTypes.txt'" // since it needs to run java.g first before java.tree.g
// found the property we set - it's good.
//on java<=1.3 the modern falls back to classic if it is not found //but on java>=1.4 we just bail out early
// output properties
//create task ok, set this task as the default one
// build the command line from what we got the format is // ccm co /t .. files // as specified in the CCM.EXE help
// The SOS class knows that the SOS server needs the password flag, // even if there is no password ,so we send a " "
// get a random number between 0 and the number of files
